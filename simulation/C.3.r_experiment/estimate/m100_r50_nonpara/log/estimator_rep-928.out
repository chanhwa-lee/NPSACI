
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 50"
[1] "m: 100"
[1] "N_total: 1159"
[1] "cluster size dist'n: "

 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
 8  8  8  6 10  3  3  9 12  6  6  4  3  7  5  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05055 0.39895 0.65219 1.00000 5.00000 
[1] "event indicator table: "

  0   1 
698 461 
[1] "treatment indicator table: "

  0   1 
429 730 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 574
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 585
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 89.458 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.378 0.100 
 2 mu         0.1   0.2 0.401 0.0861
 3 mu         0.1   0.3 0.452 0.0879
 4 mu         0.1   0.4 0.531 0.105 
 5 mu         0.1   0.5 0.532 0.0916
 6 mu         0.2   0.1 0.337 0.0707
 7 mu         0.2   0.2 0.379 0.0718
 8 mu         0.2   0.3 0.422 0.0483
 9 mu         0.2   0.4 0.521 0.0880
10 mu         0.2   0.5 0.528 0.0763
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.690        0.677 0.0000000689      4.50
 2 mu         0.2      0.826        0.882 0.0000796         3.30
 3 mu         0.3      0.901        0.941 0.00361           2.82
 4 mu         0.4      0.940        0.974 0.0409            2.23
 5 mu         0.5      0.972        0.990 0.202             1.77
 6 mu         0.6      0.998        1     0.489             1.51
 7 mu         0.7      1.03         1.02  0.386             1.95
 8 mu         0.8      1.06         1.00  0.0992            2.24
 9 mu         0.9      1.14         1     0.00424           4.68
10 mu_1       0.1      0.788        0.785 0.000000474       3.59
11 mu_1       0.2      0.897        0.940 0.000274          3.61
12 mu_1       0.3      0.935        0.978 0.00832           2.45
13 mu_1       0.4      0.959        0.996 0.0709            2.10
14 mu_1       0.5      0.982        0.996 0.283             1.54
15 mu_1       0.6      1.00         1     0.592             1.67
16 mu_1       0.7      1.03         1     0.325             2.05
17 mu_1       0.8      1.07         1.00  0.0763            2.55
18 mu_1       0.9      1.15         1     0.00299           5.10
19 mu_0       0.1      0.679        0.671 0.0000000239      4.94
20 mu_0       0.2      0.808        0.861 0.0000309         3.22
21 mu_0       0.3      0.886        0.925 0.00159           3.06
22 mu_0       0.4      0.928        0.946 0.0209            2.32
23 mu_0       0.5      0.961        0.984 0.122             2.00
24 mu_0       0.6      0.989        0.999 0.334             1.47
25 mu_0       0.7      1.01         1     0.528             1.71
26 mu_0       0.8      1.02         1     0.191             2.26
27 mu_0       0.9      1.04         0.987 0.0155            3.14
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta    mean_value median_value min_value     max_value
   <fct>    <dbl>         <dbl>        <dbl>     <dbl>         <dbl>
 1 mu         0.1 3665902534.      0.000152   2.84e-17 365360588220.
 2 mu         0.2 2816344361.      0.0156     7.45e-12 280961216653.
 3 mu         0.3  977183485.      0.139      1.10e- 8  97485861794.
 4 mu         0.4  200815031.      0.597      1.95e- 6  20024609409.
 5 mu         0.5   24465279.      1.06       1.08e- 4   2436950092.
 6 mu         0.6    1553252.      1.08       2.89e- 3    154336606.
 7 mu         0.7      37921.      1.14       1.90e- 4      3743003.
 8 mu         0.8        179.      1.02       4.94e- 7        16747.
 9 mu         0.9          8.45    0.262      1.21e-11          403.
10 mu_1       0.1 4577254644.      0.00112    2.84e-16 456700735275.
11 mu_1       0.2 1758813036.      0.0510     3.73e-11 175600760408.
12 mu_1       0.3  406837201.      0.299      3.67e- 8  40619109081.
13 mu_1       0.4   62695589.      0.848      4.88e- 6   6257690440.
14 mu_1       0.5    6108387.      1.04       2.17e- 4    609237523.
15 mu_1       0.6     322918.      0.920      3.41e- 3     32153460.
16 mu_1       0.7       6746.      1.14       5.43e- 5       668393.
17 mu_1       0.8         32.2     0.946      1.23e- 7         2617.
18 mu_1       0.9          8.97    0.169      2.68e-12          448.
19 mu_0       0.1 3564641188.      0.0000521  0        355211682992.
20 mu_0       0.2 3080727192.      0.00633    0        307301330714.
21 mu_0       0.3 1221617606.      0.0688     0        121857327243.
22 mu_0       0.4  292894660.      0.324      0         29202555388.
23 mu_0       0.5   42822171.      0.722      0          4264662661.
24 mu_0       0.6    3398754.      0.897      0           337611325.
25 mu_0       0.7     110663.      0.894      0            10917093.
26 mu_0       0.8        765.      1.08       0               73266.
27 mu_0       0.9          3.71    0.261      0                 160.
[1] "Total run time was 92.801 seconds"
