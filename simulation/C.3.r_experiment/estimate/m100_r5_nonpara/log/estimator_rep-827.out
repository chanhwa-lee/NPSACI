
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 5"
[1] "m: 100"
[1] "N_total: 1287"
[1] "cluster size dist'n: "

 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
 4  5  6  6  5  9  7  9  5  6  3  5  9  4 12  5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02752 0.35017 0.62705 1.00000 5.57937 
[1] "event indicator table: "

  0   1 
779 508 
[1] "treatment indicator table: "

  0   1 
452 835 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 668
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 619
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 69.779 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.680 0.207 
 2 mu         0.1   0.2 0.806 0.255 
 3 mu         0.1   0.3 0.926 0.286 
 4 mu         0.1   0.4 0.977 0.310 
 5 mu         0.1   0.5 1.12  0.345 
 6 mu         0.2   0.1 0.432 0.0734
 7 mu         0.2   0.2 0.507 0.0951
 8 mu         0.2   0.3 0.583 0.0991
 9 mu         0.2   0.4 0.616 0.107 
10 mu         0.2   0.5 0.708 0.112 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.80        0.0534 0.00000000955     40.9 
 2 mu         0.2      1.19        0.423  0.0000383          9.08
 3 mu         0.3      1.06        0.903  0.00333            3.91
 4 mu         0.4      1.04        1.02   0.0556             2.89
 5 mu         0.5      1.02        1.00   0.337              2.09
 6 mu         0.6      1.00        0.992  0.350              1.77
 7 mu         0.7      0.974       0.995  0.227              1.71
 8 mu         0.8      0.966       0.981  0.0562             2.42
 9 mu         0.9      0.973       0.904  0.000677           2.52
10 mu_1       0.1      1.17        0.179  0.0000000625      18.8 
11 mu_1       0.2      1.06        0.733  0.000126           5.02
12 mu_1       0.3      1.04        0.960  0.00738            3.16
13 mu_1       0.4      1.03        0.999  0.0932             2.62
14 mu_1       0.5      1.02        1.00   0.362              2.07
15 mu_1       0.6      0.996       0.991  0.282              1.71
16 mu_1       0.7      0.967       0.965  0.216              1.85
17 mu_1       0.8      0.966       0.975  0.0395             2.43
18 mu_1       0.9      0.972       0.875  0.000430           2.68
19 mu_0       0.1      1.87        0.0387 0.00000000366     45.4 
20 mu_0       0.2      1.23        0.334  0.0000163         11.1 
21 mu_0       0.3      1.08        0.840  0.00160            4.36
22 mu_0       0.4      1.04        0.973  0.0305             3.07
23 mu_0       0.5      1.02        0.984  0.181              2.11
24 mu_0       0.6      1.02        1.02   0.275              2.08
25 mu_0       0.7      0.992       1.02   0.200              1.83
26 mu_0       0.8      0.967       0.919  0.123              2.36
27 mu_0       0.9      0.978       0.910  0.00290            2.51
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.442   0.0000332   1.39e-17     12.1 
 2 mu         0.2      1.06    0.00476     7.30e-12     18.9 
 3 mu         0.3      1.26    0.0465      1.62e- 8     14.6 
 4 mu         0.4      1.11    0.240       3.82e- 6      7.57
 5 mu         0.5      0.978   0.665       2.65e- 4      3.58
 6 mu         0.6      0.951   0.898       8.48e- 3      3.18
 7 mu         0.7      0.999   1.02        2.05e- 3      2.92
 8 mu         0.8      1.14    1.18        9.12e- 6      3.36
 9 mu         0.9      1.57    0.351       5.01e-10     18.8 
10 mu_1       0.1      0.976   0.000247    1.39e-16     24.2 
11 mu_1       0.2      1.34    0.0160      3.65e-11     18.9 
12 mu_1       0.3      1.22    0.106       5.39e- 8      9.74
13 mu_1       0.4      1.02    0.404       9.56e- 6      3.95
14 mu_1       0.5      0.944   0.755       5.31e- 4      3.58
15 mu_1       0.6      0.959   0.977       1.41e- 2      2.95
16 mu_1       0.7      1.02    1.08        7.31e- 4      3.08
17 mu_1       0.8      1.17    1.03        2.85e- 6      3.98
18 mu_1       0.9      1.61    0.275       1.39e-10     20.9 
19 mu_0       0.1      0.382   0.00000593  0            10.8 
20 mu_0       0.2      0.990   0.00134     0            18.9 
21 mu_0       0.3      1.27    0.0194      0            16.7 
22 mu_0       0.4      1.17    0.110       0            10.1 
23 mu_0       0.5      1.01    0.413       0             4.40
24 mu_0       0.6      0.940   0.754       0             3.54
25 mu_0       0.7      0.939   0.837       0             2.63
26 mu_0       0.8      1.02    0.814       0             3.30
27 mu_0       0.9      1.21    0.248       0             6.78
[1] "Total run time was 74.296 seconds"
