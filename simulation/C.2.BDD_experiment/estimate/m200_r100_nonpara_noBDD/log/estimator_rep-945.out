
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 200"
[1] "N_total: 2474"
[1] "cluster size dist'n: "

 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
 8 13 17 10 14 23  7 15  8 11 15 12 16  8  7 16 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03925 0.35274 0.63036 1.00000 5.02913 
[1] "event indicator table: "

   0    1 
1503  971 
[1] "treatment indicator table: "

   0    1 
 873 1601 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1301
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "     Cluster: 104"
[1] "     Cluster: 105"
[1] "     Cluster: 108"
[1] "     Cluster: 110"
[1] "     Cluster: 112"
[1] "     Cluster: 114"
[1] "     Cluster: 115"
[1] "     Cluster: 117"
[1] "     Cluster: 120"
[1] "     Cluster: 121"
[1] "     Cluster: 122"
[1] "     Cluster: 123"
[1] "     Cluster: 125"
[1] "     Cluster: 126"
[1] "     Cluster: 127"
[1] "     Cluster: 128"
[1] "     Cluster: 129"
[1] "     Cluster: 131"
[1] "     Cluster: 132"
[1] "     Cluster: 133"
[1] "     Cluster: 136"
[1] "     Cluster: 138"
[1] "     Cluster: 139"
[1] "     Cluster: 140"
[1] "     Cluster: 143"
[1] "     Cluster: 144"
[1] "     Cluster: 145"
[1] "     Cluster: 147"
[1] "     Cluster: 149"
[1] "     Cluster: 150"
[1] "     Cluster: 152"
[1] "     Cluster: 156"
[1] "     Cluster: 161"
[1] "     Cluster: 164"
[1] "     Cluster: 165"
[1] "     Cluster: 167"
[1] "     Cluster: 171"
[1] "     Cluster: 173"
[1] "     Cluster: 175"
[1] "     Cluster: 176"
[1] "     Cluster: 178"
[1] "     Cluster: 179"
[1] "     Cluster: 183"
[1] "     Cluster: 184"
[1] "     Cluster: 185"
[1] "     Cluster: 189"
[1] "     Cluster: 190"
[1] "     Cluster: 191"
[1] "     Cluster: 192"
[1] "     Cluster: 193"
[1] "     Cluster: 194"
[1] "     Cluster: 195"
[1] "     Cluster: 196"
[1] "     Cluster: 197"
[1] "     Cluster: 200"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1173
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 101"
[1] "     Cluster: 102"
[1] "     Cluster: 103"
[1] "     Cluster: 106"
[1] "     Cluster: 107"
[1] "     Cluster: 109"
[1] "     Cluster: 111"
[1] "     Cluster: 113"
[1] "     Cluster: 116"
[1] "     Cluster: 118"
[1] "     Cluster: 119"
[1] "     Cluster: 124"
[1] "     Cluster: 130"
[1] "     Cluster: 134"
[1] "     Cluster: 135"
[1] "     Cluster: 137"
[1] "     Cluster: 141"
[1] "     Cluster: 142"
[1] "     Cluster: 146"
[1] "     Cluster: 148"
[1] "     Cluster: 151"
[1] "     Cluster: 153"
[1] "     Cluster: 154"
[1] "     Cluster: 155"
[1] "     Cluster: 157"
[1] "     Cluster: 158"
[1] "     Cluster: 159"
[1] "     Cluster: 160"
[1] "     Cluster: 162"
[1] "     Cluster: 163"
[1] "     Cluster: 166"
[1] "     Cluster: 168"
[1] "     Cluster: 169"
[1] "     Cluster: 170"
[1] "     Cluster: 172"
[1] "     Cluster: 174"
[1] "     Cluster: 177"
[1] "     Cluster: 180"
[1] "     Cluster: 181"
[1] "     Cluster: 182"
[1] "     Cluster: 186"
[1] "     Cluster: 187"
[1] "     Cluster: 188"
[1] "     Cluster: 198"
[1] "     Cluster: 199"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 261.957 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.469 0.120 
 2 mu         0.1   0.2 0.555 0.139 
 3 mu         0.1   0.3 0.630 0.138 
 4 mu         0.1   0.4 0.642 0.136 
 5 mu         0.1   0.5 0.658 0.138 
 6 mu         0.2   0.1 0.344 0.0588
 7 mu         0.2   0.2 0.421 0.0645
 8 mu         0.2   0.3 0.505 0.0812
 9 mu         0.2   0.4 0.526 0.0867
10 mu         0.2   0.5 0.561 0.100 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.862    0.0265      7.05
 2 mu         0.2      0.996        1        0.242       2.68
 3 mu         0.3      0.992        1        0.553       1.84
 4 mu         0.4      1.00         1        0.664       1.44
 5 mu         0.5      1.01         1.00     0.757       1.27
 6 mu         0.6      1.01         1.00     0.799       1.19
 7 mu         0.7      1.00         1        0.829       1.16
 8 mu         0.8      0.996        1        0.730       1.26
 9 mu         0.9      0.996        1        0.552       1.42
10 mu_1       0.1      1.04         1        0.0735      3.25
11 mu_1       0.2      0.998        1        0.389       2.20
12 mu_1       0.3      0.999        1        0.621       1.62
13 mu_1       0.4      1.01         1        0.697       1.35
14 mu_1       0.5      1.01         1.01     0.760       1.22
15 mu_1       0.6      1.00         1        0.815       1.19
16 mu_1       0.7      0.999        1        0.816       1.17
17 mu_1       0.8      0.996        1        0.713       1.28
18 mu_1       0.9      0.997        1        0.540       1.43
19 mu_0       0.1      1.02         0.822    0.0212      7.68
20 mu_0       0.2      0.996        1        0.203       2.87
21 mu_0       0.3      0.989        1        0.496       2.01
22 mu_0       0.4      1.00         1        0.642       1.52
23 mu_0       0.5      1.01         1        0.698       1.33
24 mu_0       0.6      1.01         1        0.774       1.24
25 mu_0       0.7      1.00         1        0.815       1.17
26 mu_0       0.8      0.998        1        0.780       1.19
27 mu_0       0.9      0.992        1        0.583       1.42
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.997    0.0000650  4.58e-19     83.9 
 2 mu         0.2      1.11     0.00629    4.80e-13     27.9 
 3 mu         0.3      1.11     0.0653     1.60e- 9     19.0 
 4 mu         0.4      1.07     0.332      5.04e- 7      7.07
 5 mu         0.5      1.04     0.728      4.37e- 5      5.14
 6 mu         0.6      1.01     0.993      1.17e- 3      3.39
 7 mu         0.7      0.993    1.02       1.36e- 5      2.99
 8 mu         0.8      1.02     0.880      2.37e- 8      3.96
 9 mu         0.9      1.14     0.165      4.07e-13     12.7 
10 mu_1       0.1      1.24     0.000421   4.58e-18     49.3 
11 mu_1       0.2      1.18     0.0210     2.40e-12     27.9 
12 mu_1       0.3      1.11     0.151      5.32e- 9     12.6 
13 mu_1       0.4      1.06     0.499      1.26e- 6      5.41
14 mu_1       0.5      1.03     0.932      8.74e- 5      4.84
15 mu_1       0.6      1.01     1.06       1.14e- 4      3.42
16 mu_1       0.7      0.996    1.09       1.15e- 6      3.27
17 mu_1       0.8      1.03     0.727      1.74e- 9      4.21
18 mu_1       0.9      1.15     0.112      2.66e-14     14.1 
19 mu_0       0.1      0.970    0.0000196  0            87.7 
20 mu_0       0.2      1.09     0.00166    0            30.0 
21 mu_0       0.3      1.11     0.0279     0            21.7 
22 mu_0       0.4      1.08     0.167      0             9.42
23 mu_0       0.5      1.05     0.493      0             5.44
24 mu_0       0.6      1.02     0.902      0             4.22
25 mu_0       0.7      0.985    0.960      0             3.61
26 mu_0       0.8      0.971    0.929      0             3.95
27 mu_0       0.9      1.05     0.272      0             6.11
[1] "Total run time was 265.839 seconds"
