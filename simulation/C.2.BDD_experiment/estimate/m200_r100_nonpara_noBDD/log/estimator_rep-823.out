
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 200"
[1] "N_total: 2552"
[1] "cluster size dist'n: "

 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
14 13 10 15 13  6  5 15 14 14 17 11  8 13 17 15 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02123 0.28756 0.57235 0.99319 6.00000 
[1] "event indicator table: "

   0    1 
1503 1049 
[1] "treatment indicator table: "

   0    1 
1010 1542 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1281
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "     Cluster: 103"
[1] "     Cluster: 104"
[1] "     Cluster: 108"
[1] "     Cluster: 111"
[1] "     Cluster: 114"
[1] "     Cluster: 115"
[1] "     Cluster: 117"
[1] "     Cluster: 118"
[1] "     Cluster: 119"
[1] "     Cluster: 120"
[1] "     Cluster: 123"
[1] "     Cluster: 124"
[1] "     Cluster: 126"
[1] "     Cluster: 127"
[1] "     Cluster: 128"
[1] "     Cluster: 135"
[1] "     Cluster: 136"
[1] "     Cluster: 140"
[1] "     Cluster: 141"
[1] "     Cluster: 142"
[1] "     Cluster: 143"
[1] "     Cluster: 144"
[1] "     Cluster: 145"
[1] "     Cluster: 148"
[1] "     Cluster: 150"
[1] "     Cluster: 154"
[1] "     Cluster: 155"
[1] "     Cluster: 158"
[1] "     Cluster: 159"
[1] "     Cluster: 162"
[1] "     Cluster: 165"
[1] "     Cluster: 166"
[1] "     Cluster: 169"
[1] "     Cluster: 171"
[1] "     Cluster: 172"
[1] "     Cluster: 174"
[1] "     Cluster: 175"
[1] "     Cluster: 178"
[1] "     Cluster: 179"
[1] "     Cluster: 182"
[1] "     Cluster: 185"
[1] "     Cluster: 186"
[1] "     Cluster: 189"
[1] "     Cluster: 190"
[1] "     Cluster: 192"
[1] "     Cluster: 194"
[1] "     Cluster: 196"
[1] "     Cluster: 197"
[1] "     Cluster: 198"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1271
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 101"
[1] "     Cluster: 102"
[1] "     Cluster: 105"
[1] "     Cluster: 106"
[1] "     Cluster: 107"
[1] "     Cluster: 109"
[1] "     Cluster: 110"
[1] "     Cluster: 112"
[1] "     Cluster: 113"
[1] "     Cluster: 116"
[1] "     Cluster: 121"
[1] "     Cluster: 122"
[1] "     Cluster: 125"
[1] "     Cluster: 129"
[1] "     Cluster: 130"
[1] "     Cluster: 131"
[1] "     Cluster: 132"
[1] "     Cluster: 133"
[1] "     Cluster: 134"
[1] "     Cluster: 137"
[1] "     Cluster: 138"
[1] "     Cluster: 139"
[1] "     Cluster: 146"
[1] "     Cluster: 147"
[1] "     Cluster: 149"
[1] "     Cluster: 151"
[1] "     Cluster: 152"
[1] "     Cluster: 153"
[1] "     Cluster: 156"
[1] "     Cluster: 157"
[1] "     Cluster: 160"
[1] "     Cluster: 161"
[1] "     Cluster: 163"
[1] "     Cluster: 164"
[1] "     Cluster: 167"
[1] "     Cluster: 168"
[1] "     Cluster: 170"
[1] "     Cluster: 173"
[1] "     Cluster: 176"
[1] "     Cluster: 177"
[1] "     Cluster: 180"
[1] "     Cluster: 181"
[1] "     Cluster: 183"
[1] "     Cluster: 184"
[1] "     Cluster: 187"
[1] "     Cluster: 188"
[1] "     Cluster: 191"
[1] "     Cluster: 193"
[1] "     Cluster: 195"
[1] "     Cluster: 199"
[1] "     Cluster: 200"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 292.551 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.553 0.163 
 2 mu         0.1   0.2 0.617 0.154 
 3 mu         0.1   0.3 0.644 0.217 
 4 mu         0.1   0.4 0.710 0.204 
 5 mu         0.1   0.5 0.679 0.191 
 6 mu         0.2   0.1 0.399 0.0766
 7 mu         0.2   0.2 0.514 0.0756
 8 mu         0.2   0.3 0.570 0.0955
 9 mu         0.2   0.4 0.653 0.0901
10 mu         0.2   0.5 0.655 0.0820
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.910        0.739    0.0207      7.03
 2 mu         0.2      0.958        0.988    0.233       2.48
 3 mu         0.3      0.981        0.985    0.475       1.45
 4 mu         0.4      0.994        1        0.646       1.29
 5 mu         0.5      1.00         1        0.790       1.18
 6 mu         0.6      1.00         1        0.879       1.19
 7 mu         0.7      1.00         1        0.835       1.20
 8 mu         0.8      0.999        1        0.660       1.32
 9 mu         0.9      0.987        1        0.345       1.98
10 mu_1       0.1      0.969        0.940    0.0669      4.39
11 mu_1       0.2      0.978        1        0.372       1.76
12 mu_1       0.3      0.990        1        0.562       1.35
13 mu_1       0.4      0.998        1        0.702       1.27
14 mu_1       0.5      1.00         1        0.838       1.16
15 mu_1       0.6      1.00         1        0.872       1.19
16 mu_1       0.7      1.00         1        0.819       1.22
17 mu_1       0.8      0.998        1        0.633       1.40
18 mu_1       0.9      0.986        1        0.311       2.05
19 mu_0       0.1      0.904        0.691    0.0156      7.32
20 mu_0       0.2      0.953        0.985    0.191       2.72
21 mu_0       0.3      0.977        0.994    0.438       1.55
22 mu_0       0.4      0.991        1        0.609       1.32
23 mu_0       0.5      0.999        1        0.742       1.22
24 mu_0       0.6      1.00         1        0.828       1.20
25 mu_0       0.7      1.00         1        0.859       1.18
26 mu_0       0.8      1.00         1        0.771       1.30
27 mu_0       0.9      0.988        1        0.502       1.46
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.89     0.000120   2.48e-15    209.  
 2 mu         0.2      1.61     0.00990    3.25e-10     47.5 
 3 mu         0.3      1.04     0.105      3.20e- 7     12.6 
 4 mu         0.4      0.926    0.440      4.25e- 5      4.40
 5 mu         0.5      0.957    0.914      1.89e- 3      2.88
 6 mu         0.6      1.02     1.05       5.37e- 3      2.55
 7 mu         0.7      1.07     1.14       7.32e- 5      2.94
 8 mu         0.8      1.17     0.559      1.46e- 7      8.50
 9 mu         0.9      1.36     0.0556     2.81e-12     41.3 
10 mu_1       0.1      1.77     0.000500   0            81.6 
11 mu_1       0.2      1.09     0.0240     0            24.8 
12 mu_1       0.3      0.921    0.213      0             6.22
13 mu_1       0.4      0.920    0.636      0             3.67
14 mu_1       0.5      0.974    1.00       0             2.81
15 mu_1       0.6      1.03     1.09       0             2.45
16 mu_1       0.7      1.09     1.02       0             3.39
17 mu_1       0.8      1.19     0.445      0             9.81
18 mu_1       0.9      1.37     0.0359     0            45.9 
19 mu_0       0.1      3.01     0.0000461  0           232.  
20 mu_0       0.2      1.75     0.00433    0            56.5 
21 mu_0       0.3      1.10     0.0531     0            16.6 
22 mu_0       0.4      0.930    0.263      0             4.96
23 mu_0       0.5      0.940    0.669      0             3.33
24 mu_0       0.6      0.999    1.02       0             2.87
25 mu_0       0.7      1.04     1.12       0             2.98
26 mu_0       0.8      1.09     0.953      0             4.58
27 mu_0       0.9      1.25     0.196      0            14.5 
[1] "Total run time was 298.44 seconds"
