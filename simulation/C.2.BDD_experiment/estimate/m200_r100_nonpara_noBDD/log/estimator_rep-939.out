
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 200"
[1] "N_total: 2484"
[1] "cluster size dist'n: "

 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
 8 11 18 10 16 14 12 17  8 13  7 19 16 13  9  9 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02691 0.33377 0.57514 0.98630 4.48648 
[1] "event indicator table: "

   0    1 
1444 1040 
[1] "treatment indicator table: "

   0    1 
 928 1556 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1235
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 103"
[1] "     Cluster: 106"
[1] "     Cluster: 109"
[1] "     Cluster: 110"
[1] "     Cluster: 114"
[1] "     Cluster: 115"
[1] "     Cluster: 118"
[1] "     Cluster: 119"
[1] "     Cluster: 120"
[1] "     Cluster: 122"
[1] "     Cluster: 123"
[1] "     Cluster: 129"
[1] "     Cluster: 135"
[1] "     Cluster: 140"
[1] "     Cluster: 141"
[1] "     Cluster: 144"
[1] "     Cluster: 145"
[1] "     Cluster: 148"
[1] "     Cluster: 149"
[1] "     Cluster: 152"
[1] "     Cluster: 154"
[1] "     Cluster: 157"
[1] "     Cluster: 161"
[1] "     Cluster: 162"
[1] "     Cluster: 168"
[1] "     Cluster: 169"
[1] "     Cluster: 170"
[1] "     Cluster: 171"
[1] "     Cluster: 175"
[1] "     Cluster: 176"
[1] "     Cluster: 179"
[1] "     Cluster: 180"
[1] "     Cluster: 183"
[1] "     Cluster: 184"
[1] "     Cluster: 185"
[1] "     Cluster: 186"
[1] "     Cluster: 187"
[1] "     Cluster: 188"
[1] "     Cluster: 189"
[1] "     Cluster: 190"
[1] "     Cluster: 191"
[1] "     Cluster: 192"
[1] "     Cluster: 193"
[1] "     Cluster: 194"
[1] "     Cluster: 195"
[1] "     Cluster: 196"
[1] "     Cluster: 199"
[1] "     Cluster: 200"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1249
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "     Cluster: 101"
[1] "     Cluster: 102"
[1] "     Cluster: 104"
[1] "     Cluster: 105"
[1] "     Cluster: 107"
[1] "     Cluster: 108"
[1] "     Cluster: 111"
[1] "     Cluster: 112"
[1] "     Cluster: 113"
[1] "     Cluster: 116"
[1] "     Cluster: 117"
[1] "     Cluster: 121"
[1] "     Cluster: 124"
[1] "     Cluster: 125"
[1] "     Cluster: 126"
[1] "     Cluster: 127"
[1] "     Cluster: 128"
[1] "     Cluster: 130"
[1] "     Cluster: 131"
[1] "     Cluster: 132"
[1] "     Cluster: 133"
[1] "     Cluster: 134"
[1] "     Cluster: 136"
[1] "     Cluster: 137"
[1] "     Cluster: 138"
[1] "     Cluster: 139"
[1] "     Cluster: 142"
[1] "     Cluster: 143"
[1] "     Cluster: 146"
[1] "     Cluster: 147"
[1] "     Cluster: 150"
[1] "     Cluster: 151"
[1] "     Cluster: 153"
[1] "     Cluster: 155"
[1] "     Cluster: 156"
[1] "     Cluster: 158"
[1] "     Cluster: 159"
[1] "     Cluster: 160"
[1] "     Cluster: 163"
[1] "     Cluster: 164"
[1] "     Cluster: 165"
[1] "     Cluster: 166"
[1] "     Cluster: 167"
[1] "     Cluster: 172"
[1] "     Cluster: 173"
[1] "     Cluster: 174"
[1] "     Cluster: 177"
[1] "     Cluster: 178"
[1] "     Cluster: 181"
[1] "     Cluster: 182"
[1] "     Cluster: 197"
[1] "     Cluster: 198"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 309.819 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.735 0.273 
 2 mu         0.1   0.2 0.634 0.166 
 3 mu         0.1   0.3 0.623 0.112 
 4 mu         0.1   0.4 0.590 0.107 
 5 mu         0.1   0.5 0.572 0.115 
 6 mu         0.2   0.1 0.432 0.0797
 7 mu         0.2   0.2 0.458 0.0588
 8 mu         0.2   0.3 0.526 0.0524
 9 mu         0.2   0.4 0.525 0.0530
10 mu         0.2   0.5 0.561 0.0583
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.953        0.603  0.00111      18.7 
 2 mu         0.2      0.947        0.911  0.0509        5.93
 3 mu         0.3      0.966        0.999  0.283         2.05
 4 mu         0.4      0.974        0.984  0.502         1.86
 5 mu         0.5      0.980        0.995  0.684         1.48
 6 mu         0.6      0.992        1.00   0.803         1.22
 7 mu         0.7      1.01         1      0.843         1.18
 8 mu         0.8      1.02         1.01   0.579         1.31
 9 mu         0.9      1.02         1      0.227         2.13
10 mu_1       0.1      0.930        0.855  0.00466      10.8 
11 mu_1       0.2      0.954        0.963  0.109         2.62
12 mu_1       0.3      0.971        0.981  0.371         2.01
13 mu_1       0.4      0.976        0.991  0.557         1.76
14 mu_1       0.5      0.984        0.996  0.733         1.35
15 mu_1       0.6      0.997        1      0.803         1.21
16 mu_1       0.7      1.01         1.00   0.814         1.19
17 mu_1       0.8      1.02         1.00   0.531         1.34
18 mu_1       0.9      1.02         1      0.202         2.22
19 mu_0       0.1      0.956        0.554  0.000720     19.6 
20 mu_0       0.2      0.945        0.888  0.0364        6.76
21 mu_0       0.3      0.964        0.997  0.225         2.32
22 mu_0       0.4      0.973        0.985  0.448         1.92
23 mu_0       0.5      0.976        0.987  0.617         1.60
24 mu_0       0.6      0.985        0.997  0.776         1.23
25 mu_0       0.7      0.999        1      0.827         1.20
26 mu_0       0.8      1.01         1.01   0.769         1.22
27 mu_0       0.9      1.02         1.01   0.448         1.55
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1       3.04    0.0000499  6.07e-16    328.  
 2 mu         0.2       1.47    0.00566    1.42e-10     69.9 
 3 mu         0.3       1.14    0.0903     1.83e- 7     13.6 
 4 mu         0.4       1.15    0.391      2.78e- 5      9.27
 5 mu         0.5       1.17    0.834      1.29e- 3     10.7 
 6 mu         0.6       1.13    1.06       4.00e- 4      6.18
 7 mu         0.7       1.08    1.09       1.97e- 6      4.06
 8 mu         0.8       1.10    0.773      1.02e- 9      6.01
 9 mu         0.9       1.13    0.111      2.18e-15     10.1 
10 mu_1       0.1       2.18    0.000343   5.75e-15    164.  
11 mu_1       0.2       1.22    0.0167     6.70e-10     23.0 
12 mu_1       0.3       1.13    0.187      5.78e- 7      9.33
13 mu_1       0.4       1.16    0.645      6.59e- 5     10.9 
14 mu_1       0.5       1.17    0.895      2.31e- 3     10.1 
15 mu_1       0.6       1.12    1.06       3.33e- 5      4.85
16 mu_1       0.7       1.09    1.07       1.41e- 7      4.56
17 mu_1       0.8       1.11    0.646      6.36e-11      6.43
18 mu_1       0.9       1.13    0.0794     1.21e-16     10.7 
19 mu_0       0.1       3.14    0.0000152  0           346.  
20 mu_0       0.2       1.53    0.00216    0            83.0 
21 mu_0       0.3       1.15    0.0397     0            16.0 
22 mu_0       0.4       1.14    0.190      0             8.28
23 mu_0       0.5       1.18    0.578      0            11.3 
24 mu_0       0.6       1.14    0.942      0             8.18
25 mu_0       0.7       1.07    1.07       0             3.70
26 mu_0       0.8       1.04    0.984      0             5.60
27 mu_0       0.9       1.11    0.253      0             8.81
[1] "Total run time was 314.143 seconds"
