
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7722"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  67  68  69  70  71 
  1   1   1   1   1   2   1   4   1   2   2   1   4   1   6   1   3   4   3   1 
 72  73  74  75  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93 
  2   3   1   2   2   1   1   2   3   3   1   3   3   2   2   2   1   2   3   1 
 95  96  97  98  99 100 
  2   5   1   6   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02641 0.33399 0.59465 1.00000 7.77353 
[1] "event indicator table: "

   0    1 
4609 3113 
[1] "treatment indicator table: "

   0    1 
2949 4773 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3976
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 434.65 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.337 0.142 
 2 mu         0.1   0.2 0.402 0.163 
 3 mu         0.1   0.3 0.466 0.187 
 4 mu         0.1   0.4 0.498 0.203 
 5 mu         0.1   0.5 0.547 0.221 
 6 mu         0.2   0.1 0.304 0.0633
 7 mu         0.2   0.2 0.366 0.0461
 8 mu         0.2   0.3 0.431 0.0613
 9 mu         0.2   0.4 0.455 0.0515
10 mu         0.2   0.5 0.509 0.0722
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.900       0.0514 0.000000824     34.9 
 2 mu         0.2      0.870       0.694  0.0238           2.62
 3 mu         0.3      0.945       0.941  0.137            2.79
 4 mu         0.4      0.971       0.958  0.465            1.54
 5 mu         0.5      1.01        1.01   0.702            1.54
 6 mu         0.6      0.989       0.979  0.574            1.55
 7 mu         0.7      0.990       0.985  0.584            1.47
 8 mu         0.8      0.992       0.988  0.470            1.57
 9 mu         0.9      0.975       0.964  0.0937           2.02
10 mu_1       0.1      0.856       0.0971 0.00000235      27.6 
11 mu_1       0.2      0.891       0.724  0.0414           2.68
12 mu_1       0.3      0.941       0.964  0.153            2.62
13 mu_1       0.4      0.977       0.987  0.467            1.55
14 mu_1       0.5      1.01        1.01   0.693            1.57
15 mu_1       0.6      0.988       0.980  0.584            1.56
16 mu_1       0.7      0.991       0.989  0.568            1.46
17 mu_1       0.8      0.992       0.987  0.474            1.58
18 mu_1       0.9      0.975       0.961  0.0866           2.02
19 mu_0       0.1      0.905       0.0463 0.000000654     35.7 
20 mu_0       0.2      0.865       0.688  0.0194           2.63
21 mu_0       0.3      0.946       0.933  0.130            2.86
22 mu_0       0.4      0.967       0.965  0.463            1.59
23 mu_0       0.5      1.01        1.03   0.685            1.51
24 mu_0       0.6      0.991       0.983  0.559            1.53
25 mu_0       0.7      0.989       0.986  0.621            1.48
26 mu_0       0.8      0.992       0.988  0.452            1.59
27 mu_0       0.9      0.981       0.975  0.157            2.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00718     3.14e-27  9.52e-85     0.686
 2 mu         0.2    0.692       3.03e-14  2.09e-56    32.0  
 3 mu         0.3    1.92        1.35e- 7  5.75e-40    68.4  
 4 mu         0.4    2.33        2.45e- 3  1.97e-28    82.0  
 5 mu         0.5    1.40        1.38e- 1  1.27e-19    15.6  
 6 mu         0.6    0.911       1.71e- 1  1.39e-12     7.30 
 7 mu         0.7    1.07        1.25e- 1  1.30e-13     9.85 
 8 mu         0.8    1.22        6.24e- 3  8.77e-23    14.0  
 9 mu         0.9    2.00        1.74e- 8  1.80e-39    72.6  
10 mu_1       0.1    0.0162      1.76e-26  9.05e-84     1.54 
11 mu_1       0.2    0.871       9.48e-14  9.94e-56    42.8  
12 mu_1       0.3    2.00        2.81e- 7  1.82e-39    61.0  
13 mu_1       0.4    2.27        3.83e- 3  4.67e-28    75.0  
14 mu_1       0.5    1.36        1.31e- 1  2.42e-19    16.5  
15 mu_1       0.6    0.899       2.04e- 1  2.20e-12     6.43 
16 mu_1       0.7    1.08        1.47e- 1  4.88e-14    10.4  
17 mu_1       0.8    1.22        4.89e- 3  2.88e-23    14.2  
18 mu_1       0.9    2.04        1.19e- 8  5.26e-40    76.6  
19 mu_0       0.1    0.00617     1.24e-27  5.29e-86     0.592
20 mu_0       0.2    0.647       1.38e-14  1.31e-57    29.3  
21 mu_0       0.3    1.89        7.30e- 8  4.11e-41    71.6  
22 mu_0       0.4    2.38        1.52e- 3  1.64e-29    86.7  
23 mu_0       0.5    1.44        9.65e- 2  1.27e-20    14.7  
24 mu_0       0.6    0.929       1.53e- 1  1.73e-13     8.60 
25 mu_0       0.7    1.03        1.42e- 1  3.20e-13     8.57 
26 mu_0       0.8    1.22        1.09e- 2  3.23e-22    13.7  
27 mu_0       0.9    1.67        6.77e- 8  1.33e-38    36.3  
[1] "Total run time was 439.153 seconds"
