
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7770"
[1] "cluster size dist'n: "

 50  51  52  54  55  57  58  60  61  62  64  65  68  69  70  71  72  73  74  75 
  2   3   4   1   2   3   3   2   2   1   2   2   1   2   2   1   1   3   2   2 
 76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93  95  96  97 
  2   2   1   4   1   1   3   1   2   3   2   4   6   2   2   4   4   2   2   5 
 98  99 100 
  1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03637 0.34554 0.61150 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4620 3150 
[1] "treatment indicator table: "

   0    1 
2961 4809 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3956
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 438.091 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.491 0.109 
 2 mu         0.1   0.2 0.596 0.120 
 3 mu         0.1   0.3 0.636 0.108 
 4 mu         0.1   0.4 0.662 0.103 
 5 mu         0.1   0.5 0.703 0.107 
 6 mu         0.2   0.1 0.415 0.0688
 7 mu         0.2   0.2 0.499 0.0753
 8 mu         0.2   0.3 0.555 0.0649
 9 mu         0.2   0.4 0.588 0.0602
10 mu         0.2   0.5 0.624 0.0632
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.974        0.510  0.000330      4.85
 2 mu         0.2      0.954        0.918  0.207         2.30
 3 mu         0.3      1.01         0.997  0.484         1.63
 4 mu         0.4      0.984        1.00   0.357         1.84
 5 mu         0.5      0.973        0.975  0.491         1.39
 6 mu         0.6      1.02         0.990  0.682         1.56
 7 mu         0.7      1.03         1.02   0.567         1.61
 8 mu         0.8      0.996        1.02   0.473         1.65
 9 mu         0.9      0.985        1.00   0.0911        2.27
10 mu_1       0.1      0.960        0.723  0.000768      3.98
11 mu_1       0.2      0.967        0.945  0.252         2.38
12 mu_1       0.3      1.01         0.980  0.500         1.63
13 mu_1       0.4      0.983        1.00   0.358         1.87
14 mu_1       0.5      0.973        0.966  0.499         1.40
15 mu_1       0.6      1.02         0.989  0.692         1.58
16 mu_1       0.7      1.03         1.02   0.566         1.61
17 mu_1       0.8      0.995        1.02   0.472         1.67
18 mu_1       0.9      0.985        0.999  0.0860        2.28
19 mu_0       0.1      0.975        0.483  0.000281      5.05
20 mu_0       0.2      0.951        0.904  0.196         2.28
21 mu_0       0.3      1.01         1.01   0.477         1.65
22 mu_0       0.4      0.985        0.996  0.349         1.83
23 mu_0       0.5      0.973        0.979  0.484         1.37
24 mu_0       0.6      1.01         0.993  0.666         1.54
25 mu_0       0.7      1.03         1.02   0.568         1.62
26 mu_0       0.8      0.997        1.02   0.478         1.59
27 mu_0       0.9      0.984        0.988  0.137         2.18
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.13      1.89e-27  7.34e-80    109.  
 2 mu         0.2      0.828     9.38e-15  7.98e-54     33.7 
 3 mu         0.3      0.678     1.28e- 7  1.12e-38      9.10
 4 mu         0.4      0.965     1.15e- 3  5.21e-28      8.41
 5 mu         0.5      1.11      6.89e- 2  8.14e-20      9.61
 6 mu         0.6      1.18      9.80e- 2  3.22e-13     11.0 
 7 mu         0.7      0.966     2.24e- 1  9.78e-21      8.57
 8 mu         0.8      1.84      3.53e- 3  6.73e-32     33.9 
 9 mu         0.9      1.32      1.41e- 8  1.19e-51     28.7 
10 mu_1       0.1      1.42      1.37e-26  7.10e-79    134.  
11 mu_1       0.2      0.709     3.11e-14  3.86e-53     20.8 
12 mu_1       0.3      0.714     2.54e- 7  3.60e-38      9.81
13 mu_1       0.4      0.980     1.71e- 3  1.26e-27      9.05
14 mu_1       0.5      1.12      4.57e- 2  1.57e-19      9.77
15 mu_1       0.6      1.16      1.07e- 1  1.01e-13     10.2 
16 mu_1       0.7      0.969     1.83e- 1  2.39e-21      8.55
17 mu_1       0.8      1.85      3.19e- 3  1.44e-32     33.4 
18 mu_1       0.9      1.33      9.45e- 9  2.25e-52     28.7 
19 mu_0       0.1      1.10      5.76e-28  2.72e-81    106.  
20 mu_0       0.2      0.857     4.17e-15  3.33e-55     37.0 
21 mu_0       0.3      0.663     7.33e- 8  5.32e-40      8.79
22 mu_0       0.4      0.955     9.34e- 4  2.89e-29      8.14
23 mu_0       0.5      1.10      6.35e- 2  5.42e-21      9.46
24 mu_0       0.6      1.20      1.36e- 1  2.69e-14     12.2 
25 mu_0       0.7      0.960     2.17e- 1  2.70e-20      8.63
26 mu_0       0.8      1.81      7.21e- 3  2.79e-31     35.6 
27 mu_0       0.9      1.22      5.63e- 8  9.84e-51     28.0 
[1] "Total run time was 441.639 seconds"
