
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7444"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  61  62  63  64  65  66  67  68  69  70 
  2   5   2   3   1   1   2   3   3   3   1   2   3   2   1   1   1   2   1   3 
 71  72  73  74  75  76  77  78  79  80  81  84  85  86  87  88  89  91  92  93 
  1   2   1   3   1   1   3   2   2   3   4   1   2   3   3   2   2   6   3   2 
 94  95  96  97  98  99 100 
  2   3   1   1   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04403 0.37447 0.63801 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4455 2989 
[1] "treatment indicator table: "

   0    1 
2657 4787 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3595
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3849
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 376.121 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.297 0.101 
 2 mu         0.1   0.2 0.397 0.121 
 3 mu         0.1   0.3 0.478 0.145 
 4 mu         0.1   0.4 0.501 0.152 
 5 mu         0.1   0.5 0.571 0.161 
 6 mu         0.2   0.1 0.233 0.0417
 7 mu         0.2   0.2 0.333 0.0419
 8 mu         0.2   0.3 0.403 0.0582
 9 mu         0.2   0.4 0.431 0.0566
10 mu         0.2   0.5 0.504 0.0674
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.933      0.00799  8.86e-10     20.2 
 2 mu         0.2      0.929      0.739    2.35e- 4      9.12
 3 mu         0.3      1.01       0.928    5.67e- 2      3.13
 4 mu         0.4      1.01       1.02     4.20e- 1      2.08
 5 mu         0.5      1.02       1.01     6.45e- 1      1.49
 6 mu         0.6      0.999      0.989    6.69e- 1      1.61
 7 mu         0.7      0.991      0.988    6.50e- 1      1.46
 8 mu         0.8      1.00       1.00     5.42e- 1      1.68
 9 mu         0.9      1.04       0.997    4.04e- 1      1.92
10 mu_1       0.1      0.922      0.0189   3.85e- 9     21.5 
11 mu_1       0.2      0.945      0.745    5.14e- 4      7.59
12 mu_1       0.3      1.01       0.933    8.38e- 2      2.92
13 mu_1       0.4      1.01       1.02     4.05e- 1      2.06
14 mu_1       0.5      1.02       1.01     6.43e- 1      1.47
15 mu_1       0.6      0.996      0.987    6.59e- 1      1.61
16 mu_1       0.7      0.992      0.984    6.53e- 1      1.50
17 mu_1       0.8      1.00       0.999    5.41e- 1      1.66
18 mu_1       0.9      1.04       0.997    4.09e- 1      1.95
19 mu_0       0.1      0.935      0.00670  5.56e-10     20.1 
20 mu_0       0.2      0.925      0.711    1.65e- 4      9.50
21 mu_0       0.3      1.01       0.918    4.51e- 2      3.21
22 mu_0       0.4      1.01       1.03     4.29e- 1      2.10
23 mu_0       0.5      1.02       1.01     6.46e- 1      1.50
24 mu_0       0.6      1.00       0.987    6.51e- 1      1.61
25 mu_0       0.7      0.988      0.978    6.43e- 1      1.42
26 mu_0       0.8      1.00       1.01     5.45e- 1      1.77
27 mu_0       0.9      1.03       0.980    3.59e- 1      1.82
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.320     2.31e-29  7.25e-74     32.0 
 2 mu         0.2      0.848     8.72e-16  1.23e-48     48.3 
 3 mu         0.3      1.48      7.03e- 9  4.48e-34     46.0 
 4 mu         0.4      1.32      8.76e- 5  6.35e-24     41.0 
 5 mu         0.5      1.10      2.74e- 2  3.06e-16      8.50
 6 mu         0.6      0.954     4.21e- 1  8.16e-15      6.25
 7 mu         0.7      1.06      4.02e- 1  4.58e-23      6.51
 8 mu         0.8      1.18      7.95e- 2  3.63e-35     11.1 
 9 mu         0.9      1.14      2.32e- 6  1.78e-56     19.6 
10 mu_1       0.1      0.484     1.55e-28  6.70e-73     48.3 
11 mu_1       0.2      0.855     2.95e-15  5.68e-48     36.5 
12 mu_1       0.3      1.51      1.52e- 8  1.38e-33     42.3 
13 mu_1       0.4      1.30      1.26e- 4  1.47e-23     39.9 
14 mu_1       0.5      1.10      3.70e- 2  5.66e-16      8.59
15 mu_1       0.6      0.947     4.44e- 1  2.05e-15      6.15
16 mu_1       0.7      1.07      4.00e- 1  9.90e-24      7.01
17 mu_1       0.8      1.17      6.59e- 2  6.87e-36     11.1 
18 mu_1       0.9      1.14      1.80e- 6  2.99e-57     20.1 
19 mu_0       0.1      0.302     8.41e-30  6.13e-75     30.2 
20 mu_0       0.2      0.847     3.54e-16  1.17e-49     51.3 
21 mu_0       0.3      1.47      3.54e- 9  4.87e-35     47.6 
22 mu_0       0.4      1.34      4.70e- 5  8.05e-25     41.7 
23 mu_0       0.5      1.11      1.82e- 2  4.66e-17      8.41
24 mu_0       0.6      0.965     3.74e- 1  1.73e-14      6.62
25 mu_0       0.7      1.04      3.15e- 1  1.30e-22      5.36
26 mu_0       0.8      1.19      8.57e- 2  1.54e-34     11.2 
27 mu_0       0.9      1.14      6.94e- 6  1.51e-55     17.3 
[1] "Total run time was 379.449 seconds"
