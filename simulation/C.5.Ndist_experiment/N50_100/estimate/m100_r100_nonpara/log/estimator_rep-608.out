
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7511"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 59 60 61 62 63 64 65 66 67 68 69 70 71 73 74 75 78 80 
 1  1  2  1  1  2  6  5  2  2  3  1  2  2  1  1  4  2  2  2  4  2  1  1  3  3 
81 82 83 84 85 86 87 88 89 90 91 92 93 95 96 97 98 99 
 2  2  2  2  3  2  3  2  2  5  3  2  1  3  2  3  1  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01736 0.31155 0.58510 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4394 3117 
[1] "treatment indicator table: "

   0    1 
3070 4441 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3833
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3678
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 438.854 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.370 0.0442
 2 mu         0.1   0.2 0.457 0.0512
 3 mu         0.1   0.3 0.520 0.0521
 4 mu         0.1   0.4 0.580 0.0576
 5 mu         0.1   0.5 0.614 0.0628
 6 mu         0.2   0.1 0.421 0.0339
 7 mu         0.2   0.2 0.496 0.0318
 8 mu         0.2   0.3 0.551 0.0294
 9 mu         0.2   0.4 0.602 0.0323
10 mu         0.2   0.5 0.646 0.0341
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.866   0.00151      3.36
 2 mu         0.2      1.07         1.09    0.325        2.21
 3 mu         0.3      0.988        0.996   0.405        1.84
 4 mu         0.4      0.993        0.991   0.509        1.59
 5 mu         0.5      1.00         1.01    0.519        1.38
 6 mu         0.6      0.975        0.961   0.661        1.36
 7 mu         0.7      0.995        0.989   0.574        1.60
 8 mu         0.8      1.02         0.978   0.519        1.61
 9 mu         0.9      0.957        0.943   0.434        1.71
10 mu_1       0.1      1.04         1.02    0.00330      3.22
11 mu_1       0.2      1.06         1.06    0.329        2.12
12 mu_1       0.3      0.984        0.976   0.434        1.83
13 mu_1       0.4      0.996        0.993   0.508        1.60
14 mu_1       0.5      0.999        1.00    0.550        1.38
15 mu_1       0.6      0.974        0.959   0.666        1.36
16 mu_1       0.7      0.997        1.00    0.567        1.59
17 mu_1       0.8      1.02         0.986   0.528        1.60
18 mu_1       0.9      0.958        0.941   0.430        1.72
19 mu_0       0.1      1.02         0.862   0.00131      3.37
20 mu_0       0.2      1.07         1.10    0.324        2.24
21 mu_0       0.3      0.989        1.00    0.393        1.84
22 mu_0       0.4      0.991        0.988   0.510        1.59
23 mu_0       0.5      1.00         1.02    0.487        1.38
24 mu_0       0.6      0.975        0.961   0.653        1.39
25 mu_0       0.7      0.989        0.979   0.591        1.62
26 mu_0       0.8      1.03         0.999   0.485        1.66
27 mu_0       0.9      0.953        0.946   0.473        1.61
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.323     1.14e-22  1.15e-80     29.7 
 2 mu         0.2      1.10      2.15e-11  1.25e-54     21.3 
 3 mu         0.3      0.919     5.54e- 6  1.74e-39     15.2 
 4 mu         0.4      1.05      4.72e- 3  8.13e-29     19.8 
 5 mu         0.5      1.17      1.40e- 2  1.27e-20     10.7 
 6 mu         0.6      0.939     3.98e- 2  2.81e-20      8.37
 7 mu         0.7      0.917     6.15e- 2  4.90e-30      9.54
 8 mu         0.8      1.39      2.06e- 3  3.44e-44     11.4 
 9 mu         0.9      1.00      1.44e- 8  6.49e-69     10.6 
10 mu_1       0.1      0.395     6.41e-22  1.11e-79     34.4 
11 mu_1       0.2      1.17      7.05e-11  6.02e-54     22.0 
12 mu_1       0.3      0.891     1.06e- 5  5.62e-39     15.1 
13 mu_1       0.4      1.09      3.57e- 3  1.97e-28     20.9 
14 mu_1       0.5      1.17      1.01e- 2  2.46e-20     10.4 
15 mu_1       0.6      0.920     3.51e- 2  5.42e-21      8.16
16 mu_1       0.7      0.929     6.26e- 2  8.10e-31      9.70
17 mu_1       0.8      1.40      1.76e- 3  4.98e-45     11.7 
18 mu_1       0.9      0.991     9.65e- 9  8.36e-70     10.8 
19 mu_0       0.1      0.315     5.58e-23  0            29.1 
20 mu_0       0.2      1.08      9.21e-12  0            21.1 
21 mu_0       0.3      0.931     3.38e- 6  0            15.2 
22 mu_0       0.4      1.02      5.20e- 3  0            19.0 
23 mu_0       0.5      1.18      1.77e- 2  0            10.9 
24 mu_0       0.6      0.968     4.12e- 2  0             8.67
25 mu_0       0.7      0.888     5.27e- 2  0             9.17
26 mu_0       0.8      1.35      1.53e- 3  0            10.6 
27 mu_0       0.9      1.11      2.77e- 8  0            11.7 
[1] "Total run time was 442.484 seconds"
