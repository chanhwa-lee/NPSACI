
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7451"
[1] "cluster size dist'n: "

51 52 53 54 55 56 57 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 76 78 79 
 1  5  3  1  1  3  4  1  3  3  3  5  4  1  1  1  2  1  1  1  1  2  5  3  1  1 
80 81 82 83 84 85 87 88 89 90 91 92 93 95 96 97 98 99 
 3  1  1  2  1  2  1  4  4  3  3  5  2  2  2  1  1  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02385 0.30122 0.57803 0.97263 5.38515 
[1] "event indicator table: "

   0    1 
4455 2996 
[1] "treatment indicator table: "

   0    1 
2802 4649 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3647
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3804
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 593.469 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.357 0.0558
 2 mu         0.1   0.2 0.425 0.0691
 3 mu         0.1   0.3 0.495 0.0816
 4 mu         0.1   0.4 0.540 0.0795
 5 mu         0.1   0.5 0.564 0.0769
 6 mu         0.2   0.1 0.376 0.0347
 7 mu         0.2   0.2 0.457 0.0457
 8 mu         0.2   0.3 0.533 0.0522
 9 mu         0.2   0.4 0.584 0.0493
10 mu         0.2   0.5 0.618 0.0496
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.835        0.402  2.94e-10      5.69
 2 mu         0.2      0.976        0.895  8.90e- 4      3.25
 3 mu         0.3      0.986        0.948  1.81e- 1      1.67
 4 mu         0.4      1.01         1.01   5.03e- 1      1.75
 5 mu         0.5      0.990        0.988  6.63e- 1      1.36
 6 mu         0.6      0.980        0.981  6.11e- 1      1.27
 7 mu         0.7      1.00         0.993  6.15e- 1      1.32
 8 mu         0.8      1.01         1.00   6.52e- 1      1.48
 9 mu         0.9      1.02         0.978  3.44e- 1      2.25
10 mu_1       0.1      0.878        0.586  9.91e-10      5.12
11 mu_1       0.2      0.983        0.946  1.53e- 3      3.09
12 mu_1       0.3      0.986        0.944  2.20e- 1      1.64
13 mu_1       0.4      1.01         1.01   5.07e- 1      1.67
14 mu_1       0.5      0.988        0.991  6.56e- 1      1.37
15 mu_1       0.6      0.980        0.980  6.16e- 1      1.27
16 mu_1       0.7      1.00         0.994  6.30e- 1      1.32
17 mu_1       0.8      1.01         1.01   6.54e- 1      1.48
18 mu_1       0.9      1.02         0.987  3.27e- 1      2.26
19 mu_0       0.1      0.830        0.379  2.16e-10      5.75
20 mu_0       0.2      0.975        0.901  7.31e- 4      3.31
21 mu_0       0.3      0.986        0.963  1.64e- 1      1.72
22 mu_0       0.4      1.01         1.00   4.99e- 1      1.80
23 mu_0       0.5      0.992        0.986  6.56e- 1      1.34
24 mu_0       0.6      0.980        0.967  6.00e- 1      1.27
25 mu_0       0.7      0.997        0.984  5.79e- 1      1.35
26 mu_0       0.8      1.01         1.03   6.48e- 1      1.47
27 mu_0       0.9      1.02         0.967  4.57e- 1      2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.577     2.94e-26  3.21e-76     57.7 
 2 mu         0.2      0.722     1.78e-14  6.89e-51     25.2 
 3 mu         0.3      0.886     2.76e- 8  3.28e-36     16.2 
 4 mu         0.4      1.03      2.18e- 4  6.33e-26      9.70
 5 mu         0.5      1.25      5.40e- 2  4.39e-18      9.29
 6 mu         0.6      0.995     1.28e- 1  1.99e-14      6.63
 7 mu         0.7      1.08      1.14e- 1  5.27e-22      7.97
 8 mu         0.8      1.35      2.51e- 2  4.78e-33     12.0 
 9 mu         0.9      1.37      1.10e- 7  2.11e-52     24.6 
10 mu_1       0.1      0.760     1.85e-25  3.03e-75     75.9 
11 mu_1       0.2      0.745     6.06e-14  3.25e-50     29.9 
12 mu_1       0.3      0.891     6.25e- 8  1.03e-35     13.9 
13 mu_1       0.4      1.06      3.69e- 4  1.49e-25      9.94
14 mu_1       0.5      1.24      7.12e- 2  8.29e-18      9.10
15 mu_1       0.6      0.993     1.15e- 1  4.36e-15      6.66
16 mu_1       0.7      1.09      1.10e- 1  9.91e-23      8.19
17 mu_1       0.8      1.36      1.97e- 2  7.87e-34     11.8 
18 mu_1       0.9      1.37      7.84e- 8  3.08e-53     24.9 
19 mu_0       0.1      0.557     1.27e-26  1.98e-77     55.6 
20 mu_0       0.2      0.716     7.11e-15  4.79e-52     27.0 
21 mu_0       0.3      0.884     1.27e- 8  2.60e-37     17.6 
22 mu_0       0.4      1.02      1.70e- 4  5.86e-27     10.7 
23 mu_0       0.5      1.25      3.69e- 2  4.88e-19      9.48
24 mu_0       0.6      0.999     1.33e- 1  4.32e-14      6.89
25 mu_0       0.7      1.06      1.09e- 1  1.53e-21      7.46
26 mu_0       0.8      1.33      2.52e- 2  2.08e-32     12.8 
27 mu_0       0.9      1.40      3.92e- 7  1.83e-51     22.1 
[1] "Total run time was 598.006 seconds"
