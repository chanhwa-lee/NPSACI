
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7728"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  58  59  60  61  62  63  64  65  66  67  69  70  72  73 
  1   4   3   3   2   1   2   1   2   1   3   1   2   1   3   2   1   2   5   4 
 74  75  76  77  78  80  81  82  83  84  85  87  89  90  91  92  93  94  95  96 
  2   1   2   1   1   2   1   3   2   2   2   3   2   3   3   1   4   3   5   2 
 97  98  99 100 
  1   2   4   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01832 0.29283 0.57176 0.96170 7.00000 
[1] "event indicator table: "

   0    1 
4534 3194 
[1] "treatment indicator table: "

   0    1 
3044 4684 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3907
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3821
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 416.192 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.342 0.0672
 2 mu         0.1   0.2 0.467 0.0863
 3 mu         0.1   0.3 0.542 0.0975
 4 mu         0.1   0.4 0.587 0.109 
 5 mu         0.1   0.5 0.619 0.111 
 6 mu         0.2   0.1 0.393 0.0393
 7 mu         0.2   0.2 0.522 0.0555
 8 mu         0.2   0.3 0.607 0.0624
 9 mu         0.2   0.4 0.660 0.0731
10 mu         0.2   0.5 0.702 0.0719
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.859        0.160 0.00000000945      7.04
 2 mu         0.2      1.09         0.970 0.00601            5.97
 3 mu         0.3      1.04         0.975 0.175              2.57
 4 mu         0.4      0.984        0.975 0.415              2.20
 5 mu         0.5      0.976        0.939 0.509              1.67
 6 mu         0.6      0.984        0.956 0.448              1.61
 7 mu         0.7      0.967        0.930 0.592              1.42
 8 mu         0.8      1.02         1.00  0.339              1.88
 9 mu         0.9      0.944        0.895 0.0255             2.25
10 mu_1       0.1      0.891        0.256 0.0000000315       7.46
11 mu_1       0.2      1.10         0.955 0.0101             6.27
12 mu_1       0.3      1.03         0.950 0.211              2.12
13 mu_1       0.4      0.981        0.966 0.413              2.12
14 mu_1       0.5      0.977        0.936 0.513              1.67
15 mu_1       0.6      0.983        0.955 0.451              1.60
16 mu_1       0.7      0.969        0.934 0.581              1.43
17 mu_1       0.8      1.02         0.991 0.328              1.89
18 mu_1       0.9      0.943        0.892 0.0232             2.28
19 mu_0       0.1      0.855        0.149 0.00000000700      7.04
20 mu_0       0.2      1.08         0.992 0.00498            5.90
21 mu_0       0.3      1.04         0.973 0.159              2.76
22 mu_0       0.4      0.986        0.993 0.415              2.26
23 mu_0       0.5      0.976        0.933 0.506              1.68
24 mu_0       0.6      0.987        0.956 0.443              1.65
25 mu_0       0.7      0.964        0.937 0.615              1.46
26 mu_0       0.8      1.02         0.991 0.380              1.84
27 mu_0       0.9      0.949        0.917 0.0464             2.30
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00959     1.61e-24  1.03e-69     0.759
 2 mu         0.2    0.639       5.21e-13  1.95e-45    40.8  
 3 mu         0.3    0.825       2.24e- 6  1.84e-31    14.0  
 4 mu         0.4    1.11        4.83e- 3  9.42e-22    23.5  
 5 mu         0.5    1.27        8.35e- 2  1.94e-14    13.2  
 6 mu         0.6    1.33        2.10e- 1  1.57e-13    25.1  
 7 mu         0.7    1.23        1.15e- 1  5.27e-22    23.7  
 8 mu         0.8    1.53        1.21e- 3  1.23e-34    24.0  
 9 mu         0.9    1.61        5.08e-10  3.80e-57    42.5  
10 mu_1       0.1    0.0194      1.09e-23  9.41e-69     1.49 
11 mu_1       0.2    0.682       1.71e-12  8.87e-45    39.9  
12 mu_1       0.3    0.863       4.26e- 6  5.59e-31    14.3  
13 mu_1       0.4    1.12        7.68e- 3  2.15e-21    22.0  
14 mu_1       0.5    1.29        1.03e- 1  3.53e-14    13.8  
15 mu_1       0.6    1.31        2.03e- 1  5.12e-14    24.8  
16 mu_1       0.7    1.24        1.07e- 1  1.48e-22    23.9  
17 mu_1       0.8    1.55        8.79e- 4  3.00e-35    25.2  
18 mu_1       0.9    1.59        3.25e-10  8.28e-58    43.0  
19 mu_0       0.1    0.00850     5.48e-25  1.02e-70     0.679
20 mu_0       0.2    0.628       2.25e-13  2.16e-46    41.0  
21 mu_0       0.3    0.809       1.37e- 6  2.34e-32    13.9  
22 mu_0       0.4    1.10        4.17e- 3  1.40e-22    24.6  
23 mu_0       0.5    1.24        7.75e- 2  3.45e-15    12.9  
24 mu_0       0.6    1.36        2.17e- 1  3.15e-13    25.5  
25 mu_0       0.7    1.20        1.21e- 1  1.41e-21    23.3  
26 mu_0       0.8    1.45        2.52e- 3  4.93e-34    19.2  
27 mu_0       0.9    1.75        2.15e- 9  3.06e-56    37.7  
[1] "Total run time was 420.101 seconds"
