
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7522"
[1] "cluster size dist'n: "

50 51 52 54 55 56 58 59 60 61 62 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 
 1  3  3  2  2  4  2  4  3  2  1  1  1  1  3  1  3  2  5  5  1  1  1  1  3  1 
80 81 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 2  2  4  3  2  2  2  1  2  3  1  1  3  2  2  2  3  3  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03711 0.37477 0.62756 1.00000 5.37885 
[1] "event indicator table: "

   0    1 
4622 2900 
[1] "treatment indicator table: "

   0    1 
2516 5006 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3731
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3791
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 363.764 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.363 0.0886
 2 mu         0.1   0.2 0.414 0.103 
 3 mu         0.1   0.3 0.515 0.0957
 4 mu         0.1   0.4 0.538 0.0964
 5 mu         0.1   0.5 0.607 0.0958
 6 mu         0.2   0.1 0.303 0.0386
 7 mu         0.2   0.2 0.371 0.0580
 8 mu         0.2   0.3 0.450 0.0370
 9 mu         0.2   0.4 0.479 0.0404
10 mu         0.2   0.5 0.535 0.0453
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.977        0.395 0.0000906      6.82
 2 mu         0.2      1.00         0.875 0.135          2.88
 3 mu         0.3      0.980        0.947 0.322          2.23
 4 mu         0.4      0.985        0.974 0.395          1.63
 5 mu         0.5      0.984        0.968 0.597          1.55
 6 mu         0.6      0.999        0.979 0.605          1.46
 7 mu         0.7      0.998        1.01  0.551          1.30
 8 mu         0.8      0.988        0.992 0.460          1.53
 9 mu         0.9      0.988        1.01  0.241          1.71
10 mu_1       0.1      1.00         0.589 0.000243       5.09
11 mu_1       0.2      1.00         0.917 0.188          2.87
12 mu_1       0.3      0.977        0.954 0.335          2.15
13 mu_1       0.4      0.986        0.960 0.380          1.65
14 mu_1       0.5      0.984        0.970 0.601          1.56
15 mu_1       0.6      1.00         0.995 0.599          1.46
16 mu_1       0.7      0.996        1.01  0.539          1.31
17 mu_1       0.8      0.988        0.988 0.473          1.53
18 mu_1       0.9      0.988        1.01  0.242          1.72
19 mu_0       0.1      0.974        0.387 0.0000737      7.03
20 mu_0       0.2      1.00         0.870 0.121          2.88
21 mu_0       0.3      0.981        0.940 0.317          2.26
22 mu_0       0.4      0.984        0.981 0.406          1.61
23 mu_0       0.5      0.984        0.986 0.593          1.54
24 mu_0       0.6      0.996        0.982 0.614          1.47
25 mu_0       0.7      1.00         1.01  0.580          1.31
26 mu_0       0.8      0.988        0.989 0.407          1.50
27 mu_0       0.9      0.988        0.982 0.228          1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.141     2.07e-31  7.63e-78     14.1 
 2 mu         0.2      0.954     8.23e-18  3.68e-51     84.2 
 3 mu         0.3      0.550     4.78e-10  5.74e-36     25.5 
 4 mu         0.4      0.702     2.62e- 5  4.09e-26     12.2 
 5 mu         0.5      1.03      1.05e- 2  1.34e-18     22.1 
 6 mu         0.6      1.29      1.14e- 1  6.00e-15     17.5 
 7 mu         0.7      1.32      3.11e- 1  9.53e-24     10.2 
 8 mu         0.8      1.48      4.29e- 2  9.90e-37     14.0 
 9 mu         0.9      1.30      5.95e- 5  1.08e-59     16.9 
10 mu_1       0.1      0.238     1.28e-30  7.01e-77     23.8 
11 mu_1       0.2      0.863     2.87e-17  1.69e-50     70.9 
12 mu_1       0.3      0.541     1.07e- 9  1.82e-35     23.9 
13 mu_1       0.4      0.744     4.66e- 5  9.85e-26     12.3 
14 mu_1       0.5      1.06      1.43e- 2  2.58e-18     23.9 
15 mu_1       0.6      1.29      1.34e- 1  1.68e-15     15.8 
16 mu_1       0.7      1.33      2.99e- 1  2.29e-24     10.5 
17 mu_1       0.8      1.48      3.70e- 2  2.08e-37     13.9 
18 mu_1       0.9      1.30      4.49e- 5  2.02e-60     16.5 
19 mu_0       0.1      0.131     8.80e-32  6.92e-79     13.0 
20 mu_0       0.2      0.977     3.64e-18  3.76e-52     87.5 
21 mu_0       0.3      0.554     2.26e-10  3.39e-37     26.1 
22 mu_0       0.4      0.674     1.26e- 5  2.46e-27     12.2 
23 mu_0       0.5      1.01      6.67e- 3  9.68e-20     20.3 
24 mu_0       0.6      1.30      7.48e- 2  1.25e-14     20.1 
25 mu_0       0.7      1.30      3.92e- 1  2.64e-23      9.39
26 mu_0       0.8      1.49      5.09e- 2  4.12e-36     14.5 
27 mu_0       0.9      1.29      1.78e- 4  8.97e-59     21.2 
[1] "Total run time was 366.822 seconds"
