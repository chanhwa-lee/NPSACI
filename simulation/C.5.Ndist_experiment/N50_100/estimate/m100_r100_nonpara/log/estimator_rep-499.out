
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7533"
[1] "cluster size dist'n: "

50 53 54 56 57 58 59 60 62 63 64 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 
 1  2  2  2  2  1  4  3  2  3  1  4  3  4  5  3  4  2  2  3  2  2  4  3  1  3 
82 83 84 85 86 87 88 89 90 91 92 93 95 96 97 98 99 
 2  1  1  3  2  1  2  1  1  3  4  4  1  1  1  1  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0367  0.3592  0.6184  1.0000  6.8274 
[1] "event indicator table: "

   0    1 
4506 3027 
[1] "treatment indicator table: "

   0    1 
2792 4741 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3721
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3812
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 365.448 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.383 0.101 
 2 mu         0.1   0.2 0.446 0.109 
 3 mu         0.1   0.3 0.471 0.103 
 4 mu         0.1   0.4 0.523 0.126 
 5 mu         0.1   0.5 0.562 0.123 
 6 mu         0.2   0.1 0.460 0.0754
 7 mu         0.2   0.2 0.546 0.0799
 8 mu         0.2   0.3 0.590 0.0727
 9 mu         0.2   0.4 0.653 0.0908
10 mu         0.2   0.5 0.707 0.0873
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.800        0.187 0.000000616      8.05
 2 mu         0.2      1.13         1.09  0.0213           4.08
 3 mu         0.3      1.06         0.985 0.269            3.14
 4 mu         0.4      1.00         0.976 0.395            1.95
 5 mu         0.5      1.00         0.979 0.649            1.59
 6 mu         0.6      0.996        1.00  0.655            1.46
 7 mu         0.7      0.966        0.946 0.594            1.30
 8 mu         0.8      0.970        0.961 0.581            1.47
 9 mu         0.9      1.00         1.01  0.409            2.62
10 mu_1       0.1      0.844        0.293 0.00000180       7.48
11 mu_1       0.2      1.14         1.10  0.0368           3.93
12 mu_1       0.3      1.05         0.948 0.291            3.05
13 mu_1       0.4      1.00         0.974 0.414            2.00
14 mu_1       0.5      1.00         0.996 0.665            1.55
15 mu_1       0.6      0.995        1.00  0.664            1.43
16 mu_1       0.7      0.965        0.946 0.586            1.30
17 mu_1       0.8      0.970        0.965 0.578            1.47
18 mu_1       0.9      1.00         1.02  0.406            2.65
19 mu_0       0.1      0.795        0.174 0.000000485      8.22
20 mu_0       0.2      1.13         1.08  0.0175           4.12
21 mu_0       0.3      1.07         1.01  0.259            3.17
22 mu_0       0.4      1.00         0.962 0.382            1.92
23 mu_0       0.5      1.00         0.974 0.632            1.64
24 mu_0       0.6      0.997        1.00  0.643            1.49
25 mu_0       0.7      0.968        0.949 0.611            1.32
26 mu_0       0.8      0.968        0.969 0.591            1.46
27 mu_0       0.9      0.996        0.980 0.436            2.39
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0643     2.77e-28  6.20e-74      5.64
 2 mu         0.2     1.26       1.83e-15  5.91e-48     56.1 
 3 mu         0.3     1.58       1.30e- 8  3.66e-34     29.6 
 4 mu         0.4     1.62       3.55e- 4  9.61e-25     20.6 
 5 mu         0.5     1.74       1.13e- 2  1.61e-17     28.9 
 6 mu         0.6     1.16       4.39e- 2  1.03e-11     16.4 
 7 mu         0.7     0.890      1.16e- 1  1.80e-18     12.4 
 8 mu         0.8     1.13       4.36e- 2  2.75e-30     11.1 
 9 mu         0.9     1.19       1.81e- 6  1.23e-51     16.7 
10 mu_1       0.1     0.122      1.91e-27  5.57e-73     10.5 
11 mu_1       0.2     1.35       6.03e-15  2.65e-47     52.1 
12 mu_1       0.3     1.58       2.81e- 8  1.17e-33     30.4 
13 mu_1       0.4     1.64       5.76e- 4  2.31e-24     23.8 
14 mu_1       0.5     1.73       1.21e- 2  3.10e-17     26.6 
15 mu_1       0.6     1.13       4.42e- 2  1.66e-11     16.1 
16 mu_1       0.7     0.888      1.22e- 1  6.23e-19     11.5 
17 mu_1       0.8     1.14       3.50e- 2  8.35e-31     11.3 
18 mu_1       0.9     1.18       1.36e- 6  3.32e-52     16.7 
19 mu_0       0.1     0.0579     9.56e-29  7.03e-75      5.10
20 mu_0       0.2     1.23       7.76e-16  7.07e-49     57.1 
21 mu_0       0.3     1.58       6.59e- 9  1.96e-35     29.3 
22 mu_0       0.4     1.61       2.07e- 4  6.01e-26     18.6 
23 mu_0       0.5     1.76       8.69e- 3  1.21e-18     31.1 
24 mu_0       0.6     1.21       2.91e- 2  9.67e-13     16.9 
25 mu_0       0.7     0.894      8.64e- 2  4.54e-18     14.3 
26 mu_0       0.8     1.09       7.84e- 2  1.04e-29     10.1 
27 mu_0       0.9     1.31       5.86e- 6  9.33e-51     17.1 
[1] "Total run time was 368.828 seconds"
