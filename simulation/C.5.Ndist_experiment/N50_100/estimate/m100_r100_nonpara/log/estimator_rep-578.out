
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7625"
[1] "cluster size dist'n: "

 50  51  52  54  55  57  58  59  60  62  63  64  65  66  67  68  69  70  71  72 
  3   3   3   2   2   1   1   1   1   1   2   2   3   1   3   3   2   3   4   5 
 73  74  75  76  77  78  79  81  82  83  86  87  88  89  90  91  92  93  94  95 
  4   1   2   1   1   3   2   2   1   3   1   1   1   4   2   2   3   1   1   6 
 96  97  99 100 
  3   3   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03348 0.34176 0.59836 1.00000 6.55688 
[1] "event indicator table: "

   0    1 
4599 3026 
[1] "treatment indicator table: "

   0    1 
2809 4816 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3898
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3727
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 375.757 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.362 0.0439
 2 mu         0.1   0.2 0.467 0.0752
 3 mu         0.1   0.3 0.541 0.0738
 4 mu         0.1   0.4 0.621 0.0935
 5 mu         0.1   0.5 0.645 0.0859
 6 mu         0.2   0.1 0.322 0.0299
 7 mu         0.2   0.2 0.417 0.0497
 8 mu         0.2   0.3 0.486 0.0490
 9 mu         0.2   0.4 0.543 0.0626
10 mu         0.2   0.5 0.581 0.0576
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.964        0.687 0.000000214      4.25
 2 mu         0.2      1.01         0.887 0.00746          2.75
 3 mu         0.3      1.04         0.977 0.325            2.07
 4 mu         0.4      0.979        0.978 0.426            1.78
 5 mu         0.5      0.955        0.925 0.457            1.62
 6 mu         0.6      0.976        0.961 0.538            1.39
 7 mu         0.7      1.02         1.01  0.569            1.53
 8 mu         0.8      1.03         1.02  0.483            1.75
 9 mu         0.9      0.987        0.962 0.425            1.84
10 mu_1       0.1      0.952        0.810 0.000000722      3.64
11 mu_1       0.2      1.02         0.943 0.0129           2.90
12 mu_1       0.3      1.04         0.983 0.398            1.96
13 mu_1       0.4      0.977        0.973 0.426            1.79
14 mu_1       0.5      0.953        0.914 0.453            1.64
15 mu_1       0.6      0.980        0.972 0.531            1.40
16 mu_1       0.7      1.02         1.01  0.572            1.54
17 mu_1       0.8      1.02         1.02  0.488            1.74
18 mu_1       0.9      0.986        0.957 0.426            1.85
19 mu_0       0.1      0.965        0.712 0.000000157      4.34
20 mu_0       0.2      1.01         0.876 0.00610          2.76
21 mu_0       0.3      1.04         0.981 0.294            2.11
22 mu_0       0.4      0.981        0.983 0.425            1.77
23 mu_0       0.5      0.957        0.941 0.462            1.59
24 mu_0       0.6      0.970        0.960 0.549            1.40
25 mu_0       0.7      1.02         1.01  0.564            1.49
26 mu_0       0.8      1.03         1.03  0.467            1.76
27 mu_0       0.9      0.993        0.998 0.417            1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.150     3.43e-28  1.99e-83     10.6 
 2 mu         0.2      0.719     1.17e-15  3.07e-56     28.1 
 3 mu         0.3      0.806     5.97e- 8  1.91e-40     14.7 
 4 mu         0.4      1.03      3.25e- 4  2.41e-29     13.2 
 5 mu         0.5      0.780     5.06e- 2  7.65e-21      9.08
 6 mu         0.6      1.14      3.60e- 2  3.33e-16     14.9 
 7 mu         0.7      1.10      2.55e- 1  3.41e-25      8.19
 8 mu         0.8      1.36      2.21e- 2  2.06e-38     10.4 
 9 mu         0.9      0.738     7.39e- 7  9.99e-62     12.0 
10 mu_1       0.1      0.242     2.49e-27  1.91e-82     16.7 
11 mu_1       0.2      0.699     3.68e-15  1.47e-55     22.2 
12 mu_1       0.3      0.840     1.26e- 7  6.09e-40     16.8 
13 mu_1       0.4      1.02      5.53e- 4  5.77e-29     14.0 
14 mu_1       0.5      0.779     6.13e- 2  1.47e-20      9.80
15 mu_1       0.6      1.16      3.17e- 2  8.77e-17     15.2 
16 mu_1       0.7      1.10      2.66e- 1  7.68e-26      7.82
17 mu_1       0.8      1.35      1.74e- 2  4.07e-39     10.3 
18 mu_1       0.9      0.748     5.10e- 7  1.75e-62     12.7 
19 mu_0       0.1      0.139     1.04e-28  9.31e-85      9.92
20 mu_0       0.2      0.724     5.37e-16  1.62e-57     29.6 
21 mu_0       0.3      0.792     3.13e- 8  1.15e-41     13.7 
22 mu_0       0.4      1.03      1.73e- 4  1.69e-30     12.7 
23 mu_0       0.5      0.781     3.40e- 2  6.45e-22      8.37
24 mu_0       0.6      1.10      3.22e- 2  7.02e-16     14.5 
25 mu_0       0.7      1.11      2.03e- 1  9.56e-25      9.37
26 mu_0       0.8      1.40      3.11e- 2  8.69e-38     10.9 
27 mu_0       0.9      0.652     2.80e- 6  8.41e-61      9.94
[1] "Total run time was 378.96 seconds"
