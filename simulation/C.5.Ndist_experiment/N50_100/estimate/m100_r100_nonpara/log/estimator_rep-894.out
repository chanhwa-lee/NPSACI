
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7621"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  58  59  61  62  63  64  65  66  67  68  69  70  71  72 
  1   1   5   4   1   1   3   1   3   2   2   2   2   4   4   1   2   2   4   1 
 73  74  75  76  78  79  80  81  83  84  85  87  88  89  90  91  92  93  94  95 
  2   1   1   1   3   2   1   1   4   2   3   1   2   4   1   4   3   2   1   5 
 96  98  99 100 
  1   2   5   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02837 0.32341 0.59413 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4494 3127 
[1] "treatment indicator table: "

   0    1 
3041 4580 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3755
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3866
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 767.572 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.463 0.0774
 2 mu         0.1   0.2 0.576 0.0939
 3 mu         0.1   0.3 0.626 0.0953
 4 mu         0.1   0.4 0.694 0.109 
 5 mu         0.1   0.5 0.695 0.0984
 6 mu         0.2   0.1 0.394 0.0455
 7 mu         0.2   0.2 0.496 0.0611
 8 mu         0.2   0.3 0.556 0.0662
 9 mu         0.2   0.4 0.607 0.0640
10 mu         0.2   0.5 0.623 0.0553
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.967        0.384 0.00000000604      6.25
 2 mu         0.2      0.987        0.908 0.00609            2.51
 3 mu         0.3      1.00         0.963 0.335              2.06
 4 mu         0.4      0.995        0.965 0.664              1.87
 5 mu         0.5      0.994        1.01  0.544              1.51
 6 mu         0.6      0.991        1.00  0.571              1.49
 7 mu         0.7      0.998        0.998 0.681              1.46
 8 mu         0.8      0.997        1.00  0.497              1.92
 9 mu         0.9      0.931        0.915 0.256              2.13
10 mu_1       0.1      0.929        0.501 0.0000000190       3.89
11 mu_1       0.2      0.995        0.939 0.00979            2.64
12 mu_1       0.3      1.00         0.971 0.366              2.06
13 mu_1       0.4      0.994        0.969 0.659              1.84
14 mu_1       0.5      0.995        1.01  0.560              1.52
15 mu_1       0.6      0.990        1.01  0.574              1.52
16 mu_1       0.7      1.00         1.00  0.667              1.46
17 mu_1       0.8      0.995        0.995 0.490              1.94
18 mu_1       0.9      0.929        0.907 0.247              2.10
19 mu_0       0.1      0.972        0.363 0.00000000460      6.66
20 mu_0       0.2      0.985        0.918 0.00516            2.48
21 mu_0       0.3      1.00         0.958 0.322              2.06
22 mu_0       0.4      0.995        0.971 0.665              1.89
23 mu_0       0.5      0.993        1.00  0.528              1.49
24 mu_0       0.6      0.992        0.994 0.567              1.44
25 mu_0       0.7      0.993        0.998 0.655              1.46
26 mu_0       0.8      1.00         1.03  0.524              1.84
27 mu_0       0.9      0.946        0.906 0.304              2.35
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0284     2.01e-24  9.20e-75      1.35
 2 mu         0.2     1.14       2.95e-12  3.52e-49     44.6 
 3 mu         0.3     1.55       2.68e- 6  1.92e-34     39.7 
 4 mu         0.4     0.961      7.73e- 3  3.63e-24      8.89
 5 mu         0.5     1.29       8.77e- 2  2.19e-16     10.9 
 6 mu         0.6     1.13       2.29e- 1  8.15e-12      7.25
 7 mu         0.7     0.881      1.19e- 1  6.23e-19      8.04
 8 mu         0.8     0.813      1.91e- 3  1.65e-29      8.71
 9 mu         0.9     1.47       7.25e-10  2.62e-48     26.5 
10 mu_1       0.1     0.0577     1.15e-23  8.43e-74      2.53
11 mu_1       0.2     1.29       8.17e-12  1.63e-48     47.1 
12 mu_1       0.3     1.46       5.31e- 6  5.93e-34     37.3 
13 mu_1       0.4     0.969      1.12e- 2  8.40e-24      9.91
14 mu_1       0.5     1.32       8.67e- 2  4.05e-16     10.7 
15 mu_1       0.6     1.10       2.64e- 1  2.55e-12      6.59
16 mu_1       0.7     0.878      1.18e- 1  1.67e-19      7.81
17 mu_1       0.8     0.814      1.47e- 3  3.87e-30      8.93
18 mu_1       0.9     1.48       4.40e-10  5.46e-49     26.7 
19 mu_0       0.1     0.0251     9.54e-25  8.61e-76      1.22
20 mu_0       0.2     1.10       1.65e-12  3.31e-50     43.9 
21 mu_0       0.3     1.58       1.56e- 6  2.07e-35     40.7 
22 mu_0       0.4     0.955      6.55e- 3  4.56e-25      8.82
23 mu_0       0.5     1.26       8.56e- 2  3.30e-17     11.2 
24 mu_0       0.6     1.17       2.47e- 1  1.66e-11      8.24
25 mu_0       0.7     0.887      1.64e- 1  1.69e-18      8.58
26 mu_0       0.8     0.809      3.65e- 3  6.71e-29      7.82
27 mu_0       0.9     1.37       3.29e- 9  2.13e-47     25.3 
[1] "Total run time was 772.217 seconds"
