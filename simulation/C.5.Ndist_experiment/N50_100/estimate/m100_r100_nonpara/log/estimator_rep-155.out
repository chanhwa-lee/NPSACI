
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7580"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  68  69  70  71  72 
  2   2   1   2   2   5   1   3   2   3   3   1   4   1   2   2   2   2   2   2 
 73  75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  2   4   3   1   2   1   1   2   1   2   2   1   3   2   3   1   4   3   4   3 
 95  97  98  99 100 
  3   2   1   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0155  0.2913  0.5687  0.9776  5.9918 
[1] "event indicator table: "

   0    1 
4450 3130 
[1] "treatment indicator table: "

   0    1 
3132 4448 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3734
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3846
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.174 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.523 0.0533
 2 mu         0.1   0.2 0.652 0.0571
 3 mu         0.1   0.3 0.735 0.0586
 4 mu         0.1   0.4 0.758 0.0575
 5 mu         0.1   0.5 0.797 0.0589
 6 mu         0.2   0.1 0.426 0.0492
 7 mu         0.2   0.2 0.505 0.0442
 8 mu         0.2   0.3 0.591 0.0492
 9 mu         0.2   0.4 0.617 0.0442
10 mu         0.2   0.5 0.646 0.0431
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.17         1.10     0.0211      2.98
 2 mu         0.2      0.999        0.941    0.300       2.49
 3 mu         0.3      0.951        0.940    0.492       1.53
 4 mu         0.4      0.999        0.977    0.634       1.54
 5 mu         0.5      1.00         1.01     0.618       1.45
 6 mu         0.6      1.01         0.992    0.664       1.56
 7 mu         0.7      1.02         1.00     0.701       1.38
 8 mu         0.8      1.01         1.00     0.551       1.49
 9 mu         0.9      0.960        0.934    0.270       1.90
10 mu_1       0.1      1.14         1.18     0.0108      2.88
11 mu_1       0.2      0.991        0.965    0.391       2.44
12 mu_1       0.3      0.952        0.944    0.507       1.56
13 mu_1       0.4      1.00         0.973    0.635       1.56
14 mu_1       0.5      1.00         1.02     0.625       1.44
15 mu_1       0.6      1.01         0.992    0.684       1.56
16 mu_1       0.7      1.01         1.01     0.685       1.38
17 mu_1       0.8      1.01         1.00     0.547       1.52
18 mu_1       0.9      0.959        0.926    0.257       1.91
19 mu_0       0.1      1.17         1.10     0.0192      3.02
20 mu_0       0.2      1.00         0.951    0.277       2.50
21 mu_0       0.3      0.951        0.945    0.468       1.51
22 mu_0       0.4      0.998        0.977    0.633       1.53
23 mu_0       0.5      1.00         1.02     0.612       1.47
24 mu_0       0.6      1.00         0.994    0.635       1.57
25 mu_0       0.7      1.02         1.01     0.738       1.41
26 mu_0       0.8      1.00         0.993    0.564       1.40
27 mu_0       0.9      0.968        0.945    0.322       1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.805     3.61e-26  5.52e-72     40.0 
 2 mu         0.2      1.17      2.71e-14  4.16e-46     17.4 
 3 mu         0.3      0.917     2.82e- 7  9.08e-32     10.5 
 4 mu         0.4      0.769     4.56e- 4  4.65e-22      8.36
 5 mu         0.5      0.934     3.58e- 2  9.57e-15     10.4 
 6 mu         0.6      1.07      1.23e- 1  1.31e-16      6.60
 7 mu         0.7      1.05      1.77e- 1  5.40e-25      5.45
 8 mu         0.8      1.16      3.60e- 3  3.28e-37      8.47
 9 mu         0.9      1.21      9.58e-10  1.27e-58     21.0 
10 mu_1       0.1      1.09      2.21e-25  4.86e-71     51.4 
11 mu_1       0.2      1.12      8.19e-14  1.83e-45     17.3 
12 mu_1       0.3      0.903     5.75e- 7  2.76e-31     10.7 
13 mu_1       0.4      0.765     5.11e- 4  1.06e-21      8.22
14 mu_1       0.5      0.945     2.92e- 2  1.74e-14     10.2 
15 mu_1       0.6      1.08      1.49e- 1  2.85e-17      6.80
16 mu_1       0.7      1.06      1.56e- 1  1.01e-25      5.46
17 mu_1       0.8      1.17      2.72e- 3  5.37e-38      8.69
18 mu_1       0.9      1.20      6.79e-10  1.84e-59     21.2 
19 mu_0       0.1      0.773     1.55e-26  7.36e-73     38.7 
20 mu_0       0.2      1.18      1.35e-14  6.23e-47     17.6 
21 mu_0       0.3      0.923     1.57e- 7  1.15e-32     10.5 
22 mu_0       0.4      0.772     3.83e- 4  6.89e-23      8.46
23 mu_0       0.5      0.923     3.14e- 2  1.70e-15     10.6 
24 mu_0       0.6      1.06      9.81e- 2  2.84e-16      6.30
25 mu_0       0.7      1.05      1.69e- 1  1.56e-24      5.41
26 mu_0       0.8      1.13      7.13e- 3  1.42e-36      7.68
27 mu_0       0.9      1.29      3.47e- 9  1.10e-57     22.0 
[1] "Total run time was 424.979 seconds"
