
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7420"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  3   3   2   1   3   1   2   1   1   2   4   2   2   3   3   1   1   2   4   3 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91 
  4   1   2   1   2   2   3   1   1   5   3   2   2   4   2   3   3   1   1   1 
 92  93  94  95  96  97  98  99 100 
  1   2   1   2   1   1   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04444 0.35857 0.62150 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4486 2934 
[1] "treatment indicator table: "

   0    1 
2680 4740 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3687
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3733
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 461.867 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.265 0.0987
 2 mu         0.1   0.2 0.345 0.118 
 3 mu         0.1   0.3 0.414 0.146 
 4 mu         0.1   0.4 0.420 0.138 
 5 mu         0.1   0.5 0.434 0.129 
 6 mu         0.2   0.1 0.259 0.0569
 7 mu         0.2   0.2 0.339 0.0672
 8 mu         0.2   0.3 0.400 0.0834
 9 mu         0.2   0.4 0.417 0.0778
10 mu         0.2   0.5 0.444 0.0704
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.662       0.0284  4.73e-11     10.4 
 2 mu         0.2      0.852       0.661   7.08e- 4      3.89
 3 mu         0.3      1.02        0.984   1.73e- 1      2.56
 4 mu         0.4      1.03        1.03    4.28e- 1      1.76
 5 mu         0.5      0.999       0.986   6.23e- 1      1.90
 6 mu         0.6      0.991       0.989   7.25e- 1      1.38
 7 mu         0.7      1.00        1.01    6.74e- 1      1.53
 8 mu         0.8      1.02        0.989   5.23e- 1      2.26
 9 mu         0.9      1.01        0.949   1.77e- 1      2.60
10 mu_1       0.1      0.649       0.0563  1.74e-10      9.70
11 mu_1       0.2      0.879       0.688   1.31e- 3      3.99
12 mu_1       0.3      1.03        1.00    2.06e- 1      2.56
13 mu_1       0.4      1.02        1.02    4.59e- 1      1.66
14 mu_1       0.5      0.998       0.986   6.30e- 1      1.85
15 mu_1       0.6      0.992       0.988   7.35e- 1      1.41
16 mu_1       0.7      1.00        1.01    6.70e- 1      1.52
17 mu_1       0.8      1.02        0.983   5.14e- 1      2.28
18 mu_1       0.9      1.01        0.951   1.67e- 1      2.67
19 mu_0       0.1      0.664       0.0253  3.32e-11     10.7 
20 mu_0       0.2      0.846       0.654   5.57e- 4      3.87
21 mu_0       0.3      1.01        0.989   1.59e- 1      2.56
22 mu_0       0.4      1.03        1.04    4.07e- 1      1.82
23 mu_0       0.5      0.999       0.992   6.17e- 1      1.96
24 mu_0       0.6      0.991       0.988   7.09e- 1      1.37
25 mu_0       0.7      0.998       0.990   6.83e- 1      1.54
26 mu_0       0.8      1.02        0.978   5.60e- 1      2.19
27 mu_0       0.9      1.01        0.910   2.44e- 1      2.88
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.167     4.69e-29  4.88e-68     16.4 
 2 mu         0.2      1.12      7.56e-16  2.30e-43     64.6 
 3 mu         0.3      1.00      7.20e- 9  2.86e-29     22.3 
 4 mu         0.4      0.554     1.18e- 4  1.41e-19      7.14
 5 mu         0.5      0.776     3.64e- 2  2.18e-12     12.4 
 6 mu         0.6      1.03      3.16e- 1  5.96e-11      6.10
 7 mu         0.7      1.38      5.21e- 1  1.61e-17     15.6 
 8 mu         0.8      1.92      6.02e- 2  9.53e-28     38.7 
 9 mu         0.9      2.39      6.38e- 7  3.83e-46     58.4 
10 mu_1       0.1      0.284     3.61e-28  4.27e-67     27.8 
11 mu_1       0.2      1.12      2.46e-15  1.00e-42     54.6 
12 mu_1       0.3      0.981     1.59e- 8  8.35e-29     22.3 
13 mu_1       0.4      0.533     1.98e- 4  3.08e-19      6.77
14 mu_1       0.5      0.797     4.56e- 2  3.82e-12     12.8 
15 mu_1       0.6      1.05      3.63e- 1  1.68e-11      6.31
16 mu_1       0.7      1.37      4.43e- 1  3.89e-18     15.7 
17 mu_1       0.8      1.96      5.05e- 2  2.50e-28     41.6 
18 mu_1       0.9      2.36      4.81e- 7  8.92e-47     55.8 
19 mu_0       0.1      0.154     1.25e-29  6.78e-69     15.2 
20 mu_0       0.2      1.12      3.31e-16  3.59e-44     67.1 
21 mu_0       0.3      1.01      3.29e- 9  5.11e-30     22.7 
22 mu_0       0.4      0.567     6.43e- 5  2.93e-20      7.39
23 mu_0       0.5      0.754     2.50e- 2  5.45e-13     12.0 
24 mu_0       0.6      0.983     3.41e- 1  1.24e-10      5.81
25 mu_0       0.7      1.39      5.20e- 1  4.46e-17     15.3 
26 mu_0       0.8      1.75      9.91e- 2  3.77e-27     27.0 
27 mu_0       0.9      2.60      2.05e- 6  3.02e-45     81.6 
[1] "Total run time was 465.688 seconds"
