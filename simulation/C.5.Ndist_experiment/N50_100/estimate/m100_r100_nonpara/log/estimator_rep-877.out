
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7340"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  63  64  65  66  67  69  71  74 
  2   1   2   4   5   4   4   1   2   2   1   2   1   3   2   1   4   2   2   3 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  3   2   1   3   3   4   2   2   2   4   2   3   2   1   2   3   3   2   1   1 
 95  96  98 100 
  1   1   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02402 0.32342 0.59068 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4381 2959 
[1] "treatment indicator table: "

   0    1 
2763 4577 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3625
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3715
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 385.636 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.639 0.142 
 2 mu         0.1   0.2 0.726 0.156 
 3 mu         0.1   0.3 0.841 0.178 
 4 mu         0.1   0.4 0.940 0.204 
 5 mu         0.1   0.5 1.01  0.214 
 6 mu         0.2   0.1 0.439 0.0643
 7 mu         0.2   0.2 0.497 0.0480
 8 mu         0.2   0.3 0.590 0.0707
 9 mu         0.2   0.4 0.675 0.108 
10 mu         0.2   0.5 0.730 0.117 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.41         0.409 0.000000826     25.0 
 2 mu         0.2      1.08         0.882 0.0356           3.29
 3 mu         0.3      1.13         1.10  0.193            4.71
 4 mu         0.4      1.06         1.05  0.318            2.20
 5 mu         0.5      1.01         1.02  0.593            1.78
 6 mu         0.6      0.969        0.970 0.565            1.36
 7 mu         0.7      0.989        0.979 0.604            1.43
 8 mu         0.8      0.987        0.968 0.550            1.59
 9 mu         0.9      1.06         1.05  0.0674           2.13
10 mu_1       0.1      1.31         0.583 0.00000250      13.7 
11 mu_1       0.2      1.07         0.969 0.0550           3.44
12 mu_1       0.3      1.13         1.11  0.205            4.34
13 mu_1       0.4      1.06         1.04  0.293            2.27
14 mu_1       0.5      1.01         1.00  0.574            1.70
15 mu_1       0.6      0.968        0.971 0.579            1.36
16 mu_1       0.7      0.989        0.972 0.596            1.44
17 mu_1       0.8      0.987        0.967 0.554            1.62
18 mu_1       0.9      1.06         1.05  0.0637           2.14
19 mu_0       0.1      1.42         0.387 0.000000640     26.3 
20 mu_0       0.2      1.08         0.877 0.0307           3.30
21 mu_0       0.3      1.13         1.10  0.187            4.86
22 mu_0       0.4      1.06         1.05  0.334            2.15
23 mu_0       0.5      1.01         1.01  0.574            1.87
24 mu_0       0.6      0.969        0.957 0.545            1.36
25 mu_0       0.7      0.989        0.972 0.624            1.46
26 mu_0       0.8      0.985        0.957 0.532            1.52
27 mu_0       0.9      1.05         1.05  0.100            2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.604     1.46e-27  3.16e-68     59.4 
 2 mu         0.2      1.05      4.10e-15  5.41e-45     59.1 
 3 mu         0.3      0.970     9.28e- 9  1.32e-31     16.1 
 4 mu         0.4      1.26      1.08e- 4  2.91e-22     19.0 
 5 mu         0.5      1.30      2.17e- 2  3.53e-15     16.5 
 6 mu         0.6      1.42      2.08e- 1  1.59e-12     28.1 
 7 mu         0.7      1.65      1.77e- 1  3.93e-20     16.5 
 8 mu         0.8      1.17      9.57e- 2  1.79e-31     10.5 
 9 mu         0.9      1.47      7.77e- 7  1.12e-51     45.4 
10 mu_1       0.1      0.883     9.44e-27  2.71e-67     86.2 
11 mu_1       0.2      0.967     1.48e-14  2.51e-44     42.9 
12 mu_1       0.3      0.980     2.06e- 8  4.09e-31     14.5 
13 mu_1       0.4      1.30      1.79e- 4  6.76e-22     18.7 
14 mu_1       0.5      1.28      2.95e- 2  6.56e-15     14.9 
15 mu_1       0.6      1.44      1.70e- 1  5.18e-13     27.2 
16 mu_1       0.7      1.63      1.83e- 1  1.10e-20     16.3 
17 mu_1       0.8      1.18      8.40e- 2  4.38e-32     11.3 
18 mu_1       0.9      1.45      5.29e- 7  2.44e-52     45.9 
19 mu_0       0.1      0.573     5.74e-28  2.88e-69     56.4 
20 mu_0       0.2      1.08      1.42e-15  4.83e-46     63.2 
21 mu_0       0.3      0.966     4.42e- 9  1.35e-32     16.8 
22 mu_0       0.4      1.23      5.99e- 5  3.47e-23     19.3 
23 mu_0       0.5      1.31      1.70e- 2  5.05e-16     18.0 
24 mu_0       0.6      1.39      1.78e- 1  3.20e-12     29.5 
25 mu_0       0.7      1.69      1.63e- 1  1.05e-19     17.1 
26 mu_0       0.8      1.13      8.72e- 2  7.21e-31      9.61
27 mu_0       0.9      1.60      3.01e- 6  9.05e-51     41.3 
[1] "Total run time was 388.85 seconds"
