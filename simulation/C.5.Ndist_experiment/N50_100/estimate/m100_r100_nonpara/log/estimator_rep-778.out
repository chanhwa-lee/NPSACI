
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7406"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  59  60  61  63  64  65  66  68  70  71  72  73  74  75 
  3   4   4   3   4   3   2   1   3   2   2   2   3   1   1   3   1   1   3   3 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95 
  3   4   1   3   1   3   3   1   3   2   2   4   1   2   4   1   1   1   1   2 
 96  97  98  99 100 
  2   3   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03462 0.34778 0.61237 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4310 3096 
[1] "treatment indicator table: "

   0    1 
2902 4504 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3687
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 461.677 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.520 0.109 
 2 mu         0.1   0.2 0.568 0.0978
 3 mu         0.1   0.3 0.605 0.0840
 4 mu         0.1   0.4 0.639 0.0843
 5 mu         0.1   0.5 0.689 0.0924
 6 mu         0.2   0.1 0.418 0.0591
 7 mu         0.2   0.2 0.485 0.0526
 8 mu         0.2   0.3 0.543 0.0466
 9 mu         0.2   0.4 0.577 0.0471
10 mu         0.2   0.5 0.626 0.0488
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.998        0.835  0.000925      4.62
 2 mu         0.2      1.05         1.05   0.188         2.09
 3 mu         0.3      1.05         1.05   0.290         1.76
 4 mu         0.4      0.992        0.990  0.550         1.50
 5 mu         0.5      1.01         0.978  0.629         1.55
 6 mu         0.6      1.01         0.979  0.630         1.45
 7 mu         0.7      0.974        0.975  0.602         1.39
 8 mu         0.8      0.978        0.967  0.582         1.41
 9 mu         0.9      0.983        0.967  0.352         2.01
10 mu_1       0.1      0.986        0.864  0.00212       4.40
11 mu_1       0.2      1.06         1.06   0.163         2.07
12 mu_1       0.3      1.04         1.03   0.339         1.67
13 mu_1       0.4      0.992        0.980  0.576         1.49
14 mu_1       0.5      1.01         0.986  0.625         1.55
15 mu_1       0.6      1.01         0.982  0.639         1.45
16 mu_1       0.7      0.973        0.973  0.595         1.40
17 mu_1       0.8      0.980        0.973  0.578         1.43
18 mu_1       0.9      0.984        0.965  0.350         2.03
19 mu_0       0.1      0.999        0.833  0.000793      4.64
20 mu_0       0.2      1.05         1.05   0.173         2.09
21 mu_0       0.3      1.05         1.06   0.269         1.82
22 mu_0       0.4      0.992        0.983  0.533         1.51
23 mu_0       0.5      1.01         0.977  0.616         1.55
24 mu_0       0.6      1.01         0.979  0.617         1.45
25 mu_0       0.7      0.977        0.978  0.594         1.38
26 mu_0       0.8      0.971        0.946  0.597         1.45
27 mu_0       0.9      0.980        0.956  0.373         1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.77      5.71e-26  5.50e-68    167.  
 2 mu         0.2      1.31      2.57e-13  1.46e-44     44.7 
 3 mu         0.3      0.897     4.82e- 7  4.66e-31     10.7 
 4 mu         0.4      0.878     2.51e- 3  1.18e-21     10.8 
 5 mu         0.5      0.905     7.28e- 2  1.49e-14      7.26
 6 mu         0.6      1.23      3.25e- 1  2.06e-18      4.97
 7 mu         0.7      1.11      1.28e- 1  6.12e-27      6.26
 8 mu         0.8      1.11      1.12e- 2  3.27e-39      9.32
 9 mu         0.9      1.59      1.79e- 8  1.58e-60     39.4 
10 mu_1       0.1      1.66      3.21e-25  5.05e-67    148.  
11 mu_1       0.2      1.34      8.06e-13  6.69e-44     39.2 
12 mu_1       0.3      0.874     9.60e- 7  1.43e-30      8.56
13 mu_1       0.4      0.857     3.40e- 3  2.70e-21     10.3 
14 mu_1       0.5      0.931     9.10e- 2  2.73e-14      6.85
15 mu_1       0.6      1.23      3.31e- 1  3.04e-19      5.06
16 mu_1       0.7      1.11      1.46e- 1  7.74e-28      6.60
17 mu_1       0.8      1.12      8.50e- 3  3.62e-40      9.73
18 mu_1       0.9      1.59      1.32e- 8  1.55e-61     39.4 
19 mu_0       0.1      1.78      2.78e-26  4.97e-69    169.  
20 mu_0       0.2      1.31      1.20e-13  1.48e-45     46.0 
21 mu_0       0.3      0.907     2.50e- 7  5.42e-32     11.6 
22 mu_0       0.4      0.892     1.62e- 3  1.59e-22     11.1 
23 mu_0       0.5      0.879     5.35e- 2  2.42e-15      7.67
24 mu_0       0.6      1.23      2.33e- 1  4.69e-18      4.85
25 mu_0       0.7      1.13      1.52e- 1  1.86e-26      5.92
26 mu_0       0.8      1.05      2.19e- 2  1.49e-38      8.71
27 mu_0       0.9      1.63      6.04e- 8  1.44e-59     38.8 
[1] "Total run time was 465.129 seconds"
