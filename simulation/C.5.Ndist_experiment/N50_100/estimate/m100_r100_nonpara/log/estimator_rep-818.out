
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7349"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  61  62  63  64  65  66  68  70  71  72  73 
  2   1   3   4   2   3   3   3   3   1   3   3   1   4   4   3   6   3   1   1 
 74  75  76  77  79  80  82  83  84  85  86  87  89  90  91  92  93  94  95  96 
  1   5   3   2   3   1   1   1   2   1   1   2   1   3   1   2   1   2   1   3 
 97  98  99 100 
  1   2   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05546 0.40220 0.66400 1.00000 9.00000 
[1] "event indicator table: "

   0    1 
4465 2884 
[1] "treatment indicator table: "

   0    1 
2440 4909 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3761
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3588
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 559.679 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.414 0.119 
 2 mu         0.1   0.2 0.428 0.101 
 3 mu         0.1   0.3 0.461 0.106 
 4 mu         0.1   0.4 0.505 0.116 
 5 mu         0.1   0.5 0.526 0.122 
 6 mu         0.2   0.1 0.272 0.0637
 7 mu         0.2   0.2 0.335 0.0340
 8 mu         0.2   0.3 0.380 0.0365
 9 mu         0.2   0.4 0.396 0.0497
10 mu         0.2   0.5 0.434 0.0447
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.883       0.0890 0.00000000873     23.2 
 2 mu         0.2      0.856       0.771  0.00349            2.92
 3 mu         0.3      0.981       0.938  0.218              2.91
 4 mu         0.4      1.01        0.973  0.445              2.10
 5 mu         0.5      1.02        0.979  0.489              1.70
 6 mu         0.6      0.999       0.987  0.549              1.45
 7 mu         0.7      1.02        1.02   0.619              1.52
 8 mu         0.8      1.02        1.03   0.591              1.55
 9 mu         0.9      0.986       1.01   0.326              1.93
10 mu_1       0.1      0.839       0.146  0.0000000263      20.8 
11 mu_1       0.2      0.866       0.847  0.00542            2.65
12 mu_1       0.3      0.992       0.952  0.252              2.76
13 mu_1       0.4      1.01        0.970  0.430              2.12
14 mu_1       0.5      1.02        0.991  0.511              1.69
15 mu_1       0.6      0.999       0.995  0.554              1.44
16 mu_1       0.7      1.02        1.02   0.622              1.53
17 mu_1       0.8      1.01        1.04   0.590              1.55
18 mu_1       0.9      0.985       1.00   0.327              1.96
19 mu_0       0.1      0.888       0.0827 0.00000000678     23.5 
20 mu_0       0.2      0.853       0.734  0.00301            3.15
21 mu_0       0.3      0.977       0.933  0.204              2.98
22 mu_0       0.4      1.01        0.990  0.455              2.09
23 mu_0       0.5      1.02        0.977  0.468              1.72
24 mu_0       0.6      0.998       0.986  0.543              1.47
25 mu_0       0.7      1.02        1.00   0.613              1.51
26 mu_0       0.8      1.02        1.04   0.594              1.59
27 mu_0       0.9      0.989       0.978  0.314              1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.61      1.88e-29  8.63e-82    147.  
 2 mu         0.2      1.66      2.07e-16  1.33e-54    136.  
 3 mu         0.3      0.555     1.12e- 8  3.66e-39     19.4 
 4 mu         0.4      1.04      1.75e- 4  2.60e-28     19.3 
 5 mu         0.5      1.66      3.44e- 2  5.29e-20     27.4 
 6 mu         0.6      1.52      2.11e- 1  3.77e-15     14.8 
 7 mu         0.7      1.24      1.50e- 1  6.42e-23     13.1 
 8 mu         0.8      1.07      7.94e- 2  3.40e-34      6.78
 9 mu         0.9      2.18      3.14e- 6  6.65e-54     28.3 
10 mu_1       0.1      2.00      1.24e-28  8.10e-81    175.  
11 mu_1       0.2      1.49      7.08e-16  6.35e-54    129.  
12 mu_1       0.3      0.550     2.32e- 8  1.17e-38     19.6 
13 mu_1       0.4      1.09      3.00e- 4  6.22e-28     20.2 
14 mu_1       0.5      1.67      3.70e- 2  1.01e-19     27.8 
15 mu_1       0.6      1.52      2.53e- 1  7.43e-16     16.0 
16 mu_1       0.7      1.22      1.17e- 1  1.09e-23     12.4 
17 mu_1       0.8      1.08      6.46e- 2  5.03e-35      6.74
18 mu_1       0.9      2.18      2.24e- 6  8.75e-55     28.9 
19 mu_0       0.1      1.57      7.09e-30  5.87e-83    144.  
20 mu_0       0.2      1.70      8.14e-17  7.13e-56    137.  
21 mu_0       0.3      0.557     6.08e- 9  2.25e-40     22.4 
22 mu_0       0.4      1.01      9.30e- 5  1.86e-29     18.7 
23 mu_0       0.5      1.64      2.49e- 2  4.55e-21     26.9 
24 mu_0       0.6      1.54      1.74e- 1  8.30e-15     13.1 
25 mu_0       0.7      1.29      1.62e- 1  1.89e-22     15.4 
26 mu_0       0.8      1.02      9.73e- 2  1.50e-33      6.95
27 mu_0       0.9      2.18      1.12e- 5  5.86e-53     22.8 
[1] "Total run time was 563.713 seconds"
