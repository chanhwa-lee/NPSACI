
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7661"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  69  70  71  72 
  3   3   2   2   2   1   1   1   2   2   2   1   2   4   2   3   1   3   1   3 
 73  74  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  94  95 
  4   2   1   2   1   4   3   2   1   2   2   2   5   5   2   3   2   3   2   1 
 96  98  99 100 
  2   2   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0426  0.3922  0.6365  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4567 3094 
[1] "treatment indicator table: "

   0    1 
2736 4925 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3766
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3895
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 396.79 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.120 0.0496
 2 mu         0.1   0.2 0.154 0.0653
 3 mu         0.1   0.3 0.172 0.0781
 4 mu         0.1   0.4 0.197 0.0843
 5 mu         0.1   0.5 0.186 0.0818
 6 mu         0.2   0.1 0.321 0.0767
 7 mu         0.2   0.2 0.418 0.102 
 8 mu         0.2   0.3 0.481 0.123 
 9 mu         0.2   0.4 0.543 0.136 
10 mu         0.2   0.5 0.569 0.147 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.267     0.000138  1.88e-15      8.11
 2 mu         0.2      1.02      0.297     2.33e- 6     25.0 
 3 mu         0.3      1.01      0.975     1.39e- 2      3.01
 4 mu         0.4      0.994     0.966     2.44e- 1      2.28
 5 mu         0.5      0.972     0.970     4.06e- 1      1.44
 6 mu         0.6      0.990     0.983     6.21e- 1      1.51
 7 mu         0.7      1.01      1.01      7.30e- 1      1.34
 8 mu         0.8      1.01      1.02      6.34e- 1      1.61
 9 mu         0.9      0.977     0.917     2.74e- 2      2.47
10 mu_1       0.1      0.400     0.000385  7.66e-15     13.2 
11 mu_1       0.2      1.01      0.386     4.77e- 6     20.3 
12 mu_1       0.3      1.01      0.951     1.93e- 2      2.90
13 mu_1       0.4      0.991     0.968     2.49e- 1      2.26
14 mu_1       0.5      0.973     0.983     4.01e- 1      1.39
15 mu_1       0.6      0.992     0.992     6.34e- 1      1.52
16 mu_1       0.7      1.01      1.00      7.19e- 1      1.34
17 mu_1       0.8      1.01      1.02      6.21e- 1      1.60
18 mu_1       0.9      0.976     0.916     2.52e- 2      2.59
19 mu_0       0.1      0.252     0.000113  1.23e-15      7.72
20 mu_0       0.2      1.02      0.271     1.72e- 6     26.1 
21 mu_0       0.3      1.01      0.965     1.16e- 2      3.06
22 mu_0       0.4      0.996     0.948     2.40e- 1      2.29
23 mu_0       0.5      0.972     0.962     4.11e- 1      1.52
24 mu_0       0.6      0.988     0.984     5.99e- 1      1.49
25 mu_0       0.7      1.01      1.01      7.23e- 1      1.33
26 mu_0       0.8      1.01      1.02      6.13e- 1      1.61
27 mu_0       0.9      0.986     0.912     4.70e- 2      2.26
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1  0.0000171     4.66e-29  3.74e-77   0.00165
 2 mu         0.2  0.0430        8.84e-16  1.81e-51   2.77   
 3 mu         0.3  0.630         2.55e- 8  1.48e-36  30.2    
 4 mu         0.4  1.29          7.70e- 4  4.43e-26  19.2    
 5 mu         0.5  1.42          1.32e- 1  4.61e-18  14.5    
 6 mu         0.6  1.30          5.82e- 1  1.22e-11   6.78   
 7 mu         0.7  1.03          3.92e- 1  2.53e-10   7.76   
 8 mu         0.8  1.41          3.29e- 2  2.49e-19  18.0    
 9 mu         0.9  2.88          2.20e- 7  1.88e-36 130.     
10 mu_1       0.1  0.0000540     2.87e-28  3.58e-76   0.00520
11 mu_1       0.2  0.0693        2.79e-15  8.64e-51   4.36   
12 mu_1       0.3  0.711         5.15e- 8  4.70e-36  33.5    
13 mu_1       0.4  1.32          1.26e- 3  1.06e-25  19.1    
14 mu_1       0.5  1.42          1.42e- 1  8.81e-18  14.2    
15 mu_1       0.6  1.29          6.61e- 1  1.94e-11   6.78   
16 mu_1       0.7  1.03          3.48e- 1  1.31e-10   7.86   
17 mu_1       0.8  1.42          2.57e- 2  1.13e-19  17.9    
18 mu_1       0.9  2.92          1.51e- 7  7.59e-37 130.     
19 mu_0       0.1  0.0000130     1.98e-29  1.85e-78   0.00126
20 mu_0       0.2  0.0364        3.93e-16  1.00e-52   2.37   
21 mu_0       0.3  0.595         1.43e- 8  9.37e-38  28.8    
22 mu_0       0.4  1.28          4.44e- 4  3.28e-27  21.3    
23 mu_0       0.5  1.42          1.26e- 1  4.10e-19  14.8    
24 mu_0       0.6  1.32          4.96e- 1  1.35e-12   7.03   
25 mu_0       0.7  1.03          4.98e- 1  5.37e-10   7.52   
26 mu_0       0.8  1.37          3.50e- 2  7.94e-19  18.4    
27 mu_0       0.9  2.54          8.43e- 7  1.19e-35 122.     
[1] "Total run time was 400.406 seconds"
