
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7331"
[1] "cluster size dist'n: "

 51  52  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  3   3   2   2   3   2   1   1   1   4   3   3   2   3   2   2   5   1   2   1 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  88  89  90  91  92 
  3   1   4   3   4   1   2   3   2   2   2   1   3   2   1   2   2   5   1   2 
 93  94  95  97  99 100 
  1   1   1   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02448 0.30807 0.58716 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4328 3003 
[1] "treatment indicator table: "

   0    1 
2786 4545 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3643
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3688
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 482.446 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.294 0.122 
 2 mu         0.1   0.2 0.395 0.167 
 3 mu         0.1   0.3 0.465 0.213 
 4 mu         0.1   0.4 0.464 0.206 
 5 mu         0.1   0.5 0.471 0.210 
 6 mu         0.2   0.1 0.326 0.0484
 7 mu         0.2   0.2 0.426 0.0723
 8 mu         0.2   0.3 0.499 0.0928
 9 mu         0.2   0.4 0.517 0.0831
10 mu         0.2   0.5 0.542 0.0817
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.764       0.0155  1.32e-11     28.1 
 2 mu         0.2      0.962       0.692   5.15e- 4      8.20
 3 mu         0.3      0.956       0.917   2.59e- 1      2.28
 4 mu         0.4      1.04        1.01    4.24e- 1      2.01
 5 mu         0.5      1.02        1.01    5.48e- 1      1.49
 6 mu         0.6      0.992       0.992   6.41e- 1      1.37
 7 mu         0.7      0.982       0.969   6.41e- 1      1.51
 8 mu         0.8      0.977       0.947   3.54e- 1      1.49
 9 mu         0.9      0.961       0.927   2.63e- 3      2.67
10 mu_1       0.1      0.907       0.0326  4.75e-11     30.2 
11 mu_1       0.2      0.941       0.714   9.31e- 4      6.08
12 mu_1       0.3      0.965       0.923   2.30e- 1      2.44
13 mu_1       0.4      1.04        1.03    4.08e- 1      1.95
14 mu_1       0.5      1.02        1.01    5.72e- 1      1.50
15 mu_1       0.6      0.990       0.991   6.38e- 1      1.36
16 mu_1       0.7      0.982       0.970   6.32e- 1      1.51
17 mu_1       0.8      0.977       0.945   3.49e- 1      1.52
18 mu_1       0.9      0.959       0.921   2.32e- 3      2.67
19 mu_0       0.1      0.748       0.0136  9.37e-12     27.9 
20 mu_0       0.2      0.967       0.683   4.11e- 4      8.73
21 mu_0       0.3      0.952       0.921   2.43e- 1      2.22
22 mu_0       0.4      1.04        1.03    3.95e- 1      2.10
23 mu_0       0.5      1.02        1.01    5.24e- 1      1.49
24 mu_0       0.6      0.994       1.01    6.46e- 1      1.39
25 mu_0       0.7      0.980       0.966   6.07e- 1      1.52
26 mu_0       0.8      0.979       0.963   3.75e- 1      1.50
27 mu_0       0.9      0.975       0.987   5.49e- 3      2.60
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000284     1.23e-27  3.45e-62    0.0264
 2 mu         0.2   0.189        7.77e-15  4.51e-40   10.9   
 3 mu         0.3   1.32         3.90e- 8  2.18e-27   23.0   
 4 mu         0.4   1.18         4.99e- 4  1.28e-18   17.0   
 5 mu         0.5   0.791        8.15e- 2  4.60e-12    7.64  
 6 mu         0.6   0.777        2.82e- 1  8.02e- 8    3.58  
 7 mu         0.7   1.29         3.51e- 1  2.68e-11   20.1   
 8 mu         0.8   1.20         1.52e- 2  6.94e-20   14.4   
 9 mu         0.9   1.64         1.17e- 7  9.15e-36   40.8   
10 mu_1       0.1   0.000780     7.34e-27  3.08e-61    0.0716
11 mu_1       0.2   0.275        2.47e-14  2.01e-39   14.8   
12 mu_1       0.3   1.40         8.25e- 8  6.50e-27   24.3   
13 mu_1       0.4   1.11         7.80e- 4  2.86e-18   15.5   
14 mu_1       0.5   0.789        9.74e- 2  8.22e-12    7.53  
15 mu_1       0.6   0.784        2.66e- 1  1.29e- 7    3.67  
16 mu_1       0.7   1.31         3.80e- 1  1.17e-11   20.5   
17 mu_1       0.8   1.20         1.22e- 2  2.65e-20   15.3   
18 mu_1       0.9   1.66         7.73e- 8  3.10e-36   41.9   
19 mu_0       0.1   0.000229     5.62e-28  4.10e-63    0.0214
20 mu_0       0.2   0.168        3.53e-15  6.04e-41    9.96  
21 mu_0       0.3   1.28         2.04e- 8  3.34e-28   24.0   
22 mu_0       0.4   1.23         3.11e- 4  2.29e-19   18.2   
23 mu_0       0.5   0.792        7.88e- 2  3.18e-13    7.76  
24 mu_0       0.6   0.766        2.17e- 1  6.92e- 9    4.01  
25 mu_0       0.7   1.25         4.40e- 1  6.22e-11   19.0   
26 mu_0       0.8   1.18         2.71e- 2  2.41e-19   11.1   
27 mu_0       0.9   1.47         4.71e- 7  6.36e-35   35.3   
[1] "Total run time was 486.556 seconds"
