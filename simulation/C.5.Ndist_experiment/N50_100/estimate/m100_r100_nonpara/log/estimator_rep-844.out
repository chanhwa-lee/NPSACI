
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7778"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  61  62  63  65  67  68  70  72  73  74 
  2   2   3   1   2   1   4   2   1   1   1   2   1   2   3   1   1   1   3   1 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  91  92  93  95  96 
  1   3   4   2   5   3   5   1   3   1   3   2   1   1   4   3   3   2   5   2 
 97  98  99 100 
  1   4   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03778 0.32872 0.59006 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4557 3221 
[1] "treatment indicator table: "

   0    1 
2973 4805 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3951
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3827
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 384.236 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.354 0.0893
 2 mu         0.1   0.2 0.400 0.0923
 3 mu         0.1   0.3 0.435 0.0893
 4 mu         0.1   0.4 0.464 0.0883
 5 mu         0.1   0.5 0.483 0.0844
 6 mu         0.2   0.1 0.412 0.0690
 7 mu         0.2   0.2 0.471 0.0672
 8 mu         0.2   0.3 0.535 0.0639
 9 mu         0.2   0.4 0.580 0.0632
10 mu         0.2   0.5 0.610 0.0623
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.668        0.206  2.74e-14      5.41
 2 mu         0.2      0.939        0.888  8.72e- 6      3.63
 3 mu         0.3      1.04         0.981  3.16e- 2      1.90
 4 mu         0.4      1.01         1.00   4.93e- 1      1.95
 5 mu         0.5      0.962        0.957  5.78e- 1      1.58
 6 mu         0.6      0.975        0.979  5.95e- 1      1.49
 7 mu         0.7      0.997        1.00   5.75e- 1      1.30
 8 mu         0.8      1.01         1.01   3.04e- 1      1.70
 9 mu         0.9      1.03         0.942  8.89e- 2      2.83
10 mu_1       0.1      0.723        0.327  1.14e-13      5.73
11 mu_1       0.2      0.946        0.921  1.82e- 5      3.10
12 mu_1       0.3      1.05         0.987  4.43e- 2      1.87
13 mu_1       0.4      1.01         0.992  5.21e- 1      1.95
14 mu_1       0.5      0.961        0.962  5.91e- 1      1.58
15 mu_1       0.6      0.976        0.977  6.08e- 1      1.47
16 mu_1       0.7      0.997        0.995  5.55e- 1      1.34
17 mu_1       0.8      1.01         1.01   3.10e- 1      1.68
18 mu_1       0.9      1.03         0.942  8.38e- 2      2.84
19 mu_0       0.1      0.662        0.194  1.78e-14      5.37
20 mu_0       0.2      0.937        0.886  6.35e- 6      3.76
21 mu_0       0.3      1.04         0.987  2.61e- 2      1.91
22 mu_0       0.4      1.01         0.992  4.74e- 1      1.96
23 mu_0       0.5      0.962        0.959  5.66e- 1      1.58
24 mu_0       0.6      0.972        0.976  5.75e- 1      1.53
25 mu_0       0.7      0.996        0.989  6.24e- 1      1.27
26 mu_0       0.8      1.01         1.01   2.80e- 1      1.75
27 mu_0       0.9      1.03         0.961  1.35e- 1      2.70
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0281     4.67e-27  5.69e-73      2.79
 2 mu         0.2     0.528      4.71e-14  4.82e-47     35.2 
 3 mu         0.3     0.741      1.36e- 7  3.48e-32     15.2 
 4 mu         0.4     0.748      1.47e- 3  1.46e-22     12.7 
 5 mu         0.5     1.00       1.01e- 1  1.01e-15      7.81
 6 mu         0.6     1.25       6.27e- 1  3.10e-10      6.61
 7 mu         0.7     1.16       3.40e- 1  2.13e-16      9.43
 8 mu         0.8     1.29       5.15e- 3  2.83e-27     17.7 
 9 mu         0.9     1.67       6.74e-10  4.55e-47     34.7 
10 mu_1       0.1     0.0537     2.88e-26  5.06e-72      5.34
11 mu_1       0.2     0.570      1.49e-13  2.14e-46     33.6 
12 mu_1       0.3     0.740      2.93e- 7  1.03e-31     14.4 
13 mu_1       0.4     0.757      2.38e- 3  3.52e-22     13.3 
14 mu_1       0.5     1.03       1.23e- 1  1.93e-15      8.15
15 mu_1       0.6     1.25       6.19e- 1  4.96e-10      6.55
16 mu_1       0.7     1.15       3.34e- 1  8.00e-17      8.93
17 mu_1       0.8     1.29       4.00e- 3  9.31e-28     17.6 
18 mu_1       0.9     1.70       4.35e-10  1.33e-47     37.0 
19 mu_0       0.1     0.0252     1.98e-27  7.02e-74      2.51
20 mu_0       0.2     0.517      2.13e-14  6.69e-48     35.6 
21 mu_0       0.3     0.742      7.18e- 8  5.52e-33     15.6 
22 mu_0       0.4     0.741      8.69e- 4  9.63e-24     12.3 
23 mu_0       0.5     0.974      7.08e- 2  7.94e-17      7.47
24 mu_0       0.6     1.24       8.08e- 1  3.06e-11      6.77
25 mu_0       0.7     1.17       3.61e- 1  5.23e-16     10.6 
26 mu_0       0.8     1.31       8.74e- 3  1.04e-26     17.8 
27 mu_0       0.9     1.43       2.83e- 9  3.35e-46     23.4 
[1] "Total run time was 387.466 seconds"
