
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7751"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  61  62  63  64  65  66  67  68  69  70  71 
  2   1   2   1   3   1   2   2   2   1   2   1   3   1   1   3   2   3   1   2 
 72  73  74  76  77  78  79  80  81  82  83  84  85  86  88  89  90  93  94  95 
  3   2   1   2   1   3   2   3   3   3   1   3   1   2   5   3   5   4   1   4 
 96  97  98  99 100 
  1   4   4   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03343 0.35303 0.62002 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4573 3178 
[1] "treatment indicator table: "

   0    1 
2885 4866 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3888
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3863
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 432.202 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.559 0.118 
 2 mu         0.1   0.2 0.679 0.137 
 3 mu         0.1   0.3 0.757 0.151 
 4 mu         0.1   0.4 0.846 0.170 
 5 mu         0.1   0.5 0.875 0.175 
 6 mu         0.2   0.1 0.350 0.0659
 7 mu         0.2   0.2 0.447 0.0600
 8 mu         0.2   0.3 0.496 0.0538
 9 mu         0.2   0.4 0.560 0.0618
10 mu         0.2   0.5 0.597 0.0557
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.38        0.0391 0.0000000337     16.8 
 2 mu         0.2      0.969       0.853  0.00456           2.65
 3 mu         0.3      0.986       0.909  0.161             3.45
 4 mu         0.4      1.02        0.985  0.473             2.33
 5 mu         0.5      1.01        0.994  0.597             1.76
 6 mu         0.6      0.953       0.954  0.621             1.48
 7 mu         0.7      0.987       0.970  0.676             1.41
 8 mu         0.8      0.983       0.999  0.530             1.61
 9 mu         0.9      1.02        1.02   0.247             2.55
10 mu_1       0.1      1.37        0.0828 0.000000111      13.7 
11 mu_1       0.2      0.965       0.852  0.00755           2.69
12 mu_1       0.3      0.986       0.921  0.195             3.23
13 mu_1       0.4      1.02        0.993  0.491             2.37
14 mu_1       0.5      1.00        0.982  0.596             1.72
15 mu_1       0.6      0.953       0.951  0.630             1.46
16 mu_1       0.7      0.988       0.972  0.677             1.41
17 mu_1       0.8      0.984       1.00   0.527             1.63
18 mu_1       0.9      1.02        1.02   0.239             2.57
19 mu_0       0.1      1.38        0.0341 0.0000000251     17.4 
20 mu_0       0.2      0.970       0.865  0.00381           2.78
21 mu_0       0.3      0.986       0.918  0.147             3.55
22 mu_0       0.4      1.02        0.977  0.461             2.31
23 mu_0       0.5      1.01        0.984  0.598             1.81
24 mu_0       0.6      0.953       0.951  0.608             1.49
25 mu_0       0.7      0.986       0.969  0.674             1.42
26 mu_0       0.8      0.982       0.998  0.531             1.55
27 mu_0       0.9      1.03        0.977  0.315             2.35
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1  0.0000703     6.06e-27  1.07e-78   0.00336
 2 mu         0.2  0.221         3.03e-14  5.83e-52  10.5    
 3 mu         0.3  1.69          1.40e- 7  1.61e-36  38.0    
 4 mu         0.4  1.23          2.30e- 3  9.63e-26  25.0    
 5 mu         0.5  0.973         1.79e- 1  1.42e-17  13.7    
 6 mu         0.6  1.17          4.81e- 1  3.97e-11  10.2    
 7 mu         0.7  0.749         2.07e- 1  2.57e-17   7.26   
 8 mu         0.8  1.04          1.70e- 3  1.33e-28  10.5    
 9 mu         0.9  1.53          4.28e-10  4.75e-49  55.4    
10 mu_1       0.1  0.000193      3.66e-26  9.96e-78   0.00997
11 mu_1       0.2  0.303         9.40e-14  2.70e-51  13.2    
12 mu_1       0.3  1.80          2.87e- 7  4.99e-36  39.6    
13 mu_1       0.4  1.14          3.72e- 3  2.23e-25  21.3    
14 mu_1       0.5  0.993         1.84e- 1  2.63e-17  14.9    
15 mu_1       0.6  1.16          4.05e- 1  6.14e-11   9.23   
16 mu_1       0.7  0.736         1.95e- 1  9.18e-18   6.89   
17 mu_1       0.8  1.06          1.32e- 3  4.15e-29  11.0    
18 mu_1       0.9  1.55          2.69e-10  1.32e-49  56.7    
19 mu_0       0.1  0.0000566     2.66e-27  8.61e-80   0.00263
20 mu_0       0.2  0.200         1.33e-14  5.26e-53   9.87   
21 mu_0       0.3  1.64          7.70e- 8  1.66e-37  37.3    
22 mu_0       0.4  1.28          1.35e- 3  1.16e-26  27.5    
23 mu_0       0.5  0.953         1.82e- 1  2.04e-18  12.6    
24 mu_0       0.6  1.18          5.48e- 1  7.17e-12  11.8    
25 mu_0       0.7  0.779         1.82e- 1  6.43e-17   8.31   
26 mu_0       0.8  0.998         3.22e- 3  4.98e-28   8.85   
27 mu_0       0.9  1.41          1.85e- 9  3.56e-48  43.1    
[1] "Total run time was 435.504 seconds"
