
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7605"
[1] "cluster size dist'n: "

 50  51  52  53  55  57  58  59  63  65  66  68  69  70  71  72  74  75  76  77 
  2   5   3   2   1   1   5   1   4   4   4   2   4   1   2   1   3   2   2   3 
 78  80  81  82  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 
  2   3   1   4   1   3   3   1   3   4   1   1   4   4   1   1   1   3   1   4 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0489  0.3961  0.6506  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4503 3102 
[1] "treatment indicator table: "

   0    1 
2719 4886 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3694
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3911
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 609.818 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.639 0.185 
 2 mu         0.1   0.2 0.735 0.197 
 3 mu         0.1   0.3 0.838 0.221 
 4 mu         0.1   0.4 0.876 0.222 
 5 mu         0.1   0.5 0.917 0.226 
 6 mu         0.2   0.1 0.424 0.0895
 7 mu         0.2   0.2 0.485 0.0881
 8 mu         0.2   0.3 0.564 0.0963
 9 mu         0.2   0.4 0.594 0.0917
10 mu         0.2   0.5 0.632 0.0938
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.30        0.0636  2.15e-11     12.7 
 2 mu         0.2      0.988       0.772   1.81e- 4      4.08
 3 mu         0.3      1.04        0.960   1.14e- 1      3.57
 4 mu         0.4      1.00        0.990   3.60e- 1      1.94
 5 mu         0.5      0.964       0.933   4.75e- 1      1.79
 6 mu         0.6      1.00        0.983   5.59e- 1      1.54
 7 mu         0.7      1.02        1.00    5.39e- 1      1.81
 8 mu         0.8      1.02        1.01    4.73e- 1      1.84
 9 mu         0.9      0.990       0.958   3.76e- 1      2.50
10 mu_1       0.1      1.15        0.115   7.78e-11      8.56
11 mu_1       0.2      1.00        0.791   3.37e- 4      3.37
12 mu_1       0.3      1.04        0.955   1.49e- 1      3.33
13 mu_1       0.4      0.996       0.966   3.36e- 1      1.91
14 mu_1       0.5      0.965       0.947   4.85e- 1      1.78
15 mu_1       0.6      1.00        0.987   5.57e- 1      1.57
16 mu_1       0.7      1.02        1.01    5.44e- 1      1.83
17 mu_1       0.8      1.02        1.01    4.75e- 1      1.85
18 mu_1       0.9      0.989       0.950   3.73e- 1      2.56
19 mu_0       0.1      1.32        0.0578  1.53e-11     13.5 
20 mu_0       0.2      0.985       0.760   1.41e- 4      4.27
21 mu_0       0.3      1.04        0.974   9.95e- 2      3.68
22 mu_0       0.4      1.00        0.999   3.62e- 1      1.96
23 mu_0       0.5      0.962       0.933   4.66e- 1      1.79
24 mu_0       0.6      1.00        0.974   5.62e- 1      1.52
25 mu_0       0.7      1.02        0.989   5.30e- 1      1.75
26 mu_0       0.8      1.02        1.00    4.66e- 1      1.78
27 mu_0       0.9      1.00        0.995   4.04e- 1      1.99
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0779     1.46e-29  1.32e-73      7.48
 2 mu         0.2     0.459      1.51e-16  1.12e-47     23.5 
 3 mu         0.3     1.31       1.51e- 9  8.09e-33     70.8 
 4 mu         0.4     1.09       7.48e- 5  1.47e-22     21.9 
 5 mu         0.5     1.02       3.21e- 2  6.65e-15     12.3 
 6 mu         0.6     1.14       1.94e- 1  1.16e-10      8.00
 7 mu         0.7     1.68       1.80e- 1  8.47e-17     25.0 
 8 mu         0.8     1.36       4.33e- 2  7.31e-26      8.10
 9 mu         0.9     2.57       5.72e- 7  2.97e-44     67.4 
10 mu_1       0.1     0.131      1.07e-28  1.18e-72     12.5 
11 mu_1       0.2     0.481      5.55e-16  4.98e-47     19.6 
12 mu_1       0.3     1.37       3.26e- 9  2.40e-32     75.0 
13 mu_1       0.4     1.06       1.27e- 4  3.26e-22     17.4 
14 mu_1       0.5     1.03       3.82e- 2  1.18e-14     12.2 
15 mu_1       0.6     1.15       1.60e- 1  3.21e-11      8.46
16 mu_1       0.7     1.69       1.57e- 1  2.02e-17     25.3 
17 mu_1       0.8     1.36       3.72e- 2  1.58e-26      7.96
18 mu_1       0.9     2.57       4.07e- 7  8.63e-45     66.6 
19 mu_0       0.1     0.0720     4.85e-30  1.63e-74      6.92
20 mu_0       0.2     0.453      5.00e-17  1.56e-48     24.5 
21 mu_0       0.3     1.29       7.56e-10  1.28e-33     69.0 
22 mu_0       0.4     1.10       4.02e- 5  2.71e-23     24.9 
23 mu_0       0.5     1.01       2.34e- 2  1.48e-15     12.4 
24 mu_0       0.6     1.12       1.54e- 1  2.41e-10      8.15
25 mu_0       0.7     1.65       1.25e- 1  2.35e-16     24.1 
26 mu_0       0.8     1.37       5.17e- 2  2.70e-25     10.9 
27 mu_0       0.9     2.56       2.06e- 6  2.20e-43     74.1 
[1] "Total run time was 614.407 seconds"
