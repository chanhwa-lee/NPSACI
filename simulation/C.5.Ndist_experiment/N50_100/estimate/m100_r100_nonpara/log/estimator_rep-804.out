
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7673"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  64  65  66  67  68  69  70  72  73 
  2   1   3   1   3   1   1   2   1   1   3   3   3   1   2   4   5   1   3   2 
 74  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  93  94  95  96 
  2   2   3   2   3   1   3   2   5   2   2   3   2   1   1   5   2   3   2   3 
 97  98  99 100 
  1   3   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03414 0.36321 0.63618 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4507 3166 
[1] "treatment indicator table: "

   0    1 
2958 4715 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3804
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3869
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 354.36 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.372 0.103 
 2 mu         0.1   0.2 0.418 0.0907
 3 mu         0.1   0.3 0.503 0.113 
 4 mu         0.1   0.4 0.509 0.106 
 5 mu         0.1   0.5 0.603 0.150 
 6 mu         0.2   0.1 0.417 0.0864
 7 mu         0.2   0.2 0.480 0.0673
 8 mu         0.2   0.3 0.574 0.0865
 9 mu         0.2   0.4 0.592 0.0742
10 mu         0.2   0.5 0.693 0.121 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.766        0.121 0.000000182     14.4 
 2 mu         0.2      1.00         0.864 0.0262           3.23
 3 mu         0.3      0.997        0.952 0.317            2.10
 4 mu         0.4      1.01         0.978 0.538            2.36
 5 mu         0.5      0.971        0.973 0.519            1.53
 6 mu         0.6      1.00         0.978 0.683            1.52
 7 mu         0.7      0.983        0.982 0.561            1.51
 8 mu         0.8      0.996        0.988 0.583            1.52
 9 mu         0.9      1.05         0.977 0.239            2.02
10 mu_1       0.1      0.859        0.215 0.000000535     13.8 
11 mu_1       0.2      1.01         0.881 0.0385           3.53
12 mu_1       0.3      0.996        0.947 0.309            2.12
13 mu_1       0.4      1.01         0.997 0.560            2.33
14 mu_1       0.5      0.971        0.964 0.538            1.50
15 mu_1       0.6      1.00         0.985 0.681            1.53
16 mu_1       0.7      0.983        0.979 0.569            1.51
17 mu_1       0.8      0.997        0.983 0.565            1.56
18 mu_1       0.9      1.05         0.976 0.233            2.04
19 mu_0       0.1      0.756        0.110 0.000000143     14.4 
20 mu_0       0.2      1.00         0.864 0.0231           3.31
21 mu_0       0.3      0.998        0.947 0.296            2.13
22 mu_0       0.4      1.01         0.964 0.508            2.37
23 mu_0       0.5      0.972        0.976 0.500            1.56
24 mu_0       0.6      0.999        0.968 0.686            1.50
25 mu_0       0.7      0.984        0.987 0.542            1.50
26 mu_0       0.8      0.991        0.992 0.655            1.36
27 mu_0       0.9      1.06         1.02  0.293            1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0887     3.07e-26  4.22e-79      7.34
 2 mu         0.2     0.591      7.44e-13  7.25e-53     43.8 
 3 mu         0.3     0.847      2.81e- 6  1.17e-37     19.1 
 4 mu         0.4     1.08       1.29e- 2  5.33e-27     11.8 
 5 mu         0.5     1.40       1.73e- 1  7.22e-19     17.1 
 6 mu         0.6     1.09       1.97e- 1  2.20e-12      5.98
 7 mu         0.7     0.913      5.27e- 2  1.29e-13      7.77
 8 mu         0.8     1.09       1.67e- 3  5.30e-23      8.34
 9 mu         0.9     1.85       1.15e- 9  2.19e-41     45.6 
10 mu_1       0.1     0.148      1.72e-25  4.00e-78     11.5 
11 mu_1       0.2     0.613      2.10e-12  3.43e-52     46.7 
12 mu_1       0.3     0.864      5.45e- 6  3.68e-37     19.4 
13 mu_1       0.4     1.11       1.76e- 2  1.26e-26     12.1 
14 mu_1       0.5     1.40       1.85e- 1  1.37e-18     16.5 
15 mu_1       0.6     1.08       1.84e- 1  3.47e-12      6.53
16 mu_1       0.7     0.908      5.29e- 2  2.89e-14      7.57
17 mu_1       0.8     1.11       1.24e- 3  2.02e-23      8.81
18 mu_1       0.9     1.85       7.95e-10  7.42e-42     45.8 
19 mu_0       0.1     0.0821     1.44e-26  2.52e-80      6.87
20 mu_0       0.2     0.585      4.11e-13  4.87e-54     43.1 
21 mu_0       0.3     0.840      1.67e- 6  8.95e-39     18.9 
22 mu_0       0.4     1.06       9.84e- 3  4.77e-28     11.6 
23 mu_0       0.5     1.40       1.55e- 1  7.77e-20     17.6 
24 mu_0       0.6     1.12       2.25e- 1  2.95e-13      5.16
25 mu_0       0.7     0.925      6.09e- 2  3.62e-13      8.22
26 mu_0       0.8     1.00       2.18e- 3  1.84e-22      9.23
27 mu_0       0.9     1.94       4.38e- 9  1.52e-40     43.6 
[1] "Total run time was 357.402 seconds"
