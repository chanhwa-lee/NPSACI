
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7602"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  70  71  72 
  1   2   1   1   1   3   1   2   3   2   1   2   2   3   1   2   8   3   2   3 
 73  75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  5   1   4   1   1   1   2   2   3   3   3   2   1   1   3   2   5   3   2   2 
 95  96  97  98 100 
  1   2   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03744 0.36264 0.61322 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4602 3000 
[1] "treatment indicator table: "

   0    1 
2674 4928 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3913
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3689
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 377.04 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.503 0.125 
 2 mu         0.1   0.2 0.567 0.130 
 3 mu         0.1   0.3 0.619 0.146 
 4 mu         0.1   0.4 0.664 0.135 
 5 mu         0.1   0.5 0.690 0.132 
 6 mu         0.2   0.1 0.418 0.0850
 7 mu         0.2   0.2 0.469 0.0648
 8 mu         0.2   0.3 0.482 0.0436
 9 mu         0.2   0.4 0.547 0.0616
10 mu         0.2   0.5 0.570 0.0598
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.890        0.514 0.0000120       7.78
 2 mu         0.2      0.923        0.757 0.0335          3.07
 3 mu         0.3      1.03         0.986 0.253           2.27
 4 mu         0.4      1.00         1.03  0.516           1.60
 5 mu         0.5      0.983        0.986 0.591           1.45
 6 mu         0.6      0.982        0.974 0.611           1.51
 7 mu         0.7      1.00         0.993 0.638           1.35
 8 mu         0.8      1.03         1.01  0.589           1.55
 9 mu         0.9      1.03         1.02  0.208           1.91
10 mu_1       0.1      0.904        0.681 0.0000340       5.79
11 mu_1       0.2      0.936        0.807 0.0485          3.04
12 mu_1       0.3      1.04         1.00  0.301           2.28
13 mu_1       0.4      1.00         1.03  0.523           1.55
14 mu_1       0.5      0.982        0.980 0.570           1.42
15 mu_1       0.6      0.983        0.975 0.627           1.51
16 mu_1       0.7      1.01         0.996 0.638           1.35
17 mu_1       0.8      1.03         1.01  0.596           1.56
18 mu_1       0.9      1.03         1.01  0.206           1.90
19 mu_0       0.1      0.889        0.493 0.00000956      8.00
20 mu_0       0.2      0.920        0.741 0.0298          3.08
21 mu_0       0.3      1.03         0.976 0.232           2.26
22 mu_0       0.4      1.01         1.03  0.500           1.64
23 mu_0       0.5      0.984        0.995 0.595           1.47
24 mu_0       0.6      0.980        0.970 0.585           1.52
25 mu_0       0.7      1.00         0.992 0.636           1.34
26 mu_0       0.8      1.03         1.02  0.565           1.55
27 mu_0       0.9      1.02         1.01  0.224           1.96
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      7.94      7.65e-31  6.55e-73    794.  
 2 mu         0.2      0.380     1.77e-16  5.55e-48     19.6 
 3 mu         0.3      0.801     7.15e-10  1.35e-33     16.2 
 4 mu         0.4      1.01      3.11e- 5  1.43e-23     21.9 
 5 mu         0.5      0.937     9.93e- 3  5.53e-16     13.4 
 6 mu         0.6      1.04      1.31e- 1  4.34e-19      6.82
 7 mu         0.7      1.14      1.55e- 1  2.94e-27      6.47
 8 mu         0.8      1.19      1.68e- 1  6.98e-39     12.2 
 9 mu         0.9      1.67      7.31e- 6  6.73e-59     21.9 
10 mu_1       0.1      3.41      4.85e-30  6.04e-72    340.  
11 mu_1       0.2      0.408     6.43e-16  2.56e-47     21.3 
12 mu_1       0.3      0.846     1.68e- 9  4.15e-33     18.2 
13 mu_1       0.4      1.00      5.34e- 5  3.31e-23     22.7 
14 mu_1       0.5      0.947     1.05e- 2  1.02e-15     13.3 
15 mu_1       0.6      1.05      1.39e- 1  3.10e-20      7.02
16 mu_1       0.7      1.14      1.61e- 1  1.80e-28      7.02
17 mu_1       0.8      1.20      1.44e- 1  3.74e-40     12.6 
18 mu_1       0.9      1.65      5.64e- 6  3.21e-60     21.9 
19 mu_0       0.1      8.45      2.94e-31  5.59e-74    844.  
20 mu_0       0.2      0.373     6.04e-17  5.34e-49     19.2 
21 mu_0       0.3      0.782     3.00e-10  1.48e-34     15.4 
22 mu_0       0.4      1.02      1.57e- 5  1.84e-24     21.4 
23 mu_0       0.5      0.928     6.51e- 3  8.50e-17     13.6 
24 mu_0       0.6      1.03      8.80e- 2  1.04e-18      7.73
25 mu_0       0.7      1.14      1.49e- 1  9.37e-27      6.76
26 mu_0       0.8      1.14      2.67e- 1  3.34e-38     10.5 
27 mu_0       0.9      1.80      2.27e- 5  6.44e-58     22.2 
[1] "Total run time was 380.666 seconds"
