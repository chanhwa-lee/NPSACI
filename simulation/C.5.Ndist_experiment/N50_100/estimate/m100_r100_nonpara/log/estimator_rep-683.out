
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7282"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 73 74 75 76 
 2  3  3  1  4  3  1  1  3  1  2  2  4  2  2  2  2  1  4  3  2  2  2  2  5  3 
77 78 79 80 81 82 83 84 87 88 89 90 91 93 95 97 98 
 1  3  2  3  1  3  1  1  3  1  1  2  2  3  2  4  5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02475 0.31351 0.58326 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4305 2977 
[1] "treatment indicator table: "

   0    1 
2739 4543 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3597
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3685
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 445.217 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0446
 2 mu         0.1   0.2 0.446 0.0715
 3 mu         0.1   0.3 0.512 0.0864
 4 mu         0.1   0.4 0.550 0.0728
 5 mu         0.1   0.5 0.578 0.0786
 6 mu         0.2   0.1 0.384 0.0390
 7 mu         0.2   0.2 0.482 0.0632
 8 mu         0.2   0.3 0.561 0.0892
 9 mu         0.2   0.4 0.608 0.0899
10 mu         0.2   0.5 0.644 0.105 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.808        0.400 0.0000710      3.67
 2 mu         0.2      0.967        0.891 0.0974         2.68
 3 mu         0.3      1.00         1.03  0.419          1.55
 4 mu         0.4      1.01         1.03  0.557          1.65
 5 mu         0.5      0.985        0.972 0.619          1.27
 6 mu         0.6      1.00         1.01  0.645          1.32
 7 mu         0.7      1.02         1.00  0.579          1.42
 8 mu         0.8      0.998        0.988 0.600          1.50
 9 mu         0.9      1.04         1.02  0.429          1.79
10 mu_1       0.1      0.832        0.578 0.000183       3.15
11 mu_1       0.2      0.976        0.933 0.129          2.44
12 mu_1       0.3      1.01         1.01  0.447          1.55
13 mu_1       0.4      1.01         1.02  0.582          1.62
14 mu_1       0.5      0.984        0.979 0.599          1.30
15 mu_1       0.6      1.00         1.01  0.641          1.33
16 mu_1       0.7      1.02         1.00  0.584          1.43
17 mu_1       0.8      0.998        0.982 0.590          1.50
18 mu_1       0.9      1.04         1.01  0.419          1.80
19 mu_0       0.1      0.806        0.386 0.0000586      3.74
20 mu_0       0.2      0.965        0.892 0.0896         2.74
21 mu_0       0.3      1.00         1.03  0.407          1.56
22 mu_0       0.4      1.01         1.03  0.541          1.67
23 mu_0       0.5      0.985        0.984 0.638          1.26
24 mu_0       0.6      0.999        1.01  0.651          1.32
25 mu_0       0.7      1.02         1.02  0.566          1.44
26 mu_0       0.8      1.00         0.967 0.613          1.48
27 mu_0       0.9      1.04         0.987 0.507          1.72
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.93      1.86e-27  3.39e-74    150.  
 2 mu         0.2      0.638     3.96e-15  9.10e-51     29.7 
 3 mu         0.3      0.761     4.86e- 8  4.33e-37     10.4 
 4 mu         0.4      0.949     1.48e- 4  2.06e-27      9.10
 5 mu         0.5      0.688     1.74e- 2  6.23e-20      8.40
 6 mu         0.6      1.06      4.53e- 2  2.83e-16      6.56
 7 mu         0.7      1.13      2.67e- 1  3.11e-24     11.9 
 8 mu         0.8      1.22      3.61e- 2  9.59e-36     10.8 
 9 mu         0.9      0.955     5.80e- 7  8.34e-56     17.6 
10 mu_1       0.1      2.18      1.39e-26  3.35e-73    158.  
11 mu_1       0.2      0.555     1.17e-14  4.49e-50     20.6 
12 mu_1       0.3      0.791     1.06e- 7  1.42e-36      9.36
13 mu_1       0.4      0.938     1.76e- 4  5.09e-27      9.00
14 mu_1       0.5      0.692     2.15e- 2  1.23e-19      7.81
15 mu_1       0.6      1.07      4.69e- 2  4.97e-17      6.68
16 mu_1       0.7      1.12      3.10e- 1  4.67e-25     11.9 
17 mu_1       0.8      1.21      3.04e- 2  1.26e-36     10.8 
18 mu_1       0.9      0.959     4.14e- 7  9.75e-57     17.9 
19 mu_0       0.1      1.90      5.20e-28  4.77e-76    149.  
20 mu_0       0.2      0.659     2.03e-15  1.44e-52     31.9 
21 mu_0       0.3      0.748     2.41e- 8  7.83e-39     10.9 
22 mu_0       0.4      0.957     9.11e- 5  4.35e-29      9.17
23 mu_0       0.5      0.685     1.65e- 2  1.58e-21      8.99
24 mu_0       0.6      1.03      2.97e- 2  6.34e-16      6.39
25 mu_0       0.7      1.14      2.29e- 1  9.26e-24     11.7 
26 mu_0       0.8      1.22      4.98e- 2  4.29e-35     10.8 
27 mu_0       0.9      0.916     2.07e- 6  7.46e-55     15.0 
[1] "Total run time was 449.237 seconds"
