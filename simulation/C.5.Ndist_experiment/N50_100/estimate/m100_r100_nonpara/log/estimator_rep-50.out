
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7373"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  63  65  66  69  70  71  72  75 
  3   1   1   5   4   5   3   2   2   1   2   1   3   3   1   3   4   1   3   4 
 76  77  78  79  80  81  82  84  85  87  88  89  90  92  93  94  95  96  97  98 
  1   3   3   2   3   3   4   4   2   2   1   1   1   3   2   1   2   4   2   1 
 99 100 
  2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03489 0.33849 0.60604 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4356 3017 
[1] "treatment indicator table: "

   0    1 
2747 4626 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3675
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3698
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 482.748 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.402 0.0774
 2 mu         0.1   0.2 0.439 0.0600
 3 mu         0.1   0.3 0.461 0.0576
 4 mu         0.1   0.4 0.492 0.0614
 5 mu         0.1   0.5 0.517 0.0688
 6 mu         0.2   0.1 0.348 0.0596
 7 mu         0.2   0.2 0.414 0.0405
 8 mu         0.2   0.3 0.458 0.0430
 9 mu         0.2   0.4 0.495 0.0474
10 mu         0.2   0.5 0.519 0.0510
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.850        0.499  1.06e- 9      6.16
 2 mu         0.2      0.939        0.894  1.70e- 3      2.11
 3 mu         0.3      0.972        0.959  2.71e- 1      1.73
 4 mu         0.4      1.01         0.996  4.68e- 1      1.59
 5 mu         0.5      1.01         1.00   4.70e- 1      1.44
 6 mu         0.6      0.972        0.961  6.40e- 1      1.43
 7 mu         0.7      0.971        0.960  5.11e- 1      1.48
 8 mu         0.8      1.07         1.04   6.38e- 1      1.46
 9 mu         0.9      1.05         1.02   4.00e- 1      2.02
10 mu_1       0.1      0.850        0.571  3.68e- 9      5.31
11 mu_1       0.2      0.954        0.902  2.97e- 3      2.35
12 mu_1       0.3      0.973        0.953  3.31e- 1      1.61
13 mu_1       0.4      1.01         0.996  4.76e- 1      1.50
14 mu_1       0.5      1.01         0.996  4.76e- 1      1.43
15 mu_1       0.6      0.969        0.953  6.32e- 1      1.41
16 mu_1       0.7      0.973        0.965  5.08e- 1      1.49
17 mu_1       0.8      1.07         1.05   6.38e- 1      1.47
18 mu_1       0.9      1.05         1.01   3.93e- 1      2.05
19 mu_0       0.1      0.850        0.484  7.72e-10      6.25
20 mu_0       0.2      0.935        0.897  1.38e- 3      2.06
21 mu_0       0.3      0.971        0.960  2.46e- 1      1.79
22 mu_0       0.4      1.01         0.997  4.62e- 1      1.65
23 mu_0       0.5      1.02         0.999  4.64e- 1      1.44
24 mu_0       0.6      0.975        0.968  6.53e- 1      1.45
25 mu_0       0.7      0.965        0.956  5.19e- 1      1.43
26 mu_0       0.8      1.06         1.04   6.41e- 1      1.45
27 mu_0       0.9      1.05         1.03   4.63e- 1      1.83
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.469     6.81e-27  4.65e-80     33.6 
 2 mu         0.2      2.08      8.86e-15  2.84e-53     55.2 
 3 mu         0.3      0.711     1.76e- 8  8.98e-38     14.8 
 4 mu         0.4      0.434     3.04e- 4  6.25e-27      5.21
 5 mu         0.5      1.15      1.50e- 2  1.10e-18     14.0 
 6 mu         0.6      1.26      2.14e- 1  1.41e-13     10.3 
 7 mu         0.7      1.11      2.40e- 1  5.44e-22      8.28
 8 mu         0.8      1.25      3.97e- 2  1.66e-34     12.0 
 9 mu         0.9      0.916     1.05e- 6  9.15e-57     18.7 
10 mu_1       0.1      0.712     4.56e-26  4.36e-79     46.7 
11 mu_1       0.2      1.99      3.08e-14  1.33e-52     52.3 
12 mu_1       0.3      0.624     4.02e- 8  2.81e-37     11.6 
13 mu_1       0.4      0.467     2.54e- 4  1.47e-26      5.96
14 mu_1       0.5      1.19      1.87e- 2  2.07e-18     14.9 
15 mu_1       0.6      1.25      2.17e- 1  4.47e-14     10.7 
16 mu_1       0.7      1.11      2.11e- 1  1.47e-22      8.34
17 mu_1       0.8      1.23      3.25e- 2  3.93e-35     11.8 
18 mu_1       0.9      0.920     7.60e- 7  1.93e-57     18.8 
19 mu_0       0.1      0.442     2.33e-27  3.23e-81     32.2 
20 mu_0       0.2      2.10      3.38e-15  2.22e-54     55.9 
21 mu_0       0.3      0.748     7.89e- 9  8.02e-39     16.7 
22 mu_0       0.4      0.412     1.58e- 4  6.51e-28      4.71
23 mu_0       0.5      1.11      1.42e- 2  1.38e-19     13.1 
24 mu_0       0.6      1.28      1.80e- 1  2.87e-13      9.72
25 mu_0       0.7      1.11      2.20e- 1  1.47e-21      8.14
26 mu_0       0.8      1.29      5.79e- 2  6.73e-34     12.8 
27 mu_0       0.9      0.879     3.70e- 6  7.42e-56     17.5 
[1] "Total run time was 486.441 seconds"
