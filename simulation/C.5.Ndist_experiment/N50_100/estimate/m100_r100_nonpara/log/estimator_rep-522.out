
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7321"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  62  63  65  66  67  68  69  70  71  72 
  4   3   1   5   1   2   2   1   1   4   2   3   2   5   2   2   1   3   2   2 
 74  75  76  77  78  79  80  82  84  85  86  87  88  90  91  92  93  94  95  96 
  3   1   1   4   3   5   3   4   5   2   2   2   2   1   2   1   1   1   2   1 
 97  98 100 
  3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05194 0.37317 0.64174 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4301 3020 
[1] "treatment indicator table: "

   0    1 
2754 4567 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3608
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3713
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 369.643 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.467 0.0968
 2 mu         0.1   0.2 0.593 0.121 
 3 mu         0.1   0.3 0.682 0.144 
 4 mu         0.1   0.4 0.745 0.144 
 5 mu         0.1   0.5 0.748 0.130 
 6 mu         0.2   0.1 0.333 0.0525
 7 mu         0.2   0.2 0.442 0.0742
 8 mu         0.2   0.3 0.529 0.104 
 9 mu         0.2   0.4 0.583 0.0905
10 mu         0.2   0.5 0.583 0.0670
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.13         0.234 0.00000147      9.21
 2 mu         0.2      0.939        0.837 0.0477          2.49
 3 mu         0.3      0.998        0.962 0.203           2.45
 4 mu         0.4      1.03         0.987 0.500           1.96
 5 mu         0.5      0.998        1.01  0.564           1.38
 6 mu         0.6      0.991        0.978 0.647           1.45
 7 mu         0.7      0.987        1.00  0.590           1.36
 8 mu         0.8      1.02         0.999 0.535           1.75
 9 mu         0.9      1.01         0.964 0.249           2.10
10 mu_1       0.1      1.08         0.374 0.00000411      6.56
11 mu_1       0.2      0.940        0.867 0.0690          2.21
12 mu_1       0.3      1.00         0.977 0.216           2.45
13 mu_1       0.4      1.03         0.993 0.498           1.94
14 mu_1       0.5      0.997        0.991 0.578           1.38
15 mu_1       0.6      0.990        0.971 0.646           1.45
16 mu_1       0.7      0.987        0.992 0.600           1.35
17 mu_1       0.8      1.02         0.999 0.521           1.78
18 mu_1       0.9      1.01         0.963 0.234           2.14
19 mu_0       0.1      1.13         0.218 0.00000117      9.53
20 mu_0       0.2      0.939        0.821 0.0424          2.56
21 mu_0       0.3      0.995        0.957 0.198           2.46
22 mu_0       0.4      1.03         0.991 0.502           1.97
23 mu_0       0.5      0.998        1.02  0.550           1.41
24 mu_0       0.6      0.991        0.981 0.648           1.45
25 mu_0       0.7      0.988        0.998 0.566           1.37
26 mu_0       0.8      1.01         1.01  0.576           1.65
27 mu_0       0.9      1.01         1.01  0.261           1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00240     1.27e-25  1.59e-73     0.240
 2 mu         0.2    0.138       2.60e-13  4.80e-48    11.2  
 3 mu         0.3    0.725       4.42e- 7  2.29e-33    20.7  
 4 mu         0.4    1.11        1.94e- 3  1.04e-23    15.4  
 5 mu         0.5    1.20        1.66e- 1  8.94e-17    12.6  
 6 mu         0.6    1.14        3.55e- 1  3.31e-11     5.36 
 7 mu         0.7    1.03        3.81e- 1  5.03e-13     8.15 
 8 mu         0.8    0.998       8.07e- 3  5.77e-23    11.4  
 9 mu         0.9    3.17        1.89e- 7  2.38e-41   167.   
10 mu_1       0.1    0.00575     7.50e-25  1.46e-72     0.575
11 mu_1       0.2    0.175       7.80e-13  2.19e-47    13.4  
12 mu_1       0.3    0.785       9.05e- 7  7.00e-33    21.1  
13 mu_1       0.4    1.12        2.99e- 3  2.50e-23    15.1  
14 mu_1       0.5    1.20        1.81e- 1  1.72e-16    12.4  
15 mu_1       0.6    1.13        3.41e- 1  5.30e-11     5.22 
16 mu_1       0.7    1.03        3.18e- 1  2.19e-13     7.98 
17 mu_1       0.8    0.996       7.63e- 3  2.20e-23    11.1  
18 mu_1       0.9    3.20        1.30e- 7  8.07e-42   169.   
19 mu_0       0.1    0.00202     5.77e-26  1.50e-74     0.202
20 mu_0       0.2    0.128       1.30e-13  5.10e-49    10.6  
21 mu_0       0.3    0.699       2.43e- 7  2.79e-34    20.6  
22 mu_0       0.4    1.10        1.23e- 3  6.76e-25    15.6  
23 mu_0       0.5    1.19        1.20e- 1  6.96e-18    12.9  
24 mu_0       0.6    1.16        3.33e- 1  3.22e-12     5.58 
25 mu_0       0.7    1.02        2.90e- 1  1.16e-12     8.54 
26 mu_0       0.8    1.00        4.48e- 3  2.00e-22    12.9  
27 mu_0       0.9    2.88        7.24e- 7  1.65e-40   154.   
[1] "Total run time was 372.89 seconds"
