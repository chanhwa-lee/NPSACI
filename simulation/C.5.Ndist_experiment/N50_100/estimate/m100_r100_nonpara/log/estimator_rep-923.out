
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7524"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  58  59  60  62  63  65  66  68  69  71  72  73  75  76 
  4   3   1   1   1   2   3   2   3   6   2   1   3   3   1   5   1   3   3   4 
 77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  93  94  95  97  98 
  1   2   5   2   3   1   2   1   3   3   3   2   2   2   1   3   1   1   1   3 
 99 100 
  4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03023 0.32267 0.57953 0.98942 7.00000 
[1] "event indicator table: "

   0    1 
4316 3208 
[1] "treatment indicator table: "

   0    1 
3007 4517 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3737
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3787
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 377.202 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.409 0.0825
 2 mu         0.1   0.2 0.551 0.119 
 3 mu         0.1   0.3 0.577 0.0947
 4 mu         0.1   0.4 0.634 0.105 
 5 mu         0.1   0.5 0.670 0.103 
 6 mu         0.2   0.1 0.388 0.0537
 7 mu         0.2   0.2 0.497 0.0630
 8 mu         0.2   0.3 0.553 0.0573
 9 mu         0.2   0.4 0.594 0.0582
10 mu         0.2   0.5 0.631 0.0543
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.964        0.478 0.00000107       5.79
 2 mu         0.2      0.994        0.832 0.0197           4.73
 3 mu         0.3      1.00         0.971 0.290            2.24
 4 mu         0.4      1.01         1.02  0.558            1.99
 5 mu         0.5      1.01         0.996 0.545            2.00
 6 mu         0.6      1.03         1.02  0.642            2.09
 7 mu         0.7      1.02         1.05  0.533            1.42
 8 mu         0.8      0.965        0.970 0.416            1.47
 9 mu         0.9      0.988        0.917 0.229            1.77
10 mu_1       0.1      1.01         0.699 0.00000328       5.47
11 mu_1       0.2      0.987        0.856 0.0314           4.67
12 mu_1       0.3      1.01         0.969 0.307            2.25
13 mu_1       0.4      1.01         1.01  0.549            1.98
14 mu_1       0.5      1.01         0.991 0.568            1.94
15 mu_1       0.6      1.03         1.01  0.660            2.07
16 mu_1       0.7      1.02         1.04  0.529            1.43
17 mu_1       0.8      0.965        0.967 0.396            1.44
18 mu_1       0.9      0.988        0.921 0.233            1.78
19 mu_0       0.1      0.959        0.443 0.000000827      5.83
20 mu_0       0.2      0.995        0.834 0.0168           4.75
21 mu_0       0.3      1.00         0.968 0.282            2.25
22 mu_0       0.4      1.01         1.01  0.552            2.00
23 mu_0       0.5      1.02         0.978 0.521            2.06
24 mu_0       0.6      1.03         1.02  0.607            2.12
25 mu_0       0.7      1.03         1.05  0.535            1.44
26 mu_0       0.8      0.964        0.952 0.494            1.57
27 mu_0       0.9      0.989        0.964 0.188            1.71
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00243     2.48e-24  1.11e-77     0.186
 2 mu         0.2    0.848       1.42e-12  9.50e-51    18.9  
 3 mu         0.3    2.07        1.90e- 6  3.02e-35    46.8  
 4 mu         0.4    1.16        7.53e- 3  1.77e-24    13.8  
 5 mu         0.5    1.68        7.20e- 2  1.32e-16    57.3  
 6 mu         0.6    1.55        1.58e- 1  5.64e-11    29.8  
 7 mu         0.7    1.32        7.58e- 2  4.50e-16    12.1  
 8 mu         0.8    0.964       8.15e- 3  2.03e-26    11.2  
 9 mu         0.9    1.34        3.36e- 9  3.67e-45    19.7  
10 mu_1       0.1    0.00571     1.51e-23  1.01e-76     0.423
11 mu_1       0.2    1.09        4.48e-12  4.32e-50    25.3  
12 mu_1       0.3    1.98        3.87e- 6  9.17e-35    41.9  
13 mu_1       0.4    1.15        1.15e- 2  4.02e-24    15.4  
14 mu_1       0.5    1.70        8.39e- 2  2.51e-16    56.1  
15 mu_1       0.6    1.54        1.93e- 1  8.93e-11    28.7  
16 mu_1       0.7    1.32        6.09e- 2  1.61e-16    12.7  
17 mu_1       0.8    0.945       6.36e- 3  6.34e-27    11.0  
18 mu_1       0.9    1.35        2.31e- 9  1.02e-45    19.8  
19 mu_0       0.1    0.00207     1.16e-24  1.11e-78     0.160
20 mu_0       0.2    0.787       7.06e-13  1.07e-51    17.3  
21 mu_0       0.3    2.11        1.05e- 6  3.88e-36    49.0  
22 mu_0       0.4    1.16        4.81e- 3  2.65e-25    13.7  
23 mu_0       0.5    1.65        5.52e- 2  1.32e-17    58.6  
24 mu_0       0.6    1.56        1.22e- 1  7.05e-12    31.5  
25 mu_0       0.7    1.33        8.40e- 2  1.13e-15    10.7  
26 mu_0       0.8    1.04        9.58e- 3  7.61e-26    12.2  
27 mu_0       0.9    1.27        1.29e- 8  2.75e-44    25.4  
[1] "Total run time was 380.669 seconds"
