
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7624"
[1] "cluster size dist'n: "

 51  52  54  56  57  58  59  60  62  65  66  67  68  69  70  71  72  73  74  76 
  3   1   4   1   4   1   2   3   2   5   1   2   1   2   2   2   4   2   6   1 
 77  78  79  80  81  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98 
  2   6   1   2   5   2   3   2   1   1   2   1   4   4   5   1   1   1   2   4 
100 
  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03634 0.33365 0.61567 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4517 3107 
[1] "treatment indicator table: "

   0    1 
2965 4659 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3670
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3954
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 691.337 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.376 0.0776
 2 mu         0.1   0.2 0.432 0.101 
 3 mu         0.1   0.3 0.474 0.111 
 4 mu         0.1   0.4 0.530 0.104 
 5 mu         0.1   0.5 0.531 0.103 
 6 mu         0.2   0.1 0.370 0.0468
 7 mu         0.2   0.2 0.436 0.0606
 8 mu         0.2   0.3 0.491 0.0654
 9 mu         0.2   0.4 0.544 0.0588
10 mu         0.2   0.5 0.557 0.0599
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.873       0.108   5.82e-13      7.15
 2 mu         0.2      1.00        0.877   1.38e- 4      5.87
 3 mu         0.3      0.992       0.940   4.94e- 2      4.41
 4 mu         0.4      1.00        0.972   1.21e- 1      2.45
 5 mu         0.5      1.01        1.02    4.64e- 1      1.49
 6 mu         0.6      1.01        0.981   6.79e- 1      1.52
 7 mu         0.7      0.998       0.991   6.16e- 1      1.45
 8 mu         0.8      1.00        1.02    3.62e- 1      1.77
 9 mu         0.9      1.09        1.06    2.51e- 2      5.34
10 mu_1       0.1      0.877       0.204   2.26e-12      5.93
11 mu_1       0.2      1.01        0.862   2.69e- 4      6.45
12 mu_1       0.3      0.989       0.952   6.62e- 2      4.57
13 mu_1       0.4      1.00        0.966   1.25e- 1      2.41
14 mu_1       0.5      1.01        1.02    4.91e- 1      1.45
15 mu_1       0.6      1.01        0.979   6.86e- 1      1.52
16 mu_1       0.7      0.997       0.990   6.10e- 1      1.43
17 mu_1       0.8      1.00        1.02    3.56e- 1      1.77
18 mu_1       0.9      1.10        1.05    2.27e- 2      5.54
19 mu_0       0.1      0.873       0.0971  3.96e-13      7.29
20 mu_0       0.2      0.999       0.876   1.06e- 4      5.72
21 mu_0       0.3      0.993       0.941   4.21e- 2      4.34
22 mu_0       0.4      0.997       0.958   1.18e- 1      2.51
23 mu_0       0.5      1.01        1.02    4.38e- 1      1.53
24 mu_0       0.6      1.01        0.986   6.68e- 1      1.53
25 mu_0       0.7      0.999       0.998   6.30e- 1      1.49
26 mu_0       0.8      0.999       1.01    3.72e- 1      1.76
27 mu_0       0.9      1.07        1.02    4.61e- 2      3.60
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000321     7.63e-25  1.30e-85    0.0182
 2 mu         0.2   0.501        1.59e-12  1.60e-57   20.0   
 3 mu         0.3   1.89         2.15e- 6  3.36e-41   28.4   
 4 mu         0.4   2.33         7.47e- 3  1.01e-29   60.4   
 5 mu         0.5   1.35         2.13e- 1  6.24e-21   13.1   
 6 mu         0.6   1.31         4.27e- 1  7.09e-14   19.8   
 7 mu         0.7   1.07         4.96e- 2  2.84e-17    5.90  
 8 mu         0.8   0.728        5.54e- 3  2.53e-28   11.5   
 9 mu         0.9   2.29         3.79e- 8  2.86e-48   41.6   
10 mu_1       0.1   0.000816     4.15e-24  1.24e-84    0.0435
11 mu_1       0.2   0.653        4.88e-12  7.69e-57   24.0   
12 mu_1       0.3   1.96         4.50e- 6  1.07e-40   25.5   
13 mu_1       0.4   2.28         1.12e- 2  2.41e-29   57.1   
14 mu_1       0.5   1.34         2.26e- 1  1.20e-20   12.6   
15 mu_1       0.6   1.30         3.85e- 1  1.13e-13   18.7   
16 mu_1       0.7   1.05         4.81e- 2  9.71e-18    6.05  
17 mu_1       0.8   0.730        4.37e- 3  7.56e-29   11.7   
18 mu_1       0.9   2.32         2.61e- 8  7.60e-49   42.3   
19 mu_0       0.1   0.000266     3.87e-25  0           0.0154
20 mu_0       0.2   0.463        7.79e-13  0          19.1   
21 mu_0       0.3   1.86         1.15e- 6  0          29.8   
22 mu_0       0.4   2.37         4.97e- 3  0          62.7   
23 mu_0       0.5   1.36         1.52e- 1  0          13.9   
24 mu_0       0.6   1.33         3.83e- 1  0          21.4   
25 mu_0       0.7   1.09         4.70e- 2  0           5.89  
26 mu_0       0.8   0.719        1.04e- 2  0          10.6   
27 mu_0       0.9   2.00         9.34e- 8  0          35.8   
[1] "Total run time was 698.361 seconds"
