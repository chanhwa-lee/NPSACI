
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7569"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  59  60  61  62  63  65  66  67  68  69  70  71  72  73 
  1   2   2   2   1   1   4   3   2   2   1   6   2   2   3   1   1   4   2   6 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94  95 
  3   3   2   2   2   3   1   2   1   4   2   1   3   2   1   1   3   2   4   3 
 96  97  98  99 100 
  2   1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03547 0.34589 0.61618 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4496 3073 
[1] "treatment indicator table: "

   0    1 
2808 4761 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3781
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3788
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 481.32 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.396 0.0614
 2 mu         0.1   0.2 0.489 0.0753
 3 mu         0.1   0.3 0.521 0.0780
 4 mu         0.1   0.4 0.552 0.0903
 5 mu         0.1   0.5 0.601 0.104 
 6 mu         0.2   0.1 0.360 0.0288
 7 mu         0.2   0.2 0.454 0.0323
 8 mu         0.2   0.3 0.502 0.0354
 9 mu         0.2   0.4 0.534 0.0384
10 mu         0.2   0.5 0.568 0.0361
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.912        0.453 0.00000000759      7.49
 2 mu         0.2      0.963        0.889 0.00501            2.94
 3 mu         0.3      0.927        0.892 0.237              1.83
 4 mu         0.4      1.02         0.952 0.494              2.39
 5 mu         0.5      1.02         0.997 0.559              1.84
 6 mu         0.6      1.02         1.00  0.511              2.32
 7 mu         0.7      1.02         1.01  0.608              1.70
 8 mu         0.8      1.00         0.987 0.583              1.76
 9 mu         0.9      1.02         1.00  0.418              2.07
10 mu_1       0.1      0.913        0.545 0.0000000243       5.80
11 mu_1       0.2      0.956        0.877 0.00813            2.79
12 mu_1       0.3      0.933        0.890 0.235              1.72
13 mu_1       0.4      1.02         0.965 0.540              2.40
14 mu_1       0.5      1.01         1.01  0.533              1.88
15 mu_1       0.6      1.02         1.01  0.518              2.28
16 mu_1       0.7      1.02         1.01  0.604              1.70
17 mu_1       0.8      0.999        0.984 0.573              1.77
18 mu_1       0.9      1.02         0.999 0.427              2.08
19 mu_0       0.1      0.912        0.432 0.00000000574      7.70
20 mu_0       0.2      0.964        0.882 0.00423            2.98
21 mu_0       0.3      0.925        0.901 0.227              1.87
22 mu_0       0.4      1.01         0.940 0.461              2.38
23 mu_0       0.5      1.02         1.00  0.558              1.81
24 mu_0       0.6      1.02         0.998 0.500              2.38
25 mu_0       0.7      1.02         0.998 0.615              1.71
26 mu_0       0.8      1.01         1.01  0.618              1.73
27 mu_0       0.9      1.02         0.993 0.340              2.09
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.16      1.03e-27  2.01e-87    102.  
 2 mu         0.2      0.659     1.41e-14  1.57e-59     18.3 
 3 mu         0.3      1.49      1.25e- 7  2.86e-43     55.4 
 4 mu         0.4      0.908     1.47e- 3  8.74e-32      8.18
 5 mu         0.5      1.11      3.51e- 2  6.25e-23     10.3 
 6 mu         0.6      1.41      1.26e- 1  1.06e-18     16.1 
 7 mu         0.7      1.11      1.39e- 1  4.81e-27     10.4 
 8 mu         0.8      1.78      1.01e- 2  5.05e-39     60.1 
 9 mu         0.9      1.46      2.05e- 8  8.68e-60     19.8 
10 mu_1       0.1      1.01      7.03e-27  1.96e-86     80.8 
11 mu_1       0.2      0.759     4.30e-14  7.68e-59     21.3 
12 mu_1       0.3      1.46      2.62e- 7  9.33e-43     52.0 
13 mu_1       0.4      0.891     1.42e- 3  2.14e-31      8.55
14 mu_1       0.5      1.13      3.04e- 2  1.22e-22     10.4 
15 mu_1       0.6      1.41      1.22e- 1  1.40e-19     16.1 
16 mu_1       0.7      1.10      1.50e- 1  5.42e-28     10.4 
17 mu_1       0.8      1.78      8.80e- 3  4.99e-40     59.9 
18 mu_1       0.9      1.45      1.43e- 8  7.61e-61     20.4 
19 mu_0       0.1      1.17      3.60e-28  4.69e-89    105.  
20 mu_0       0.2      0.634     6.92e-15  4.13e-61     19.4 
21 mu_0       0.3      1.50      6.66e- 8  8.60e-45     56.9 
22 mu_0       0.4      0.919     9.21e- 4  3.07e-33      8.66
23 mu_0       0.5      1.10      4.92e- 2  2.63e-24     10.2 
24 mu_0       0.6      1.41      1.13e- 1  2.45e-18     16.1 
25 mu_0       0.7      1.11      1.11e- 1  1.48e-26     10.4 
26 mu_0       0.8      1.75      1.39e- 2  2.33e-38     60.7 
27 mu_0       0.9      1.55      7.62e- 8  7.99e-59     20.2 
[1] "Total run time was 486.451 seconds"
