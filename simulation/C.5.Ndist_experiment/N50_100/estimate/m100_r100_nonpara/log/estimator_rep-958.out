
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7436"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  61  63  64  65  66  67  68  69  70  71  72 
  5   4   3   1   3   1   2   2   2   3   1   2   2   2   1   1   2   2   3   3 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  93 
  2   2   1   5   1   2   2   1   3   4   1   1   1   2   1   2   1   5   3   3 
 94  95  96  98 100 
  2   2   3   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04052 0.36435 0.61677 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4476 2960 
[1] "treatment indicator table: "

   0    1 
2718 4718 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3715
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3721
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 493.488 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.399 0.124 
 2 mu         0.1   0.2 0.480 0.129 
 3 mu         0.1   0.3 0.520 0.112 
 4 mu         0.1   0.4 0.549 0.131 
 5 mu         0.1   0.5 0.579 0.143 
 6 mu         0.2   0.1 0.351 0.0606
 7 mu         0.2   0.2 0.422 0.0613
 8 mu         0.2   0.3 0.479 0.0524
 9 mu         0.2   0.4 0.504 0.0593
10 mu         0.2   0.5 0.558 0.0728
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.961        0.433 0.0000929      7.06
 2 mu         0.2      0.940        0.883 0.0784         2.18
 3 mu         0.3      0.969        0.963 0.365          1.75
 4 mu         0.4      1.01         0.997 0.582          1.60
 5 mu         0.5      0.987        0.986 0.653          1.41
 6 mu         0.6      1.00         0.992 0.739          1.41
 7 mu         0.7      1.02         1.03  0.664          1.49
 8 mu         0.8      0.984        0.979 0.520          1.49
 9 mu         0.9      0.960        0.953 0.190          2.12
10 mu_1       0.1      0.997        0.563 0.000259       6.23
11 mu_1       0.2      0.937        0.914 0.113          2.13
12 mu_1       0.3      0.977        0.971 0.380          1.73
13 mu_1       0.4      1.01         1.01  0.619          1.55
14 mu_1       0.5      0.987        0.974 0.636          1.39
15 mu_1       0.6      1.00         0.996 0.738          1.41
16 mu_1       0.7      1.02         1.02  0.649          1.49
17 mu_1       0.8      0.982        0.967 0.509          1.49
18 mu_1       0.9      0.960        0.949 0.185          2.14
19 mu_0       0.1      0.957        0.416 0.0000744      7.16
20 mu_0       0.2      0.940        0.877 0.0698         2.20
21 mu_0       0.3      0.966        0.957 0.359          1.77
22 mu_0       0.4      1.01         1.00  0.558          1.64
23 mu_0       0.5      0.988        0.982 0.665          1.43
24 mu_0       0.6      1.00         0.994 0.730          1.41
25 mu_0       0.7      1.02         1.03  0.690          1.47
26 mu_0       0.8      0.991        0.980 0.565          1.50
27 mu_0       0.9      0.957        0.969 0.229          1.94
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.30      1.06e-28  2.69e-83    121.  
 2 mu         0.2      1.56      3.09e-15  2.63e-55     55.9 
 3 mu         0.3      0.534     2.65e- 8  4.21e-39     18.9 
 4 mu         0.4      0.839     3.19e- 4  9.26e-28     15.0 
 5 mu         0.5      1.01      2.97e- 2  3.99e-19      8.31
 6 mu         0.6      0.950     3.63e- 1  1.61e-13      5.59
 7 mu         0.7      1.16      3.00e- 1  3.56e-22     11.0 
 8 mu         0.8      1.51      2.65e- 2  4.21e-35      9.42
 9 mu         0.9      1.46      2.37e- 7  3.67e-58     28.1 
10 mu_1       0.1      1.69      6.99e-28  2.53e-82    153.  
11 mu_1       0.2      1.40      9.35e-15  1.23e-54     55.9 
12 mu_1       0.3      0.531     5.91e- 8  1.32e-38     17.6 
13 mu_1       0.4      0.874     3.86e- 4  2.18e-27     13.5 
14 mu_1       0.5      1.00      4.25e- 2  7.50e-19      7.98
15 mu_1       0.6      0.946     3.59e- 1  3.76e-14      5.70
16 mu_1       0.7      1.18      3.10e- 1  1.02e-22     11.7 
17 mu_1       0.8      1.52      2.93e- 2  1.05e-35      9.88
18 mu_1       0.9      1.46      1.79e- 7  8.16e-59     28.1 
19 mu_0       0.1      1.25      4.10e-29  1.79e-84    117.  
20 mu_0       0.2      1.60      1.25e-15  1.97e-56     55.9 
21 mu_0       0.3      0.535     1.25e- 8  3.61e-40     19.4 
22 mu_0       0.4      0.815     2.17e- 4  9.26e-29     16.0 
23 mu_0       0.5      1.01      1.69e- 2  4.79e-20      8.64
24 mu_0       0.6      0.955     2.84e- 1  3.23e-13      5.43
25 mu_0       0.7      1.12      2.37e- 1  9.50e-22      9.42
26 mu_0       0.8      1.48      4.25e- 2  1.68e-34      9.81
27 mu_0       0.9      1.42      7.57e- 7  2.94e-57     28.1 
[1] "Total run time was 497.695 seconds"
