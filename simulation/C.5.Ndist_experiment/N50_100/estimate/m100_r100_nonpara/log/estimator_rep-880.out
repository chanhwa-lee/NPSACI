
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7784"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  63  64  65  66  67  69  71  72  73 
  2   1   3   3   1   1   1   2   3   2   3   2   2   3   1   4   1   2   1   3 
 74  75  76  78  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  96 
  2   2   1   1   1   1   1   2   3   4   3   1   3   4   3   3   2   3   5   5 
 97  98  99 100 
  2   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02591 0.31112 0.57576 0.98400 6.00000 
[1] "event indicator table: "

   0    1 
4565 3219 
[1] "treatment indicator table: "

   0    1 
3033 4751 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3813
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3971
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 459.963 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.522 0.143 
 2 mu         0.1   0.2 0.626 0.172 
 3 mu         0.1   0.3 0.722 0.200 
 4 mu         0.1   0.4 0.730 0.197 
 5 mu         0.1   0.5 0.758 0.205 
 6 mu         0.2   0.1 0.411 0.0747
 7 mu         0.2   0.2 0.513 0.0971
 8 mu         0.2   0.3 0.595 0.115 
 9 mu         0.2   0.4 0.607 0.107 
10 mu         0.2   0.5 0.639 0.112 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.922       0.0137  1.70e-10     20.0 
 2 mu         0.2      0.897       0.636   1.56e- 3      7.59
 3 mu         0.3      0.970       0.964   2.69e- 1      2.21
 4 mu         0.4      0.997       0.991   4.13e- 1      2.62
 5 mu         0.5      0.969       0.958   5.38e- 1      1.60
 6 mu         0.6      1.02        1.00    6.81e- 1      1.60
 7 mu         0.7      1.00        1.01    6.94e- 1      1.67
 8 mu         0.8      1.01        0.970   5.90e- 1      1.84
 9 mu         0.9      0.967       0.913   7.28e- 2      2.68
10 mu_1       0.1      0.847       0.0280  6.02e-10     13.8 
11 mu_1       0.2      0.897       0.658   2.78e- 3      6.25
12 mu_1       0.3      0.981       0.943   2.76e- 1      2.32
13 mu_1       0.4      0.993       0.999   3.90e- 1      2.54
14 mu_1       0.5      0.971       0.944   5.31e- 1      1.63
15 mu_1       0.6      1.03        1.02    6.69e- 1      1.60
16 mu_1       0.7      1.00        1.01    7.04e- 1      1.69
17 mu_1       0.8      1.01        0.977   5.79e- 1      1.84
18 mu_1       0.9      0.967       0.910   6.66e- 2      2.77
19 mu_0       0.1      0.930       0.0122  1.22e-10     20.7 
20 mu_0       0.2      0.897       0.611   1.25e- 3      7.92
21 mu_0       0.3      0.965       0.956   2.66e- 1      2.16
22 mu_0       0.4      1.00        0.979   4.27e- 1      2.67
23 mu_0       0.5      0.968       0.947   5.24e- 1      1.56
24 mu_0       0.6      1.02        0.991   6.98e- 1      1.61
25 mu_0       0.7      1.01        0.995   6.71e- 1      1.63
26 mu_0       0.8      1.01        0.974   6.36e- 1      1.83
27 mu_0       0.9      0.963       0.897   1.29e- 1      2.16
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.46      8.03e-28  1.70e-64    241.  
 2 mu         0.2      2.70      7.97e-15  8.92e-42    133.  
 3 mu         0.3      0.871     9.81e- 8  9.72e-29     19.1 
 4 mu         0.4      0.599     6.28e- 4  1.01e-19      4.97
 5 mu         0.5      1.29      6.66e- 2  5.69e-13     32.6 
 6 mu         0.6      1.22      4.05e- 1  2.68e-13      8.20
 7 mu         0.7      1.49      3.87e- 1  2.40e-21     12.4 
 8 mu         0.8      1.24      8.75e- 3  2.84e-33     23.1 
 9 mu         0.9      0.846     6.91e- 9  1.98e-54     17.4 
10 mu_1       0.1      3.34      4.68e-27  1.53e-63    323.  
11 mu_1       0.2      2.34      2.45e-14  3.99e-41     89.3 
12 mu_1       0.3      0.789     2.13e- 7  2.90e-28     14.8 
13 mu_1       0.4      0.632     1.04e- 3  2.27e-19      5.99
14 mu_1       0.5      1.30      7.00e- 2  1.02e-12     32.6 
15 mu_1       0.6      1.24      4.06e- 1  8.04e-14      7.99
16 mu_1       0.7      1.48      3.79e- 1  6.15e-22     12.2 
17 mu_1       0.8      1.24      6.64e- 3  6.37e-34     24.5 
18 mu_1       0.9      0.840     4.83e- 9  3.95e-55     18.1 
19 mu_0       0.1      2.36      2.41e-28  1.98e-65    231.  
20 mu_0       0.2      2.79      3.85e-15  1.17e-42    144.  
21 mu_0       0.3      0.906     4.89e- 8  1.45e-29     20.9 
22 mu_0       0.4      0.576     3.69e- 4  1.77e-20      5.37
23 mu_0       0.5      1.28      4.54e- 2  1.19e-13     32.6 
24 mu_0       0.6      1.20      3.68e- 1  5.51e-13      8.53
25 mu_0       0.7      1.50      3.60e- 1  6.55e-21     12.8 
26 mu_0       0.8      1.24      1.40e- 2  1.16e-32     17.5 
27 mu_0       0.9      0.902     2.56e- 8  1.62e-53     23.1 
[1] "Total run time was 463.75 seconds"
