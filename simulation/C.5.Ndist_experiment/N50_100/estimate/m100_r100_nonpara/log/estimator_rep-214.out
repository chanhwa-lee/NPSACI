
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7529"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  64  65  66  67  68  69  70  71 
  2   1   2   3   2   2   3   2   3   1   2   1   2   3   4   2   1   1   4   1 
 73  74  75  76  77  78  80  81  82  83  84  85  87  88  89  91  92  93  94  95 
  2   2   1   2   2   5   4   1   4   3   1   2   4   4   3   1   2   1   1   4 
 96  97  98  99 100 
  2   1   1   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03333 0.35036 0.61082 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4488 3041 
[1] "treatment indicator table: "

   0    1 
2717 4812 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3715
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 353.815 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.616 0.120 
 2 mu         0.1   0.2 0.798 0.151 
 3 mu         0.1   0.3 0.880 0.164 
 4 mu         0.1   0.4 0.951 0.177 
 5 mu         0.1   0.5 0.982 0.187 
 6 mu         0.2   0.1 0.428 0.0493
 7 mu         0.2   0.2 0.558 0.0684
 8 mu         0.2   0.3 0.625 0.0664
 9 mu         0.2   0.4 0.678 0.0654
10 mu         0.2   0.5 0.703 0.0631
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.52         0.251 0.0000000125      19.2 
 2 mu         0.2      1.15         0.945 0.00440            5.05
 3 mu         0.3      1.02         0.907 0.296              2.85
 4 mu         0.4      0.962        0.971 0.421              1.79
 5 mu         0.5      0.968        0.923 0.544              2.07
 6 mu         0.6      0.979        0.960 0.631              1.44
 7 mu         0.7      0.997        0.972 0.635              1.54
 8 mu         0.8      0.988        0.958 0.643              1.79
 9 mu         0.9      1.01         1.02  0.137              3.04
10 mu_1       0.1      1.37         0.414 0.0000000403      16.5 
11 mu_1       0.2      1.15         0.931 0.00729            5.13
12 mu_1       0.3      1.01         0.851 0.299              2.92
13 mu_1       0.4      0.961        0.974 0.402              1.68
14 mu_1       0.5      0.970        0.928 0.549              2.07
15 mu_1       0.6      0.978        0.963 0.644              1.46
16 mu_1       0.7      0.997        0.971 0.635              1.54
17 mu_1       0.8      0.988        0.958 0.641              1.80
18 mu_1       0.9      1.02         1.02  0.141              3.09
19 mu_0       0.1      1.54         0.232 0.00000000936     19.5 
20 mu_0       0.2      1.16         0.950 0.00368            5.04
21 mu_0       0.3      1.02         0.919 0.276              3.02
22 mu_0       0.4      0.963        0.974 0.401              1.87
23 mu_0       0.5      0.966        0.922 0.535              2.07
24 mu_0       0.6      0.979        0.974 0.612              1.41
25 mu_0       0.7      0.996        0.973 0.634              1.54
26 mu_0       0.8      0.988        0.971 0.611              1.74
27 mu_0       0.9      1.00         0.965 0.101              2.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.65      2.39e-28  7.24e-70    364.  
 2 mu         0.2      0.853     2.36e-15  4.31e-45     56.6 
 3 mu         0.3      1.66      1.23e- 8  7.02e-31     25.7 
 4 mu         0.4      1.30      1.97e- 4  3.33e-21     24.3 
 5 mu         0.5      1.01      1.45e- 2  1.59e-14     18.6 
 6 mu         0.6      0.871     1.23e- 1  8.60e-13      8.55
 7 mu         0.7      1.29      2.16e- 1  1.91e-19     10.9 
 8 mu         0.8      1.82      1.45e- 1  4.47e-29     27.6 
 9 mu         0.9      2.02      7.54e- 6  7.07e-46     49.8 
10 mu_1       0.1      3.99      1.66e-27  6.47e-69    399.  
11 mu_1       0.2      0.716     7.81e-15  1.93e-44     31.0 
12 mu_1       0.3      1.73      2.58e- 8  2.09e-30     26.0 
13 mu_1       0.4      1.23      2.19e- 4  7.80e-21     23.6 
14 mu_1       0.5      0.995     1.95e- 2  2.98e-14     18.0 
15 mu_1       0.6      0.870     1.30e- 1  1.57e-13      7.86
16 mu_1       0.7      1.32      1.98e- 1  2.99e-20     11.2 
17 mu_1       0.8      1.83      1.43e- 1  6.11e-30     28.3 
18 mu_1       0.9      2.01      5.58e- 6  8.59e-47     50.4 
19 mu_0       0.1      3.61      8.11e-29  8.56e-71    361.  
20 mu_0       0.2      0.888     9.98e-16  5.74e-46     63.1 
21 mu_0       0.3      1.63      6.66e- 9  1.07e-31     25.6 
22 mu_0       0.4      1.34      1.05e- 4  3.56e-22     24.8 
23 mu_0       0.5      1.02      1.12e- 2  2.04e-15     19.2 
24 mu_0       0.6      0.872     1.33e- 1  1.91e-12      9.59
25 mu_0       0.7      1.23      1.83e- 1  5.68e-19     11.1 
26 mu_0       0.8      1.77      1.65e- 1  1.99e-28     25.1 
27 mu_0       0.9      2.13      2.34e- 5  6.30e-45     44.7 
[1] "Total run time was 356.692 seconds"
