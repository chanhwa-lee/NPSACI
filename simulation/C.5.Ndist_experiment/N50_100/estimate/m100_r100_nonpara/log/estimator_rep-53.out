
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7505"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  3   4   2   3   2   2   2   1   1   1   1   4   1   1   3   2   1   1   2   2 
 72  73  74  75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  92  93 
  3   3   2   2   2   4   2   3   1   1   3   2   3   3   2   2   3   4   4   1 
 95  96  97  99 100 
  1   4   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02752 0.31517 0.57670 0.99285 6.00000 
[1] "event indicator table: "

   0    1 
4445 3060 
[1] "treatment indicator table: "

   0    1 
2724 4781 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3640
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3865
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 478.64 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.472 0.0650
 2 mu         0.1   0.2 0.582 0.0731
 3 mu         0.1   0.3 0.688 0.100 
 4 mu         0.1   0.4 0.777 0.158 
 5 mu         0.1   0.5 0.810 0.160 
 6 mu         0.2   0.1 0.393 0.0345
 7 mu         0.2   0.2 0.491 0.0354
 8 mu         0.2   0.3 0.582 0.0552
 9 mu         0.2   0.4 0.650 0.0897
10 mu         0.2   0.5 0.677 0.0893
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.13         0.584 0.0000000235      6.88
 2 mu         0.2      0.994        0.890 0.00627           3.25
 3 mu         0.3      1.04         1.04  0.315             1.85
 4 mu         0.4      1.02         1.01  0.495             1.61
 5 mu         0.5      0.963        0.975 0.543             1.38
 6 mu         0.6      1.01         0.992 0.647             1.52
 7 mu         0.7      1.01         1.00  0.660             1.49
 8 mu         0.8      1.01         1.01  0.579             1.67
 9 mu         0.9      1.00         0.984 0.319             1.91
10 mu_1       0.1      1.04         0.702 0.0000000715      5.92
11 mu_1       0.2      0.989        0.927 0.00970           2.85
12 mu_1       0.3      1.05         1.06  0.322             1.94
13 mu_1       0.4      1.01         1.01  0.488             1.57
14 mu_1       0.5      0.961        0.967 0.540             1.36
15 mu_1       0.6      1.01         1.00  0.644             1.54
16 mu_1       0.7      1.01         1.00  0.652             1.51
17 mu_1       0.8      1.01         1.01  0.581             1.68
18 mu_1       0.9      1.00         0.979 0.315             1.93
19 mu_0       0.1      1.14         0.556 0.0000000182      6.98
20 mu_0       0.2      0.995        0.886 0.00542           3.35
21 mu_0       0.3      1.04         1.04  0.300             1.82
22 mu_0       0.4      1.02         1.02  0.499             1.63
23 mu_0       0.5      0.965        0.982 0.547             1.40
24 mu_0       0.6      1.00         1.00  0.644             1.50
25 mu_0       0.7      1.02         1.00  0.677             1.44
26 mu_0       0.8      1.01         1.01  0.568             1.63
27 mu_0       0.9      1.00         0.980 0.353             1.76
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.77      3.08e-29  3.23e-72    109.  
 2 mu         0.2      0.932     5.04e-16  7.70e-47     37.8 
 3 mu         0.3      0.994     6.22e- 9  2.82e-32     15.0 
 4 mu         0.4      1.09      8.37e- 5  3.35e-22     15.0 
 5 mu         0.5      0.939     2.18e- 2  6.99e-15     16.9 
 6 mu         0.6      1.23      1.66e- 1  5.34e-11     11.6 
 7 mu         0.7      1.69      3.94e- 1  6.02e-17     11.2 
 8 mu         0.8      0.985     1.38e- 1  1.22e-25      7.10
 9 mu         0.9      1.08      1.37e- 6  3.39e-43     15.8 
10 mu_1       0.1      1.98      2.21e-28  2.89e-71    107.  
11 mu_1       0.2      0.805     1.68e-15  3.45e-46     25.2 
12 mu_1       0.3      1.06      1.36e- 8  8.42e-32     16.0 
13 mu_1       0.4      1.06      1.40e- 4  7.51e-22     14.1 
14 mu_1       0.5      0.935     2.76e- 2  1.28e-14     16.3 
15 mu_1       0.6      1.25      2.02e- 1  8.73e-12     11.6 
16 mu_1       0.7      1.69      3.31e- 1  1.15e-17     11.4 
17 mu_1       0.8      0.970     1.39e- 1  2.04e-26      6.68
18 mu_1       0.9      1.08      1.02e- 6  8.85e-44     16.3 
19 mu_0       0.1      1.75      9.58e-30  3.74e-73    109.  
20 mu_0       0.2      0.964     2.09e-16  1.00e-47     40.9 
21 mu_0       0.3      0.968     2.95e- 9  4.20e-33     14.5 
22 mu_0       0.4      1.11      4.62e- 5  5.82e-23     15.5 
23 mu_0       0.5      0.943     1.35e- 2  1.14e-15     17.5 
24 mu_0       0.6      1.19      1.56e- 1  1.19e-10     11.7 
25 mu_0       0.7      1.69      4.13e- 1  1.74e-16     10.9 
26 mu_0       0.8      1.05      9.93e- 2  5.29e-25      8.75
27 mu_0       0.9      1.10      4.52e- 6  2.60e-42     12.3 
[1] "Total run time was 483.608 seconds"
