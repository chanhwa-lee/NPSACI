
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7500"
[1] "cluster size dist'n: "

 50  51  53  54  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  2   1   3   1   1   3   4   4   6   1   1   2   1   3   3   1   3   1   2   1 
 72  73  74  75  76  77  78  79  81  82  84  85  86  87  88  89  90  91  92  94 
  1   2   1   4   1   3   1   2   6   1   2   2   1   2   4   1   4   1   4   3 
 96  97  99 100 
  3   2   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02411 0.32054 0.58442 1.00000 5.03334 
[1] "event indicator table: "

   0    1 
4425 3075 
[1] "treatment indicator table: "

   0    1 
2915 4585 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3828
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3672
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 427.664 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.355 0.0865
 2 mu         0.1   0.2 0.367 0.0736
 3 mu         0.1   0.3 0.418 0.0842
 4 mu         0.1   0.4 0.446 0.0939
 5 mu         0.1   0.5 0.467 0.0943
 6 mu         0.2   0.1 0.578 0.121 
 7 mu         0.2   0.2 0.659 0.141 
 8 mu         0.2   0.3 0.757 0.162 
 9 mu         0.2   0.4 0.818 0.178 
10 mu         0.2   0.5 0.875 0.185 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.623       0.0536  5.50e-12      6.53
 2 mu         0.2      1.37        0.797   1.14e- 4     27.7 
 3 mu         0.3      1.08        0.950   4.77e- 2      4.92
 4 mu         0.4      0.991       0.941   3.87e- 1      3.14
 5 mu         0.5      1.01        0.974   4.92e- 1      1.89
 6 mu         0.6      0.981       0.985   6.24e- 1      1.43
 7 mu         0.7      0.988       0.958   5.17e- 1      1.68
 8 mu         0.8      0.965       0.931   9.98e- 2      1.72
 9 mu         0.9      1.09        0.817   3.68e- 5      8.99
10 mu_1       0.1      0.687       0.0954  2.05e-11      9.02
11 mu_1       0.2      1.38        0.880   2.41e- 4     28.4 
12 mu_1       0.3      1.06        0.921   6.75e- 2      4.60
13 mu_1       0.4      0.989       0.944   3.82e- 1      2.94
14 mu_1       0.5      1.01        0.968   4.84e- 1      1.92
15 mu_1       0.6      0.979       0.981   6.41e- 1      1.42
16 mu_1       0.7      0.989       0.952   4.93e- 1      1.69
17 mu_1       0.8      0.965       0.933   8.98e- 2      1.75
18 mu_1       0.9      1.09        0.822   3.03e- 5      9.48
19 mu_0       0.1      0.616       0.0490  3.83e-12      6.58
20 mu_0       0.2      1.37        0.780   8.24e- 5     27.6 
21 mu_0       0.3      1.09        0.958   3.92e- 2      5.06
22 mu_0       0.4      0.992       0.940   3.91e- 1      3.28
23 mu_0       0.5      1.00        0.964   5.00e- 1      1.85
24 mu_0       0.6      0.985       0.986   5.98e- 1      1.46
25 mu_0       0.7      0.985       0.973   5.59e- 1      1.64
26 mu_0       0.8      0.966       0.964   1.40e- 1      1.61
27 mu_0       0.9      1.09        0.826   9.58e- 5      6.46
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00493     1.14e-27  2.04e-67     0.388
 2 mu         0.2    0.728       4.37e-14  5.40e-45    20.1  
 3 mu         0.3    2.21        5.60e- 7  5.82e-32   143.   
 4 mu         0.4    1.78        2.48e- 3  8.61e-23    59.8  
 5 mu         0.5    1.10        1.21e- 1  9.24e-16     6.78 
 6 mu         0.6    1.23        2.49e- 1  2.37e-10    11.8  
 7 mu         0.7    1.20        2.39e- 1  1.65e-17    11.2  
 8 mu         0.8    1.63        7.99e- 3  2.53e-28    27.7  
 9 mu         0.9   21.6         2.43e- 9  9.03e-48   780.   
10 mu_1       0.1    0.0115      7.80e-27  1.96e-66     0.901
11 mu_1       0.2    0.911       1.29e-13  2.60e-44    25.3  
12 mu_1       0.3    2.22        1.15e- 6  1.87e-31   141.   
13 mu_1       0.4    1.73        3.92e- 3  2.07e-22    58.5  
14 mu_1       0.5    1.09        1.43e- 1  1.78e-15     6.01 
15 mu_1       0.6    1.24        2.33e- 1  8.96e-11    12.3  
16 mu_1       0.7    1.20        2.00e- 1  5.35e-18    11.6  
17 mu_1       0.8    1.71        6.16e- 3  7.18e-29    31.3  
18 mu_1       0.9   22.2         1.73e- 9  2.28e-48   812.   
19 mu_0       0.1    0.00420     4.03e-28  8.70e-69     0.331
20 mu_0       0.2    0.682       2.25e-14  2.60e-46    19.3  
21 mu_0       0.3    2.21        3.05e- 7  3.20e-33   143.   
22 mu_0       0.4    1.82        1.52e- 3  5.52e-24    60.6  
23 mu_0       0.5    1.11        8.44e- 2  7.11e-17     8.25 
24 mu_0       0.6    1.21        2.62e- 1  3.95e-11    11.1  
25 mu_0       0.7    1.21        1.95e- 1  4.25e-17    10.3  
26 mu_0       0.8    1.27        1.49e- 2  9.77e-28    13.1  
27 mu_0       0.9   16.1         9.04e- 9  6.98e-47   547.   
[1] "Total run time was 431.725 seconds"
