
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7359"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  1   1   3   1   2   4   2   4   5   4   3   1   2   1   2   1   2   1   2   3 
 70  71  72  73  74  76  77  78  79  80  81  82  83  84  86  87  88  89  91  93 
  2   2   1   4   2   1   3   2   1   1   2   2   1   2   3   2   2   2   3   2 
 94  95  96  97  98  99 100 
  3   2   2   1   2   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04176 0.36418 0.62808 1.00000 6.24160 
[1] "event indicator table: "

   0    1 
4276 3083 
[1] "treatment indicator table: "

   0    1 
2832 4527 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3525
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3834
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 372.863 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.264 0.0534
 2 mu         0.1   0.2 0.301 0.0655
 3 mu         0.1   0.3 0.334 0.0704
 4 mu         0.1   0.4 0.362 0.0882
 5 mu         0.1   0.5 0.406 0.0852
 6 mu         0.2   0.1 0.287 0.0310
 7 mu         0.2   0.2 0.340 0.0391
 8 mu         0.2   0.3 0.380 0.0464
 9 mu         0.2   0.4 0.420 0.0615
10 mu         0.2   0.5 0.476 0.0518
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.658       0.100  0.0000000222      8.79
 2 mu         0.2      0.860       0.659  0.00249           3.54
 3 mu         0.3      1.03        1.03   0.167             2.66
 4 mu         0.4      1.04        1.02   0.473             1.84
 5 mu         0.5      1.01        1.02   0.435             1.76
 6 mu         0.6      0.977       0.979  0.560             1.38
 7 mu         0.7      0.985       0.955  0.712             1.63
 8 mu         0.8      0.990       0.993  0.543             1.49
 9 mu         0.9      0.979       0.956  0.174             2.33
10 mu_1       0.1      0.681       0.184  0.0000000687      9.26
11 mu_1       0.2      0.882       0.654  0.00487           3.42
12 mu_1       0.3      1.04        1.02   0.185             2.66
13 mu_1       0.4      1.04        1.03   0.473             1.78
14 mu_1       0.5      1.01        1.02   0.422             1.74
15 mu_1       0.6      0.978       0.981  0.567             1.38
16 mu_1       0.7      0.985       0.955  0.708             1.64
17 mu_1       0.8      0.991       0.996  0.548             1.50
18 mu_1       0.9      0.978       0.964  0.169             2.35
19 mu_0       0.1      0.655       0.0915 0.0000000170      8.73
20 mu_0       0.2      0.855       0.674  0.00189           3.57
21 mu_0       0.3      1.02        1.04   0.142             2.65
22 mu_0       0.4      1.04        1.02   0.472             1.88
23 mu_0       0.5      1.02        1.02   0.447             1.78
24 mu_0       0.6      0.977       0.969  0.526             1.38
25 mu_0       0.7      0.987       0.956  0.704             1.69
26 mu_0       0.8      0.985       0.958  0.524             1.49
27 mu_0       0.9      0.991       0.945  0.225             2.17
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.174     3.13e-24  3.92e-81      9.51
 2 mu         0.2      1.94      3.40e-13  8.52e-55     93.4 
 3 mu         0.3      1.36      4.09e- 7  1.79e-39     31.8 
 4 mu         0.4      1.22      1.15e- 3  1.11e-28     14.0 
 5 mu         0.5      1.31      7.01e- 2  2.17e-20     19.3 
 6 mu         0.6      1.06      3.05e- 1  1.03e-13      8.35
 7 mu         0.7      1.15      2.40e- 1  5.64e-18     15.3 
 8 mu         0.8      0.808     5.59e- 3  2.95e-28      6.21
 9 mu         0.9      0.849     5.15e- 9  1.66e-46     21.7 
10 mu_1       0.1      0.322     2.15e-23  3.79e-80     17.3 
11 mu_1       0.2      1.92      1.16e-12  4.12e-54     84.9 
12 mu_1       0.3      1.34      8.39e- 7  5.76e-39     27.3 
13 mu_1       0.4      1.22      1.89e- 3  2.69e-28     15.3 
14 mu_1       0.5      1.29      7.21e- 2  4.20e-20     17.8 
15 mu_1       0.6      1.06      3.73e- 1  1.66e-13      8.13
16 mu_1       0.7      1.16      2.56e- 1  1.46e-18     15.6 
17 mu_1       0.8      0.790     4.33e- 3  6.70e-29      6.16
18 mu_1       0.9      0.867     3.65e- 9  3.36e-47     22.0 
19 mu_0       0.1      0.158     1.09e-24  1.44e-82      8.65
20 mu_0       0.2      1.95      1.35e-13  3.51e-56     95.5 
21 mu_0       0.3      1.37      2.07e- 7  8.42e-41     33.8 
22 mu_0       0.4      1.22      6.57e- 4  6.11e-30     14.2 
23 mu_0       0.5      1.33      6.24e- 2  1.43e-21     20.8 
24 mu_0       0.6      1.06      2.26e- 1  8.51e-15      8.67
25 mu_0       0.7      1.13      2.82e- 1  1.54e-17     14.4 
26 mu_0       0.8      0.882     8.63e- 3  1.21e-27      7.05
27 mu_0       0.9      0.685     1.87e- 8  1.36e-45     19.4 
[1] "Total run time was 376.107 seconds"
