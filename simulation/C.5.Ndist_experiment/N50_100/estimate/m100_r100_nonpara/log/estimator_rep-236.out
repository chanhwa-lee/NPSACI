
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7222"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  65  66  67  68  69  70 
  2   3   4   1   4   1   1   5   2   1   1   2   2   3   1   1   2   6   2   1 
 71  72  73  74  76  77  79  80  81  82  83  84  85  86  89  90  91  93  94  95 
  3   1   2   1   6   4   7   4   3   1   2   2   3   3   1   1   1   3   3   1 
 96  98 100 
  1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03294 0.33792 0.61258 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4316 2906 
[1] "treatment indicator table: "

   0    1 
2572 4650 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3722
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3500
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 451.094 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.515 0.103 
 2 mu         0.1   0.2 0.643 0.135 
 3 mu         0.1   0.3 0.701 0.146 
 4 mu         0.1   0.4 0.753 0.154 
 5 mu         0.1   0.5 0.780 0.161 
 6 mu         0.2   0.1 0.408 0.0612
 7 mu         0.2   0.2 0.495 0.0715
 8 mu         0.2   0.3 0.536 0.0730
 9 mu         0.2   0.4 0.580 0.0721
10 mu         0.2   0.5 0.602 0.0757
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.13         0.498 0.0000000179     23.6 
 2 mu         0.2      0.919        0.825 0.00584           3.08
 3 mu         0.3      1.00         0.971 0.352             1.88
 4 mu         0.4      1.04         1.03  0.555             1.88
 5 mu         0.5      1.02         1.02  0.632             1.88
 6 mu         0.6      0.980        0.972 0.666             1.43
 7 mu         0.7      0.990        0.997 0.613             1.35
 8 mu         0.8      0.997        0.989 0.432             1.54
 9 mu         0.9      0.973        0.927 0.166             1.91
10 mu_1       0.1      1.04         0.589 0.0000000612     12.6 
11 mu_1       0.2      0.923        0.829 0.0101            2.83
12 mu_1       0.3      1.01         1.00  0.355             1.91
13 mu_1       0.4      1.04         1.03  0.575             1.83
14 mu_1       0.5      1.01         1.03  0.613             1.83
15 mu_1       0.6      0.980        0.967 0.670             1.43
16 mu_1       0.7      0.991        0.990 0.600             1.37
17 mu_1       0.8      0.995        0.986 0.429             1.54
18 mu_1       0.9      0.976        0.927 0.156             1.95
19 mu_0       0.1      1.14         0.498 0.0000000131     24.9 
20 mu_0       0.2      0.918        0.808 0.00478           3.14
21 mu_0       0.3      0.997        0.977 0.351             1.88
22 mu_0       0.4      1.04         1.02  0.543             1.92
23 mu_0       0.5      1.02         1.02  0.650             1.92
24 mu_0       0.6      0.980        0.972 0.660             1.42
25 mu_0       0.7      0.988        0.989 0.642             1.34
26 mu_0       0.8      1.00         0.986 0.441             1.54
27 mu_0       0.9      0.950        0.932 0.256             1.66
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.42      3.77e-27  3.98e-72    124.  
 2 mu         0.2      0.836     4.70e-14  5.35e-48     55.5 
 3 mu         0.3      0.225     2.00e- 7  5.03e-34      5.25
 4 mu         0.4      0.951     2.96e- 4  3.07e-24     13.1 
 5 mu         0.5      1.32      9.33e- 2  5.93e-17     14.5 
 6 mu         0.6      1.27      4.35e- 1  1.73e-18     14.2 
 7 mu         0.7      1.15      2.16e- 1  6.26e-28      8.89
 8 mu         0.8      1.14      2.85e- 2  1.13e-41     19.0 
 9 mu         0.9      1.68      1.24e- 6  9.60e-66     22.5 
10 mu_1       0.1      2.82      2.19e-26  3.75e-71    122.  
11 mu_1       0.2      0.566     1.44e-13  2.52e-47     40.1 
12 mu_1       0.3      0.284     4.18e- 7  1.58e-33      5.99
13 mu_1       0.4      1.01      3.79e- 4  7.22e-24     13.0 
14 mu_1       0.5      1.32      1.17e- 1  1.17e-16     13.7 
15 mu_1       0.6      1.26      4.42e- 1  3.68e-19     13.6 
16 mu_1       0.7      1.15      2.26e- 1  1.14e-28      8.62
17 mu_1       0.8      1.13      2.82e- 2  1.80e-42     18.8 
18 mu_1       0.9      1.69      9.18e- 7  1.36e-66     22.6 
19 mu_0       0.1      2.37      1.76e-27  2.57e-73    124.  
20 mu_0       0.2      0.904     2.28e-14  3.89e-49     59.3 
21 mu_0       0.3      0.199     1.07e- 7  4.18e-35      4.93
22 mu_0       0.4      0.912     3.02e- 4  2.97e-25     13.2 
23 mu_0       0.5      1.32      6.26e- 2  1.74e-18     15.3 
24 mu_0       0.6      1.28      3.25e- 1  3.77e-18     15.2 
25 mu_0       0.7      1.17      1.92e- 1  1.82e-27      9.52
26 mu_0       0.8      1.14      4.60e- 2  4.92e-41     19.8 
27 mu_0       0.9      1.59      4.16e- 6  8.37e-65     21.2 
[1] "Total run time was 455.229 seconds"
