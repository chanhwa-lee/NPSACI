
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7406"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 73 74 75 76 
 1  4  2  2  1  4  2  3  1  4  1  3  2  1  3  2  2  1  2  1  1  4  1  1  1  2 
77 79 80 81 82 83 84 85 86 87 88 89 90 91 94 95 96 98 
 2  1  2  1  2  5  1  7  2  3  5  2  3  1  2  4  2  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03469 0.33252 0.59594 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4379 3027 
[1] "treatment indicator table: "

   0    1 
2774 4632 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3567
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 24"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3839
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 437.907 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.564 0.162 
 2 mu         0.1   0.2 0.662 0.172 
 3 mu         0.1   0.3 0.732 0.177 
 4 mu         0.1   0.4 0.757 0.181 
 5 mu         0.1   0.5 0.788 0.187 
 6 mu         0.2   0.1 0.448 0.105 
 7 mu         0.2   0.2 0.537 0.101 
 8 mu         0.2   0.3 0.591 0.0911
 9 mu         0.2   0.4 0.612 0.0826
10 mu         0.2   0.5 0.640 0.0787
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.20        0.0699 0.00000000218     22.5 
 2 mu         0.2      1.01        0.752  0.00156            8.36
 3 mu         0.3      0.908       0.866  0.142              1.79
 4 mu         0.4      0.968       0.963  0.495              1.67
 5 mu         0.5      0.994       0.979  0.565              1.57
 6 mu         0.6      1.01        0.994  0.662              1.51
 7 mu         0.7      1.00        1.01   0.578              1.66
 8 mu         0.8      1.01        1.00   0.545              1.57
 9 mu         0.9      0.982       0.992  0.152              1.77
10 mu_1       0.1      1.34        0.140  0.00000000717     29.4 
11 mu_1       0.2      0.971       0.812  0.00293            5.58
12 mu_1       0.3      0.908       0.854  0.168              1.66
13 mu_1       0.4      0.974       0.965  0.490              1.66
14 mu_1       0.5      0.994       0.980  0.551              1.54
15 mu_1       0.6      1.01        0.990  0.667              1.51
16 mu_1       0.7      1.00        1.00   0.569              1.67
17 mu_1       0.8      1.01        1.01   0.536              1.57
18 mu_1       0.9      0.980       0.994  0.142              1.78
19 mu_0       0.1      1.18        0.0622 0.00000000162     21.8 
20 mu_0       0.2      1.02        0.736  0.00122            9.06
21 mu_0       0.3      0.908       0.864  0.132              1.85
22 mu_0       0.4      0.964       0.953  0.495              1.68
23 mu_0       0.5      0.994       0.980  0.578              1.61
24 mu_0       0.6      1.01        0.994  0.654              1.52
25 mu_0       0.7      1.00        1.00   0.599              1.63
26 mu_0       0.8      1.00        0.994  0.582              1.57
27 mu_0       0.9      0.996       0.962  0.246              1.66
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0288     1.61e-25  7.45e-76      2.66
 2 mu         0.2     0.948      7.23e-14  1.60e-49     64.3 
 3 mu         0.3     1.10       2.83e- 7  2.26e-34     27.6 
 4 mu         0.4     0.893      2.47e- 3  9.87e-25     20.0 
 5 mu         0.5     1.19       1.86e- 1  1.02e-17      5.87
 6 mu         0.6     1.30       5.73e- 1  8.80e-13     12.4 
 7 mu         0.7     1.01       2.00e- 1  9.16e-21      9.35
 8 mu         0.8     1.09       3.23e- 3  1.24e-32     10.5 
 9 mu         0.9     1.29       2.21e- 9  9.72e-54     20.9 
10 mu_1       0.1     0.0555     8.72e-25  6.76e-75      5.03
11 mu_1       0.2     0.990      2.29e-13  7.25e-49     60.8 
12 mu_1       0.3     1.13       6.29e- 7  6.83e-34     28.6 
13 mu_1       0.4     0.877      3.63e- 3  2.40e-24     18.0 
14 mu_1       0.5     1.21       2.34e- 1  1.98e-17      6.07
15 mu_1       0.6     1.29       5.72e- 1  2.77e-13     12.2 
16 mu_1       0.7     1.01       1.64e- 1  2.47e-21      9.46
17 mu_1       0.8     1.10       2.59e- 3  2.93e-33     10.5 
18 mu_1       0.9     1.27       1.48e- 9  2.04e-54     21.0 
19 mu_0       0.1     0.0258     8.18e-26  7.60e-77      2.40
20 mu_0       0.2     0.938      3.31e-14  1.83e-50     65.2 
21 mu_0       0.3     1.08       1.35e- 7  2.87e-35     27.1 
22 mu_0       0.4     0.903      1.61e- 3  4.33e-26     21.4 
23 mu_0       0.5     1.16       1.43e- 1  5.35e-19      5.67
24 mu_0       0.6     1.32       6.45e- 1  3.10e-13     12.7 
25 mu_0       0.7     1.02       2.24e- 1  2.48e-20      9.09
26 mu_0       0.8     1.07       6.25e- 3  5.03e-32     11.2 
27 mu_0       0.9     1.38       8.79e- 9  7.88e-53     19.9 
[1] "Total run time was 444.719 seconds"
