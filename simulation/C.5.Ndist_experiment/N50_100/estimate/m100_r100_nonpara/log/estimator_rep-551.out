
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7323"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  64  66  67  68  69  71  72 
  4   3   1   3   2   2   2   5   1   1   1   3   1   3   3   4   4   2   3   3 
 73  74  75  76  77  78  80  81  82  83  84  85  86  87  89  90  91  92  93  94 
  2   1   2   1   1   5   4   2   1   1   3   2   1   1   5   1   1   1   1   3 
 95  96  98  99 100 
  1   2   4   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02543 0.33714 0.59525 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4397 2926 
[1] "treatment indicator table: "

   0    1 
2816 4507 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3779
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3544
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 518.472 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.440 0.133 
 2 mu         0.1   0.2 0.543 0.162 
 3 mu         0.1   0.3 0.557 0.166 
 4 mu         0.1   0.4 0.571 0.174 
 5 mu         0.1   0.5 0.594 0.181 
 6 mu         0.2   0.1 0.396 0.0461
 7 mu         0.2   0.2 0.490 0.0588
 8 mu         0.2   0.3 0.519 0.0462
 9 mu         0.2   0.4 0.540 0.0406
10 mu         0.2   0.5 0.567 0.0411
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.920        0.396 0.00000000299     28.2 
 2 mu         0.2      0.957        0.888 0.00287            3.78
 3 mu         0.3      0.950        0.937 0.240              2.15
 4 mu         0.4      1.00         0.992 0.492              1.61
 5 mu         0.5      1.02         1.03  0.683              1.45
 6 mu         0.6      0.991        0.983 0.695              1.41
 7 mu         0.7      1.01         0.996 0.667              1.41
 8 mu         0.8      1.02         1.01  0.637              1.57
 9 mu         0.9      0.960        0.931 0.325              1.87
10 mu_1       0.1      0.859        0.540 0.00000000971     17.4 
11 mu_1       0.2      0.960        0.917 0.00494            3.05
12 mu_1       0.3      0.950        0.917 0.295              2.03
13 mu_1       0.4      1.01         0.990 0.491              1.59
14 mu_1       0.5      1.02         1.03  0.699              1.44
15 mu_1       0.6      0.991        0.979 0.682              1.41
16 mu_1       0.7      1.01         0.992 0.678              1.43
17 mu_1       0.8      1.01         1.01  0.625              1.58
18 mu_1       0.9      0.960        0.929 0.328              1.88
19 mu_0       0.1      0.927        0.386 0.00000000225     29.4 
20 mu_0       0.2      0.956        0.889 0.00236            3.96
21 mu_0       0.3      0.950        0.938 0.217              2.20
22 mu_0       0.4      1.00         0.993 0.492              1.62
23 mu_0       0.5      1.03         1.03  0.661              1.46
24 mu_0       0.6      0.991        0.988 0.715              1.42
25 mu_0       0.7      1.01         0.983 0.640              1.37
26 mu_0       0.8      1.02         1.01  0.665              1.56
27 mu_0       0.9      0.965        0.950 0.305              1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.110      2.43e-25  2.37e-69      6.29
 2 mu         0.2     1.53       3.26e-13  2.16e-44     88.9 
 3 mu         0.3     1.25       2.89e- 7  1.04e-31     31.7 
 4 mu         0.4     0.845      9.41e- 4  8.62e-23     12.4 
 5 mu         0.5     1.01       5.62e- 2  5.92e-16      5.94
 6 mu         0.6     1.20       4.85e- 1  1.38e-10     13.5 
 7 mu         0.7     1.08       1.17e- 1  1.88e-17      4.87
 8 mu         0.8     1.08       7.44e- 3  1.12e-27     11.0 
 9 mu         0.9     1.17       4.67e- 9  7.12e-46     23.1 
10 mu_1       0.1     0.200      1.40e-24  2.06e-68     10.9 
11 mu_1       0.2     1.59       1.08e-12  1.04e-43     85.5 
12 mu_1       0.3     1.19       6.50e- 7  3.32e-31     30.8 
13 mu_1       0.4     0.856      1.54e- 3  2.07e-22     12.4 
14 mu_1       0.5     1.02       7.28e- 2  1.14e-15      5.80
15 mu_1       0.6     1.20       4.30e- 1  4.43e-11     13.4 
16 mu_1       0.7     1.07       1.38e- 1  5.16e-18      5.21
17 mu_1       0.8     1.08       5.85e- 3  2.70e-28     10.9 
18 mu_1       0.9     1.19       3.37e- 9  1.52e-46     24.0 
19 mu_0       0.1     0.0998     1.15e-25  3.46e-70      5.78
20 mu_0       0.2     1.52       1.37e-13  1.07e-45     89.8 
21 mu_0       0.3     1.28       1.35e- 7  5.85e-33     32.0 
22 mu_0       0.4     0.838      5.41e- 4  5.67e-24     12.5 
23 mu_0       0.5     0.996      5.56e- 2  4.68e-17      6.09
24 mu_0       0.6     1.20       4.25e- 1  1.80e-11     13.6 
25 mu_0       0.7     1.08       1.39e- 1  5.06e-17      5.17
26 mu_0       0.8     1.07       1.20e- 2  4.53e-27     11.3 
27 mu_0       0.9     0.975      1.64e- 8  5.75e-45     15.2 
[1] "Total run time was 522.905 seconds"
