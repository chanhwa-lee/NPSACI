
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7588"
[1] "cluster size dist'n: "

 50  51  53  54  55  57  58  59  60  61  62  63  64  66  68  69  70  71  72  73 
  2   1   1   2   3   3   1   3   3   1   7   1   3   2   2   2   2   1   1   2 
 74  75  76  77  79  80  81  82  83  84  85  86  88  89  90  91  92  93  94  95 
  1   3   3   4   3   1   1   2   3   1   3   2   3   2   2   5   2   6   3   2 
 96  98  99 100 
  1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04351 0.37397 0.63252 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4567 3021 
[1] "treatment indicator table: "

   0    1 
2664 4924 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3940
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3648
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 355.219 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.331 0.122 
 2 mu         0.1   0.2 0.396 0.154 
 3 mu         0.1   0.3 0.431 0.165 
 4 mu         0.1   0.4 0.444 0.173 
 5 mu         0.1   0.5 0.508 0.180 
 6 mu         0.2   0.1 0.340 0.0432
 7 mu         0.2   0.2 0.408 0.0576
 8 mu         0.2   0.3 0.456 0.0567
 9 mu         0.2   0.4 0.487 0.0558
10 mu         0.2   0.5 0.541 0.0622
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.674       0.0172  4.16e-10     23.1 
 2 mu         0.2      0.871       0.652   2.15e- 3      3.02
 3 mu         0.3      1.05        1.04    1.71e- 1      2.98
 4 mu         0.4      1.03        0.997   5.32e- 1      1.83
 5 mu         0.5      0.972       0.973   3.83e- 1      1.34
 6 mu         0.6      1.00        1.01    5.87e- 1      1.39
 7 mu         0.7      1.01        0.997   6.45e- 1      2.06
 8 mu         0.8      0.979       0.968   4.94e- 1      1.62
 9 mu         0.9      1.01        0.979   8.62e- 2      2.55
10 mu_1       0.1      0.593       0.0357  1.43e- 9      7.79
11 mu_1       0.2      0.889       0.768   3.69e- 3      2.99
12 mu_1       0.3      1.06        1.04    2.07e- 1      2.96
13 mu_1       0.4      1.02        0.990   4.89e- 1      1.78
14 mu_1       0.5      0.972       0.974   3.99e- 1      1.33
15 mu_1       0.6      1.00        1.01    5.97e- 1      1.47
16 mu_1       0.7      1.01        0.992   6.46e- 1      2.01
17 mu_1       0.8      0.979       0.971   4.85e- 1      1.64
18 mu_1       0.9      1.01        0.969   8.08e- 2      2.63
19 mu_0       0.1      0.683       0.0151  3.03e-10     25.1 
20 mu_0       0.2      0.866       0.629   1.76e- 3      3.08
21 mu_0       0.3      1.05        1.02    1.56e- 1      2.99
22 mu_0       0.4      1.03        1.00    5.51e- 1      1.87
23 mu_0       0.5      0.972       0.980   3.66e- 1      1.35
24 mu_0       0.6      0.999       1.01    5.71e- 1      1.30
25 mu_0       0.7      1.01        1.00    6.42e- 1      2.18
26 mu_0       0.8      0.979       0.981   5.30e- 1      1.56
27 mu_0       0.9      1.01        0.995   1.35e- 1      2.38
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0740     6.23e-31  4.07e-63      5.56
 2 mu         0.2     1.70       1.11e-16  2.99e-40     70.9 
 3 mu         0.3     1.03       5.06e- 9  1.72e-27     23.3 
 4 mu         0.4     0.512      6.58e- 5  1.01e-18     10.8 
 5 mu         0.5     1.11       1.97e- 2  3.62e-12     16.7 
 6 mu         0.6     1.27       4.19e- 1  6.45e- 9     15.9 
 7 mu         0.7     1.07       3.83e- 1  1.24e-15      6.24
 8 mu         0.8     1.45       3.06e- 2  7.35e-26     11.6 
 9 mu         0.9     1.49       8.84e- 8  2.36e-44     30.6 
10 mu_1       0.1     0.148      4.20e-30  3.53e-62     10.9 
11 mu_1       0.2     1.86       3.39e-16  1.30e-39     69.8 
12 mu_1       0.3     0.871      1.04e- 8  5.11e-27     19.4 
13 mu_1       0.4     0.544      1.12e- 4  2.25e-18     12.4 
14 mu_1       0.5     1.13       2.71e- 2  6.46e-12     15.4 
15 mu_1       0.6     1.28       4.87e- 1  2.63e- 9     16.2 
16 mu_1       0.7     1.06       3.79e- 1  4.34e-16      5.89
17 mu_1       0.8     1.48       2.52e- 2  2.24e-26     12.0 
18 mu_1       0.9     1.46       6.22e- 8  6.41e-45     30.9 
19 mu_0       0.1     0.0657     2.26e-31  6.03e-64      4.96
20 mu_0       0.2     1.66       4.89e-17  4.75e-41     71.2 
21 mu_0       0.3     1.10       2.77e- 9  2.63e-28     25.0 
22 mu_0       0.4     0.491      3.55e- 5  1.80e-19      9.66
23 mu_0       0.5     1.09       1.27e- 2  7.75e-13     18.0 
24 mu_0       0.6     1.25       3.40e- 1  1.22e- 8     15.4 
25 mu_0       0.7     1.09       4.06e- 1  3.13e-15      7.19
26 mu_0       0.8     1.33       5.24e- 2  2.78e-25     10.0 
27 mu_0       0.9     1.75       3.24e- 7  1.79e-43     27.8 
[1] "Total run time was 358.6 seconds"
