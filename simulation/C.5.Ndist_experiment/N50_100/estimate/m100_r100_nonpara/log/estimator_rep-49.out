
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7575"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  68  69  70  71 
  4   1   3   2   2   2   1   3   2   2   2   1   2   3   1   2   4   2   2   5 
 72  73  74  76  79  81  82  83  84  85  86  87  88  89  90  92  93  94  95  96 
  3   2   2   1   1   3   2   1   1   2   2   4   5   1   2   3   3   3   1   1 
 97  98  99 100 
  1   5   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02766 0.33114 0.60759 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4414 3161 
[1] "treatment indicator table: "

   0    1 
2826 4749 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3773
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 434.096 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.489 0.138 
 2 mu         0.1   0.2 0.559 0.129 
 3 mu         0.1   0.3 0.659 0.154 
 4 mu         0.1   0.4 0.688 0.139 
 5 mu         0.1   0.5 0.731 0.125 
 6 mu         0.2   0.1 0.415 0.0781
 7 mu         0.2   0.2 0.485 0.0714
 8 mu         0.2   0.3 0.578 0.0846
 9 mu         0.2   0.4 0.610 0.0736
10 mu         0.2   0.5 0.657 0.0611
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.09         0.510 0.000000969      7.76
 2 mu         0.2      1.06         1.05  0.0252           2.63
 3 mu         0.3      1.06         1.05  0.364            1.75
 4 mu         0.4      1.01         0.999 0.535            1.87
 5 mu         0.5      1.01         0.990 0.592            1.52
 6 mu         0.6      1.01         1.01  0.601            1.71
 7 mu         0.7      0.986        0.968 0.671            1.43
 8 mu         0.8      0.982        0.960 0.528            1.51
 9 mu         0.9      0.998        0.941 0.296            2.38
10 mu_1       0.1      1.08         0.506 0.00000277       5.80
11 mu_1       0.2      1.07         1.01  0.0370           2.36
12 mu_1       0.3      1.06         1.04  0.338            1.79
13 mu_1       0.4      1.01         0.988 0.578            1.86
14 mu_1       0.5      1.01         0.984 0.587            1.52
15 mu_1       0.6      1.01         1.02  0.587            1.74
16 mu_1       0.7      0.985        0.968 0.677            1.41
17 mu_1       0.8      0.983        0.970 0.530            1.53
18 mu_1       0.9      0.997        0.937 0.295            2.38
19 mu_0       0.1      1.09         0.505 0.000000769      8.00
20 mu_0       0.2      1.06         1.07  0.0222           2.70
21 mu_0       0.3      1.07         1.06  0.359            1.75
22 mu_0       0.4      1.02         1.01  0.507            1.88
23 mu_0       0.5      1.01         0.981 0.596            1.52
24 mu_0       0.6      1.01         1.01  0.621            1.67
25 mu_0       0.7      0.990        0.958 0.623            1.48
26 mu_0       0.8      0.978        0.973 0.522            1.42
27 mu_0       0.9      1.00         0.963 0.304            2.36
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.602     6.89e-26  1.91e-74     58.0 
 2 mu         0.2      1.60      8.12e-14  3.24e-48    101.  
 3 mu         0.3      0.725     2.38e- 7  3.50e-33     17.8 
 4 mu         0.4      1.00      1.42e- 3  1.30e-23     10.2 
 5 mu         0.5      1.12      5.00e- 2  3.25e-17     11.9 
 6 mu         0.6      1.00      1.13e- 1  5.46e-12      8.48
 7 mu         0.7      0.921     8.01e- 2  2.70e-18      9.57
 8 mu         0.8      0.938     1.03e- 2  3.20e-28      7.35
 9 mu         0.9      1.36      1.22e- 7  1.01e-45     19.5 
10 mu_1       0.1      0.944     4.16e-25  1.70e-73     89.8 
11 mu_1       0.2      1.44      2.53e-13  1.44e-47     78.4 
12 mu_1       0.3      0.723     4.85e- 7  1.04e-32     15.9 
13 mu_1       0.4      1.01      2.21e- 3  3.26e-23     10.9 
14 mu_1       0.5      1.13      6.06e- 2  6.49e-17     12.4 
15 mu_1       0.6      0.985     1.33e- 1  4.02e-12      8.22
16 mu_1       0.7      0.922     8.14e- 2  5.99e-19      9.88
17 mu_1       0.8      0.944     9.51e- 3  6.19e-29      7.57
18 mu_1       0.9      1.35      8.68e- 8  1.74e-46     19.7 
19 mu_0       0.1      0.564     3.03e-26  0            54.4 
20 mu_0       0.2      1.65      3.83e-14  0           107.  
21 mu_0       0.3      0.726     1.32e- 7  0            18.6 
22 mu_0       0.4      0.994     8.97e- 4  0             9.76
23 mu_0       0.5      1.11      5.98e- 2  0            11.5 
24 mu_0       0.6      1.02      1.01e- 1  0             8.87
25 mu_0       0.7      0.917     6.96e- 2  0             8.84
26 mu_0       0.8      0.913     1.86e- 2  0             6.46
27 mu_0       0.9      1.42      9.62e- 8  0            17.3 
[1] "Total run time was 437.562 seconds"
