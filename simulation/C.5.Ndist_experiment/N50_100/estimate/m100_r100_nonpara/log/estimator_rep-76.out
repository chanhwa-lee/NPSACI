
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7368"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 69 70 71 72 73 74 75 76 
 1  2  4  2  2  2  3  1  2  3  1  2  1  4  2  2  1  3  5  2  1  2  2  2  1  1 
77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 96 97 98 99 
 2  2  1  3  4  1  3  2  1  2  1  4  1  4  6  1  1  3  1  1  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03414 0.35138 0.61391 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4448 2920 
[1] "treatment indicator table: "

   0    1 
2662 4706 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3649
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 404.611 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.380 0.0728
 2 mu         0.1   0.2 0.459 0.0874
 3 mu         0.1   0.3 0.510 0.0973
 4 mu         0.1   0.4 0.547 0.105 
 5 mu         0.1   0.5 0.580 0.109 
 6 mu         0.2   0.1 0.321 0.0537
 7 mu         0.2   0.2 0.388 0.0591
 8 mu         0.2   0.3 0.432 0.0624
 9 mu         0.2   0.4 0.464 0.0575
10 mu         0.2   0.5 0.492 0.0561
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.04         0.447  5.88e-11      9.77
 2 mu         0.2      0.924        0.875  3.71e- 4      3.51
 3 mu         0.3      0.981        0.959  1.20e- 1      2.36
 4 mu         0.4      0.998        0.943  5.03e- 1      2.24
 5 mu         0.5      1.01         0.994  6.33e- 1      1.67
 6 mu         0.6      1.00         1.00   5.32e- 1      1.60
 7 mu         0.7      1.01         0.983  6.68e- 1      1.90
 8 mu         0.8      1.08         1.05   5.62e- 1      2.26
 9 mu         0.9      1.03         1.00   3.65e- 1      1.92
10 mu_1       0.1      1.09         0.574  2.14e-10     10.4 
11 mu_1       0.2      0.918        0.895  6.79e- 4      3.32
12 mu_1       0.3      0.987        0.926  1.51e- 1      2.27
13 mu_1       0.4      0.997        0.949  5.06e- 1      2.16
14 mu_1       0.5      1.01         1.00   6.24e- 1      1.66
15 mu_1       0.6      1.00         1.00   5.41e- 1      1.60
16 mu_1       0.7      1.01         0.982  6.70e- 1      1.94
17 mu_1       0.8      1.08         1.05   5.70e- 1      2.24
18 mu_1       0.9      1.03         0.994  3.60e- 1      1.91
19 mu_0       0.1      1.03         0.421  4.16e-11      9.90
20 mu_0       0.2      0.925        0.851  2.94e- 4      3.56
21 mu_0       0.3      0.978        0.947  1.07e- 1      2.39
22 mu_0       0.4      0.998        0.945  5.01e- 1      2.30
23 mu_0       0.5      1.01         1.00   6.21e- 1      1.69
24 mu_0       0.6      1.00         1.01   5.17e- 1      1.60
25 mu_0       0.7      1.01         0.983  6.40e- 1      1.82
26 mu_0       0.8      1.08         1.03   5.30e- 1      2.32
27 mu_0       0.9      1.04         0.992  3.94e- 1      2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.13      3.54e-27  5.06e-75    103.  
 2 mu         0.2      3.14      7.28e-15  9.66e-50    115.  
 3 mu         0.3      0.940     1.19e- 7  4.03e-35     19.6 
 4 mu         0.4      1.01      1.31e- 3  6.65e-25     17.8 
 5 mu         0.5      1.31      2.82e- 2  3.69e-17      8.77
 6 mu         0.6      1.61      9.17e- 2  3.87e-13     19.0 
 7 mu         0.7      1.22      2.90e- 1  9.17e-21     19.7 
 8 mu         0.8      1.15      1.46e- 2  5.52e-32     12.0 
 9 mu         0.9      1.50      7.72e- 8  8.65e-52     24.3 
10 mu_1       0.1      3.17      2.14e-26  4.73e-74    150.  
11 mu_1       0.2      2.52      2.34e-14  4.51e-49     86.4 
12 mu_1       0.3      0.917     2.46e- 7  1.25e-34     17.3 
13 mu_1       0.4      1.03      1.02e- 3  1.55e-24     17.6 
14 mu_1       0.5      1.34      3.84e- 2  7.02e-17      8.49
15 mu_1       0.6      1.60      1.13e- 1  1.04e-13     18.8 
16 mu_1       0.7      1.21      2.40e- 1  2.10e-21     19.9 
17 mu_1       0.8      1.14      1.38e- 2  1.11e-32     11.7 
18 mu_1       0.9      1.52      5.05e- 8  1.54e-52     25.3 
19 mu_0       0.1      2.01      1.55e-27  0            98.1 
20 mu_0       0.2      3.29      3.26e-15  0           122.  
21 mu_0       0.3      0.949     6.48e- 8  0            20.6 
22 mu_0       0.4      0.998     1.02e- 3  0            17.9 
23 mu_0       0.5      1.28      2.19e- 2  0             9.41
24 mu_0       0.6      1.63      9.08e- 2  0            19.2 
25 mu_0       0.7      1.24      3.11e- 1  0            19.1 
26 mu_0       0.8      1.19      2.09e- 2  0            13.3 
27 mu_0       0.9      1.33      2.29e- 7  0            18.1 
[1] "Total run time was 407.793 seconds"
