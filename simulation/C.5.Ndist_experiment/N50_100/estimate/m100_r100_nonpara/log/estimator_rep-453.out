
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7633"
[1] "cluster size dist'n: "

 50  52  53  55  56  57  58  59  60  61  62  63  64  65  66  67  69  70  71  72 
  1   3   2   4   1   2   1   2   2   1   2   3   2   3   1   2   1   1   1   3 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  4   3   2   1   1   4   1   2   5   1   6   1   4   2   4   2   1   2   2   5 
 94  95  96  97  98 100 
  1   2   1   1   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03819 0.37248 0.62977 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4647 2986 
[1] "treatment indicator table: "

   0    1 
2537 5096 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3801
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3832
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.741 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.302 0.137 
 2 mu         0.1   0.2 0.397 0.173 
 3 mu         0.1   0.3 0.497 0.201 
 4 mu         0.1   0.4 0.506 0.216 
 5 mu         0.1   0.5 0.506 0.227 
 6 mu         0.2   0.1 0.322 0.0425
 7 mu         0.2   0.2 0.419 0.0576
 8 mu         0.2   0.3 0.526 0.0818
 9 mu         0.2   0.4 0.542 0.0745
10 mu         0.2   0.5 0.548 0.0752
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.884      0.00354  3.50e-10     35.3 
 2 mu         0.2      1.03       0.694    8.47e- 4     12.0 
 3 mu         0.3      1.03       0.986    1.29e- 1      2.80
 4 mu         0.4      0.992      0.959    4.16e- 1      1.82
 5 mu         0.5      1.03       1.02     5.67e- 1      1.81
 6 mu         0.6      1.01       1.00     5.53e- 1      1.47
 7 mu         0.7      0.978      0.960    5.66e- 1      1.34
 8 mu         0.8      0.970      0.977    5.75e- 1      1.52
 9 mu         0.9      1.01       1.03     2.53e- 1      1.79
10 mu_1       0.1      0.885      0.00838  1.26e- 9     26.6 
11 mu_1       0.2      1.04       0.681    1.54e- 3      9.87
12 mu_1       0.3      1.03       0.995    1.66e- 1      2.73
13 mu_1       0.4      0.992      0.961    4.37e- 1      1.85
14 mu_1       0.5      1.04       1.01     5.66e- 1      1.83
15 mu_1       0.6      1.01       0.988    5.55e- 1      1.47
16 mu_1       0.7      0.978      0.965    5.62e- 1      1.35
17 mu_1       0.8      0.971      0.977    5.71e- 1      1.52
18 mu_1       0.9      1.01       1.02     2.40e- 1      1.79
19 mu_0       0.1      0.883      0.00307  2.49e-10     36.2 
20 mu_0       0.2      1.03       0.713    6.74e- 4     12.5 
21 mu_0       0.3      1.03       0.994    1.13e- 1      2.84
22 mu_0       0.4      0.992      0.955    4.02e- 1      1.80
23 mu_0       0.5      1.03       1.01     5.67e- 1      1.80
24 mu_0       0.6      1.02       1.01     5.50e- 1      1.50
25 mu_0       0.7      0.980      0.962    5.75e- 1      1.36
26 mu_0       0.8      0.967      0.967    5.91e- 1      1.53
27 mu_0       0.9      1.01       1.01     3.62e- 1      1.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.37      7.31e-32  2.21e-71    237.  
 2 mu         0.2      1.62      1.41e-17  8.35e-47    151.  
 3 mu         0.3      0.604     5.78e-10  1.18e-32     43.5 
 4 mu         0.4      0.776     2.57e- 5  8.29e-24     13.5 
 5 mu         0.5      1.22      1.92e- 2  1.65e-17     13.5 
 6 mu         0.6      1.18      2.76e- 1  2.32e-12     10.0 
 7 mu         0.7      1.20      2.47e- 1  6.61e-14      9.45
 8 mu         0.8      1.28      1.42e- 1  1.35e-22     10.8 
 9 mu         0.9      0.721     5.79e- 6  4.94e-40     11.3 
10 mu_1       0.1      3.19      4.98e-31  2.02e-70    319.  
11 mu_1       0.2      1.16      4.76e-17  3.81e-46    102.  
12 mu_1       0.3      0.571     1.34e- 9  3.60e-32     40.5 
13 mu_1       0.4      0.821     4.42e- 5  2.07e-23     14.5 
14 mu_1       0.5      1.24      2.69e- 2  3.30e-17     13.1 
15 mu_1       0.6      1.17      2.99e- 1  3.86e-12     10.2 
16 mu_1       0.7      1.20      2.68e- 1  1.27e-14     10.0 
17 mu_1       0.8      1.28      1.30e- 1  4.70e-23     10.9 
18 mu_1       0.9      0.707     4.44e- 6  1.53e-40     11.2 
19 mu_0       0.1      2.28      2.58e-32  0           228.  
20 mu_0       0.2      1.73      6.06e-18  0           164.  
21 mu_0       0.3      0.618     2.53e-10  0            44.8 
22 mu_0       0.4      0.746     1.33e- 5  0            12.9 
23 mu_0       0.5      1.20      1.17e- 2  0            14.0 
24 mu_0       0.6      1.18      2.46e- 1  0             9.78
25 mu_0       0.7      1.20      2.80e- 1  0             8.07
26 mu_0       0.8      1.28      2.12e- 1  0            10.3 
27 mu_0       0.9      0.839     1.20e- 5  0            12.3 
[1] "Total run time was 402.617 seconds"
