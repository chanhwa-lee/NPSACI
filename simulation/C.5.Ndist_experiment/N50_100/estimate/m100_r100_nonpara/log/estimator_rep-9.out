
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7510"
[1] "cluster size dist'n: "

 50  51  53  56  58  59  60  61  62  63  64  65  66  67  69  70  71  72  73  74 
  1   1   3   6   6   1   1   2   5   3   2   3   2   3   1   1   1   2   3   1 
 75  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  93  94  95  97 
  1   2   4   2   2   2   1   2   1   3   6   1   4   2   3   2   2   2   1   1 
 98  99 100 
  2   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03544 0.32965 0.60460 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4457 3053 
[1] "treatment indicator table: "

   0    1 
2953 4557 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3753
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.131 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.348 0.0551
 2 mu         0.1   0.2 0.463 0.0543
 3 mu         0.1   0.3 0.504 0.0588
 4 mu         0.1   0.4 0.538 0.0660
 5 mu         0.1   0.5 0.567 0.0738
 6 mu         0.2   0.1 0.300 0.0397
 7 mu         0.2   0.2 0.418 0.0283
 8 mu         0.2   0.3 0.455 0.0279
 9 mu         0.2   0.4 0.488 0.0300
10 mu         0.2   0.5 0.518 0.0395
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.02         0.745 0.00000110       7.53
 2 mu         0.2      1.01         1.00  0.0419           3.33
 3 mu         0.3      1.00         1.01  0.292            1.88
 4 mu         0.4      0.995        0.989 0.424            1.62
 5 mu         0.5      1.01         1.01  0.483            1.77
 6 mu         0.6      0.999        0.978 0.529            1.74
 7 mu         0.7      0.963        0.931 0.513            2.19
 8 mu         0.8      0.960        0.948 0.539            1.55
 9 mu         0.9      0.949        0.892 0.248            1.81
10 mu_1       0.1      1.06         0.795 0.00000309       7.40
11 mu_1       0.2      1.00         0.990 0.0604           2.80
12 mu_1       0.3      1.00         0.991 0.269            1.91
13 mu_1       0.4      0.996        0.990 0.414            1.64
14 mu_1       0.5      1.01         1.01  0.472            1.71
15 mu_1       0.6      0.996        0.974 0.545            1.70
16 mu_1       0.7      0.962        0.927 0.507            2.20
17 mu_1       0.8      0.961        0.949 0.547            1.56
18 mu_1       0.9      0.950        0.893 0.243            1.84
19 mu_0       0.1      1.01         0.734 0.000000876      7.54
20 mu_0       0.2      1.01         0.984 0.0372           3.46
21 mu_0       0.3      1.01         1.01  0.302            1.90
22 mu_0       0.4      0.994        0.983 0.431            1.62
23 mu_0       0.5      1.01         1.01  0.493            1.82
24 mu_0       0.6      1.00         0.986 0.506            1.81
25 mu_0       0.7      0.966        0.941 0.528            2.17
26 mu_0       0.8      0.957        0.935 0.506            1.52
27 mu_0       0.9      0.939        0.895 0.297            1.99
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.574     5.09e-26  1.21e-79     40.3 
 2 mu         0.2      2.51      8.22e-14  3.71e-54    145.  
 3 mu         0.3      0.854     3.55e- 7  2.64e-39     15.8 
 4 mu         0.4      0.799     3.11e- 3  8.08e-29      9.06
 5 mu         0.5      0.907     7.83e- 2  9.69e-21     13.1 
 6 mu         0.6      0.737     1.27e- 1  3.33e-14      6.19
 7 mu         0.7      1.01      8.38e- 2  2.06e-19     12.2 
 8 mu         0.8      1.20      7.80e- 4  2.43e-30     12.5 
 9 mu         0.9      1.15      4.37e-10  9.65e-50     30.0 
10 mu_1       0.1      0.980     3.13e-25  1.19e-78     69.5 
11 mu_1       0.2      2.30      2.49e-13  1.81e-53    125.  
12 mu_1       0.3      0.778     7.12e- 7  8.59e-39     17.6 
13 mu_1       0.4      0.819     3.73e- 3  1.97e-28      7.55
14 mu_1       0.5      0.889     7.16e- 2  1.89e-20     13.2 
15 mu_1       0.6      0.738     1.40e- 1  5.43e-14      6.73
16 mu_1       0.7      1.02      7.58e- 2  5.39e-20     12.1 
17 mu_1       0.8      1.21      5.84e- 4  5.57e-31     12.7 
18 mu_1       0.9      1.14      2.91e-10  1.96e-50     29.2 
19 mu_0       0.1      0.528     2.18e-26  3.10e-81     37.1 
20 mu_0       0.2      2.57      4.04e-14  1.07e-55    150.  
21 mu_0       0.3      0.886     2.02e- 7  8.66e-41     16.2 
22 mu_0       0.4      0.786     2.10e- 3  3.09e-30     10.1 
23 mu_0       0.5      0.925     5.29e- 2  4.45e-22     13.0 
24 mu_0       0.6      0.735     1.24e- 1  1.92e-15      6.23
25 mu_0       0.7      0.986     9.54e- 2  5.62e-19     12.3 
26 mu_0       0.8      1.14      1.56e- 3  9.95e-30     12.5 
27 mu_0       0.9      1.28      1.75e- 9  7.89e-49     37.5 
[1] "Total run time was 422.391 seconds"
