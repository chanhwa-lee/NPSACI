
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7373"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70 
  3   3   1   1   1   3   1   1   3   1   2   4   2   6   3   4   1   3   1   1 
 71  72  73  74  75  76  77  78  79  80  81  82  84  86  87  88  89  90  91  93 
  2   1   5   1   2   1   2   2   3   2   4   2   1   1   4   1   3   3   1   2 
 94  95  96  98  99 100 
  2   1   3   1   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02276 0.32950 0.58814 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4331 3042 
[1] "treatment indicator table: "

   0    1 
2932 4441 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3698
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3675
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 372.864 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.515 0.0555
 2 mu         0.1   0.2 0.566 0.0525
 3 mu         0.1   0.3 0.628 0.0583
 4 mu         0.1   0.4 0.677 0.0536
 5 mu         0.1   0.5 0.715 0.0553
 6 mu         0.2   0.1 0.413 0.0782
 7 mu         0.2   0.2 0.493 0.0589
 8 mu         0.2   0.3 0.541 0.0470
 9 mu         0.2   0.4 0.597 0.0561
10 mu         0.2   0.5 0.630 0.0510
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.925    0.0501      3.15
 2 mu         0.2      0.972        0.959    0.267       1.86
 3 mu         0.3      1.00         0.982    0.496       1.76
 4 mu         0.4      1.00         0.991    0.625       1.56
 5 mu         0.5      1.00         0.971    0.615       1.59
 6 mu         0.6      1.01         0.980    0.641       1.50
 7 mu         0.7      0.998        1.00     0.590       1.43
 8 mu         0.8      0.980        0.992    0.449       1.32
 9 mu         0.9      1.04         1.01     0.376       1.94
10 mu_1       0.1      1.02         0.881    0.0868      2.71
11 mu_1       0.2      0.976        0.926    0.287       2.05
12 mu_1       0.3      1.00         0.977    0.465       1.63
13 mu_1       0.4      1.00         1.01     0.628       1.56
14 mu_1       0.5      1.00         0.964    0.623       1.61
15 mu_1       0.6      1.01         0.987    0.642       1.51
16 mu_1       0.7      0.998        0.999    0.595       1.45
17 mu_1       0.8      0.981        0.995    0.438       1.32
18 mu_1       0.9      1.04         1.02     0.368       1.95
19 mu_0       0.1      1.05         0.926    0.0460      3.24
20 mu_0       0.2      0.971        0.949    0.260       1.81
21 mu_0       0.3      1.00         0.984    0.509       1.81
22 mu_0       0.4      1.00         0.986    0.624       1.56
23 mu_0       0.5      1.00         0.975    0.606       1.57
24 mu_0       0.6      1.01         0.977    0.640       1.48
25 mu_0       0.7      0.999        0.997    0.578       1.43
26 mu_0       0.8      0.976        0.972    0.491       1.34
27 mu_0       0.9      1.03         0.991    0.448       1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.40      1.55e-26  4.99e-85     62.3 
 2 mu         0.2      0.621     3.36e-14  2.72e-57     26.7 
 3 mu         0.3      0.621     2.57e- 7  1.93e-41     16.3 
 4 mu         0.4      1.01      5.96e- 4  2.84e-30     13.5 
 5 mu         0.5      0.945     5.79e- 2  1.08e-21      6.29
 6 mu         0.6      1.30      7.01e- 2  6.06e-24      9.27
 7 mu         0.7      1.12      2.16e- 1  1.38e-34      9.13
 8 mu         0.8      1.52      2.30e- 3  6.52e-50     12.9 
 9 mu         0.9      0.834     6.07e- 9  1.52e-76     10.4 
10 mu_1       0.1      1.12      1.04e-25  4.74e-84     46.5 
11 mu_1       0.2      0.612     1.03e-13  1.32e-56     26.3 
12 mu_1       0.3      0.664     5.52e- 7  6.23e-41     18.6 
13 mu_1       0.4      1.01      1.01e- 3  6.89e-30     11.6 
14 mu_1       0.5      0.955     6.09e- 2  2.10e-21      6.29
15 mu_1       0.6      1.31      6.11e- 2  9.18e-25      9.14
16 mu_1       0.7      1.12      2.06e- 1  1.79e-35      9.66
17 mu_1       0.8      1.54      2.22e- 3  7.41e-51     13.7 
18 mu_1       0.9      0.815     4.28e- 9  1.54e-77     10.7 
19 mu_0       0.1      1.43      5.65e-27  2.80e-86     64.1 
20 mu_0       0.2      0.624     1.64e-14  1.09e-58     26.8 
21 mu_0       0.3      0.603     1.31e- 7  8.80e-43     15.3 
22 mu_0       0.4      1.01      3.21e- 4  1.51e-31     14.8 
23 mu_0       0.5      0.935     5.78e- 2  6.92e-23      6.34
24 mu_0       0.6      1.29      6.89e- 2  1.38e-23      9.47
25 mu_0       0.7      1.13      1.28e- 1  4.19e-34      7.90
26 mu_0       0.8      1.44      4.42e- 3  2.96e-49     10.8 
27 mu_0       0.9      1.01      2.22e- 8  1.38e-75     14.8 
[1] "Total run time was 376.235 seconds"
