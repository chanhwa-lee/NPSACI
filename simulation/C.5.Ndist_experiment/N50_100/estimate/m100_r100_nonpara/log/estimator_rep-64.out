
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7717"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  63  64  65  66  68  69  70  71  72 
  3   1   3   2   2   2   1   2   1   3   2   3   1   1   2   3   2   4   1   1 
 76  77  78  79  80  81  83  84  86  88  89  90  91  92  93  94  95  96  97  98 
  2   2   2   3   4   5   3   4   2   4   1   3   3   2   3   2   2   4   4   2 
100 
  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02998 0.33062 0.59500 1.00000 7.00154 
[1] "event indicator table: "

   0    1 
4593 3124 
[1] "treatment indicator table: "

   0    1 
2941 4776 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3788
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3929
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 447.179 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.316 0.0309
 2 mu         0.1   0.2 0.436 0.0492
 3 mu         0.1   0.3 0.483 0.0534
 4 mu         0.1   0.4 0.492 0.0507
 5 mu         0.1   0.5 0.521 0.0718
 6 mu         0.2   0.1 0.312 0.0177
 7 mu         0.2   0.2 0.436 0.0348
 8 mu         0.2   0.3 0.490 0.0371
 9 mu         0.2   0.4 0.507 0.0285
10 mu         0.2   0.5 0.549 0.0457
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.950        0.765   0.00366      3.87
 2 mu         0.2      1.02         1.02    0.121        2.27
 3 mu         0.3      1.01         0.979   0.216        1.91
 4 mu         0.4      1.02         1.00    0.484        1.99
 5 mu         0.5      0.995        0.965   0.627        1.54
 6 mu         0.6      1.00         1.01    0.524        1.67
 7 mu         0.7      0.986        1.00    0.560        1.45
 8 mu         0.8      1.01         0.996   0.570        1.85
 9 mu         0.9      1.04         0.954   0.406        2.77
10 mu_1       0.1      0.924        0.790   0.00796      3.64
11 mu_1       0.2      1.03         1.03    0.121        2.41
12 mu_1       0.3      1.01         0.967   0.242        1.83
13 mu_1       0.4      1.02         0.995   0.479        2.04
14 mu_1       0.5      0.995        0.968   0.616        1.55
15 mu_1       0.6      1.00         1.01    0.534        1.66
16 mu_1       0.7      0.986        0.995   0.569        1.47
17 mu_1       0.8      1.01         1.00    0.571        1.85
18 mu_1       0.9      1.04         0.965   0.407        2.78
19 mu_0       0.1      0.953        0.744   0.00318      3.93
20 mu_0       0.2      1.01         1.00    0.121        2.28
21 mu_0       0.3      1.01         0.981   0.204        1.94
22 mu_0       0.4      1.02         0.997   0.481        1.96
23 mu_0       0.5      0.996        0.966   0.616        1.58
24 mu_0       0.6      1.00         1.00    0.508        1.67
25 mu_0       0.7      0.985        0.995   0.538        1.44
26 mu_0       0.8      1.01         0.965   0.569        1.85
27 mu_0       0.9      1.03         0.976   0.387        2.61
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000749     1.51e-24  3.54e-87    0.0609
 2 mu         0.2   0.226        1.38e-12  4.93e-59   11.9   
 3 mu         0.3   0.900        9.46e- 7  1.18e-42   18.7   
 4 mu         0.4   1.00         2.97e- 3  4.12e-31   17.8   
 5 mu         0.5   0.874        1.36e- 1  3.07e-22    7.89  
 6 mu         0.6   1.23         2.02e- 1  4.35e-15   21.5   
 7 mu         0.7   0.863        5.96e- 2  3.08e-20    9.13  
 8 mu         0.8   0.766        4.62e- 3  3.68e-32    9.88  
 9 mu         0.9   1.57         6.03e- 9  3.66e-54   24.8   
10 mu_1       0.1   0.00160      1.03e-23  3.43e-86    0.127 
11 mu_1       0.2   0.269        4.15e-12  2.39e-58   13.7   
12 mu_1       0.3   0.990        1.98e- 6  3.80e-42   20.5   
13 mu_1       0.4   0.962        3.78e- 3  9.97e-31   15.5   
14 mu_1       0.5   0.900        1.24e- 1  5.94e-22    8.37  
15 mu_1       0.6   1.23         2.01e- 1  7.03e-15   21.1   
16 mu_1       0.7   0.841        5.39e- 2  9.20e-21    8.98  
17 mu_1       0.8   0.777        3.44e- 3  1.06e-32   10.3   
18 mu_1       0.9   1.59         4.25e- 9  9.35e-55   25.7   
19 mu_0       0.1   0.000654     5.46e-25  1.22e-88    0.0536
20 mu_0       0.2   0.216        6.20e-13  1.90e-60   11.5   
21 mu_0       0.3   0.862        4.88e- 7  5.20e-44   18.0   
22 mu_0       0.4   1.03         1.91e- 3  2.12e-32   19.3   
23 mu_0       0.5   0.849        1.34e- 1  1.90e-23    7.42  
24 mu_0       0.6   1.22         1.89e- 1  3.37e-16   22.0   
25 mu_0       0.7   0.914        7.26e- 2  8.13e-20    9.49  
26 mu_0       0.8   0.721        8.86e- 3  1.42e-31    8.23  
27 mu_0       0.9   1.41         2.21e- 8  2.82e-53   19.1   
[1] "Total run time was 450.522 seconds"
