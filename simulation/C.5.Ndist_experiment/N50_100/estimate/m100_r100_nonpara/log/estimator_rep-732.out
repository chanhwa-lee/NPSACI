
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7546"
[1] "cluster size dist'n: "

51 52 53 54 55 56 57 59 60 62 63 64 65 66 67 68 70 71 73 74 75 76 77 78 79 80 
 2  5  2  3  1  1  1  1  3  1  1  4  2  5  3  4  2  1  2  3  1  2  3  1  2  1 
81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 3  5  2  2  1  2  3  2  3  1  2  1  3  2  4  1  2  3  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03408 0.34308 0.63084 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4510 3036 
[1] "treatment indicator table: "

   0    1 
2870 4676 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3763
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3783
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 449.865 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.490 0.0665
 2 mu         0.1   0.2 0.618 0.0836
 3 mu         0.1   0.3 0.687 0.0907
 4 mu         0.1   0.4 0.760 0.106 
 5 mu         0.1   0.5 0.800 0.108 
 6 mu         0.2   0.1 0.408 0.0341
 7 mu         0.2   0.2 0.503 0.0368
 8 mu         0.2   0.3 0.560 0.0383
 9 mu         0.2   0.4 0.618 0.0464
10 mu         0.2   0.5 0.650 0.0432
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.22         0.587 0.00000231     11.9 
 2 mu         0.2      1.03         0.991 0.0228          3.02
 3 mu         0.3      1.02         1.00  0.333           2.19
 4 mu         0.4      1.02         1.00  0.522           1.82
 5 mu         0.5      0.986        0.954 0.570           1.41
 6 mu         0.6      0.981        0.986 0.576           1.39
 7 mu         0.7      0.996        0.976 0.600           1.35
 8 mu         0.8      1.01         0.996 0.498           1.52
 9 mu         0.9      1.01         0.990 0.243           1.90
10 mu_1       0.1      1.16         0.720 0.00000702     10.4 
11 mu_1       0.2      1.03         0.978 0.0358          2.90
12 mu_1       0.3      1.01         0.987 0.325           2.08
13 mu_1       0.4      1.02         1.01  0.529           1.79
14 mu_1       0.5      0.984        0.949 0.549           1.42
15 mu_1       0.6      0.982        0.993 0.560           1.42
16 mu_1       0.7      0.997        0.970 0.599           1.36
17 mu_1       0.8      1.01         0.999 0.495           1.53
18 mu_1       0.9      1.01         0.987 0.240           1.91
19 mu_0       0.1      1.22         0.556 0.00000179     12.0 
20 mu_0       0.2      1.02         0.995 0.0196          3.06
21 mu_0       0.3      1.02         1.01  0.336           2.23
22 mu_0       0.4      1.02         1.01  0.518           1.85
23 mu_0       0.5      0.989        0.970 0.592           1.40
24 mu_0       0.6      0.980        0.976 0.600           1.35
25 mu_0       0.7      0.995        0.968 0.604           1.36
26 mu_0       0.8      1.01         0.994 0.511           1.48
27 mu_0       0.9      1.01         0.999 0.274           1.87
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0582     4.69e-28  1.30e-72      3.30
 2 mu         0.2     1.06       2.90e-15  6.19e-47     28.6 
 3 mu         0.3     1.89       7.16e- 9  3.40e-32     36.1 
 4 mu         0.4     1.00       1.95e- 4  5.39e-22     19.2 
 5 mu         0.5     0.793      2.34e- 2  2.81e-15      6.13
 6 mu         0.6     1.08       6.24e- 2  3.16e-11      9.60
 7 mu         0.7     1.19       1.14e- 1  7.10e-19      9.47
 8 mu         0.8     1.35       2.63e- 2  1.87e-30     14.8 
 9 mu         0.9     1.89       1.20e- 7  2.65e-51     38.9 
10 mu_1       0.1     0.114      3.02e-27  1.16e-71      6.36
11 mu_1       0.2     1.21       1.04e-14  2.78e-46     32.0 
12 mu_1       0.3     1.86       1.61e- 8  1.02e-31     33.6 
13 mu_1       0.4     0.944      3.18e- 4  1.21e-21     16.0 
14 mu_1       0.5     0.807      2.67e- 2  5.46e-15      6.35
15 mu_1       0.6     1.10       7.56e- 2  1.22e-11      9.68
16 mu_1       0.7     1.19       9.86e- 2  2.35e-19      9.20
17 mu_1       0.8     1.34       2.09e- 2  5.42e-31     14.6 
18 mu_1       0.9     1.90       8.48e- 8  6.81e-52     38.8 
19 mu_0       0.1     0.0520     1.85e-28  1.49e-73      2.97
20 mu_0       0.2     1.02       1.02e-15  7.98e-48     28.6 
21 mu_0       0.3     1.90       3.47e- 9  5.01e-33     37.3 
22 mu_0       0.4     1.04       1.15e- 4  7.98e-23     21.3 
23 mu_0       0.5     0.779      2.25e- 2  1.65e-16      6.31
24 mu_0       0.6     1.06       6.33e- 2  2.23e-11      9.48
25 mu_0       0.7     1.19       1.60e- 1  1.82e-18     10.1 
26 mu_0       0.8     1.37       3.87e- 2  7.20e-30     15.3 
27 mu_0       0.9     1.80       4.38e- 7  2.03e-50     40.1 
[1] "Total run time was 453.343 seconds"
