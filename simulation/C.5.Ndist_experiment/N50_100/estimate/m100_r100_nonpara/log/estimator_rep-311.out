
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7252"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 64 65 67 68 69 70 71 72 73 74 75 76 77 
 4  1  3  3  3  2  2  5  1  1  3  2  3  2  2  3  1  3  2  1  5  2  3  4  2  1 
78 79 80 81 82 83 85 86 87 88 89 90 91 93 94 95 96 97 98 99 
 1  1  2  1  1  1  2  4  3  3  2  1  2  1  2  1  1  2  3  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02853 0.31891 0.58335 0.99817 6.01714 
[1] "event indicator table: "

   0    1 
4308 2944 
[1] "treatment indicator table: "

   0    1 
2775 4477 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3673
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3579
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 388.783 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.409 0.0757
 2 mu         0.1   0.2 0.475 0.0821
 3 mu         0.1   0.3 0.525 0.0864
 4 mu         0.1   0.4 0.538 0.0893
 5 mu         0.1   0.5 0.562 0.0908
 6 mu         0.2   0.1 0.399 0.0421
 7 mu         0.2   0.2 0.494 0.0489
 8 mu         0.2   0.3 0.555 0.0509
 9 mu         0.2   0.4 0.583 0.0533
10 mu         0.2   0.5 0.614 0.0489
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.812        0.266 0.000000194      8.44
 2 mu         0.2      0.999        0.888 0.0123           4.03
 3 mu         0.3      0.983        0.950 0.371            1.93
 4 mu         0.4      0.991        0.969 0.495            1.44
 5 mu         0.5      0.980        0.971 0.629            1.44
 6 mu         0.6      1.01         0.998 0.684            1.51
 7 mu         0.7      1.02         1.04  0.624            1.53
 8 mu         0.8      1.02         1.02  0.513            1.67
 9 mu         0.9      1.04         1.03  0.111            2.01
10 mu_1       0.1      0.893        0.387 0.000000613      9.11
11 mu_1       0.2      0.991        0.923 0.0197           3.14
12 mu_1       0.3      0.983        0.962 0.409            1.72
13 mu_1       0.4      0.989        0.972 0.528            1.45
14 mu_1       0.5      0.981        0.973 0.629            1.46
15 mu_1       0.6      1.01         1.00  0.683            1.53
16 mu_1       0.7      1.02         1.04  0.621            1.54
17 mu_1       0.8      1.02         1.02  0.519            1.68
18 mu_1       0.9      1.04         1.03  0.104            2.05
19 mu_0       0.1      0.803        0.249 0.000000147      8.64
20 mu_0       0.2      1.00         0.876 0.0104           4.25
21 mu_0       0.3      0.983        0.949 0.343            2.02
22 mu_0       0.4      0.992        0.980 0.474            1.45
23 mu_0       0.5      0.978        0.977 0.629            1.43
24 mu_0       0.6      1.01         0.990 0.676            1.47
25 mu_0       0.7      1.02         1.03  0.630            1.51
26 mu_0       0.8      1.02         1.03  0.490            1.63
27 mu_0       0.9      1.03         1.02  0.174            1.93
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0530     1.32e-22  7.31e-69      2.42
 2 mu         0.2     1.04       2.64e-12  6.12e-44     54.1 
 3 mu         0.3     0.535      1.75e- 6  1.00e-29     17.4 
 4 mu         0.4     0.936      8.22e- 3  5.62e-20     23.1 
 5 mu         0.5     1.44       3.46e- 1  8.58e-13     15.8 
 6 mu         0.6     1.16       3.97e- 1  3.42e- 8      6.32
 7 mu         0.7     0.963      1.06e- 1  4.22e-13      7.99
 8 mu         0.8     1.09       1.90e- 3  2.86e-21      9.74
 9 mu         0.9     1.25       1.75e- 9  5.13e-37     29.7 
10 mu_1       0.1     0.108      9.20e-22  6.34e-68      4.84
11 mu_1       0.2     1.09       8.53e-12  2.65e-43     58.2 
12 mu_1       0.3     0.480      3.57e- 6  2.89e-29     12.5 
13 mu_1       0.4     1.01       1.25e- 2  1.22e-19     24.4 
14 mu_1       0.5     1.45       3.10e- 1  1.57e-12     16.2 
15 mu_1       0.6     1.14       3.50e- 1  4.12e- 8      6.46
16 mu_1       0.7     0.959      9.29e- 2  1.30e-13      8.19
17 mu_1       0.8     1.10       1.40e- 3  7.70e-22      9.98
18 mu_1       0.9     1.26       1.14e- 9  1.55e-37     30.9 
19 mu_0       0.1     0.0469     4.49e-23  1.08e-69      2.15
20 mu_0       0.2     1.02       1.16e-12  1.01e-44     53.0 
21 mu_0       0.3     0.558      1.00e- 6  1.90e-30     19.5 
22 mu_0       0.4     0.889      5.33e- 3  1.24e-20     22.3 
23 mu_0       0.5     1.44       2.99e- 1  1.02e-13     15.4 
24 mu_0       0.6     1.19       4.91e- 1  5.11e- 9      7.25
25 mu_0       0.7     0.973      1.03e- 1  1.10e-12      7.95
26 mu_0       0.8     1.05       3.84e- 3  1.12e-20      8.78
27 mu_0       0.9     1.21       7.15e- 9  3.73e-36     23.6 
[1] "Total run time was 392.016 seconds"
