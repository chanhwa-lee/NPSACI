
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7527"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  64  65  66  67  68  69  70  73 
  1   2   1   1   1   1   1   2   1   2   6   5   4   4   2   2   2   4   1   1 
 74  75  76  77  78  79  80  81  83  84  86  88  89  90  91  92  93  94  95  97 
  3   1   1   3   3   5   3   5   5   2   1   2   2   2   2   2   1   2   3   3 
 98  99 100 
  2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01738 0.33043 0.59290 1.00000 5.80542 
[1] "event indicator table: "

   0    1 
4559 2968 
[1] "treatment indicator table: "

   0    1 
2746 4781 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3813
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3714
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 386.831 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.382 0.0719
 2 mu         0.1   0.2 0.471 0.0792
 3 mu         0.1   0.3 0.535 0.0817
 4 mu         0.1   0.4 0.569 0.0920
 5 mu         0.1   0.5 0.603 0.0832
 6 mu         0.2   0.1 0.347 0.0486
 7 mu         0.2   0.2 0.418 0.0459
 8 mu         0.2   0.3 0.478 0.0490
 9 mu         0.2   0.4 0.539 0.0598
10 mu         0.2   0.5 0.583 0.0535
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.01         0.648  0.000748      4.49
 2 mu         0.2      1.02         1.03   0.0502        2.79
 3 mu         0.3      1.01         1.00   0.370         2.03
 4 mu         0.4      1.01         0.976  0.481         1.73
 5 mu         0.5      0.992        0.951  0.575         1.66
 6 mu         0.6      0.991        0.989  0.584         1.39
 7 mu         0.7      0.999        0.970  0.653         1.40
 8 mu         0.8      0.998        0.984  0.485         1.58
 9 mu         0.9      0.974        0.937  0.378         1.93
10 mu_1       0.1      1.01         0.718  0.00188       4.13
11 mu_1       0.2      1.03         1.01   0.0605        2.67
12 mu_1       0.3      1.01         1.00   0.383         1.91
13 mu_1       0.4      1.01         0.977  0.491         1.71
14 mu_1       0.5      0.991        0.953  0.564         1.62
15 mu_1       0.6      0.991        0.985  0.570         1.42
16 mu_1       0.7      0.999        0.969  0.665         1.40
17 mu_1       0.8      0.998        0.988  0.473         1.58
18 mu_1       0.9      0.974        0.940  0.379         1.94
19 mu_0       0.1      1.01         0.669  0.000622      4.53
20 mu_0       0.2      1.02         1.02   0.0476        2.82
21 mu_0       0.3      1.01         0.982  0.365         2.09
22 mu_0       0.4      1.01         0.973  0.475         1.74
23 mu_0       0.5      0.993        0.962  0.572         1.69
24 mu_0       0.6      0.990        0.994  0.606         1.35
25 mu_0       0.7      0.999        0.984  0.627         1.41
26 mu_0       0.8      0.998        0.985  0.501         1.58
27 mu_0       0.9      0.977        0.978  0.367         2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.753     8.02e-29  2.25e-86     55.2 
 2 mu         0.2      0.800     1.87e-15  2.79e-58     35.1 
 3 mu         0.3      1.15      2.71e- 8  5.83e-42     28.1 
 4 mu         0.4      1.25      3.16e- 4  1.75e-30     19.4 
 5 mu         0.5      1.15      6.86e- 3  1.08e-21     10.6 
 6 mu         0.6      1.11      1.14e- 1  8.47e-16      9.54
 7 mu         0.7      1.07      1.61e- 1  5.11e-23      8.71
 8 mu         0.8      1.36      1.60e- 2  2.06e-33     11.0 
 9 mu         0.9      1.24      2.23e- 7  5.99e-52     23.7 
10 mu_1       0.1      0.796     5.16e-28  2.16e-85     49.5 
11 mu_1       0.2      0.814     5.67e-15  1.34e-57     37.4 
12 mu_1       0.3      1.18      5.65e- 8  1.86e-41     29.9 
13 mu_1       0.4      1.26      5.14e- 4  4.19e-30     20.4 
14 mu_1       0.5      1.14      9.50e- 3  2.08e-21     10.9 
15 mu_1       0.6      1.10      8.24e- 2  1.26e-16      9.87
16 mu_1       0.7      1.09      1.66e- 1  6.54e-24      8.91
17 mu_1       0.8      1.36      1.26e- 2  2.31e-34     10.5 
18 mu_1       0.9      1.23      1.51e- 7  9.50e-53     23.7 
19 mu_0       0.1      0.749     3.18e-29  1.02e-87     55.9 
20 mu_0       0.2      0.797     9.14e-16  1.42e-59     34.5 
21 mu_0       0.3      1.14      1.45e- 8  3.40e-43     27.3 
22 mu_0       0.4      1.24      2.51e- 4  1.19e-31     18.7 
23 mu_0       0.5      1.16      4.98e- 3  8.84e-23     10.4 
24 mu_0       0.6      1.13      9.19e- 2  1.26e-15      9.04
25 mu_0       0.7      1.02      1.17e- 1  1.55e-22      8.24
26 mu_0       0.8      1.39      2.99e- 2  9.40e-33     13.0 
27 mu_0       0.9      1.32      8.67e- 7  5.13e-51     24.5 
[1] "Total run time was 390.652 seconds"
