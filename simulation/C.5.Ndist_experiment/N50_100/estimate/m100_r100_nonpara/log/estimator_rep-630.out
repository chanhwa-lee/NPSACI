
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7452"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  61  62  63  64  65  66  68  69  70  71 
  1   5   4   1   3   1   3   1   3   3   2   1   2   4   2   2   1   2   1   2 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  93 
  3   2   1   1   1   1   2   2   2   5   2   1   2   1   2   1   3   3   2   3 
 94  95  96  97  99 100 
  2   4   4   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03463 0.35513 0.61660 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4476 2976 
[1] "treatment indicator table: "

   0    1 
2601 4851 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3687
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3765
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 594.002 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.307 0.0638
 2 mu         0.1   0.2 0.359 0.0651
 3 mu         0.1   0.3 0.403 0.0730
 4 mu         0.1   0.4 0.437 0.0804
 5 mu         0.1   0.5 0.484 0.0919
 6 mu         0.2   0.1 0.403 0.0430
 7 mu         0.2   0.2 0.484 0.0454
 8 mu         0.2   0.3 0.559 0.0541
 9 mu         0.2   0.4 0.599 0.0566
10 mu         0.2   0.5 0.659 0.0681
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.653        0.146  5.79e-14     10.2 
 2 mu         0.2      0.997        0.871  1.68e- 5      5.43
 3 mu         0.3      0.942        0.922  4.86e- 2      2.47
 4 mu         0.4      0.986        1.01   3.03e- 1      2.52
 5 mu         0.5      0.994        0.986  3.81e- 1      2.11
 6 mu         0.6      0.995        1.01   3.16e- 1      1.50
 7 mu         0.7      1.00         0.970  5.58e- 1      1.68
 8 mu         0.8      0.966        0.913  3.53e- 1      1.72
 9 mu         0.9      0.892        0.864  3.64e- 1      1.60
10 mu_1       0.1      0.728        0.255  2.29e-13      8.00
11 mu_1       0.2      0.989        0.933  3.36e- 5      5.13
12 mu_1       0.3      0.943        0.907  6.59e- 2      2.39
13 mu_1       0.4      0.989        0.993  2.99e- 1      2.68
14 mu_1       0.5      0.996        0.995  3.71e- 1      1.99
15 mu_1       0.6      0.994        1.01   3.16e- 1      1.48
16 mu_1       0.7      1.01         0.973  5.64e- 1      1.70
17 mu_1       0.8      0.964        0.917  3.44e- 1      1.73
18 mu_1       0.9      0.892        0.862  3.71e- 1      1.62
19 mu_0       0.1      0.644        0.137  3.89e-14     10.5 
20 mu_0       0.2      0.999        0.864  1.26e- 5      5.51
21 mu_0       0.3      0.941        0.914  4.12e- 2      2.51
22 mu_0       0.4      0.983        1.01   3.05e- 1      2.42
23 mu_0       0.5      0.993        0.972  3.92e- 1      2.22
24 mu_0       0.6      0.996        1.01   3.16e- 1      1.52
25 mu_0       0.7      1.00         0.965  5.42e- 1      1.69
26 mu_0       0.8      0.975        0.921  3.89e- 1      1.69
27 mu_0       0.9      0.887        0.854  3.07e- 1      1.46
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000318     4.36e-29  1.04e-79    0.0310
 2 mu         0.2   0.240        2.30e-16  6.37e-53   13.7   
 3 mu         0.3   1.74         1.97e- 9  2.02e-37   64.7   
 4 mu         0.4   1.62         4.62e- 5  9.25e-27   22.7   
 5 mu         0.5   1.37         1.93e- 2  1.25e-18   20.1   
 6 mu         0.6   1.03         1.40e- 1  3.82e-12   10.3   
 7 mu         0.7   1.20         2.35e- 1  7.99e-17   19.2   
 8 mu         0.8   1.31         2.12e- 2  2.76e-27   13.7   
 9 mu         0.9   1.12         2.94e- 6  3.94e-46   15.3   
10 mu_1       0.1   0.000745     2.93e-28  9.78e-79    0.0720
11 mu_1       0.2   0.319        8.30e-16  2.99e-52   15.9   
12 mu_1       0.3   1.85         4.40e- 9  6.30e-37   66.4   
13 mu_1       0.4   1.61         7.68e- 5  2.19e-26   18.6   
14 mu_1       0.5   1.33         2.73e- 2  2.37e-18   20.8   
15 mu_1       0.6   1.02         1.42e- 1  6.02e-12   10.8   
16 mu_1       0.7   1.22         2.40e- 1  2.66e-17   20.3   
17 mu_1       0.8   1.30         2.12e- 2  8.02e-28   13.2   
18 mu_1       0.9   1.13         2.27e- 6  1.02e-46   15.6   
19 mu_0       0.1   0.000270     1.60e-29  7.25e-81    0.0264
20 mu_0       0.2   0.220        8.22e-17  4.98e-54   13.1   
21 mu_0       0.3   1.69         9.30e-10  1.55e-38   64.0   
22 mu_0       0.4   1.63         2.57e- 5  8.29e-28   25.4   
23 mu_0       0.5   1.41         1.15e- 2  1.35e-19   19.5   
24 mu_0       0.6   1.04         1.37e- 1  5.13e-13    9.91  
25 mu_0       0.7   1.15         2.14e- 1  2.04e-16   16.6   
26 mu_0       0.8   1.34         2.07e- 2  1.06e-26   15.7   
27 mu_0       0.9   1.02         8.91e- 6  3.02e-45   19.6   
[1] "Total run time was 597.621 seconds"
