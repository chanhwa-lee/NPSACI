
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7553"
[1] "cluster size dist'n: "

50 51 53 54 55 56 57 58 59 63 64 65 66 68 69 70 71 72 73 74 75 76 77 78 79 80 
 1  1  3  4  1  3  1  4  4  3  3  1  1  2  4  2  2  4  1  3  1  1  3  4  2  4 
81 82 83 84 85 86 87 89 90 91 92 93 94 95 97 98 99 
 1  1  1  2  3  1  1  3  2  3  3  5  2  2  2  2  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02977 0.34743 0.61007 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4508 3045 
[1] "treatment indicator table: "

   0    1 
2819 4734 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3709
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3844
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 412.857 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.461 0.0915
 2 mu         0.1   0.2 0.506 0.0886
 3 mu         0.1   0.3 0.543 0.0936
 4 mu         0.1   0.4 0.603 0.0881
 5 mu         0.1   0.5 0.664 0.106 
 6 mu         0.2   0.1 0.421 0.0446
 7 mu         0.2   0.2 0.490 0.0438
 8 mu         0.2   0.3 0.525 0.0410
 9 mu         0.2   0.4 0.614 0.0479
10 mu         0.2   0.5 0.672 0.0563
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.920        0.620 0.000111       4.92
 2 mu         0.2      1.05         0.962 0.0721         2.35
 3 mu         0.3      1.00         0.989 0.255          1.74
 4 mu         0.4      0.975        0.960 0.340          1.43
 5 mu         0.5      0.993        0.995 0.601          1.59
 6 mu         0.6      1.00         0.995 0.644          1.47
 7 mu         0.7      0.996        0.997 0.669          1.42
 8 mu         0.8      0.986        0.967 0.583          1.61
 9 mu         0.9      1.01         1.00  0.283          1.85
10 mu_1       0.1      0.917        0.789 0.000277       4.26
11 mu_1       0.2      1.05         1.01  0.0877         2.50
12 mu_1       0.3      0.993        1.00  0.265          1.78
13 mu_1       0.4      0.976        0.968 0.350          1.41
14 mu_1       0.5      0.993        0.997 0.613          1.58
15 mu_1       0.6      1.01         0.992 0.647          1.45
16 mu_1       0.7      0.995        0.995 0.679          1.43
17 mu_1       0.8      0.986        0.975 0.574          1.64
18 mu_1       0.9      1.01         1.00  0.276          1.86
19 mu_0       0.1      0.921        0.597 0.0000921      4.99
20 mu_0       0.2      1.05         0.967 0.0682         2.39
21 mu_0       0.3      1.00         1.00  0.250          1.73
22 mu_0       0.4      0.975        0.963 0.333          1.44
23 mu_0       0.5      0.992        0.988 0.590          1.59
24 mu_0       0.6      1.00         0.991 0.639          1.51
25 mu_0       0.7      0.998        1.00  0.646          1.41
26 mu_0       0.8      0.986        0.970 0.591          1.49
27 mu_0       0.9      1.01         0.996 0.346          1.79
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.70      5.00e-27  1.88e-93    194.  
 2 mu         0.2      1.02      2.86e-14  5.29e-64     65.3 
 3 mu         0.3      0.771     2.35e- 7  8.37e-47     18.7 
 4 mu         0.4      0.951     5.36e- 4  1.26e-34     12.6 
 5 mu         0.5      1.19      4.73e- 2  3.29e-25     11.9 
 6 mu         0.6      1.02      2.35e- 1  1.30e-17      6.03
 7 mu         0.7      0.969     1.22e- 1  4.50e-26      8.11
 8 mu         0.8      1.16      6.49e- 3  2.74e-38     12.7 
 9 mu         0.9      1.26      5.04e- 8  1.49e-59     19.8 
10 mu_1       0.1      4.28      3.54e-26  1.86e-92    252.  
11 mu_1       0.2      0.805     8.27e-14  2.62e-63     42.2 
12 mu_1       0.3      0.792     4.78e- 7  2.76e-46     20.6 
13 mu_1       0.4      0.963     8.69e- 4  3.11e-34     12.0 
14 mu_1       0.5      1.21      5.81e- 2  6.52e-25     12.6 
15 mu_1       0.6      0.997     2.48e- 1  2.16e-18      5.36
16 mu_1       0.7      0.981     1.02e- 1  6.42e-27      8.39
17 mu_1       0.8      1.17      5.02e- 3  3.43e-39     13.0 
18 mu_1       0.9      1.25      3.56e- 8  1.66e-60     19.6 
19 mu_0       0.1      3.64      1.62e-27  2.11e-95    188.  
20 mu_0       0.2      1.07      1.51e-14  6.68e-66     71.0 
21 mu_0       0.3      0.762     1.32e- 7  1.21e-48     18.0 
22 mu_0       0.4      0.943     3.14e- 4  2.12e-36     13.1 
23 mu_0       0.5      1.17      3.12e- 2  6.66e-27     11.2 
24 mu_0       0.6      1.06      1.75e- 1  3.83e-19      7.08
25 mu_0       0.7      0.939     1.40e- 1  1.35e-25      7.56
26 mu_0       0.8      1.15      5.52e- 3  1.23e-37     11.4 
27 mu_0       0.9      1.29      1.84e- 7  1.34e-58     21.4 
[1] "Total run time was 416.969 seconds"
