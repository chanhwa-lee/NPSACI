
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7720"
[1] "cluster size dist'n: "

 50  51  55  56  57  58  59  60  61  62  63  64  65  66  68  69  71  75  76  79 
  3   3   4   3   2   1   2   1   3   3   1   5   3   4   1   1   3   1   3   3 
 80  83  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 
  1   4   3   3   3   3   1   2   3   4   1   6   3   2   3   2   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05137 0.38387 0.63012 1.00000 5.07344 
[1] "event indicator table: "

   0    1 
4589 3131 
[1] "treatment indicator table: "

   0    1 
2737 4983 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3797
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3923
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 372.765 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.342 0.101 
 2 mu         0.1   0.2 0.443 0.147 
 3 mu         0.1   0.3 0.488 0.154 
 4 mu         0.1   0.4 0.544 0.159 
 5 mu         0.1   0.5 0.591 0.172 
 6 mu         0.2   0.1 0.281 0.0318
 7 mu         0.2   0.2 0.365 0.0712
 8 mu         0.2   0.3 0.409 0.0603
 9 mu         0.2   0.4 0.461 0.0539
10 mu         0.2   0.5 0.505 0.0592
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.992       0.0313  1.86e-15     20.6 
 2 mu         0.2      0.915       0.700   2.12e- 6      4.09
 3 mu         0.3      0.950       0.944   1.32e- 2      2.81
 4 mu         0.4      0.971       0.938   4.27e- 1      2.17
 5 mu         0.5      1.01        0.999   5.61e- 1      1.69
 6 mu         0.6      1.01        1.02    6.31e- 1      1.34
 7 mu         0.7      0.987       1.00    6.14e- 1      1.39
 8 mu         0.8      0.998       0.986   5.70e- 1      1.51
 9 mu         0.9      1.02        0.995   3.48e- 1      2.09
10 mu_1       0.1      0.964       0.0622  7.46e-15     24.1 
11 mu_1       0.2      0.914       0.725   4.29e- 6      2.73
12 mu_1       0.3      0.956       0.938   1.83e- 2      2.76
13 mu_1       0.4      0.973       0.934   4.60e- 1      2.16
14 mu_1       0.5      1.02        1.01    5.74e- 1      1.65
15 mu_1       0.6      1.01        1.02    6.27e- 1      1.32
16 mu_1       0.7      0.987       0.999   6.23e- 1      1.37
17 mu_1       0.8      0.999       0.988   5.68e- 1      1.52
18 mu_1       0.9      1.02        1.00    3.44e- 1      2.11
19 mu_0       0.1      0.995       0.0279  1.24e-15     20.2 
20 mu_0       0.2      0.916       0.680   1.58e- 6      4.43
21 mu_0       0.3      0.948       0.944   1.10e- 2      2.84
22 mu_0       0.4      0.970       0.945   3.97e- 1      2.18
23 mu_0       0.5      1.01        0.991   5.46e- 1      1.73
24 mu_0       0.6      1.02        1.03    6.39e- 1      1.37
25 mu_0       0.7      0.988       0.997   5.92e- 1      1.45
26 mu_0       0.8      0.994       0.980   5.74e- 1      1.49
27 mu_0       0.9      1.03        1.00    3.46e- 1      1.95
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000566     3.27e-28  1.03e-89    0.0562
 2 mu         0.2   0.174        6.89e-15  1.15e-60   11.5   
 3 mu         0.3   1.10         1.66e- 8  9.26e-44   26.7   
 4 mu         0.4   1.19         1.72e- 4  7.67e-32   18.1   
 5 mu         0.5   1.28         4.52e- 2  1.12e-22   20.2   
 6 mu         0.6   1.01         4.89e- 1  2.74e-15    7.42  
 7 mu         0.7   0.992        2.11e- 1  1.19e-13    8.53  
 8 mu         0.8   1.12         3.81e- 2  7.97e-24   14.5   
 9 mu         0.9   0.881        1.06e- 6  9.70e-43   12.0   
10 mu_1       0.1   0.00140      2.34e-27  1.00e-88    0.138 
11 mu_1       0.2   0.231        2.14e-14  5.57e-60   14.1   
12 mu_1       0.3   1.17         3.71e- 8  3.00e-43   26.2   
13 mu_1       0.4   1.18         2.91e- 4  1.86e-31   15.8   
14 mu_1       0.5   1.27         5.99e- 2  2.17e-22   19.6   
15 mu_1       0.6   1.01         4.41e- 1  4.43e-15    7.56  
16 mu_1       0.7   0.991        1.71e- 1  5.01e-14    8.85  
17 mu_1       0.8   1.13         3.10e- 2  2.94e-24   14.3   
18 mu_1       0.9   0.872        7.42e- 7  3.30e-43   11.8   
19 mu_0       0.1   0.000474     1.03e-28  3.44e-91    0.0471
20 mu_0       0.2   0.160        3.00e-15  4.30e-62   10.8   
21 mu_0       0.3   1.07         7.95e- 9  3.97e-45   26.9   
22 mu_0       0.4   1.19         9.35e- 5  3.84e-33   19.6   
23 mu_0       0.5   1.29         3.20e- 2  6.70e-24   20.9   
24 mu_0       0.6   1.01         5.00e- 1  2.05e-16    8.75  
25 mu_0       0.7   0.995        1.91e- 1  2.80e-13    7.78  
26 mu_0       0.8   1.12         6.76e- 2  2.81e-23   15.2   
27 mu_0       0.9   0.964        3.89e- 6  6.73e-42   13.0   
[1] "Total run time was 375.792 seconds"
