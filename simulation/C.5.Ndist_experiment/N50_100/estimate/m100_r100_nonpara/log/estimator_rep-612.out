
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7519"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  67  68  70  71  72 
  4   2   2   1   1   2   1   3   2   1   2   2   4   4   2   2   3   4   2   3 
 73  74  75  76  77  78  79  80  81  82  83  84  85  87  88  89  90  91  92  93 
  1   3   1   2   1   1   3   2   1   6   1   1   2   1   1   1   2   1   3   2 
 94  95  96  97  98  99 100 
  2   3   3   4   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02924 0.34193 0.61155 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4522 2997 
[1] "treatment indicator table: "

   0    1 
2764 4755 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3560
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3959
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.536 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.698 0.263 
 2 mu         0.1   0.2 0.784 0.302 
 3 mu         0.1   0.3 0.904 0.333 
 4 mu         0.1   0.4 0.999 0.378 
 5 mu         0.1   0.5 1.01  0.391 
 6 mu         0.2   0.1 0.420 0.0592
 7 mu         0.2   0.2 0.481 0.0517
 8 mu         0.2   0.3 0.552 0.0616
 9 mu         0.2   0.4 0.615 0.0777
10 mu         0.2   0.5 0.624 0.0725
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.50        0.0773  2.93e-11     58.7 
 2 mu         0.2      0.991       0.733   4.35e- 4      5.45
 3 mu         0.3      0.949       0.972   1.57e- 1      2.43
 4 mu         0.4      1.03        0.986   4.89e- 1      1.97
 5 mu         0.5      1.00        0.976   5.64e- 1      1.79
 6 mu         0.6      0.994       0.988   6.20e- 1      1.78
 7 mu         0.7      0.962       0.949   5.72e- 1      1.47
 8 mu         0.8      0.990       0.995   2.88e- 1      1.60
 9 mu         0.9      0.982       0.914   4.45e- 2      3.24
10 mu_1       0.1      1.22        0.136   1.04e-10     28.7 
11 mu_1       0.2      0.973       0.776   7.86e- 4      5.20
12 mu_1       0.3      0.958       0.965   1.81e- 1      2.20
13 mu_1       0.4      1.03        0.948   5.16e- 1      2.01
14 mu_1       0.5      1.00        0.964   5.63e- 1      1.74
15 mu_1       0.6      0.992       0.983   6.24e- 1      1.81
16 mu_1       0.7      0.962       0.955   5.62e- 1      1.49
17 mu_1       0.8      0.992       0.992   2.78e- 1      1.60
18 mu_1       0.9      0.982       0.914   4.02e- 2      3.35
19 mu_0       0.1      1.53        0.0713  2.10e-11     62.1 
20 mu_0       0.2      0.995       0.700   3.47e- 4      5.52
21 mu_0       0.3      0.945       0.934   1.47e- 1      2.53
22 mu_0       0.4      1.03        0.993   4.61e- 1      1.94
23 mu_0       0.5      1.00        0.977   5.63e- 1      1.83
24 mu_0       0.6      0.996       0.990   6.14e- 1      1.75
25 mu_0       0.7      0.962       0.941   5.98e- 1      1.51
26 mu_0       0.8      0.986       0.981   3.28e- 1      1.58
27 mu_0       0.9      0.980       0.961   8.37e- 2      2.35
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0181     3.07e-28  3.67e-71      1.79
 2 mu         0.2     0.646      3.49e-15  7.78e-46     32.9 
 3 mu         0.3     1.78       2.11e- 8  2.49e-31     48.9 
 4 mu         0.4     1.17       3.80e- 4  1.48e-21     17.9 
 5 mu         0.5     0.696      5.19e- 2  4.16e-15      9.88
 6 mu         0.6     1.02       3.24e- 1  6.19e-10     13.0 
 7 mu         0.7     1.59       2.35e- 1  5.66e-12     30.8 
 8 mu         0.8     1.36       1.21e- 2  4.93e-21     21.5 
 9 mu         0.9     1.62       1.54e- 8  3.69e-38     64.8 
10 mu_1       0.1     0.0392     1.81e-27  3.26e-70      3.85
11 mu_1       0.2     0.802      1.09e-14  3.45e-45     35.5 
12 mu_1       0.3     1.81       4.49e- 8  7.37e-31     47.6 
13 mu_1       0.4     1.08       5.91e- 4  3.54e-21     16.7 
14 mu_1       0.5     0.689      5.45e- 2  7.96e-15      9.65
15 mu_1       0.6     1.05       3.29e- 1  9.88e-10     13.6 
16 mu_1       0.7     1.60       1.97e- 1  2.60e-12     32.3 
17 mu_1       0.8     1.37       9.44e- 3  1.99e-21     23.3 
18 mu_1       0.9     1.58       1.06e- 8  1.41e-38     62.6 
19 mu_0       0.1     0.0158     1.40e-28  4.63e-72      1.56
20 mu_0       0.2     0.607      1.63e-15  1.10e-46     32.2 
21 mu_0       0.3     1.78       1.05e- 8  4.04e-32     49.4 
22 mu_0       0.4     1.22       2.33e- 4  1.03e-22     18.7 
23 mu_0       0.5     0.703      4.14e- 2  3.46e-16     10.1 
24 mu_0       0.6     0.969      3.30e- 1  6.44e-11     12.3 
25 mu_0       0.7     1.57       2.07e- 1  1.28e-11     27.1 
26 mu_0       0.8     1.33       1.79e- 2  1.67e-20     21.9 
27 mu_0       0.9     1.93       5.44e- 8  2.42e-37     84.5 
[1] "Total run time was 424.79 seconds"
