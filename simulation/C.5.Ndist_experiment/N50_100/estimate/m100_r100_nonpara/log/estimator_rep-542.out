
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7762"
[1] "cluster size dist'n: "

 51  53  54  55  56  57  58  59  60  61  62  65  66  67  68  69  71  72  73  74 
  1   3   1   1   3   3   1   3   2   3   1   1   3   1   4   1   2   1   4   3 
 76  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  94  95  96 
  5   2   1   3   1   3   2   4   3   1   2   4   3   1   1   2   2   2   3   3 
 97  98  99 100 
  1   3   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03813 0.34159 0.61029 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4568 3194 
[1] "treatment indicator table: "

   0    1 
3032 4730 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3966
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3796
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 448.103 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.370 0.115 
 2 mu         0.1   0.2 0.435 0.149 
 3 mu         0.1   0.3 0.491 0.161 
 4 mu         0.1   0.4 0.534 0.167 
 5 mu         0.1   0.5 0.573 0.180 
 6 mu         0.2   0.1 0.303 0.0603
 7 mu         0.2   0.2 0.354 0.0813
 8 mu         0.2   0.3 0.408 0.0817
 9 mu         0.2   0.4 0.446 0.0722
10 mu         0.2   0.5 0.482 0.0781
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05       0.0105   4.30e-11     17.6 
 2 mu         0.2      0.925      0.714    2.74e- 4      4.54
 3 mu         0.3      0.989      0.924    9.69e- 2      2.48
 4 mu         0.4      0.965      0.957    2.58e- 1      2.05
 5 mu         0.5      0.968      0.938    5.91e- 1      1.52
 6 mu         0.6      1.01       1.01     6.27e- 1      1.51
 7 mu         0.7      1.04       1.04     4.04e- 1      1.63
 8 mu         0.8      1.01       1.02     3.87e- 1      1.71
 9 mu         0.9      0.884      0.824    5.79e- 2      2.51
10 mu_1       0.1      1.18       0.0216   1.56e-10     19.5 
11 mu_1       0.2      0.922      0.775    5.02e- 4      3.53
12 mu_1       0.3      0.992      0.958    1.23e- 1      2.52
13 mu_1       0.4      0.962      0.962    2.83e- 1      1.96
14 mu_1       0.5      0.970      0.941    6.02e- 1      1.52
15 mu_1       0.6      1.01       1.01     6.22e- 1      1.50
16 mu_1       0.7      1.04       1.04     4.04e- 1      1.64
17 mu_1       0.8      1.01       1.02     3.78e- 1      1.72
18 mu_1       0.9      0.881      0.818    5.35e- 2      2.55
19 mu_0       0.1      1.04       0.00924  3.04e-11     18.1 
20 mu_0       0.2      0.926      0.675    2.17e- 4      4.84
21 mu_0       0.3      0.988      0.936    8.59e- 2      2.46
22 mu_0       0.4      0.966      0.959    2.42e- 1      2.11
23 mu_0       0.5      0.965      0.947    5.80e- 1      1.52
24 mu_0       0.6      1.00       0.999    6.30e- 1      1.53
25 mu_0       0.7      1.04       1.03     4.05e- 1      1.61
26 mu_0       0.8      1.01       1.01     4.25e- 1      1.75
27 mu_0       0.9      0.912      0.863    9.75e- 2      2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     13.1       1.28e-27  1.44e-78   1310.  
 2 mu         0.2      0.509     7.17e-15  4.39e-52     33.4 
 3 mu         0.3      0.734     3.65e- 8  9.25e-37     24.5 
 4 mu         0.4      1.13      4.67e- 4  4.83e-26     18.1 
 5 mu         0.5      1.31      1.16e- 1  6.82e-18     20.4 
 6 mu         0.6      1.30      3.36e- 1  1.59e-21      8.49
 7 mu         0.7      1.55      6.10e- 1  4.24e-32     30.6 
 8 mu         0.8      1.06      7.92e- 3  2.29e-47     19.1 
 9 mu         0.9      0.643     1.12e- 8  6.00e-74     22.9 
10 mu_1       0.1     13.1       7.68e-27  1.35e-77   1310.  
11 mu_1       0.2      0.392     2.32e-14  2.05e-51     19.9 
12 mu_1       0.3      0.789     7.70e- 8  2.89e-36     25.9 
13 mu_1       0.4      1.15      7.35e- 4  1.13e-25     18.8 
14 mu_1       0.5      1.31      1.36e- 1  1.28e-17     21.4 
15 mu_1       0.6      1.33      3.40e- 1  2.66e-22      9.32
16 mu_1       0.7      1.53      6.50e- 1  6.06e-33     30.4 
17 mu_1       0.8      1.04      6.01e- 3  2.86e-48     19.7 
18 mu_1       0.9      0.651     7.82e- 9  6.66e-75     23.8 
19 mu_0       0.1     13.1       5.70e-28  1.01e-79   1310.  
20 mu_0       0.2      0.538     3.17e-15  3.46e-53     37.6 
21 mu_0       0.3      0.711     1.91e- 8  8.35e-38     23.9 
22 mu_0       0.4      1.12      2.88e- 4  5.09e-27     17.6 
23 mu_0       0.5      1.31      9.07e- 2  4.32e-19     19.3 
24 mu_0       0.6      1.26      3.43e- 1  3.58e-21      9.19
25 mu_0       0.7      1.57      5.78e- 1  1.27e-31     30.9 
26 mu_0       0.8      1.14      1.39e- 2  1.03e-46     16.7 
27 mu_0       0.9      0.573     4.17e- 8  5.40e-73     17.5 
[1] "Total run time was 452.458 seconds"
