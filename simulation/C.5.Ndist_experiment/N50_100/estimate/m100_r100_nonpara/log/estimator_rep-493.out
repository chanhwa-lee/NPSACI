
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7471"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  69  70  71 
  1   3   4   1   4   2   3   3   3   2   1   1   1   1   4   4   1   3   1   3 
 72  73  74  75  76  77  80  82  84  85  86  87  88  89  90  91  92  93  94  95 
  5   1   2   1   1   2   2   2   4   2   2   2   1   1   3   3   1   3   4   3 
 96  98  99 100 
  3   2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03722 0.35995 0.63648 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4384 3087 
[1] "treatment indicator table: "

   0    1 
2837 4634 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3717
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3754
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 439.116 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.245 0.0753
 2 mu         0.1   0.2 0.294 0.0871
 3 mu         0.1   0.3 0.301 0.0910
 4 mu         0.1   0.4 0.325 0.0834
 5 mu         0.1   0.5 0.362 0.0845
 6 mu         0.2   0.1 0.355 0.0600
 7 mu         0.2   0.2 0.431 0.0688
 8 mu         0.2   0.3 0.468 0.0688
 9 mu         0.2   0.4 0.501 0.0624
10 mu         0.2   0.5 0.556 0.0618
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.625        0.121 0.000000260      8.86
 2 mu         0.2      1.03         0.808 0.0187           5.94
 3 mu         0.3      1.01         0.971 0.258            2.40
 4 mu         0.4      1.00         0.990 0.507            1.70
 5 mu         0.5      0.983        0.969 0.519            1.56
 6 mu         0.6      0.993        0.994 0.585            1.42
 7 mu         0.7      1.02         1.02  0.426            1.57
 8 mu         0.8      0.999        0.993 0.319            1.81
 9 mu         0.9      0.970        0.904 0.183            2.34
10 mu_1       0.1      0.736        0.206 0.000000775      9.76
11 mu_1       0.2      1.02         0.864 0.0288           5.25
12 mu_1       0.3      1.01         0.977 0.253            2.23
13 mu_1       0.4      1.00         0.988 0.514            1.70
14 mu_1       0.5      0.983        0.964 0.527            1.57
15 mu_1       0.6      0.994        0.987 0.585            1.39
16 mu_1       0.7      1.02         1.03  0.420            1.58
17 mu_1       0.8      1.00         0.997 0.322            1.82
18 mu_1       0.9      0.966        0.901 0.175            2.40
19 mu_0       0.1      0.613        0.113 0.000000203      8.76
20 mu_0       0.2      1.03         0.779 0.0161           6.11
21 mu_0       0.3      1.01         0.971 0.260            2.47
22 mu_0       0.4      1.01         0.998 0.503            1.70
23 mu_0       0.5      0.983        0.961 0.511            1.56
24 mu_0       0.6      0.992        1.00  0.585            1.48
25 mu_0       0.7      1.02         1.01  0.438            1.56
26 mu_0       0.8      0.996        0.995 0.305            1.77
27 mu_0       0.9      0.999        0.917 0.257            2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0141     1.10e-24  7.84e-75     0.747
 2 mu         0.2     1.28       7.74e-13  1.50e-49    52.5  
 3 mu         0.3     0.806      6.56e- 7  6.23e-35    29.0  
 4 mu         0.4     0.919      2.29e- 3  1.03e-24    26.4  
 5 mu         0.5     1.33       1.61e- 1  5.96e-17    12.6  
 6 mu         0.6     1.21       4.60e- 1  1.69e-11     7.53 
 7 mu         0.7     1.04       2.11e- 1  4.86e-19    11.4  
 8 mu         0.8     1.11       1.52e- 2  2.54e-30     8.55 
 9 mu         0.9     1.33       2.48e- 8  1.79e-50    19.0  
10 mu_1       0.1     0.0306     6.51e-24  7.32e-74     1.53 
11 mu_1       0.2     1.43       2.48e-12  6.98e-49    60.6  
12 mu_1       0.3     0.736      1.42e- 6  1.94e-34    22.3  
13 mu_1       0.4     0.968      3.57e- 3  2.40e-24    26.0  
14 mu_1       0.5     1.32       1.92e- 1  1.11e-16    12.0  
15 mu_1       0.6     1.22       4.18e- 1  5.76e-12     7.23 
16 mu_1       0.7     1.02       2.22e- 1  1.42e-19    11.4  
17 mu_1       0.8     1.14       1.21e- 2  6.49e-31     8.72 
18 mu_1       0.9     1.30       1.82e- 8  4.07e-51    19.7  
19 mu_0       0.1     0.0123     4.98e-25  5.74e-76     0.661
20 mu_0       0.2     1.25       3.48e-13  1.23e-50    51.2  
21 mu_0       0.3     0.835      3.29e- 7  5.87e-36    31.8  
22 mu_0       0.4     0.886      1.44e- 3  1.13e-25    26.6  
23 mu_0       0.5     1.33       1.13e- 1  7.85e-18    13.1  
24 mu_0       0.6     1.20       4.29e- 1  1.38e-11     7.98 
25 mu_0       0.7     1.08       2.18e- 1  1.29e-18    11.4  
26 mu_0       0.8     1.03       2.20e- 2  1.01e-29     8.64 
27 mu_0       0.9     1.53       8.64e- 8  1.42e-49    18.3  
[1] "Total run time was 443.432 seconds"
