
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7423"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  60  61  62  63  65  67  68  71  72  74  75  76 
  1   4   4   5   2   2   2   4   1   4   4   2   1   3   3   2   2   2   1   3 
 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  94  95  96  97  98 
  1   1   2   3   1   3   3   1   5   1   3   1   1   2   4   6   3   1   1   2 
 99 100 
  1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05151 0.38125 0.63461 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4488 2935 
[1] "treatment indicator table: "

   0    1 
2529 4894 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3806
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3617
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 446.87 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.232 0.0831
 2 mu         0.1   0.2 0.339 0.111 
 3 mu         0.1   0.3 0.344 0.125 
 4 mu         0.1   0.4 0.374 0.141 
 5 mu         0.1   0.5 0.405 0.153 
 6 mu         0.2   0.1 0.297 0.0420
 7 mu         0.2   0.2 0.400 0.0426
 8 mu         0.2   0.3 0.423 0.0430
 9 mu         0.2   0.4 0.453 0.0436
10 mu         0.2   0.5 0.483 0.0450
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.799       0.0330  6.33e-10     27.2 
 2 mu         0.2      0.939       0.777   2.41e- 3      5.01
 3 mu         0.3      0.961       0.948   2.15e- 1      2.13
 4 mu         0.4      0.977       0.960   4.43e- 1      1.67
 5 mu         0.5      1.01        0.993   6.10e- 1      1.78
 6 mu         0.6      0.999       0.998   5.55e- 1      1.32
 7 mu         0.7      1.02        1.02    7.03e- 1      1.41
 8 mu         0.8      1.03        1.04    5.88e- 1      1.47
 9 mu         0.9      0.975       0.987   8.50e- 2      1.77
10 mu_1       0.1      0.744       0.0699  2.17e- 9     13.8 
11 mu_1       0.2      0.971       0.753   4.16e- 3      4.31
12 mu_1       0.3      0.956       0.911   1.96e- 1      1.96
13 mu_1       0.4      0.982       0.961   4.47e- 1      1.72
14 mu_1       0.5      1.01        0.993   6.14e- 1      1.74
15 mu_1       0.6      0.998       0.998   5.51e- 1      1.30
16 mu_1       0.7      1.02        1.02    7.04e- 1      1.42
17 mu_1       0.8      1.03        1.04    5.91e- 1      1.48
18 mu_1       0.9      0.974       0.993   8.20e- 2      1.78
19 mu_0       0.1      0.805       0.0288  4.62e-10     28.7 
20 mu_0       0.2      0.931       0.767   1.97e- 3      5.19
21 mu_0       0.3      0.963       0.936   2.24e- 1      2.21
22 mu_0       0.4      0.974       0.959   4.27e- 1      1.70
23 mu_0       0.5      1.01        0.986   6.01e- 1      1.83
24 mu_0       0.6      1.00        0.995   5.60e- 1      1.36
25 mu_0       0.7      1.01        1.01    7.02e- 1      1.38
26 mu_0       0.8      1.04        1.04    5.79e- 1      1.44
27 mu_0       0.9      0.982       0.982   1.12e- 1      1.71
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.183     5.45e-31  7.16e-69     18.1 
 2 mu         0.2      0.790     8.62e-17  1.20e-45     43.2 
 3 mu         0.3      0.948     2.73e- 9  3.35e-32     23.5 
 4 mu         0.4      0.850     5.90e- 5  8.62e-23     12.6 
 5 mu         0.5      1.08      1.39e- 2  1.25e-15     14.1 
 6 mu         0.6      1.16      2.46e- 1  5.47e-15     11.8 
 7 mu         0.7      1.46      5.58e- 1  2.02e-23     13.7 
 8 mu         0.8      1.12      1.40e- 1  8.12e-36      7.71
 9 mu         0.9      1.63      1.91e- 5  1.12e-57     32.7 
10 mu_1       0.1      0.289     3.47e-30  6.73e-68     28.4 
11 mu_1       0.2      0.805     2.77e-16  5.64e-45     34.0 
12 mu_1       0.3      0.943     6.11e- 9  1.05e-31     23.9 
13 mu_1       0.4      0.854     7.30e- 5  2.02e-22     13.8 
14 mu_1       0.5      1.08      1.55e- 2  2.36e-15     12.9 
15 mu_1       0.6      1.18      2.35e- 1  1.43e-15     11.5 
16 mu_1       0.7      1.46      6.03e- 1  4.53e-24     13.6 
17 mu_1       0.8      1.12      1.25e- 1  1.60e-36      8.05
18 mu_1       0.9      1.65      1.47e- 5  1.95e-58     34.2 
19 mu_0       0.1      0.171     1.98e-31  4.79e-70     16.9 
20 mu_0       0.2      0.787     3.84e-17  9.05e-47     45.5 
21 mu_0       0.3      0.951     1.28e- 9  2.88e-33     23.4 
22 mu_0       0.4      0.847     3.08e- 5  8.65e-24     13.6 
23 mu_0       0.5      1.07      1.18e- 2  1.51e-16     15.4 
24 mu_0       0.6      1.13      2.48e- 1  1.15e-14     12.4 
25 mu_0       0.7      1.48      4.77e- 1  5.66e-23     14.0 
26 mu_0       0.8      1.11      2.19e- 1  3.42e-35      7.23
27 mu_0       0.9      1.47      5.52e- 5  9.42e-57     21.7 
[1] "Total run time was 450.534 seconds"
