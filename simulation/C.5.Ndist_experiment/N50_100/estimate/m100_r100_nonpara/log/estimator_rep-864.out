
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7788"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  70  73 
  5   3   1   2   1   2   1   2   2   1   1   3   1   1   2   2   4   1   5   2 
 75  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95 
  1   1   1   1   1   2   1   2   2   2   1   5   3   1   2   3   1   2   6   2 
 96  97  98  99 100 
  4   4   3   2   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03687 0.35662 0.61529 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4526 3262 
[1] "treatment indicator table: "

   0    1 
3024 4764 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3924
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3864
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 366.54 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.430 0.102 
 2 mu         0.1   0.2 0.588 0.137 
 3 mu         0.1   0.3 0.640 0.153 
 4 mu         0.1   0.4 0.706 0.166 
 5 mu         0.1   0.5 0.719 0.169 
 6 mu         0.2   0.1 0.322 0.0314
 7 mu         0.2   0.2 0.429 0.0451
 8 mu         0.2   0.3 0.466 0.0530
 9 mu         0.2   0.4 0.522 0.0567
10 mu         0.2   0.5 0.539 0.0553
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.13         0.235  1.90e-14     18.4 
 2 mu         0.2      0.961        0.844  5.02e- 6      6.29
 3 mu         0.3      0.992        1.00   9.82e- 3      3.03
 4 mu         0.4      1.02         1.04   1.70e- 1      2.17
 5 mu         0.5      1.01         0.976  4.67e- 1      1.67
 6 mu         0.6      0.968        0.970  4.77e- 1      1.49
 7 mu         0.7      0.978        0.968  6.18e- 1      1.56
 8 mu         0.8      1.01         1.00   3.78e- 1      2.04
 9 mu         0.9      1.04         0.956  1.16e- 1      3.46
10 mu_1       0.1      1.05         0.375  7.45e-14     19.3 
11 mu_1       0.2      0.955        0.861  9.83e- 6      5.66
12 mu_1       0.3      0.995        1.02   1.30e- 2      2.70
13 mu_1       0.4      1.03         1.03   1.91e- 1      2.12
14 mu_1       0.5      1.01         0.974  4.83e- 1      1.68
15 mu_1       0.6      0.967        0.960  4.87e- 1      1.48
16 mu_1       0.7      0.979        0.957  6.02e- 1      1.57
17 mu_1       0.8      1.01         1.01   3.79e- 1      2.03
18 mu_1       0.9      1.04         0.952  1.08e- 1      3.49
19 mu_0       0.1      1.14         0.219  1.28e-14     19.4 
20 mu_0       0.2      0.962        0.846  3.81e- 6      6.45
21 mu_0       0.3      0.991        1.00   8.48e- 3      3.17
22 mu_0       0.4      1.02         1.04   1.55e- 1      2.20
23 mu_0       0.5      1.01         0.981  4.52e- 1      1.65
24 mu_0       0.6      0.970        0.973  4.62e- 1      1.52
25 mu_0       0.7      0.974        0.972  6.42e- 1      1.52
26 mu_0       0.8      1.01         1.00   3.73e- 1      2.06
27 mu_0       0.9      1.06         0.979  1.82e- 1      3.18
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0920     8.25e-26  1.73e-84      9.16
 2 mu         0.2     0.633      1.24e-13  5.33e-57     27.7 
 3 mu         0.3     1.53       2.21e- 7  9.05e-42     63.2 
 4 mu         0.4     1.46       1.59e- 3  2.83e-31     28.8 
 5 mu         0.5     1.35       6.76e- 2  3.91e-23     13.2 
 6 mu         0.6     0.986      1.78e- 1  1.75e-16     15.8 
 7 mu         0.7     1.08       2.11e- 1  9.20e-23     10.6 
 8 mu         0.8     1.12       7.16e- 3  8.33e-35     19.2 
 9 mu         0.9     1.61       2.01e- 8  4.59e-56     53.8 
10 mu_1       0.1     0.148      5.76e-25  1.65e-83     14.7 
11 mu_1       0.2     0.692      4.19e-13  2.56e-56     22.3 
12 mu_1       0.3     1.52       4.60e- 7  3.02e-41     60.5 
13 mu_1       0.4     1.50       2.37e- 3  7.07e-31     30.8 
14 mu_1       0.5     1.31       9.04e- 2  7.82e-23     13.2 
15 mu_1       0.6     0.992      1.68e- 1  2.92e-16     15.6 
16 mu_1       0.7     1.08       2.12e- 1  2.11e-23     10.4 
17 mu_1       0.8     1.13       5.47e- 3  1.68e-35     19.9 
18 mu_1       0.9     1.63       1.30e- 8  8.21e-57     54.9 
19 mu_0       0.1     0.0858     2.80e-26  0             8.54
20 mu_0       0.2     0.618      5.06e-14  0            29.0 
21 mu_0       0.3     1.53       1.10e- 7  0            64.4 
22 mu_0       0.4     1.43       1.07e- 3  0            27.4 
23 mu_0       0.5     1.39       4.48e- 2  0            15.1 
24 mu_0       0.6     0.976      1.58e- 1  0            16.0 
25 mu_0       0.7     1.09       2.03e- 1  0            11.2 
26 mu_0       0.8     1.10       9.15e- 3  0            16.5 
27 mu_0       0.9     1.40       5.64e- 8  0            43.4 
[1] "Total run time was 369.571 seconds"
