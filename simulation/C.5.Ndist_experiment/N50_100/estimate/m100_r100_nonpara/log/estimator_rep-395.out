
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7504"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  64  65  66  69  70  71  72  74 
  3   3   1   2   2   1   3   3   1   3   4   3   2   3   1   4   3   2   1   1 
 75  76  77  78  79  81  82  83  85  86  87  88  89  90  91  92  93  94  96  97 
  1   6   1   3   3   3   2   1   1   4   3   2   2   3   2   2   3   2   2   2 
 98  99 100 
  1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02019 0.31417 0.59123 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4500 3004 
[1] "treatment indicator table: "

   0    1 
2739 4765 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3776
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3728
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 447.162 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.425 0.0789
 2 mu         0.1   0.2 0.481 0.0850
 3 mu         0.1   0.3 0.563 0.0790
 4 mu         0.1   0.4 0.624 0.0870
 5 mu         0.1   0.5 0.652 0.0958
 6 mu         0.2   0.1 0.436 0.0460
 7 mu         0.2   0.2 0.512 0.0501
 8 mu         0.2   0.3 0.593 0.0419
 9 mu         0.2   0.4 0.649 0.0445
10 mu         0.2   0.5 0.687 0.0512
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.981        0.599 0.0000295      5.00
 2 mu         0.2      1.11         1.02  0.105          4.14
 3 mu         0.3      1.02         0.985 0.313          2.05
 4 mu         0.4      1.00         0.954 0.396          2.67
 5 mu         0.5      0.975        0.955 0.534          2.07
 6 mu         0.6      0.984        0.976 0.514          1.86
 7 mu         0.7      0.999        0.993 0.509          1.53
 8 mu         0.8      1.00         1.00  0.437          1.66
 9 mu         0.9      0.992        0.971 0.135          2.15
10 mu_1       0.1      1.03         0.741 0.0000847      4.19
11 mu_1       0.2      1.10         1.03  0.154          3.77
12 mu_1       0.3      1.01         0.976 0.362          2.01
13 mu_1       0.4      0.999        0.958 0.421          2.69
14 mu_1       0.5      0.975        0.944 0.539          1.99
15 mu_1       0.6      0.985        0.966 0.499          1.87
16 mu_1       0.7      0.999        0.990 0.510          1.50
17 mu_1       0.8      1.01         0.991 0.437          1.66
18 mu_1       0.9      0.991        0.971 0.126          2.15
19 mu_0       0.1      0.976        0.587 0.0000233      5.20
20 mu_0       0.2      1.11         1.02  0.0931         4.24
21 mu_0       0.3      1.02         0.976 0.293          2.06
22 mu_0       0.4      1.00         0.950 0.379          2.66
23 mu_0       0.5      0.975        0.953 0.529          2.16
24 mu_0       0.6      0.983        0.973 0.536          1.85
25 mu_0       0.7      0.999        0.981 0.506          1.60
26 mu_0       0.8      1.00         1.01  0.437          1.70
27 mu_0       0.9      0.999        0.965 0.211          2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00497     9.50e-28  2.26e-84     0.254
 2 mu         0.2    0.649       1.06e-14  1.24e-57    20.8  
 3 mu         0.3    0.713       1.05e- 7  5.11e-42    13.7  
 4 mu         0.4    0.732       5.21e- 4  5.77e-31     9.67 
 5 mu         0.5    1.10        8.87e- 3  2.03e-22    11.6  
 6 mu         0.6    0.917       1.09e- 1  1.81e-15     9.36 
 7 mu         0.7    1.03        6.02e- 2  1.08e-19    16.6  
 8 mu         0.8    1.29        1.86e- 2  6.41e-32    16.9  
 9 mu         0.9    1.78        2.04e- 7  6.37e-54    26.2  
10 mu_1       0.1    0.0113      6.04e-27  2.23e-83     0.552
11 mu_1       0.2    0.771       3.49e-14  6.14e-57    23.9  
12 mu_1       0.3    0.662       2.09e- 7  1.68e-41    11.4  
13 mu_1       0.4    0.780       8.44e- 4  1.43e-30    10.6  
14 mu_1       0.5    1.10        9.90e- 3  4.01e-22    11.5  
15 mu_1       0.6    0.901       8.38e- 2  2.98e-15     9.01 
16 mu_1       0.7    1.05        5.52e- 2  3.54e-20    17.2  
17 mu_1       0.8    1.30        1.82e- 2  1.84e-32    17.2  
18 mu_1       0.9    1.79        1.48e- 7  1.63e-54    27.6  
19 mu_0       0.1    0.00426     3.84e-28  2.79e-86     0.221
20 mu_0       0.2    0.619       4.47e-15  1.73e-59    20.0  
21 mu_0       0.3    0.735       6.11e- 8  8.11e-44    14.7  
22 mu_0       0.4    0.700       3.06e- 4  1.07e-32     9.06 
23 mu_0       0.5    1.10        7.41e- 3  4.50e-24    11.7  
24 mu_0       0.6    0.942       1.10e- 1  5.02e-17     9.88 
25 mu_0       0.7    0.993       3.97e- 2  2.76e-19    15.3  
26 mu_0       0.8    1.24        1.47e- 2  2.47e-31    15.7  
27 mu_0       0.9    1.72        7.09e- 7  4.90e-53    22.1  
[1] "Total run time was 450.713 seconds"
