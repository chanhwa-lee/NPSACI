
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7576"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  1   3   2   1   3   1   4   2   3   1   1   2   3   2   1   1   1   3   2   1 
 71  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92 
  2   1   4   1   1   2   3   2   5   1   3   2   4   2   2   4   2   1   3   2 
 93  94  95  96  97  98  99 100 
  1   2   2   1   2   2   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03204 0.33482 0.60154 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4534 3042 
[1] "treatment indicator table: "

   0    1 
2998 4578 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3776
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3800
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 521.877 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0420
 2 mu         0.1   0.2 0.435 0.0481
 3 mu         0.1   0.3 0.455 0.0505
 4 mu         0.1   0.4 0.507 0.0567
 5 mu         0.1   0.5 0.542 0.0587
 6 mu         0.2   0.1 0.371 0.0450
 7 mu         0.2   0.2 0.454 0.0334
 8 mu         0.2   0.3 0.493 0.0284
 9 mu         0.2   0.4 0.545 0.0302
10 mu         0.2   0.5 0.581 0.0322
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.916        0.657 0.0000602      5.62
 2 mu         0.2      1.03         0.982 0.192          2.91
 3 mu         0.3      0.987        0.948 0.338          1.80
 4 mu         0.4      1.02         0.994 0.585          1.53
 5 mu         0.5      1.01         0.989 0.668          1.62
 6 mu         0.6      1.00         0.995 0.722          1.39
 7 mu         0.7      1.01         0.999 0.674          1.54
 8 mu         0.8      0.996        0.948 0.607          1.54
 9 mu         0.9      0.934        0.937 0.162          1.63
10 mu_1       0.1      0.991        0.761 0.000154       4.91
11 mu_1       0.2      1.03         0.979 0.247          2.75
12 mu_1       0.3      0.983        0.937 0.336          1.74
13 mu_1       0.4      1.02         0.985 0.591          1.50
14 mu_1       0.5      1.00         0.988 0.667          1.62
15 mu_1       0.6      1.00         1.00  0.720          1.42
16 mu_1       0.7      1.01         1.01  0.657          1.55
17 mu_1       0.8      0.996        0.960 0.606          1.53
18 mu_1       0.9      0.933        0.938 0.162          1.65
19 mu_0       0.1      0.908        0.640 0.0000498      5.70
20 mu_0       0.2      1.03         0.973 0.178          2.95
21 mu_0       0.3      0.988        0.943 0.339          1.83
22 mu_0       0.4      1.02         1.01  0.581          1.56
23 mu_0       0.5      1.01         0.987 0.669          1.62
24 mu_0       0.6      1.00         0.985 0.726          1.38
25 mu_0       0.7      1.01         0.973 0.696          1.52
26 mu_0       0.8      0.999        0.971 0.611          1.58
27 mu_0       0.9      0.940        0.960 0.168          1.54
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.42      5.70e-26  6.87e-76    234.  
 2 mu         0.2      1.12      2.13e-13  2.62e-49     42.7 
 3 mu         0.3      0.785     9.08e- 7  4.86e-34     13.4 
 4 mu         0.4      0.736     3.93e- 3  1.83e-23      7.29
 5 mu         0.5      1.07      1.17e- 1  1.06e-17      9.27
 6 mu         0.6      1.09      3.18e- 1  1.32e-25      6.29
 7 mu         0.7      0.800     9.96e- 2  6.71e-36      7.70
 8 mu         0.8      0.967     3.64e- 3  1.62e-50     12.8 
 9 mu         0.9      1.48      5.47e- 9  1.19e-75     52.0 
10 mu_1       0.1      0.943     3.49e-25  6.18e-75     80.8 
11 mu_1       0.2      1.17      6.40e-13  1.18e-48     40.7 
12 mu_1       0.3      0.754     7.48e- 7  1.46e-33     10.3 
13 mu_1       0.4      0.746     5.94e- 3  4.11e-23      6.36
14 mu_1       0.5      1.09      8.34e- 2  7.29e-19      9.38
15 mu_1       0.6      1.08      2.62e- 1  7.59e-27      6.26
16 mu_1       0.7      0.790     8.71e- 2  3.31e-37      7.65
17 mu_1       0.8      0.987     2.87e- 3  6.98e-52     13.1 
18 mu_1       0.9      1.47      3.84e- 9  4.57e-77     52.1 
19 mu_0       0.1      2.58      2.46e-26  7.63e-77    251.  
20 mu_0       0.2      1.11      1.06e-13  3.27e-50     43.2 
21 mu_0       0.3      0.798     5.11e- 7  6.94e-35     14.7 
22 mu_0       0.4      0.729     2.90e- 3  3.04e-24      7.91
23 mu_0       0.5      1.05      1.14e- 1  2.04e-17      9.15
24 mu_0       0.6      1.11      3.61e- 1  3.19e-25      6.44
25 mu_0       0.7      0.824     1.02e- 1  2.16e-35      7.83
26 mu_0       0.8      0.888     6.73e- 3  7.82e-50     11.7 
27 mu_0       0.9      1.60      2.02e- 8  1.15e-74     51.5 
[1] "Total run time was 526.273 seconds"
