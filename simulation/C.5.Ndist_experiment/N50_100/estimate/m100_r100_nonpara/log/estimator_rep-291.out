
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7595"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  69  70  71  72  74 
  3   1   3   1   3   1   2   1   1   4   1   3   4   2   1   3   1   2   4   1 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  2   1   2   4   2   3   1   3   2   3   3   7   1   2   2   3   1   1   1   1 
 95  96  97  98  99 100 
  3   1   1   2   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04311 0.36673 0.63085 1.00000 5.87953 
[1] "event indicator table: "

   0    1 
4505 3090 
[1] "treatment indicator table: "

   0    1 
2620 4975 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3859
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3736
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 420.341 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.395 0.102 
 2 mu         0.1   0.2 0.461 0.127 
 3 mu         0.1   0.3 0.538 0.144 
 4 mu         0.1   0.4 0.545 0.140 
 5 mu         0.1   0.5 0.545 0.141 
 6 mu         0.2   0.1 0.458 0.0643
 7 mu         0.2   0.2 0.528 0.0722
 8 mu         0.2   0.3 0.601 0.0697
 9 mu         0.2   0.4 0.619 0.0675
10 mu         0.2   0.5 0.654 0.0750
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.837       0.0932  4.89e-10     14.7 
 2 mu         0.2      1.12        0.795   1.02e- 3      7.18
 3 mu         0.3      1.03        0.982   1.74e- 1      2.47
 4 mu         0.4      0.999       1.01    1.78e- 1      1.86
 5 mu         0.5      0.980       0.981   4.66e- 1      1.58
 6 mu         0.6      1.02        1.03    5.47e- 1      1.56
 7 mu         0.7      1.01        0.981   5.05e- 1      1.66
 8 mu         0.8      1.00        0.998   5.49e- 1      1.48
 9 mu         0.9      0.942       0.938   2.91e- 1      1.83
10 mu_1       0.1      0.896       0.168   1.77e- 9      8.57
11 mu_1       0.2      1.11        0.833   1.85e- 3      5.89
12 mu_1       0.3      1.03        0.969   2.11e- 1      2.47
13 mu_1       0.4      0.992       1.01    1.85e- 1      1.83
14 mu_1       0.5      0.983       0.985   4.83e- 1      1.55
15 mu_1       0.6      1.02        1.02    5.58e- 1      1.55
16 mu_1       0.7      1.01        0.982   5.00e- 1      1.65
17 mu_1       0.8      1.00        0.997   5.51e- 1      1.49
18 mu_1       0.9      0.941       0.936   2.78e- 1      1.83
19 mu_0       0.1      0.831       0.0853  3.47e-10     15.4 
20 mu_0       0.2      1.13        0.795   8.17e- 4      7.51
21 mu_0       0.3      1.03        0.985   1.58e- 1      2.47
22 mu_0       0.4      1.00        1.01    1.74e- 1      1.89
23 mu_0       0.5      0.977       0.977   4.50e- 1      1.61
24 mu_0       0.6      1.02        1.03    5.31e- 1      1.58
25 mu_0       0.7      1.01        0.993   4.89e- 1      1.72
26 mu_0       0.8      1.00        1.00    5.43e- 1      1.43
27 mu_0       0.9      0.952       0.942   4.06e- 1      1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000139     8.36e-30  1.77e-90   0.0118 
 2 mu         0.2   0.207        2.34e-16  1.76e-62  11.0    
 3 mu         0.3   1.49         4.81e-10  4.18e-46  92.0    
 4 mu         0.4   1.40         3.24e- 5  1.74e-34  22.5    
 5 mu         0.5   1.06         1.31e- 2  1.79e-25  12.7    
 6 mu         0.6   0.943        4.96e- 2  4.14e-18  14.9    
 7 mu         0.7   0.872        1.42e- 1  6.97e-12  11.6    
 8 mu         0.8   1.72         8.64e- 2  9.31e-21  22.9    
 9 mu         0.9   1.14         2.78e- 6  1.53e-37  19.0    
10 mu_1       0.1   0.000372     5.51e-29  1.77e-89   0.0308 
11 mu_1       0.2   0.294        8.48e-16  8.78e-62  16.2    
12 mu_1       0.3   1.53         1.15e- 9  1.39e-45  90.2    
13 mu_1       0.4   1.39         5.31e- 5  4.35e-34  22.1    
14 mu_1       0.5   1.04         1.46e- 2  3.58e-25  11.8    
15 mu_1       0.6   0.934        5.33e- 2  6.90e-18  15.0    
16 mu_1       0.7   0.892        1.52e- 1  3.32e-12  12.1    
17 mu_1       0.8   1.75         7.16e- 2  3.42e-21  23.6    
18 mu_1       0.9   1.11         2.03e- 6  5.01e-38  18.8    
19 mu_0       0.1   0.000113     3.17e-30  0          0.00969
20 mu_0       0.2   0.186        7.22e-17  0          9.70   
21 mu_0       0.3   1.46         1.97e-10  0         92.8    
22 mu_0       0.4   1.41         1.85e- 5  0         22.9    
23 mu_0       0.5   1.08         1.37e- 2  0         13.6    
24 mu_0       0.6   0.956        3.70e- 2  0         14.8    
25 mu_0       0.7   0.826        1.04e- 1  0         10.3    
26 mu_0       0.8   1.63         9.45e- 2  0         20.2    
27 mu_0       0.9   1.41         5.92e- 6  0         20.3    
[1] "Total run time was 423.739 seconds"
