
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7743"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  62  63  64  65  66  67  68  69  70  72 
  3   1   1   2   1   2   2   1   1   2   3   1   2   1   3   1   3   2   4   2 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 
  2   1   3   3   1   1   2   3   2   1   3   2   2   2   4   3   2   4   3   1 
 93  94  95  96  97  98  99 100 
  1   1   2   1   3   5   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03831 0.36514 0.61837 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4685 3058 
[1] "treatment indicator table: "

   0    1 
2688 5055 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3978
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3765
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 387.71 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.495 0.260 
 2 mu         0.1   0.2 0.634 0.315 
 3 mu         0.1   0.3 0.730 0.361 
 4 mu         0.1   0.4 0.799 0.396 
 5 mu         0.1   0.5 0.864 0.424 
 6 mu         0.2   0.1 0.373 0.0605
 7 mu         0.2   0.2 0.520 0.0816
 8 mu         0.2   0.3 0.600 0.0934
 9 mu         0.2   0.4 0.651 0.104 
10 mu         0.2   0.5 0.726 0.113 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.31      0.000736  1.64e-22     63.3 
 2 mu         0.2      1.21      0.500     1.70e-10     15.8 
 3 mu         0.3      1.08      0.985     8.61e- 5      3.36
 4 mu         0.4      0.978     0.953     6.48e- 2      2.14
 5 mu         0.5      1.00      0.977     5.82e- 1      1.62
 6 mu         0.6      1.00      1.01      6.43e- 1      1.33
 7 mu         0.7      0.995     0.997     6.25e- 1      1.31
 8 mu         0.8      1.01      1.00      7.21e- 1      1.51
 9 mu         0.9      0.986     0.925     1.45e- 1      2.57
10 mu_1       0.1      1.28      0.00184   8.14e-22     49.8 
11 mu_1       0.2      1.19      0.598     4.24e-10     14.9 
12 mu_1       0.3      1.06      0.987     1.44e- 4      3.07
13 mu_1       0.4      0.977     0.962     8.23e- 2      2.07
14 mu_1       0.5      1.00      0.997     5.84e- 1      1.57
15 mu_1       0.6      1.00      1.00      6.44e- 1      1.34
16 mu_1       0.7      0.996     1.01      6.36e- 1      1.31
17 mu_1       0.8      1.01      0.996     7.18e- 1      1.53
18 mu_1       0.9      0.986     0.928     1.37e- 1      2.59
19 mu_0       0.1      1.31      0.000610  9.18e-23     64.8 
20 mu_0       0.2      1.22      0.475     1.07e-10     16.0 
21 mu_0       0.3      1.09      0.974     6.14e- 5      3.48
22 mu_0       0.4      0.978     0.953     5.32e- 2      2.18
23 mu_0       0.5      1.00      0.980     5.79e- 1      1.67
24 mu_0       0.6      1.00      1.01      6.42e- 1      1.32
25 mu_0       0.7      0.994     0.989     5.97e- 1      1.33
26 mu_0       0.8      1.01      1.02      7.34e- 1      1.40
27 mu_0       0.9      0.988     0.957     2.19e- 1      2.33
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000328     9.34e-32  1.90e-67    0.0211
 2 mu         0.2   1.50         8.36e-18  6.84e-43  132.    
 3 mu         0.3   4.13         4.82e-10  9.72e-31  290.    
 4 mu         0.4   1.44         2.19e- 5  3.41e-22   23.9   
 5 mu         0.5   1.28         1.31e- 2  1.20e-15   15.3   
 6 mu         0.6   0.894        1.51e- 1  2.14e-10    5.65  
 7 mu         0.7   0.986        3.85e- 1  4.35e-14    5.17  
 8 mu         0.8   1.01         7.86e- 2  1.71e-24    4.57  
 9 mu         0.9   0.637        1.03e- 6  1.95e-43   13.2   
10 mu_1       0.1   0.000881     6.41e-31  1.63e-66    0.0555
11 mu_1       0.2   2.00         2.90e-17  3.04e-42  174.    
12 mu_1       0.3   3.85         1.05e- 9  3.11e-30  255.    
13 mu_1       0.4   1.39         3.77e- 5  8.17e-22   22.7   
14 mu_1       0.5   1.27         1.68e- 2  2.30e-15   15.1   
15 mu_1       0.6   0.889        1.68e- 1  3.42e-10    5.88  
16 mu_1       0.7   0.991        3.83e- 1  1.64e-14    5.22  
17 mu_1       0.8   1.00         6.59e- 2  5.63e-25    4.46  
18 mu_1       0.9   0.631        7.86e- 7  5.73e-44   13.1   
19 mu_0       0.1   0.000266     3.25e-32  3.02e-68    0.0172
20 mu_0       0.2   1.38         3.19e-18  3.52e-44  122.    
21 mu_0       0.3   4.24         2.23e-10  5.71e-32  305.    
22 mu_0       0.4   1.48         1.09e- 5  2.33e-23   24.7   
23 mu_0       0.5   1.30         1.13e- 2  9.85e-17   15.4   
24 mu_0       0.6   0.901        1.81e- 1  2.20e-11    6.00  
25 mu_0       0.7   0.975        3.07e- 1  1.07e-13    5.19  
26 mu_0       0.8   1.03         1.29e- 1  6.29e-24    5.45  
27 mu_0       0.9   0.698        3.18e- 6  1.44e-42   13.8   
[1] "Total run time was 390.903 seconds"
