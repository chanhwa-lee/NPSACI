
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7554"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71  72 
  1   2   2   2   7   4   1   1   3   2   1   3   1   3   2   2   1   1   4   3 
 73  74  75  77  78  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  2   4   1   1   2   2   2   2   1   3   2   2   1   2   3   1   3   1   2   3 
 95  96  97  98  99 100 
  4   1   4   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01577 0.29726 0.57726 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4558 2996 
[1] "treatment indicator table: "

   0    1 
2792 4762 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3699
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3855
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 427.743 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.451 0.0838
 2 mu         0.1   0.2 0.531 0.0887
 3 mu         0.1   0.3 0.585 0.0944
 4 mu         0.1   0.4 0.654 0.112 
 5 mu         0.1   0.5 0.678 0.117 
 6 mu         0.2   0.1 0.410 0.0460
 7 mu         0.2   0.2 0.499 0.0431
 8 mu         0.2   0.3 0.572 0.0416
 9 mu         0.2   0.4 0.630 0.0478
10 mu         0.2   0.5 0.654 0.0491
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.919        0.425 0.00000571      8.17
 2 mu         0.2      1.07         0.954 0.119           2.87
 3 mu         0.3      0.970        0.974 0.272           2.16
 4 mu         0.4      0.974        0.939 0.491           1.53
 5 mu         0.5      0.964        0.978 0.552           1.34
 6 mu         0.6      0.981        0.976 0.664           1.37
 7 mu         0.7      0.998        1.00  0.665           1.53
 8 mu         0.8      1.05         1.03  0.555           1.54
 9 mu         0.9      1.04         1.02  0.168           2.09
10 mu_1       0.1      1.03         0.525 0.0000152       8.68
11 mu_1       0.2      1.06         0.916 0.101           3.07
12 mu_1       0.3      0.965        0.953 0.265           2.24
13 mu_1       0.4      0.976        0.943 0.478           1.48
14 mu_1       0.5      0.963        0.973 0.552           1.34
15 mu_1       0.6      0.982        0.978 0.657           1.37
16 mu_1       0.7      0.999        1.00  0.652           1.55
17 mu_1       0.8      1.05         1.02  0.551           1.51
18 mu_1       0.9      1.04         1.03  0.161           2.11
19 mu_0       0.1      0.907        0.417 0.00000465      8.11
20 mu_0       0.2      1.08         0.942 0.116           2.93
21 mu_0       0.3      0.972        0.975 0.275           2.12
22 mu_0       0.4      0.973        0.939 0.500           1.56
23 mu_0       0.5      0.965        0.976 0.551           1.33
24 mu_0       0.6      0.979        0.974 0.676           1.38
25 mu_0       0.7      0.996        1.00  0.651           1.48
26 mu_0       0.8      1.04         1.01  0.569           1.64
27 mu_0       0.9      1.04         1.04  0.227           1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.965     4.94e-28  8.03e-72     95.6 
 2 mu         0.2      1.19      5.36e-15  1.92e-47     32.5 
 3 mu         0.3      1.03      3.19e- 8  2.37e-33     20.0 
 4 mu         0.4      0.793     1.39e- 4  1.65e-23      7.90
 5 mu         0.5      1.09      1.21e- 2  4.88e-16     22.6 
 6 mu         0.6      1.21      1.45e- 1  1.17e-17     20.6 
 7 mu         0.7      1.16      2.05e- 1  1.15e-26      8.94
 8 mu         0.8      1.40      3.75e- 2  9.20e-40     12.8 
 9 mu         0.9      1.51      4.80e- 7  1.11e-62     37.8 
10 mu_1       0.1      1.20      3.38e-27  7.49e-71    118.  
11 mu_1       0.2      1.28      1.78e-14  8.93e-47     34.3 
12 mu_1       0.3      0.969     6.90e- 8  7.35e-33     18.4 
13 mu_1       0.4      0.791     2.38e- 4  3.84e-23      8.00
14 mu_1       0.5      1.12      1.77e- 2  9.10e-16     24.8 
15 mu_1       0.6      1.20      1.74e- 1  2.42e-18     18.8 
16 mu_1       0.7      1.18      2.28e- 1  2.03e-27      9.36
17 mu_1       0.8      1.40      3.06e- 2  1.42e-40     12.6 
18 mu_1       0.9      1.51      3.33e- 7  1.53e-63     39.0 
19 mu_0       0.1      0.939     1.73e-28  6.09e-73     93.1 
20 mu_0       0.2      1.17      2.20e-15  1.63e-48     32.1 
21 mu_0       0.3      1.05      1.59e- 8  2.30e-34     20.7 
22 mu_0       0.4      0.794     7.28e- 5  1.87e-24      8.01
23 mu_0       0.5      1.07      9.83e- 3  6.66e-17     20.4 
24 mu_0       0.6      1.22      1.17e- 1  2.57e-17     23.3 
25 mu_0       0.7      1.13      1.67e- 1  3.36e-26      7.94
26 mu_0       0.8      1.41      6.22e- 2  4.03e-39     13.5 
27 mu_0       0.9      1.44      1.81e- 6  9.75e-62     27.0 
[1] "Total run time was 431.376 seconds"
