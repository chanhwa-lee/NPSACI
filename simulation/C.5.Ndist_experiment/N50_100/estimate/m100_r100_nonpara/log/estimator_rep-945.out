
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7461"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70 
  1   4   2   2   3   1   1   1   4   3   3   4   1   1   1   3   2   2   2   5 
 72  73  74  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92  93  94 
  1   1   2   3   4   3   2   2   2   1   2   2   4   2   2   3   1   1   1   1 
 95  96  97  98  99 100 
  3   2   2   4   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02968 0.31850 0.59724 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4295 3166 
[1] "treatment indicator table: "

   0    1 
3027 4434 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3665
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3796
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 374.903 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.463 0.100 
 2 mu         0.1   0.2 0.511 0.0887
 3 mu         0.1   0.3 0.572 0.100 
 4 mu         0.1   0.4 0.622 0.100 
 5 mu         0.1   0.5 0.624 0.0921
 6 mu         0.2   0.1 0.430 0.0710
 7 mu         0.2   0.2 0.498 0.0668
 8 mu         0.2   0.3 0.562 0.0735
 9 mu         0.2   0.4 0.624 0.0763
10 mu         0.2   0.5 0.634 0.0689
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.849        0.556 0.000000214      4.48
 2 mu         0.2      0.930        0.871 0.0226           2.73
 3 mu         0.3      0.993        1.01  0.421            1.57
 4 mu         0.4      1.01         0.958 0.484            1.60
 5 mu         0.5      1.02         1.01  0.632            1.60
 6 mu         0.6      0.976        0.995 0.542            1.30
 7 mu         0.7      1.00         0.995 0.469            1.40
 8 mu         0.8      0.989        0.990 0.374            1.85
 9 mu         0.9      1.05         0.992 0.196            3.10
10 mu_1       0.1      0.873        0.709 0.000000657      4.62
11 mu_1       0.2      0.935        0.886 0.0349           2.45
12 mu_1       0.3      0.994        1.01  0.447            1.58
13 mu_1       0.4      1.01         0.980 0.485            1.63
14 mu_1       0.5      1.02         1.01  0.655            1.63
15 mu_1       0.6      0.975        0.997 0.548            1.32
16 mu_1       0.7      1.00         0.999 0.470            1.41
17 mu_1       0.8      0.989        0.977 0.373            1.88
18 mu_1       0.9      1.05         0.987 0.191            3.14
19 mu_0       0.1      0.846        0.526 0.000000165      4.52
20 mu_0       0.2      0.928        0.879 0.0195           2.79
21 mu_0       0.3      0.992        1.01  0.409            1.61
22 mu_0       0.4      1.00         0.958 0.483            1.62
23 mu_0       0.5      1.02         1.02  0.609            1.57
24 mu_0       0.6      0.977        0.982 0.528            1.33
25 mu_0       0.7      0.999        1.00  0.468            1.38
26 mu_0       0.8      0.987        1.00  0.382            1.74
27 mu_0       0.9      1.05         1.04  0.235            2.72
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.328     1.37e-24  1.41e-70     21.2 
 2 mu         0.2      2.16      6.76e-13  8.42e-48     91.2 
 3 mu         0.3      2.58      7.90e- 7  1.56e-34     77.7 
 4 mu         0.4      0.836     3.71e- 3  3.58e-25     11.5 
 5 mu         0.5      0.907     9.97e- 2  5.76e-18     10.8 
 6 mu         0.6      1.29      3.94e- 1  3.84e-12      6.17
 7 mu         0.7      1.14      1.06e- 1  2.97e-18     16.2 
 8 mu         0.8      0.937     6.19e- 3  2.71e-28      6.54
 9 mu         0.9      1.06      5.92e- 9  3.06e-48     21.8 
10 mu_1       0.1      0.563     7.92e-24  1.37e-69     33.3 
11 mu_1       0.2      2.27      2.17e-12  4.10e-47     91.2 
12 mu_1       0.3      2.40      1.69e- 6  5.06e-34     70.2 
13 mu_1       0.4      0.794     4.36e- 3  8.72e-25     11.5 
14 mu_1       0.5      0.936     9.42e- 2  1.12e-17     11.6 
15 mu_1       0.6      1.31      4.83e- 1  3.35e-12      5.92
16 mu_1       0.7      1.12      1.17e- 1  6.66e-19     16.3 
17 mu_1       0.8      0.943     4.75e- 3  8.09e-29      6.80
18 mu_1       0.9      1.07      4.34e- 9  8.13e-49     22.3 
19 mu_0       0.1      0.302     6.38e-25  4.02e-72     19.9 
20 mu_0       0.2      2.13      3.02e-13  2.70e-49     91.2 
21 mu_0       0.3      2.66      4.05e- 7  5.70e-36     80.9 
22 mu_0       0.4      0.864     2.83e- 3  1.53e-26     11.6 
23 mu_0       0.5      0.879     9.53e- 2  2.96e-19     10.0 
24 mu_0       0.6      1.26      4.30e- 1  2.46e-13      7.15
25 mu_0       0.7      1.19      1.17e- 1  8.34e-18     16.1 
26 mu_0       0.8      0.911     1.19e- 2  1.03e-27      7.38
27 mu_0       0.9      1.01      2.01e- 8  2.33e-47     17.1 
[1] "Total run time was 378.135 seconds"
