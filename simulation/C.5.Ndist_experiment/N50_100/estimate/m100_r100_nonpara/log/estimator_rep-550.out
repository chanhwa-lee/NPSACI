
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7717"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  69  70  71 
  1   2   2   1   1   1   3   1   1   2   3   2   1   4   3   1   2   6   2   1 
 72  73  74  76  77  78  79  81  83  84  85  86  87  88  90  91  92  93  94  95 
  1   3   1   3   1   1   2   5   2   4   2   2   1   3   2   4   3   3   2   2 
 96  97  99 100 
  6   2   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03515 0.34787 0.61233 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4686 3031 
[1] "treatment indicator table: "

   0    1 
2775 4942 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3807
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3910
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 744.369 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.364 0.0818
 2 mu         0.1   0.2 0.469 0.0943
 3 mu         0.1   0.3 0.517 0.0993
 4 mu         0.1   0.4 0.561 0.0883
 5 mu         0.1   0.5 0.586 0.0896
 6 mu         0.2   0.1 0.359 0.0527
 7 mu         0.2   0.2 0.462 0.0587
 8 mu         0.2   0.3 0.512 0.0603
 9 mu         0.2   0.4 0.547 0.0440
10 mu         0.2   0.5 0.567 0.0511
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.881        0.256 0.000000150      7.31
 2 mu         0.2      1.00         0.877 0.0240           2.49
 3 mu         0.3      0.957        0.916 0.222            1.90
 4 mu         0.4      1.00         0.972 0.503            1.64
 5 mu         0.5      1.01         0.995 0.533            1.62
 6 mu         0.6      0.996        0.970 0.600            1.55
 7 mu         0.7      1.03         1.02  0.589            1.50
 8 mu         0.8      1.00         0.994 0.591            1.85
 9 mu         0.9      1.03         1.04  0.390            2.38
10 mu_1       0.1      0.901        0.375 0.000000453      4.65
11 mu_1       0.2      0.998        0.941 0.0369           2.49
12 mu_1       0.3      0.958        0.933 0.226            1.93
13 mu_1       0.4      1.00         0.973 0.503            1.60
14 mu_1       0.5      1.01         0.997 0.552            1.65
15 mu_1       0.6      0.997        0.972 0.592            1.54
16 mu_1       0.7      1.03         1.02  0.588            1.51
17 mu_1       0.8      1.00         0.993 0.573            1.86
18 mu_1       0.9      1.03         1.03  0.386            2.36
19 mu_0       0.1      0.879        0.238 0.000000116      7.62
20 mu_0       0.2      1.00         0.859 0.0208           2.56
21 mu_0       0.3      0.957        0.904 0.220            1.89
22 mu_0       0.4      1.00         0.960 0.504            1.68
23 mu_0       0.5      1.01         0.995 0.514            1.59
24 mu_0       0.6      0.994        0.985 0.612            1.57
25 mu_0       0.7      1.02         1.01  0.593            1.49
26 mu_0       0.8      1.01         0.989 0.619            1.81
27 mu_0       0.9      1.03         1.05  0.426            2.50
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.503     2.38e-33  3.87e-77     49.4 
 2 mu         0.2      1.30      3.93e-19  1.66e-51     48.5 
 3 mu         0.3      1.62      1.16e-10  1.19e-36     42.0 
 4 mu         0.4      0.915     2.87e- 5  3.05e-26     18.5 
 5 mu         0.5      0.813     2.74e- 3  2.64e-18      7.21
 6 mu         0.6      1.08      7.75e- 2  4.97e-12      6.97
 7 mu         0.7      1.09      3.44e- 1  9.03e-19     11.0 
 8 mu         0.8      1.74      5.14e- 2  2.72e-30     29.6 
 9 mu         0.9      1.40      1.45e- 7  4.33e-51     29.5 
10 mu_1       0.1      0.734     1.54e-32  3.65e-76     71.5 
11 mu_1       0.2      1.35      1.28e-18  7.84e-51     42.0 
12 mu_1       0.3      1.57      2.53e-10  3.74e-36     35.4 
13 mu_1       0.4      0.872     4.69e- 5  7.20e-26     17.1 
14 mu_1       0.5      0.827     3.11e- 3  5.00e-18      6.53
15 mu_1       0.6      1.09      7.18e- 2  1.20e-12      7.66
16 mu_1       0.7      1.10      3.25e- 1  2.04e-19     12.2 
17 mu_1       0.8      1.74      4.40e- 2  8.15e-31     28.7 
18 mu_1       0.9      1.39      1.04e- 7  1.15e-51     29.5 
19 mu_0       0.1      0.477     9.01e-34  2.36e-78     46.9 
20 mu_0       0.2      1.29      1.72e-19  1.14e-52     51.8 
21 mu_0       0.3      1.64      5.76e-11  9.31e-38     44.8 
22 mu_0       0.4      0.943     1.66e- 5  2.79e-27     19.5 
23 mu_0       0.5      0.798     2.24e- 3  2.91e-19      7.89
24 mu_0       0.6      1.08      5.02e- 2  7.68e-13      6.16
25 mu_0       0.7      1.07      2.54e- 1  2.29e-18     11.5 
26 mu_0       0.8      1.72      7.91e- 2  1.03e-29     33.1 
27 mu_0       0.9      1.48      5.08e- 7  3.29e-50     29.5 
[1] "Total run time was 749.701 seconds"
