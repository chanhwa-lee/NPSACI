
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7331"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  62  63  64  65  66  67  68  69  70  71 
  4   2   3   1   3   1   3   7   2   2   1   3   1   1   4   3   3   2   2   2 
 72  74  75  76  78  79  82  83  84  85  86  87  88  89  90  91  92  93  94  95 
  1   2   2   1   3   2   3   3   2   1   2   4   5   1   2   2   2   3   1   2 
 97  98  99 100 
  2   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02188 0.29618 0.57257 0.99080 6.00000 
[1] "event indicator table: "

   0    1 
4280 3051 
[1] "treatment indicator table: "

   0    1 
3030 4301 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3612
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 489.518 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.490 0.101 
 2 mu         0.1   0.2 0.580 0.110 
 3 mu         0.1   0.3 0.627 0.107 
 4 mu         0.1   0.4 0.661 0.100 
 5 mu         0.1   0.5 0.710 0.113 
 6 mu         0.2   0.1 0.364 0.0495
 7 mu         0.2   0.2 0.464 0.0639
 8 mu         0.2   0.3 0.509 0.0652
 9 mu         0.2   0.4 0.555 0.0642
10 mu         0.2   0.5 0.594 0.0728
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.984        0.661 0.00000357      5.33
 2 mu         0.2      0.897        0.850 0.0848          1.89
 3 mu         0.3      0.943        0.968 0.196           1.60
 4 mu         0.4      0.981        0.944 0.524           1.46
 5 mu         0.5      0.989        0.962 0.620           1.46
 6 mu         0.6      1.01         1.01  0.698           1.40
 7 mu         0.7      1.04         1.04  0.737           1.54
 8 mu         0.8      1.05         1.05  0.304           1.63
 9 mu         0.9      0.959        0.880 0.193           2.37
10 mu_1       0.1      0.984        0.750 0.00000973      5.20
11 mu_1       0.2      0.894        0.872 0.0971          1.69
12 mu_1       0.3      0.950        0.974 0.196           1.52
13 mu_1       0.4      0.980        0.963 0.552           1.42
14 mu_1       0.5      0.991        0.974 0.613           1.45
15 mu_1       0.6      1.01         1.01  0.701           1.38
16 mu_1       0.7      1.04         1.03  0.724           1.54
17 mu_1       0.8      1.04         1.05  0.290           1.62
18 mu_1       0.9      0.958        0.873 0.182           2.41
19 mu_0       0.1      0.984        0.646 0.00000289      5.41
20 mu_0       0.2      0.898        0.836 0.0754          1.94
21 mu_0       0.3      0.939        0.963 0.196           1.64
22 mu_0       0.4      0.981        0.932 0.504           1.48
23 mu_0       0.5      0.987        0.970 0.626           1.47
24 mu_0       0.6      1.01         1.01  0.695           1.42
25 mu_0       0.7      1.03         1.03  0.768           1.55
26 mu_0       0.8      1.05         1.06  0.361           1.66
27 mu_0       0.9      0.976        0.930 0.237           2.09
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.73      9.28e-25  8.42e-69    173.  
 2 mu         0.2      0.951     2.99e-12  1.41e-45     71.1 
 3 mu         0.3      1.34      3.01e- 6  3.94e-32     23.4 
 4 mu         0.4      0.894     1.19e- 2  1.01e-22     14.3 
 5 mu         0.5      1.18      8.14e- 2  1.47e-15     11.9 
 6 mu         0.6      1.21      3.06e- 1  1.58e-19      9.74
 7 mu         0.7      1.16      2.13e- 1  3.01e-28      5.88
 8 mu         0.8      1.20      3.47e- 3  9.38e-41     10.3 
 9 mu         0.9      1.12      1.27e- 9  2.01e-62     42.3 
10 mu_1       0.1      1.32      6.01e-24  7.91e-68    131.  
11 mu_1       0.2      1.10      8.63e-12  6.63e-45     79.4 
12 mu_1       0.3      1.30      5.98e- 6  1.23e-31     21.6 
13 mu_1       0.4      0.896     1.83e- 2  2.38e-22     13.2 
14 mu_1       0.5      1.20      6.10e- 2  2.77e-15     11.4 
15 mu_1       0.6      1.20      2.99e- 1  2.00e-20      9.78
16 mu_1       0.7      1.17      2.37e- 1  3.27e-29      6.05
17 mu_1       0.8      1.20      2.55e- 3  8.90e-42     10.4 
18 mu_1       0.9      1.14      8.22e-10  1.70e-63     44.0 
19 mu_0       0.1      1.78      3.64e-25  5.63e-70    178.  
20 mu_0       0.2      0.914     1.55e-12  1.06e-46     69.0 
21 mu_0       0.3      1.36      1.74e- 6  3.39e-33     26.0 
22 mu_0       0.4      0.893     7.80e- 3  1.02e-23     15.1 
23 mu_0       0.5      1.16      8.84e- 2  1.78e-16     12.4 
24 mu_0       0.6      1.23      2.86e- 1  3.64e-19      9.68
25 mu_0       0.7      1.15      2.41e- 1  9.28e-28      5.48
26 mu_0       0.8      1.22      7.11e- 3  4.33e-40      9.94
27 mu_0       0.9      0.959     5.26e- 9  1.86e-61     26.8 
[1] "Total run time was 494.206 seconds"
