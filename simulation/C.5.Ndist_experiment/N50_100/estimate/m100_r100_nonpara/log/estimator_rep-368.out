
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7751"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  64  65  66  67  68  71  72  73 
  1   3   2   1   1   1   3   1   2   1   4   1   5   1   1   1   2   2   4   1 
 74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  3   4   1   3   1   2   2   2   3   1   1   3   3   5   1   2   1   4   3   5 
 95  96  97  98  99 100 
  3   3   1   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04401 0.37623 0.63856 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4633 3118 
[1] "treatment indicator table: "

   0    1 
2746 5005 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3936
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3815
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 423.307 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.446 0.0805
 2 mu         0.1   0.2 0.546 0.0948
 3 mu         0.1   0.3 0.600 0.102 
 4 mu         0.1   0.4 0.656 0.107 
 5 mu         0.1   0.5 0.696 0.114 
 6 mu         0.2   0.1 0.408 0.0463
 7 mu         0.2   0.2 0.507 0.0668
 8 mu         0.2   0.3 0.581 0.0731
 9 mu         0.2   0.4 0.633 0.0715
10 mu         0.2   0.5 0.671 0.0767
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.00         0.307 0.00000000853      7.81
 2 mu         0.2      1.03         0.974 0.00710            3.49
 3 mu         0.3      1.02         1.04  0.334              1.97
 4 mu         0.4      0.984        0.971 0.448              1.96
 5 mu         0.5      0.985        0.959 0.496              1.56
 6 mu         0.6      1.01         1.00  0.545              1.78
 7 mu         0.7      1.01         0.997 0.594              1.45
 8 mu         0.8      0.985        0.972 0.550              1.50
 9 mu         0.9      1.02         0.983 0.383              1.72
10 mu_1       0.1      0.959        0.448 0.0000000266       4.85
11 mu_1       0.2      1.04         0.972 0.0112             3.13
12 mu_1       0.3      1.02         1.03  0.354              2.02
13 mu_1       0.4      0.982        0.960 0.481              1.94
14 mu_1       0.5      0.986        0.950 0.499              1.56
15 mu_1       0.6      1.01         1.00  0.557              1.79
16 mu_1       0.7      1.01         0.996 0.590              1.46
17 mu_1       0.8      0.985        0.972 0.542              1.50
18 mu_1       0.9      1.02         0.987 0.385              1.71
19 mu_0       0.1      1.01         0.291 0.00000000653      8.20
20 mu_0       0.2      1.03         0.969 0.00606            3.57
21 mu_0       0.3      1.03         1.04  0.326              1.96
22 mu_0       0.4      0.985        0.971 0.425              1.97
23 mu_0       0.5      0.985        0.959 0.494              1.59
24 mu_0       0.6      1.01         0.990 0.527              1.77
25 mu_0       0.7      1.02         1.00  0.604              1.50
26 mu_0       0.8      0.981        0.968 0.582              1.51
27 mu_0       0.9      1.01         0.976 0.317              1.83
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0333     1.00e-30  2.97e-76      1.64
 2 mu         0.2     1.03       3.99e-17  2.02e-51     37.6 
 3 mu         0.3     0.986      1.20e- 9  5.57e-37     24.9 
 4 mu         0.4     1.02       5.14e- 5  5.29e-27     23.0 
 5 mu         0.5     1.41       6.68e- 3  1.28e-19     14.0 
 6 mu         0.6     1.55       1.52e- 1  1.28e-13     24.0 
 7 mu         0.7     1.52       3.21e- 1  3.56e-16     13.4 
 8 mu         0.8     1.22       6.68e- 2  6.25e-26     13.2 
 9 mu         0.9     1.22       8.53e- 6  2.01e-43     16.9 
10 mu_1       0.1     0.0703     6.95e-30  2.86e-75      3.51
11 mu_1       0.2     1.12       1.38e-16  9.73e-51     40.3 
12 mu_1       0.3     0.951      2.71e- 9  1.79e-36     26.5 
13 mu_1       0.4     1.05       8.64e- 5  1.31e-26     24.7 
14 mu_1       0.5     1.43       7.68e- 3  2.52e-19     15.0 
15 mu_1       0.6     1.55       1.68e- 1  2.10e-13     22.7 
16 mu_1       0.7     1.52       3.22e- 1  1.11e-16     13.2 
17 mu_1       0.8     1.21       5.48e- 2  1.70e-26     13.5 
18 mu_1       0.9     1.22       6.43e- 6  4.86e-44     17.6 
19 mu_0       0.1     0.0292     3.63e-31  1.15e-77      1.43
20 mu_0       0.2     1.01       1.53e-17  8.79e-53     36.9 
21 mu_0       0.3     1.00       5.55e-10  2.71e-38     24.2 
22 mu_0       0.4     1.00       2.80e- 5  1.13e-28     21.8 
23 mu_0       0.5     1.40       4.07e- 3  3.28e-21     14.6 
24 mu_0       0.6     1.56       1.24e- 1  4.10e-15     26.0 
25 mu_0       0.7     1.52       3.20e- 1  9.28e-16     13.9 
26 mu_0       0.8     1.24       9.97e- 2  2.44e-25     11.9 
27 mu_0       0.9     1.20       2.75e- 5  1.57e-42     16.7 
[1] "Total run time was 426.905 seconds"
