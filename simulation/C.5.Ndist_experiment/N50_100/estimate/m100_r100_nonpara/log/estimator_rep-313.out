
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7421"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  59  60  61  62  63  64  65  66  67  68  69  71  72 
  2   3   4   2   2   3   2   2   1   1   2   2   2   2   4   5   4   1   3   1 
 73  75  76  77  78  79  80  81  82  83  84  85  87  90  91  92  93  94  95  96 
  5   1   1   2   1   3   3   1   1   1   2   2   6   1   3   4   1   5   2   2 
 97  98 100 
  2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04199 0.36477 0.61947 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4410 3011 
[1] "treatment indicator table: "

   0    1 
2687 4734 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3768
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3653
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 379.262 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.400 0.139 
 2 mu         0.1   0.2 0.531 0.187 
 3 mu         0.1   0.3 0.572 0.223 
 4 mu         0.1   0.4 0.645 0.250 
 5 mu         0.1   0.5 0.679 0.278 
 6 mu         0.2   0.1 0.311 0.0394
 7 mu         0.2   0.2 0.403 0.0468
 8 mu         0.2   0.3 0.426 0.0569
 9 mu         0.2   0.4 0.475 0.0616
10 mu         0.2   0.5 0.498 0.0781
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.30       0.00985  1.35e-12     40.1 
 2 mu         0.2      0.966      0.723    4.72e- 5      5.62
 3 mu         0.3      0.981      0.939    5.11e- 2      2.42
 4 mu         0.4      0.997      0.966    3.12e- 1      2.03
 5 mu         0.5      1.00       0.999    5.83e- 1      1.70
 6 mu         0.6      1.01       0.994    7.11e- 1      1.50
 7 mu         0.7      0.979      0.952    5.75e- 1      1.76
 8 mu         0.8      0.986      0.986    5.60e- 1      1.45
 9 mu         0.9      0.942      0.912    1.36e- 1      2.06
10 mu_1       0.1      1.15       0.0218   5.03e-12     27.9 
11 mu_1       0.2      0.975      0.729    8.87e- 5      4.99
12 mu_1       0.3      0.979      0.946    6.87e- 2      2.40
13 mu_1       0.4      1.00       0.945    3.56e- 1      2.03
14 mu_1       0.5      1.00       1.01     5.99e- 1      1.70
15 mu_1       0.6      1.00       1.01     7.03e- 1      1.54
16 mu_1       0.7      0.977      0.952    5.77e- 1      1.74
17 mu_1       0.8      0.986      0.983    5.60e- 1      1.45
18 mu_1       0.9      0.941      0.914    1.27e- 1      2.07
19 mu_0       0.1      1.32       0.00873  9.42e-13     41.5 
20 mu_0       0.2      0.963      0.701    3.69e- 5      5.78
21 mu_0       0.3      0.982      0.938    4.36e- 2      2.43
22 mu_0       0.4      0.995      0.970    2.82e- 1      2.02
23 mu_0       0.5      1.00       0.993    5.66e- 1      1.70
24 mu_0       0.6      1.01       0.987    7.13e- 1      1.44
25 mu_0       0.7      0.982      0.951    5.71e- 1      1.82
26 mu_0       0.8      0.984      0.979    5.61e- 1      1.46
27 mu_0       0.9      0.950      0.913    2.11e- 1      2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.20      1.06e-29  1.94e-76    220.  
 2 mu         0.2      0.703     9.45e-17  4.69e-50     57.5 
 3 mu         0.3      0.878     1.85e- 9  7.57e-35     25.4 
 4 mu         0.4      0.917     2.78e- 5  1.58e-24     14.4 
 5 mu         0.5      0.954     1.75e- 2  5.61e-17     11.2 
 6 mu         0.6      0.890     2.44e- 1  6.32e-18      7.35
 7 mu         0.7      1.23      4.81e- 1  2.29e-27     19.8 
 8 mu         0.8      0.987     7.89e- 2  4.13e-41     11.7 
 9 mu         0.9      1.27      1.11e- 6  3.51e-65     38.2 
10 mu_1       0.1      2.81      7.69e-29  1.78e-75    281.  
11 mu_1       0.2      0.548     3.15e-16  2.15e-49     36.7 
12 mu_1       0.3      0.920     4.32e- 9  2.31e-34     23.9 
13 mu_1       0.4      0.923     4.79e- 5  3.72e-24     13.0 
14 mu_1       0.5      0.943     2.41e- 2  1.06e-16     11.3 
15 mu_1       0.6      0.906     2.69e- 1  1.34e-18      7.27
16 mu_1       0.7      1.23      5.27e- 1  4.17e-28     19.6 
17 mu_1       0.8      0.987     7.19e- 2  6.58e-42     12.4 
18 mu_1       0.9      1.28      8.57e- 7  4.97e-66     38.9 
19 mu_0       0.1      2.13      3.18e-30  1.78e-77    213.  
20 mu_0       0.2      0.742     4.04e-17  4.83e-51     62.7 
21 mu_0       0.3      0.860     7.69e-10  8.92e-36     26.1 
22 mu_0       0.4      0.912     1.92e- 5  1.51e-25     15.4 
23 mu_0       0.5      0.965     1.10e- 2  6.45e-18     12.1 
24 mu_0       0.6      0.867     1.85e- 1  1.38e-17      8.45
25 mu_0       0.7      1.24      3.84e- 1  6.65e-27     20.4 
26 mu_0       0.8      0.987     1.20e- 1  1.80e-40     10.8 
27 mu_0       0.9      1.24      3.35e- 6  3.06e-64     31.5 
[1] "Total run time was 382.503 seconds"
