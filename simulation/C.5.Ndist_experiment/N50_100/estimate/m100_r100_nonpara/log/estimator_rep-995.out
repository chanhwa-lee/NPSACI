
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7742"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  60  61  62  64  65  66  67  68  69  70  71  72 
  2   1   1   1   2   2   2   1   2   1   3   3   1   1   3   2   2   1   2   2 
 73  75  76  77  78  80  81  82  83  84  85  86  87  88  90  91  92  93  94  95 
  2   2   5   5   2   3   2   2   6   5   1   1   4   3   2   2   2   2   3   2 
 96  97  98  99 100 
  2   1   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01807 0.30044 0.58261 1.00000 5.54985 
[1] "event indicator table: "

   0    1 
4620 3122 
[1] "treatment indicator table: "

   0    1 
2987 4755 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3867
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3875
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 400.711 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.531 0.109 
 2 mu         0.1   0.2 0.608 0.104 
 3 mu         0.1   0.3 0.683 0.138 
 4 mu         0.1   0.4 0.702 0.141 
 5 mu         0.1   0.5 0.696 0.127 
 6 mu         0.2   0.1 0.468 0.0616
 7 mu         0.2   0.2 0.553 0.0592
 8 mu         0.2   0.3 0.631 0.0787
 9 mu         0.2   0.4 0.676 0.0807
10 mu         0.2   0.5 0.684 0.0710
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.978        0.775 0.00000196      5.10
 2 mu         0.2      1.03         1.01  0.0386          2.55
 3 mu         0.3      0.970        0.999 0.265           1.78
 4 mu         0.4      0.979        0.972 0.329           1.52
 5 mu         0.5      0.981        0.993 0.473           1.46
 6 mu         0.6      0.977        0.985 0.656           1.38
 7 mu         0.7      1.00         1.01  0.676           1.56
 8 mu         0.8      1.02         1.01  0.648           1.60
 9 mu         0.9      1.03         1.05  0.282           2.03
10 mu_1       0.1      0.958        0.796 0.00000591      4.47
11 mu_1       0.2      1.03         1.01  0.0591          2.31
12 mu_1       0.3      0.969        0.997 0.295           1.85
13 mu_1       0.4      0.980        0.980 0.332           1.53
14 mu_1       0.5      0.980        0.988 0.487           1.43
15 mu_1       0.6      0.978        0.983 0.658           1.37
16 mu_1       0.7      1.00         1.01  0.669           1.59
17 mu_1       0.8      1.02         1.02  0.632           1.61
18 mu_1       0.9      1.04         1.05  0.273           2.07
19 mu_0       0.1      0.981        0.771 0.00000152      5.17
20 mu_0       0.2      1.03         0.995 0.0334          2.61
21 mu_0       0.3      0.971        1.00  0.252           1.76
22 mu_0       0.4      0.979        0.967 0.327           1.52
23 mu_0       0.5      0.982        0.990 0.460           1.49
24 mu_0       0.6      0.976        0.986 0.652           1.38
25 mu_0       0.7      1.00         1.01  0.691           1.50
26 mu_0       0.8      1.02         0.997 0.624           1.56
27 mu_0       0.9      1.03         1.04  0.362           1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.316     3.72e-24  1.12e-83     28.1 
 2 mu         0.2      0.931     1.74e-12  6.15e-56     42.5 
 3 mu         0.3      1.31      1.04e- 6  7.51e-40     37.2 
 4 mu         0.4      1.16      2.92e- 3  1.45e-28     13.4 
 5 mu         0.5      1.03      1.18e- 1  5.98e-20     10.7 
 6 mu         0.6      0.881     7.33e- 2  5.76e-19      6.87
 7 mu         0.7      0.961     5.25e- 2  4.83e-28     13.2 
 8 mu         0.8      1.14      4.02e- 3  3.38e-41     12.9 
 9 mu         0.9      1.50      3.49e- 9  3.63e-64     27.3 
10 mu_1       0.1      0.386     2.38e-23  1.06e-82     31.9 
11 mu_1       0.2      1.04      5.63e-12  2.92e-55     42.6 
12 mu_1       0.3      1.28      2.10e- 6  2.37e-39     31.0 
13 mu_1       0.4      1.15      4.65e- 3  3.43e-28     13.9 
14 mu_1       0.5      1.02      8.54e- 2  1.14e-19     10.4 
15 mu_1       0.6      0.879     5.58e- 2  1.09e-19      6.39
16 mu_1       0.7      0.955     6.31e- 2  7.85e-29     13.0 
17 mu_1       0.8      1.16      3.05e- 3  4.80e-42     13.6 
18 mu_1       0.9      1.50      2.49e- 9  4.59e-65     27.8 
19 mu_0       0.1      0.308     1.49e-24  6.34e-85     27.7 
20 mu_0       0.2      0.904     7.72e-13  3.92e-57     43.0 
21 mu_0       0.3      1.33      5.89e- 7  5.47e-41     39.9 
22 mu_0       0.4      1.16      1.77e- 3  1.23e-29     13.1 
23 mu_0       0.5      1.03      9.26e- 2  6.10e-21     10.9 
24 mu_0       0.6      0.885     8.23e- 2  1.28e-18      7.60
25 mu_0       0.7      0.975     3.48e- 2  1.43e-27     13.6 
26 mu_0       0.8      1.09      5.03e- 3  1.50e-40     10.2 
27 mu_0       0.9      1.50      1.25e- 8  3.22e-63     22.5 
[1] "Total run time was 403.725 seconds"
