
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7658"
[1] "cluster size dist'n: "

 52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71  72 
  4   1   3   3   1   4   2   1   2   1   3   2   2   4   1   3   1   1   1   1 
 73  74  76  77  78  79  80  81  82  83  84  85  86  88  89  90  91  92  93  94 
  2   3   1   2   1   2   2   3   3   2   3   1   4   3   1   2   2   2   1   2 
 95  96  97  98  99 100 
  2   3   1   5   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03243 0.34116 0.60311 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4593 3065 
[1] "treatment indicator table: "

   0    1 
2824 4834 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3822
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3836
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 416.428 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.294 0.130 
 2 mu         0.1   0.2 0.344 0.170 
 3 mu         0.1   0.3 0.400 0.192 
 4 mu         0.1   0.4 0.466 0.224 
 5 mu         0.1   0.5 0.510 0.249 
 6 mu         0.2   0.1 0.312 0.0323
 7 mu         0.2   0.2 0.365 0.0426
 8 mu         0.2   0.3 0.423 0.0468
 9 mu         0.2   0.4 0.484 0.0585
10 mu         0.2   0.5 0.524 0.0710
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.956      0.00923  7.84e-13     37.6 
 2 mu         0.2      1.00       0.701    3.70e- 5      3.74
 3 mu         0.3      1.02       0.960    2.98e- 2      2.52
 4 mu         0.4      0.982      0.986    4.16e- 1      1.62
 5 mu         0.5      0.994      0.994    5.34e- 1      1.62
 6 mu         0.6      0.989      0.987    6.49e- 1      1.39
 7 mu         0.7      1.01       0.999    6.53e- 1      1.38
 8 mu         0.8      0.976      0.982    2.91e- 1      1.50
 9 mu         0.9      0.984      0.914    2.92e- 2      2.51
10 mu_1       0.1      0.885      0.0198   2.88e-12     23.9 
11 mu_1       0.2      1.03       0.770    6.82e- 5      3.53
12 mu_1       0.3      1.01       0.976    3.86e- 2      2.21
13 mu_1       0.4      0.983      0.990    4.09e- 1      1.57
14 mu_1       0.5      0.993      0.991    5.40e- 1      1.63
15 mu_1       0.6      0.990      0.982    6.40e- 1      1.39
16 mu_1       0.7      1.01       1.01     6.55e- 1      1.40
17 mu_1       0.8      0.975      0.981    2.88e- 1      1.51
18 mu_1       0.9      0.984      0.914    2.70e- 2      2.52
19 mu_0       0.1      0.963      0.00811  5.51e-13     39.1 
20 mu_0       0.2      0.998      0.688    2.92e- 5      3.79
21 mu_0       0.3      1.02       0.952    2.60e- 2      2.66
22 mu_0       0.4      0.981      0.979    4.21e- 1      1.66
23 mu_0       0.5      0.995      0.990    5.29e- 1      1.60
24 mu_0       0.6      0.988      0.982    6.64e- 1      1.38
25 mu_0       0.7      1.01       0.990    6.48e- 1      1.34
26 mu_0       0.8      0.983      1.00     3.02e- 1      1.50
27 mu_0       0.9      0.982      0.936    4.85e- 2      2.40
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000692     9.97e-27  4.42e-81    0.0680
 2 mu         0.2   0.300        2.11e-14  1.08e-53   19.3   
 3 mu         0.3   1.58         2.64e- 7  7.68e-38   79.9   
 4 mu         0.4   1.02         1.71e- 3  9.50e-27   16.3   
 5 mu         0.5   1.01         1.28e- 1  2.62e-18    9.29  
 6 mu         0.6   1.17         2.89e- 1  1.32e-11   20.2   
 7 mu         0.7   1.15         3.42e- 1  2.35e-14    8.33  
 8 mu         0.8   1.29         7.93e- 3  3.95e-24   12.3   
 9 mu         0.9   2.03         2.80e- 8  1.15e-43   60.2   
10 mu_1       0.1   0.00165      6.30e-26  4.14e-80    0.161 
11 mu_1       0.2   0.389        6.43e-14  5.06e-53   22.8   
12 mu_1       0.3   1.59         5.39e- 7  2.40e-37   79.9   
13 mu_1       0.4   1.02         2.78e- 3  2.23e-26   16.1   
14 mu_1       0.5   1.02         1.15e- 1  4.92e-18    8.63  
15 mu_1       0.6   1.17         3.02e- 1  2.07e-11   19.9   
16 mu_1       0.7   1.16         3.04e- 1  7.96e-15    8.15  
17 mu_1       0.8   1.28         6.21e- 3  1.48e-24   12.3   
18 mu_1       0.9   2.06         1.92e- 8  3.82e-44   61.9   
19 mu_0       0.1   0.000586     4.08e-27  3.00e-82    0.0577
20 mu_0       0.2   0.278        1.03e-14  8.25e-55   18.4   
21 mu_0       0.3   1.57         1.46e- 7  6.72e-39   79.9   
22 mu_0       0.4   1.02         1.00e- 3  9.70e-28   16.4   
23 mu_0       0.5   1.00         9.07e- 2  3.21e-19    9.94  
24 mu_0       0.6   1.18         2.10e- 1  2.03e-12   20.7   
25 mu_0       0.7   1.12         4.13e- 1  5.98e-14    8.76  
26 mu_0       0.8   1.33         1.51e- 2  1.38e-23   12.9   
27 mu_0       0.9   1.70         1.07e- 7  8.02e-43   53.9   
[1] "Total run time was 419.941 seconds"
