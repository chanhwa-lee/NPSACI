
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7497"
[1] "cluster size dist'n: "

50 51 52 53 54 55 57 60 61 62 63 64 65 66 67 69 70 71 72 73 74 75 76 77 78 79 
 2  4  3  4  2  3  2  2  2  3  2  2  1  1  1  2  2  2  1  1  5  2  1  4  2  3 
81 82 83 84 85 86 87 88 89 90 92 93 94 96 97 99 
 2  1  1  1  4  2  3  2  7  1  1  4  2  5  2  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04409 0.37110 0.63129 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4487 3010 
[1] "treatment indicator table: "

   0    1 
2672 4825 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3811
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3686
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 379.18 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.463 0.0779
 2 mu         0.1   0.2 0.588 0.108 
 3 mu         0.1   0.3 0.638 0.0843
 4 mu         0.1   0.4 0.710 0.0971
 5 mu         0.1   0.5 0.745 0.0988
 6 mu         0.2   0.1 0.387 0.0596
 7 mu         0.2   0.2 0.503 0.0847
 8 mu         0.2   0.3 0.552 0.0586
 9 mu         0.2   0.4 0.616 0.0686
10 mu         0.2   0.5 0.650 0.0678
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.11         0.694 0.00000116       7.61
 2 mu         0.2      1.03         0.960 0.0698           3.27
 3 mu         0.3      1.02         1.01  0.330            1.68
 4 mu         0.4      0.989        0.961 0.554            1.62
 5 mu         0.5      0.986        0.973 0.482            1.58
 6 mu         0.6      1.02         1.02  0.642            1.42
 7 mu         0.7      1.00         0.984 0.714            1.56
 8 mu         0.8      1.02         0.998 0.567            1.66
 9 mu         0.9      0.994        1.01  0.481            1.60
10 mu_1       0.1      1.12         0.914 0.00000324       6.87
11 mu_1       0.2      1.02         0.919 0.0999           3.18
12 mu_1       0.3      1.02         0.991 0.341            1.66
13 mu_1       0.4      0.986        0.977 0.557            1.60
14 mu_1       0.5      0.989        0.968 0.483            1.57
15 mu_1       0.6      1.02         1.02  0.642            1.42
16 mu_1       0.7      1.00         0.990 0.718            1.59
17 mu_1       0.8      1.02         0.993 0.560            1.66
18 mu_1       0.9      0.993        1.00  0.474            1.61
19 mu_0       0.1      1.11         0.700 0.000000927      7.69
20 mu_0       0.2      1.03         0.969 0.0623           3.29
21 mu_0       0.3      1.03         1.01  0.322            1.74
22 mu_0       0.4      0.990        0.968 0.552            1.63
23 mu_0       0.5      0.984        0.973 0.481            1.59
24 mu_0       0.6      1.02         1.03  0.641            1.43
25 mu_0       0.7      1.00         0.972 0.705            1.50
26 mu_0       0.8      1.01         1.00  0.592            1.62
27 mu_0       0.9      0.999        0.982 0.542            1.57
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.26      9.87e-26  1.65e-81    107.  
 2 mu         0.2      0.870     6.19e-14  6.37e-55     48.7 
 3 mu         0.3      0.609     4.57e- 8  1.76e-39     14.8 
 4 mu         0.4      1.01      2.59e- 4  1.25e-28      8.37
 5 mu         0.5      1.35      4.25e- 2  2.54e-20     13.9 
 6 mu         0.6      1.11      1.69e- 1  1.16e-13     25.6 
 7 mu         0.7      1.24      9.10e- 2  1.42e-15     10.7 
 8 mu         0.8      0.820     2.23e- 2  1.01e-23      5.02
 9 mu         0.9      1.28      1.22e- 6  5.04e-40     18.4 
10 mu_1       0.1      1.55      6.26e-25  1.58e-80    123.  
11 mu_1       0.2      0.687     2.07e-13  3.05e-54     39.9 
12 mu_1       0.3      0.634     1.08e- 7  5.60e-39     14.2 
13 mu_1       0.4      1.05      4.51e- 4  2.99e-28      8.68
14 mu_1       0.5      1.35      4.37e- 2  4.86e-20     14.1 
15 mu_1       0.6      1.09      1.67e- 1  1.85e-13     24.4 
16 mu_1       0.7      1.25      8.57e- 2  2.33e-16     10.8 
17 mu_1       0.8      0.806     2.05e- 2  2.06e-24      5.17
18 mu_1       0.9      1.30      9.19e- 7  1.61e-40     18.8 
19 mu_0       0.1      1.23      4.02e-26  7.88e-83    105.  
20 mu_0       0.2      0.916     2.56e-14  3.43e-56     50.9 
21 mu_0       0.3      0.598     1.90e- 8  1.08e-40     15.1 
22 mu_0       0.4      0.984     1.31e- 4  8.94e-30      8.16
23 mu_0       0.5      1.34      3.06e- 2  2.18e-21     13.8 
24 mu_0       0.6      1.13      1.41e- 1  1.25e-14     27.3 
25 mu_0       0.7      1.23      1.09e- 1  4.18e-15     10.2 
26 mu_0       0.8      0.880     3.28e- 2  4.21e-23      5.97
27 mu_0       0.9      1.09      3.96e- 6  3.59e-39     15.4 
[1] "Total run time was 382.334 seconds"
