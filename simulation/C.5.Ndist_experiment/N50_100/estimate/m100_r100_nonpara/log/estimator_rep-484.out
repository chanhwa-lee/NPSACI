
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7497"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  65  66  67  69  70  71  73 
  4   3   2   3   1   1   3   2   2   2   1   2   4   1   4   2   4   3   1   1 
 75  77  78  79  80  81  82  83  84  86  87  89  90  91  92  93  95  96  98  99 
  6   1   2   1   2   4   1   2   2   1   5   3   1   3   4   6   1   3   2   2 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02986 0.33887 0.59572 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4414 3083 
[1] "treatment indicator table: "

   0    1 
2698 4799 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3768
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3729
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 525.163 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.471 0.118 
 2 mu         0.1   0.2 0.510 0.117 
 3 mu         0.1   0.3 0.592 0.139 
 4 mu         0.1   0.4 0.630 0.147 
 5 mu         0.1   0.5 0.661 0.153 
 6 mu         0.2   0.1 0.414 0.0808
 7 mu         0.2   0.2 0.449 0.0611
 8 mu         0.2   0.3 0.527 0.0784
 9 mu         0.2   0.4 0.561 0.0770
10 mu         0.2   0.5 0.591 0.0706
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.985       0.0618 0.0000000268     16.7 
 2 mu         0.2      0.929       0.764  0.0104            3.76
 3 mu         0.3      0.905       0.876  0.173             1.86
 4 mu         0.4      0.959       0.952  0.471             1.60
 5 mu         0.5      1.00        1.00   0.601             1.53
 6 mu         0.6      1.01        1.02   0.700             1.43
 7 mu         0.7      1.03        1.02   0.713             1.49
 8 mu         0.8      1.05        1.03   0.627             1.66
 9 mu         0.9      1.01        0.991  0.0205            2.29
10 mu_1       0.1      0.931       0.119  0.0000000847      9.58
11 mu_1       0.2      0.924       0.782  0.0168            3.64
12 mu_1       0.3      0.906       0.891  0.186             1.71
13 mu_1       0.4      0.966       0.943  0.493             1.63
14 mu_1       0.5      1.00        1.01   0.611             1.53
15 mu_1       0.6      1.01        1.02   0.687             1.44
16 mu_1       0.7      1.03        1.02   0.701             1.50
17 mu_1       0.8      1.05        1.03   0.617             1.67
18 mu_1       0.9      1.01        0.988  0.0185            2.28
19 mu_0       0.1      0.991       0.0554 0.0000000203     17.5 
20 mu_0       0.2      0.930       0.750  0.00886           3.78
21 mu_0       0.3      0.905       0.856  0.167             1.94
22 mu_0       0.4      0.955       0.964  0.457             1.59
23 mu_0       0.5      1.00        0.997  0.591             1.53
24 mu_0       0.6      1.01        1.02   0.695             1.42
25 mu_0       0.7      1.03        1.03   0.741             1.48
26 mu_0       0.8      1.05        1.02   0.661             1.64
27 mu_0       0.9      1.01        0.977  0.0380            2.37
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00707     5.44e-28  1.73e-87     0.370
 2 mu         0.2    1.20        1.32e-15  8.54e-59    89.3  
 3 mu         0.3    0.888       2.89e- 9  4.02e-42    15.3  
 4 mu         0.4    0.942       1.38e- 4  2.14e-30    17.2  
 5 mu         0.5    0.890       5.16e- 2  2.08e-21     8.81 
 6 mu         0.6    1.14        3.20e- 1  3.40e-14     7.33 
 7 mu         0.7    1.30        5.23e- 1  3.78e-20     6.31 
 8 mu         0.8    1.13        3.61e- 2  1.72e-32     7.04 
 9 mu         0.9    1.35        3.50e- 7  1.35e-54    30.2  
10 mu_1       0.1    0.0156      4.04e-27  1.66e-86     0.793
11 mu_1       0.2    1.32        4.31e-15  4.10e-58    95.7  
12 mu_1       0.3    0.878       6.50e- 9  1.29e-41    14.6  
13 mu_1       0.4    0.941       2.21e- 4  5.14e-30    16.4  
14 mu_1       0.5    0.892       5.87e- 2  3.99e-21     8.63 
15 mu_1       0.6    1.17        3.34e- 1  5.44e-14     6.79 
16 mu_1       0.7    1.29        4.73e- 1  1.16e-20     5.98 
17 mu_1       0.8    1.12        2.92e- 2  4.61e-33     7.10 
18 mu_1       0.9    1.35        2.45e- 7  3.22e-55    30.3  
19 mu_0       0.1    0.00613     1.55e-28  7.68e-89     0.323
20 mu_0       0.2    1.17        5.23e-16  4.27e-60    87.8  
21 mu_0       0.3    0.892       1.35e- 9  2.30e-43    17.1  
22 mu_0       0.4    0.942       8.27e- 5  1.43e-31    17.8  
23 mu_0       0.5    0.887       3.51e- 2  1.66e-22     8.99 
24 mu_0       0.6    1.10        3.22e- 1  3.40e-15     8.15 
25 mu_0       0.7    1.31        5.29e- 1  9.89e-20     7.09 
26 mu_0       0.8    1.14        4.59e- 2  6.76e-32     6.91 
27 mu_0       0.9    1.37        1.29e- 6  1.06e-53    29.9  
[1] "Total run time was 529.861 seconds"
