
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7562"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  62  63  64  65  66  68  69  71  72 
  3   1   3   1   1   2   1   2   2   4   1   2   1   2   3   1   1   4   3   4 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93 
  4   1   2   2   3   1   2   2   3   2   3   2   5   1   1   1   2   2   2   4 
 94  95  96  97  98  99 100 
  2   2   1   2   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0333  0.3450  0.6117  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4451 3111 
[1] "treatment indicator table: "

   0    1 
2964 4598 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3803
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3759
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 30"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 415.935 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.339 0.0726
 2 mu         0.1   0.2 0.411 0.0901
 3 mu         0.1   0.3 0.478 0.0982
 4 mu         0.1   0.4 0.551 0.0809
 5 mu         0.1   0.5 0.563 0.0767
 6 mu         0.2   0.1 0.324 0.0467
 7 mu         0.2   0.2 0.386 0.0539
 8 mu         0.2   0.3 0.445 0.0574
 9 mu         0.2   0.4 0.509 0.0415
10 mu         0.2   0.5 0.524 0.0374
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.985        0.721  0.000156      4.41
 2 mu         0.2      0.979        0.955  0.189         2.74
 3 mu         0.3      0.940        0.893  0.404         2.03
 4 mu         0.4      0.990        0.969  0.552         1.51
 5 mu         0.5      1.00         0.984  0.634         1.43
 6 mu         0.6      1.00         0.977  0.596         1.44
 7 mu         0.7      1.02         1.02   0.657         1.52
 8 mu         0.8      0.995        0.956  0.459         2.01
 9 mu         0.9      1.00         0.935  0.0712        2.23
10 mu_1       0.1      1.01         0.828  0.000376      4.60
11 mu_1       0.2      0.968        0.945  0.247         2.83
12 mu_1       0.3      0.943        0.893  0.416         1.90
13 mu_1       0.4      0.995        0.978  0.545         1.53
14 mu_1       0.5      1.00         0.993  0.656         1.42
15 mu_1       0.6      1.00         0.982  0.597         1.48
16 mu_1       0.7      1.02         1.02   0.653         1.50
17 mu_1       0.8      0.994        0.954  0.454         2.04
18 mu_1       0.9      1.00         0.935  0.0669        2.29
19 mu_0       0.1      0.982        0.700  0.000132      4.39
20 mu_0       0.2      0.982        0.949  0.174         2.72
21 mu_0       0.3      0.939        0.885  0.399         2.08
22 mu_0       0.4      0.988        0.968  0.556         1.51
23 mu_0       0.5      1.00         0.986  0.611         1.43
24 mu_0       0.6      0.999        0.991  0.594         1.37
25 mu_0       0.7      1.02         1.01   0.666         1.55
26 mu_0       0.8      1.00         0.971  0.481         1.90
27 mu_0       0.9      0.984        0.985  0.110         1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0980     1.24e-25  2.80e-71      8.26
 2 mu         0.2     0.838      2.03e-13  1.05e-45     44.7 
 3 mu         0.3     1.23       6.47e- 7  4.43e-31     20.4 
 4 mu         0.4     0.703      3.07e- 3  1.12e-21      8.62
 5 mu         0.5     0.843      4.51e- 2  1.14e-14      4.84
 6 mu         0.6     1.06       1.22e- 1  4.33e-17      6.92
 7 mu         0.7     1.23       2.03e- 1  3.79e-26      8.42
 8 mu         0.8     1.50       2.81e- 2  2.01e-39     15.9 
 9 mu         0.9     1.51       3.12e- 8  8.65e-63     19.9 
10 mu_1       0.1     0.155      7.56e-25  2.46e-70     12.3 
11 mu_1       0.2     0.908      6.16e-13  4.63e-45     45.3 
12 mu_1       0.3     1.21       1.44e- 6  1.30e-30     19.4 
13 mu_1       0.4     0.688      4.72e- 3  2.58e-21      8.08
14 mu_1       0.5     0.856      3.37e- 2  2.08e-14      4.75
15 mu_1       0.6     1.08       1.11e- 1  1.08e-17      7.31
16 mu_1       0.7     1.22       1.85e- 1  8.07e-27      8.38
17 mu_1       0.8     1.52       2.29e- 2  3.74e-40     15.8 
18 mu_1       0.9     1.48       2.20e- 8  1.43e-63     19.5 
19 mu_0       0.1     0.0917     5.37e-26  3.77e-72      7.81
20 mu_0       0.2     0.821      9.96e-14  1.60e-46     44.5 
21 mu_0       0.3     1.24       3.14e- 7  6.99e-32     21.0 
22 mu_0       0.4     0.714      1.97e- 3  1.54e-22      8.98
23 mu_0       0.5     0.830      3.39e- 2  1.87e-15      4.94
24 mu_0       0.6     1.03       1.21e- 1  9.21e-17      6.34
25 mu_0       0.7     1.25       1.93e- 1  1.08e-25      8.63
26 mu_0       0.8     1.40       4.90e- 2  8.56e-39     16.0 
27 mu_0       0.9     1.82       1.14e- 7  7.36e-62     23.2 
[1] "Total run time was 419.186 seconds"
