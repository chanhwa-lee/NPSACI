
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7264"
[1] "cluster size dist'n: "

 50  51  52  53  55  57  58  59  60  61  62  63  64  65  66  67  68  70  71  73 
  2   6   5   2   6   3   1   1   2   5   2   1   4   2   1   1   1   2   2   3 
 74  75  76  77  80  81  82  83  84  85  86  88  89  90  91  93  94  95  96  97 
  4   3   2   2   1   1   3   1   2   2   2   2   1   1   5   2   4   1   2   2 
 98  99 100 
  2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03715 0.35719 0.63488 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4350 2914 
[1] "treatment indicator table: "

   0    1 
2676 4588 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3477
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3787
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 501.774 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.501 0.0963
 2 mu         0.1   0.2 0.596 0.126 
 3 mu         0.1   0.3 0.664 0.149 
 4 mu         0.1   0.4 0.706 0.126 
 5 mu         0.1   0.5 0.715 0.115 
 6 mu         0.2   0.1 0.394 0.0468
 7 mu         0.2   0.2 0.489 0.0565
 8 mu         0.2   0.3 0.543 0.0671
 9 mu         0.2   0.4 0.581 0.0565
10 mu         0.2   0.5 0.595 0.0532
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.19         0.863 0.000000313      8.37
 2 mu         0.2      1.09         1.02  0.0216           3.63
 3 mu         0.3      1.01         0.998 0.431            1.85
 4 mu         0.4      0.925        0.948 0.362            1.69
 5 mu         0.5      0.932        0.924 0.503            1.31
 6 mu         0.6      1.03         1.05  0.600            1.74
 7 mu         0.7      1.04         1.02  0.690            1.81
 8 mu         0.8      1.01         1.00  0.515            1.56
 9 mu         0.9      0.976        0.947 0.209            1.87
10 mu_1       0.1      1.17         0.938 0.000000979      7.62
11 mu_1       0.2      1.09         1.00  0.0343           3.48
12 mu_1       0.3      0.994        0.978 0.483            1.90
13 mu_1       0.4      0.923        0.956 0.344            1.69
14 mu_1       0.5      0.937        0.933 0.528            1.30
15 mu_1       0.6      1.03         1.05  0.605            1.73
16 mu_1       0.7      1.04         1.00  0.681            1.80
17 mu_1       0.8      1.01         1.00  0.504            1.56
18 mu_1       0.9      0.976        0.946 0.210            1.89
19 mu_0       0.1      1.19         0.862 0.000000239      8.46
20 mu_0       0.2      1.09         1.00  0.0184           3.67
21 mu_0       0.3      1.01         0.999 0.408            1.83
22 mu_0       0.4      0.927        0.936 0.355            1.70
23 mu_0       0.5      0.928        0.922 0.479            1.32
24 mu_0       0.6      1.02         1.03  0.593            1.76
25 mu_0       0.7      1.04         1.03  0.693            1.83
26 mu_0       0.8      1.01         1.01  0.560            1.55
27 mu_0       0.9      0.980        0.946 0.191            1.99
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.501     8.80e-27  5.71e-80     45.2 
 2 mu         0.2      1.19      2.11e-14  1.10e-52     44.0 
 3 mu         0.3      1.71      4.24e- 8  6.00e-37     41.0 
 4 mu         0.4      0.912     3.81e- 4  5.46e-26     13.5 
 5 mu         0.5      1.08      2.53e- 2  3.08e-18     27.7 
 6 mu         0.6      1.13      5.85e- 2  5.01e-14      9.16
 7 mu         0.7      1.12      4.46e- 2  2.52e-22      7.82
 8 mu         0.8      1.21      2.08e- 2  1.32e-34     15.7 
 9 mu         0.9      1.33      1.01e- 6  2.31e-56     15.6 
10 mu_1       0.1      0.642     5.24e-26  5.25e-79     55.5 
11 mu_1       0.2      1.25      6.86e-14  5.07e-52     38.7 
12 mu_1       0.3      1.66      9.57e- 8  1.84e-36     41.0 
13 mu_1       0.4      0.917     5.24e- 4  1.26e-25     15.8 
14 mu_1       0.5      1.06      2.11e- 2  5.87e-18     26.1 
15 mu_1       0.6      1.15      7.41e- 2  1.47e-14      9.86
16 mu_1       0.7      1.11      4.77e- 2  6.32e-23      7.83
17 mu_1       0.8      1.22      1.62e- 2  2.91e-35     15.3 
18 mu_1       0.9      1.32      7.03e- 7  4.51e-57     16.3 
19 mu_0       0.1      0.485     3.96e-27  5.07e-81     44.0 
20 mu_0       0.2      1.18      8.47e-15  1.10e-53     45.3 
21 mu_0       0.3      1.74      1.95e- 8  6.86e-38     41.0 
22 mu_0       0.4      0.908     2.09e- 4  7.09e-27     11.9 
23 mu_0       0.5      1.09      2.88e- 2  2.90e-19     29.3 
24 mu_0       0.6      1.10      4.20e- 2  1.03e-13      9.37
25 mu_0       0.7      1.13      3.95e- 2  6.91e-22      8.64
26 mu_0       0.8      1.19      3.01e- 2  5.46e-34     17.2 
27 mu_0       0.9      1.41      3.81e- 6  1.90e-55     12.6 
[1] "Total run time was 505.391 seconds"
