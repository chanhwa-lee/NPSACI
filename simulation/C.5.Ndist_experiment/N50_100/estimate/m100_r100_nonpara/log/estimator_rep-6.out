
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7252"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  61  62  63  65  66  68  69  70  72  73  74 
  4   4   4   5   3   2   4   3   2   1   1   1   1   4   3   1   1   3   4   2 
 76  77  78  79  80  81  82  83  84  85  86  87  88  90  94  95  96  97  98  99 
  3   4   2   3   1   1   1   4   2   4   1   2   3   1   4   2   1   2   2   2 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02118 0.30061 0.57591 0.99428 6.00000 
[1] "event indicator table: "

   0    1 
4231 3021 
[1] "treatment indicator table: "

   0    1 
2867 4385 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3725
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3527
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 419.836 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.468 0.0779
 2 mu         0.1   0.2 0.558 0.0856
 3 mu         0.1   0.3 0.612 0.0874
 4 mu         0.1   0.4 0.666 0.0966
 5 mu         0.1   0.5 0.687 0.0990
 6 mu         0.2   0.1 0.373 0.0423
 7 mu         0.2   0.2 0.452 0.0420
 8 mu         0.2   0.3 0.517 0.0434
 9 mu         0.2   0.4 0.563 0.0467
10 mu         0.2   0.5 0.585 0.0429
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.06         0.611  0.000149     15.2 
 2 mu         0.2      0.929        0.950  0.0910        3.74
 3 mu         0.3      0.955        0.953  0.0963        2.40
 4 mu         0.4      0.972        0.989  0.287         1.89
 5 mu         0.5      1.03         0.980  0.536         2.29
 6 mu         0.6      1.02         0.997  0.611         2.12
 7 mu         0.7      0.987        0.983  0.467         1.64
 8 mu         0.8      1.01         0.955  0.631         1.80
 9 mu         0.9      1.04         1.01   0.289         2.17
10 mu_1       0.1      1.05         0.685  0.000368     11.9 
11 mu_1       0.2      0.936        0.915  0.103         4.10
12 mu_1       0.3      0.951        0.945  0.111         2.13
13 mu_1       0.4      0.978        0.969  0.280         1.95
14 mu_1       0.5      1.03         0.981  0.561         2.32
15 mu_1       0.6      1.02         0.992  0.619         2.16
16 mu_1       0.7      0.987        0.975  0.459         1.63
17 mu_1       0.8      1.01         0.958  0.639         1.80
18 mu_1       0.9      1.04         1.01   0.279         2.18
19 mu_0       0.1      1.06         0.594  0.000124     15.6 
20 mu_0       0.2      0.927        0.946  0.0850        3.65
21 mu_0       0.3      0.956        0.945  0.0899        2.51
22 mu_0       0.4      0.967        0.982  0.292         1.87
23 mu_0       0.5      1.03         0.977  0.511         2.26
24 mu_0       0.6      1.03         0.992  0.598         2.07
25 mu_0       0.7      0.987        0.993  0.486         1.67
26 mu_0       0.8      1.01         0.947  0.596         1.80
27 mu_0       0.9      1.06         0.999  0.380         2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0352     7.05e-22  2.34e-70     1.12 
 2 mu         0.2     1.10       3.57e-11  4.72e-46    37.0  
 3 mu         0.3     1.49       1.17e- 5  3.40e-32    51.5  
 4 mu         0.4     2.02       9.53e- 3  1.52e-22    41.1  
 5 mu         0.5     1.77       1.14e- 1  1.41e-15    25.1  
 6 mu         0.6     1.54       6.22e- 2  1.50e-11    32.3  
 7 mu         0.7     1.08       4.23e- 2  5.77e-19    10.7  
 8 mu         0.8     1.20       2.83e- 3  4.51e-30    19.4  
 9 mu         0.9     1.22       1.07e- 8  6.37e-50    20.8  
10 mu_1       0.1     0.0729     4.42e-21  2.05e-69     2.28 
11 mu_1       0.2     1.24       1.06e-10  2.17e-45    48.1  
12 mu_1       0.3     1.51       2.50e- 5  1.04e-31    44.6  
13 mu_1       0.4     2.02       8.55e- 3  3.50e-22    42.3  
14 mu_1       0.5     1.76       8.92e- 2  2.77e-15    28.0  
15 mu_1       0.6     1.52       4.45e- 2  5.18e-12    30.0  
16 mu_1       0.7     1.06       5.10e- 2  1.70e-19    10.1  
17 mu_1       0.8     1.22       2.72e- 3  1.17e-30    20.2  
18 mu_1       0.9     1.20       7.40e- 9  1.46e-50    20.5  
19 mu_0       0.1     0.0311     2.92e-22  3.18e-71     0.989
20 mu_0       0.2     1.06       1.81e-11  4.69e-47    34.2  
21 mu_0       0.3     1.48       6.02e- 6  3.86e-33    54.4  
22 mu_0       0.4     2.03       6.52e- 3  2.02e-23    40.3  
23 mu_0       0.5     1.77       1.10e- 1  4.47e-17    22.1  
24 mu_0       0.6     1.57       6.28e- 2  3.62e-12    35.6  
25 mu_0       0.7     1.13       3.44e- 2  1.52e-18    12.2  
26 mu_0       0.8     1.14       3.84e- 3  1.79e-29    16.2  
27 mu_0       0.9     1.36       4.01e- 8  5.05e-49    23.1  
[1] "Total run time was 423.635 seconds"
