
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7619"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70  71 
  3   2   1   2   1   3   5   2   2   1   3   2   3   2   3   3   1   2   1   2 
 73  76  77  78  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95 
  1   4   1   4   2   2   2   1   1   1   1   5   1   3   2   2   1   3   3   3 
 97  98  99 100 
  5   2   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02458 0.33295 0.58966 0.99722 6.00000 
[1] "event indicator table: "

   0    1 
4543 3076 
[1] "treatment indicator table: "

   0    1 
2929 4690 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3819
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3800
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 499.987 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.308 0.0644
 2 mu         0.1   0.2 0.398 0.0711
 3 mu         0.1   0.3 0.503 0.0787
 4 mu         0.1   0.4 0.585 0.0919
 5 mu         0.1   0.5 0.621 0.119 
 6 mu         0.2   0.1 0.280 0.0236
 7 mu         0.2   0.2 0.375 0.0279
 8 mu         0.2   0.3 0.447 0.0327
 9 mu         0.2   0.4 0.530 0.0412
10 mu         0.2   0.5 0.577 0.0511
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.04         0.566  0.000190      4.99
 2 mu         0.2      1.01         0.955  0.166         2.21
 3 mu         0.3      1.01         1.01   0.405         1.89
 4 mu         0.4      0.989        0.975  0.521         1.38
 5 mu         0.5      0.987        0.952  0.617         1.62
 6 mu         0.6      1.01         0.994  0.673         1.37
 7 mu         0.7      1.01         1.02   0.693         1.41
 8 mu         0.8      0.992        0.993  0.531         1.53
 9 mu         0.9      0.985        0.965  0.205         2.03
10 mu_1       0.1      1.07         0.657  0.000459      4.24
11 mu_1       0.2      1.01         0.939  0.215         2.27
12 mu_1       0.3      1.02         0.998  0.393         1.87
13 mu_1       0.4      0.986        0.975  0.556         1.37
14 mu_1       0.5      0.987        0.957  0.595         1.58
15 mu_1       0.6      1.01         1.00   0.671         1.38
16 mu_1       0.7      1.01         1.01   0.683         1.41
17 mu_1       0.8      0.992        0.989  0.531         1.53
18 mu_1       0.9      0.984        0.965  0.193         2.02
19 mu_0       0.1      1.04         0.553  0.000160      5.22
20 mu_0       0.2      1.02         0.952  0.154         2.20
21 mu_0       0.3      1.01         1.01   0.401         1.92
22 mu_0       0.4      0.991        0.970  0.498         1.39
23 mu_0       0.5      0.987        0.954  0.640         1.66
24 mu_0       0.6      1.01         0.989  0.676         1.35
25 mu_0       0.7      1.01         1.03   0.717         1.40
26 mu_0       0.8      0.990        0.988  0.534         1.54
27 mu_0       0.9      0.993        0.984  0.262         2.09
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      6.31      3.01e-25  1.30e-78    627.  
 2 mu         0.2      0.484     2.88e-12  7.08e-52     23.6 
 3 mu         0.3      0.600     1.40e- 6  1.96e-36     11.9 
 4 mu         0.4      0.815     3.69e- 3  1.17e-25      8.01
 5 mu         0.5      1.22      1.23e- 1  1.72e-17     12.5 
 6 mu         0.6      1.01      2.20e- 1  1.30e-14      6.52
 7 mu         0.7      1.04      1.25e- 1  3.70e-21      7.65
 8 mu         0.8      1.39      4.32e- 3  1.71e-30     11.9 
 9 mu         0.9      1.07      5.33e- 9  4.50e-49     20.8 
10 mu_1       0.1      3.37      1.67e-24  1.21e-77    330.  
11 mu_1       0.2      0.454     8.73e-12  3.28e-51     22.2 
12 mu_1       0.3      0.606     2.91e- 6  6.06e-36     11.1 
13 mu_1       0.4      0.843     5.52e- 3  2.71e-25      8.41
14 mu_1       0.5      1.22      1.20e- 1  3.19e-17     11.9 
15 mu_1       0.6      1.01      1.80e- 1  1.14e-15      7.10
16 mu_1       0.7      1.05      1.37e- 1  2.78e-22      8.04
17 mu_1       0.8      1.40      3.37e- 3  1.13e-31     12.4 
18 mu_1       0.9      1.06      3.66e- 9  1.31e-49     21.4 
19 mu_0       0.1      6.64      1.49e-25  1.05e-79    660.  
20 mu_0       0.2      0.492     1.42e-12  6.39e-53     23.9 
21 mu_0       0.3      0.598     7.55e- 7  2.02e-37     12.2 
22 mu_0       0.4      0.796     2.48e- 3  1.41e-26      7.75
23 mu_0       0.5      1.21      9.47e- 2  2.48e-18     13.2 
24 mu_0       0.6      1.02      2.13e- 1  3.08e-14      7.18
25 mu_0       0.7      1.02      1.10e- 1  1.17e-20      8.01
26 mu_0       0.8      1.36      8.13e- 3  8.10e-30      9.78
27 mu_0       0.9      1.19      2.15e- 8  3.32e-48     15.0 
[1] "Total run time was 504.006 seconds"
