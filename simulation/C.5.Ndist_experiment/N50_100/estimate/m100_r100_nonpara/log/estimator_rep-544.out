
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7715"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69  70  71 
  2   1   2   2   1   2   1   1   1   1   4   5   2   2   4   2   1   1   1   3 
 72  74  76  77  78  79  80  82  83  85  86  87  88  89  90  91  92  93  94  96 
  4   3   1   2   1   1   3   5   2   1   6   3   1   1   2   4   2   3   1   2 
 97  98  99 100 
  3   4   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02633 0.32456 0.59566 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4601 3114 
[1] "treatment indicator table: "

   0    1 
2824 4891 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3969
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 375.454 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.475 0.0934
 2 mu         0.1   0.2 0.604 0.127 
 3 mu         0.1   0.3 0.679 0.145 
 4 mu         0.1   0.4 0.719 0.148 
 5 mu         0.1   0.5 0.743 0.144 
 6 mu         0.2   0.1 0.380 0.0579
 7 mu         0.2   0.2 0.501 0.0881
 8 mu         0.2   0.3 0.563 0.104 
 9 mu         0.2   0.4 0.600 0.102 
10 mu         0.2   0.5 0.618 0.0943
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.08         0.158 0.000000210      8.71
 2 mu         0.2      0.950        0.895 0.0302           2.48
 3 mu         0.3      1.02         1.05  0.313            1.86
 4 mu         0.4      0.989        0.946 0.539            1.78
 5 mu         0.5      0.988        0.996 0.526            1.44
 6 mu         0.6      0.997        0.996 0.644            1.32
 7 mu         0.7      1.02         1.00  0.624            1.47
 8 mu         0.8      0.988        1.00  0.532            1.71
 9 mu         0.9      1.00         0.937 0.0157           3.05
10 mu_1       0.1      1.02         0.261 0.000000651      7.16
11 mu_1       0.2      0.970        0.904 0.0475           2.60
12 mu_1       0.3      1.02         1.03  0.309            1.81
13 mu_1       0.4      0.990        0.948 0.540            1.78
14 mu_1       0.5      0.988        0.975 0.547            1.46
15 mu_1       0.6      0.998        0.996 0.653            1.33
16 mu_1       0.7      1.02         1.01  0.619            1.50
17 mu_1       0.8      0.987        1.00  0.540            1.74
18 mu_1       0.9      1.00         0.929 0.0143           3.08
19 mu_0       0.1      1.09         0.147 0.000000161      8.89
20 mu_0       0.2      0.944        0.877 0.0259           2.45
21 mu_0       0.3      1.03         1.07  0.315            1.90
22 mu_0       0.4      0.988        0.941 0.529            1.78
23 mu_0       0.5      0.988        1.01  0.505            1.42
24 mu_0       0.6      0.997        1.00  0.630            1.33
25 mu_0       0.7      1.01         1.02  0.634            1.40
26 mu_0       0.8      0.994        1.01  0.502            1.71
27 mu_0       0.9      1.01         0.952 0.0287           2.77
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.259     3.10e-27  5.39e-82     21.2 
 2 mu         0.2      0.750     6.38e-14  4.68e-55     32.0 
 3 mu         0.3      0.852     5.24e- 7  2.21e-39     28.0 
 4 mu         0.4      1.04      1.12e- 3  2.45e-28     11.4 
 5 mu         0.5      1.14      1.54e- 1  7.46e-20      8.52
 6 mu         0.6      1.08      1.82e- 1  5.40e-15      6.86
 7 mu         0.7      0.780     1.15e- 1  3.03e-23      6.24
 8 mu         0.8      1.62      7.04e- 3  2.41e-35     16.1 
 9 mu         0.9      2.63      1.63e- 9  1.18e-56     69.6 
10 mu_1       0.1      0.406     1.78e-26  5.21e-81     32.0 
11 mu_1       0.2      0.694     1.93e-13  2.27e-54     26.9 
12 mu_1       0.3      0.888     1.04e- 6  7.14e-39     28.7 
13 mu_1       0.4      1.06      1.74e- 3  5.92e-28     11.5 
14 mu_1       0.5      1.13      1.52e- 1  1.44e-19      7.67
15 mu_1       0.6      1.07      1.67e- 1  1.36e-15      6.78
16 mu_1       0.7      0.775     1.33e- 1  6.55e-24      6.26
17 mu_1       0.8      1.67      5.54e- 3  4.55e-36     17.1 
18 mu_1       0.9      2.67      1.11e- 9  1.98e-57     73.3 
19 mu_0       0.1      0.243     1.47e-27  1.93e-83     20.0 
20 mu_0       0.2      0.764     3.14e-14  1.89e-56     33.9 
21 mu_0       0.3      0.837     3.03e- 7  1.02e-40     27.7 
22 mu_0       0.4      1.03      7.13e- 4  1.32e-29     11.4 
23 mu_0       0.5      1.15      1.19e- 1  4.81e-21      9.46
24 mu_0       0.6      1.09      1.56e- 1  1.15e-14      7.14
25 mu_0       0.7      0.794     9.72e- 2  8.58e-23      6.18
26 mu_0       0.8      1.44      5.85e- 3  1.02e-34     12.4 
27 mu_0       0.9      2.31      6.30e- 9  1.00e-55     36.2 
[1] "Total run time was 379.22 seconds"
