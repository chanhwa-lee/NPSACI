
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7674"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  70  71  72 
  1   2   2   3   1   1   2   4   2   2   2   1   4   2   2   4   1   1   1   2 
 73  74  75  76  77  78  79  80  81  82  83  85  86  87  88  89  91  92  93  94 
  1   2   2   2   1   1   3   4   3   1   1   6   2   1   2   2   2   2   5   6 
 95  96  98  99 100 
  1   3   1   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02771 0.34339 0.60507 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4448 3226 
[1] "treatment indicator table: "

   0    1 
3074 4600 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3724
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3950
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 426.054 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.425 0.0796
 2 mu         0.1   0.2 0.506 0.0797
 3 mu         0.1   0.3 0.558 0.0697
 4 mu         0.1   0.4 0.648 0.0885
 5 mu         0.1   0.5 0.688 0.0893
 6 mu         0.2   0.1 0.368 0.0381
 7 mu         0.2   0.2 0.447 0.0359
 8 mu         0.2   0.3 0.501 0.0285
 9 mu         0.2   0.4 0.571 0.0413
10 mu         0.2   0.5 0.624 0.0499
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.994        0.770  0.000506      4.28
 2 mu         0.2      1.01         0.977  0.115         2.03
 3 mu         0.3      1.02         0.999  0.368         1.84
 4 mu         0.4      0.994        0.991  0.530         1.42
 5 mu         0.5      1.00         1.01   0.563         1.40
 6 mu         0.6      1.02         1.03   0.691         1.48
 7 mu         0.7      1.02         1.02   0.649         1.36
 8 mu         0.8      1.01         1.01   0.521         1.42
 9 mu         0.9      0.999        0.979  0.335         2.02
10 mu_1       0.1      0.990        0.744  0.00115       4.24
11 mu_1       0.2      1.01         1.02   0.106         2.00
12 mu_1       0.3      1.02         0.999  0.388         1.77
13 mu_1       0.4      0.992        0.987  0.526         1.41
14 mu_1       0.5      1.01         1.01   0.557         1.42
15 mu_1       0.6      1.02         1.03   0.682         1.49
16 mu_1       0.7      1.02         1.02   0.655         1.37
17 mu_1       0.8      1.01         1.01   0.515         1.43
18 mu_1       0.9      1.00         0.982  0.329         2.04
19 mu_0       0.1      0.995        0.769  0.000434      4.28
20 mu_0       0.2      1.00         0.961  0.117         2.03
21 mu_0       0.3      1.02         0.996  0.358         1.87
22 mu_0       0.4      0.995        0.988  0.532         1.44
23 mu_0       0.5      1.00         1.02   0.568         1.39
24 mu_0       0.6      1.02         1.02   0.693         1.45
25 mu_0       0.7      1.02         1.02   0.635         1.37
26 mu_0       0.8      1.02         1.01   0.541         1.43
27 mu_0       0.9      0.991        0.951  0.388         1.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.09      1.20e-22  7.93e-85     96.1 
 2 mu         0.2      0.971     2.71e-12  8.72e-57     30.1 
 3 mu         0.3      0.800     1.09e- 6  1.60e-40     17.7 
 4 mu         0.4      1.00      2.88e- 3  4.10e-29      7.61
 5 mu         0.5      1.12      8.38e- 2  2.12e-20      6.60
 6 mu         0.6      1.11      1.76e- 1  3.52e-27      5.49
 7 mu         0.7      1.05      6.34e- 2  1.60e-38      8.51
 8 mu         0.8      0.730     2.64e- 3  9.98e-55      7.89
 9 mu         0.9      1.57      5.31e- 9  1.02e-82     31.5 
10 mu_1       0.1      0.793     7.81e-22  7.53e-84     57.7 
11 mu_1       0.2      0.943     8.01e-12  4.14e-56     30.9 
12 mu_1       0.3      0.817     1.05e- 6  5.05e-40     15.9 
13 mu_1       0.4      1.02      4.34e- 3  9.73e-29      8.38
14 mu_1       0.5      1.12      1.00e- 1  4.03e-20      6.97
15 mu_1       0.6      1.12      1.44e- 1  3.52e-28      5.55
16 mu_1       0.7      1.02      4.87e- 2  1.37e-39      8.11
17 mu_1       0.8      0.737     1.93e- 3  7.49e-56      8.24
18 mu_1       0.9      1.58      3.40e- 9  6.81e-84     31.9 
19 mu_0       0.1      1.12      4.65e-23  4.45e-86    100.  
20 mu_0       0.2      0.978     1.38e-12  5.51e-58     31.0 
21 mu_0       0.3      0.793     5.79e- 7  1.15e-41     18.5 
22 mu_0       0.4      0.990     1.77e- 3  3.45e-30      7.09
23 mu_0       0.5      1.11      7.40e- 2  2.14e-21      6.86
24 mu_0       0.6      1.11      2.03e- 1  8.27e-27      6.15
25 mu_0       0.7      1.10      5.39e- 2  5.01e-38      9.46
26 mu_0       0.8      0.704     4.51e- 3  4.69e-54      7.51
27 mu_0       0.9      1.40      2.25e- 8  9.60e-82     27.7 
[1] "Total run time was 429.587 seconds"
