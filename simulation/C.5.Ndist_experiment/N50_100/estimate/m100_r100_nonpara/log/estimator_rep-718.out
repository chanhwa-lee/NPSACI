
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7425"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  62  63  64  65  67  68  70  72  73  74 
  4   3   1   3   3   2   1   2   2   1   3   1   2   5   4   2   2   3   1   5 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92  94  95  96 
  3   2   2   4   1   1   1   5   2   2   2   3   2   2   1   2   1   2   3   1 
 97  98  99 100 
  2   3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03495 0.35698 0.61704 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4438 2987 
[1] "treatment indicator table: "

   0    1 
2637 4788 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3790
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3635
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 417.061 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.413 0.114 
 2 mu         0.1   0.2 0.504 0.137 
 3 mu         0.1   0.3 0.489 0.115 
 4 mu         0.1   0.4 0.503 0.115 
 5 mu         0.1   0.5 0.502 0.109 
 6 mu         0.2   0.1 0.431 0.0982
 7 mu         0.2   0.2 0.526 0.117 
 8 mu         0.2   0.3 0.521 0.0883
 9 mu         0.2   0.4 0.542 0.0823
10 mu         0.2   0.5 0.548 0.0686
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.732        0.118  3.21e-11     12.2 
 2 mu         0.2      0.873        0.786  1.82e- 4      4.74
 3 mu         0.3      1.05         0.966  8.40e- 2      3.52
 4 mu         0.4      1.04         1.03   3.85e- 1      1.76
 5 mu         0.5      0.995        0.993  5.22e- 1      1.68
 6 mu         0.6      0.990        1.00   6.16e- 1      1.43
 7 mu         0.7      0.979        0.981  6.92e- 1      1.51
 8 mu         0.8      0.972        0.986  4.29e- 1      1.48
 9 mu         0.9      1.06         1.05   1.68e- 1      3.02
10 mu_1       0.1      0.746        0.201  1.21e-10     12.5 
11 mu_1       0.2      0.907        0.804  3.46e- 4      4.80
12 mu_1       0.3      1.05         0.974  1.11e- 1      3.54
13 mu_1       0.4      1.04         1.03   4.20e- 1      1.65
14 mu_1       0.5      0.993        0.986  5.20e- 1      1.67
15 mu_1       0.6      0.990        1.00   6.07e- 1      1.43
16 mu_1       0.7      0.978        0.973  6.97e- 1      1.53
17 mu_1       0.8      0.974        0.991  4.25e- 1      1.52
18 mu_1       0.9      1.06         1.04   1.64e- 1      3.05
19 mu_0       0.1      0.731        0.109  2.22e-11     12.1 
20 mu_0       0.2      0.865        0.764  1.41e- 4      4.72
21 mu_0       0.3      1.05         0.962  7.25e- 2      3.51
22 mu_0       0.4      1.04         1.03   3.62e- 1      1.84
23 mu_0       0.5      0.998        1.00   5.24e- 1      1.69
24 mu_0       0.6      0.989        0.994  6.30e- 1      1.44
25 mu_0       0.7      0.981        0.979  6.75e- 1      1.47
26 mu_0       0.8      0.967        0.972  4.44e- 1      1.51
27 mu_0       0.9      1.07         1.02   1.54e- 1      2.74
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1       2.14     5.55e-28  5.39e-72     214. 
 2 mu         0.2       3.66     1.79e-15  2.85e-47     336. 
 3 mu         0.3       1.26     1.52e- 8  4.63e-33      36.3
 4 mu         0.4       1.51     2.97e- 4  3.69e-23      21.5
 5 mu         0.5       1.25     4.53e- 2  1.14e-15      16.5
 6 mu         0.6       1.27     2.18e- 1  5.51e-10      25.6
 7 mu         0.7       1.32     1.74e- 1  3.46e-16      10.4
 8 mu         0.8       1.63     9.30e- 2  2.72e-25      25.9
 9 mu         0.9       2.07     2.06e- 6  2.45e-41      47.5
10 mu_1       0.1       3.29     3.59e-27  4.73e-71     329. 
11 mu_1       0.2       3.00     5.71e-15  1.32e-46     259. 
12 mu_1       0.3       1.22     3.29e- 8  1.42e-32      32.2
13 mu_1       0.4       1.56     4.95e- 4  8.50e-23      23.3
14 mu_1       0.5       1.19     6.11e- 2  2.10e-15      16.1
15 mu_1       0.6       1.30     1.81e- 1  1.41e-10      26.5
16 mu_1       0.7       1.30     1.79e- 1  7.60e-17      10.4
17 mu_1       0.8       1.67     7.76e- 2  5.22e-26      26.4
18 mu_1       0.9       2.07     1.48e- 6  4.18e-42      47.7
19 mu_0       0.1       2.01     2.04e-28  5.82e-73     201. 
20 mu_0       0.2       3.83     8.07e-16  2.78e-48     356. 
21 mu_0       0.3       1.29     7.17e- 9  5.14e-34      38.0
22 mu_0       0.4       1.49     1.64e- 4  4.78e-24      20.4
23 mu_0       0.5       1.30     2.94e- 2  1.77e-16      16.9
24 mu_0       0.6       1.22     2.21e- 1  1.73e-10      24.2
25 mu_0       0.7       1.37     1.57e- 1  9.76e-16      11.2
26 mu_0       0.8       1.46     1.28e- 1  1.15e-24      23.8
27 mu_0       0.9       2.10     7.31e- 6  2.07e-40      46.4
[1] "Total run time was 421.045 seconds"
