
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7746"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71 
  4   1   1   1   2   1   1   4   1   3   1   1   1   1   1   3   3   2   2   2 
 72  73  74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  93 
  2   1   2   2   3   2   5   2   2   1   2   1   2   1   6   2   3   2   1   6 
 95  96  97  98  99 100 
  1   3   1   6   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02264 0.30892 0.56827 0.97766 6.83167 
[1] "event indicator table: "

   0    1 
4543 3203 
[1] "treatment indicator table: "

   0    1 
3013 4733 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3928
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3818
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 413.602 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.236 0.0366
 2 mu         0.1   0.2 0.341 0.0616
 3 mu         0.1   0.3 0.333 0.0592
 4 mu         0.1   0.4 0.358 0.0515
 5 mu         0.1   0.5 0.367 0.0582
 6 mu         0.2   0.1 0.345 0.0272
 7 mu         0.2   0.2 0.463 0.0409
 8 mu         0.2   0.3 0.493 0.0415
 9 mu         0.2   0.4 0.536 0.0363
10 mu         0.2   0.5 0.575 0.0432
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.570        0.191 0.00000000483      3.40
 2 mu         0.2      0.981        0.950 0.00545            4.07
 3 mu         0.3      0.941        0.923 0.259              2.20
 4 mu         0.4      0.995        0.944 0.524              1.84
 5 mu         0.5      1.01         1.01  0.669              1.76
 6 mu         0.6      1.00         0.995 0.564              1.45
 7 mu         0.7      1.00         0.985 0.629              1.55
 8 mu         0.8      0.986        0.963 0.573              1.59
 9 mu         0.9      0.985        0.962 0.171              1.85
10 mu_1       0.1      0.659        0.310 0.0000000154       3.46
11 mu_1       0.2      0.973        0.930 0.00882            3.53
12 mu_1       0.3      0.943        0.916 0.254              2.18
13 mu_1       0.4      1.00         0.963 0.541              1.84
14 mu_1       0.5      1.01         1.00  0.677              1.73
15 mu_1       0.6      1.00         0.990 0.579              1.46
16 mu_1       0.7      1.00         0.983 0.632              1.54
17 mu_1       0.8      0.986        0.965 0.565              1.59
18 mu_1       0.9      0.986        0.965 0.176              1.86
19 mu_0       0.1      0.560        0.177 0.00000000366      3.43
20 mu_0       0.2      0.984        0.965 0.00461            4.21
21 mu_0       0.3      0.940        0.930 0.262              2.21
22 mu_0       0.4      0.991        0.936 0.513              1.84
23 mu_0       0.5      1.01         1.01  0.660              1.78
24 mu_0       0.6      0.999        0.985 0.541              1.42
25 mu_0       0.7      1.01         1.01  0.623              1.57
26 mu_0       0.8      0.986        0.947 0.604              1.58
27 mu_0       0.9      0.981        0.983 0.130              1.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0567     5.40e-26  1.97e-69      5.00
 2 mu         0.2     1.23       1.00e-13  3.30e-44     71.8 
 3 mu         0.3     1.13       4.02e- 7  4.62e-31     20.3 
 4 mu         0.4     0.999      5.94e- 3  3.29e-22     12.2 
 5 mu         0.5     1.32       9.45e- 2  1.88e-15     12.2 
 6 mu         0.6     1.20       2.53e- 1  4.65e-10     16.4 
 7 mu         0.7     1.27       7.99e- 2  2.67e-17     13.5 
 8 mu         0.8     1.32       2.22e- 3  1.38e-28     12.3 
 9 mu         0.9     1.02       2.53e-10  4.94e-49     21.6 
10 mu_1       0.1     0.115      2.96e-25  1.71e-68     10.0 
11 mu_1       0.2     1.35       3.12e-13  1.43e-43     71.8 
12 mu_1       0.3     1.03       8.18e- 7  1.46e-30     17.9 
13 mu_1       0.4     1.06       8.90e- 3  7.80e-22     13.1 
14 mu_1       0.5     1.29       1.16e- 1  3.57e-15     11.2 
15 mu_1       0.6     1.20       2.00e- 1  2.73e-10     16.7 
16 mu_1       0.7     1.28       7.11e- 2  9.54e-18     13.8 
17 mu_1       0.8     1.33       1.61e- 3  4.31e-29     12.3 
18 mu_1       0.9     1.00       1.71e-10  1.37e-49     21.9 
19 mu_0       0.1     0.0502     2.71e-26  2.88e-70      4.45
20 mu_0       0.2     1.20       4.74e-14  5.42e-45     71.8 
21 mu_0       0.3     1.17       2.24e- 7  3.43e-32     21.4 
22 mu_0       0.4     0.961      3.96e- 3  2.85e-23     11.7 
23 mu_0       0.5     1.34       8.82e- 2  1.96e-16     13.1 
24 mu_0       0.6     1.19       2.82e- 1  6.04e-11     16.1 
25 mu_0       0.7     1.25       6.85e- 2  6.68e-17     12.5 
26 mu_0       0.8     1.31       4.72e- 3  5.18e-28     12.3 
27 mu_0       0.9     1.14       9.98e-10  3.70e-48     18.9 
[1] "Total run time was 416.821 seconds"
