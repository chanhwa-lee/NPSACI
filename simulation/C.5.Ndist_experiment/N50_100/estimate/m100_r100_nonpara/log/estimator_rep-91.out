
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7632"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  59  60  61  62  63  64  65  66  67  68  71  72  73 
  1   2   2   1   1   3   4   2   3   1   1   2   3   2   1   3   2   1   3   2 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  1   5   2   2   4   2   3   2   1   3   2   3   3   3   3   3   1   1   1   1 
 94  95  96  97  98  99 100 
  2   2   2   1   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03501 0.35293 0.61335 1.00000 5.71539 
[1] "event indicator table: "

   0    1 
4539 3093 
[1] "treatment indicator table: "

   0    1 
2779 4853 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3825
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3807
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 754.81 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.447 0.0907
 2 mu         0.1   0.2 0.564 0.113 
 3 mu         0.1   0.3 0.647 0.129 
 4 mu         0.1   0.4 0.732 0.150 
 5 mu         0.1   0.5 0.778 0.159 
 6 mu         0.2   0.1 0.321 0.0445
 7 mu         0.2   0.2 0.407 0.0519
 8 mu         0.2   0.3 0.468 0.0582
 9 mu         0.2   0.4 0.537 0.0852
10 mu         0.2   0.5 0.567 0.0808
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.19         0.236 0.000000261     20.2 
 2 mu         0.2      0.875        0.761 0.0331           3.44
 3 mu         0.3      0.988        0.944 0.225            2.98
 4 mu         0.4      0.992        0.989 0.460            1.68
 5 mu         0.5      1.04         1.02  0.545            1.65
 6 mu         0.6      1.02         1.01  0.669            1.53
 7 mu         0.7      1.01         1.00  0.681            1.54
 8 mu         0.8      0.978        0.977 0.519            1.85
 9 mu         0.9      1.01         0.992 0.299            2.91
10 mu_1       0.1      1.03         0.319 0.000000763     11.4 
11 mu_1       0.2      0.891        0.813 0.0501           3.89
12 mu_1       0.3      0.991        0.940 0.250            2.71
13 mu_1       0.4      0.995        0.992 0.489            1.64
14 mu_1       0.5      1.04         1.03  0.552            1.64
15 mu_1       0.6      1.02         1.01  0.654            1.55
16 mu_1       0.7      1.00         0.994 0.664            1.55
17 mu_1       0.8      0.978        0.976 0.497            1.85
18 mu_1       0.9      1.01         0.981 0.287            2.95
19 mu_0       0.1      1.20         0.222 0.000000205     21.2 
20 mu_0       0.2      0.871        0.757 0.0287           3.32
21 mu_0       0.3      0.987        0.941 0.215            3.09
22 mu_0       0.4      0.990        0.988 0.441            1.71
23 mu_0       0.5      1.04         1.02  0.537            1.67
24 mu_0       0.6      1.02         1.02  0.692            1.52
25 mu_0       0.7      1.01         0.996 0.702            1.52
26 mu_0       0.8      0.977        0.967 0.586            1.87
27 mu_0       0.9      1.01         0.953 0.399            2.60
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.439     1.30e-29  3.73e-74     43.9 
 2 mu         0.2      1.35      5.03e-16  6.77e-49    119.  
 3 mu         0.3      0.512     4.14e- 9  1.88e-34     18.5 
 4 mu         0.4      1.32      6.55e- 5  2.33e-24     14.3 
 5 mu         0.5      0.986     2.30e- 2  1.08e-16     10.0 
 6 mu         0.6      0.775     1.09e- 1  6.45e-13      5.90
 7 mu         0.7      1.08      2.05e- 1  1.53e-20     13.7 
 8 mu         0.8      1.38      7.59e- 2  9.20e-32     10.6 
 9 mu         0.9      1.31      8.40e- 7  1.44e-51     26.4 
10 mu_1       0.1      0.705     9.44e-29  3.32e-73     70.4 
11 mu_1       0.2      1.15      1.76e-15  3.16e-48     95.9 
12 mu_1       0.3      0.541     9.75e- 9  5.85e-34     19.0 
13 mu_1       0.4      1.37      1.16e- 4  5.44e-24     14.3 
14 mu_1       0.5      0.940     2.93e- 2  2.01e-16      9.12
15 mu_1       0.6      0.789     9.75e- 2  1.73e-13      6.01
16 mu_1       0.7      1.09      1.88e- 1  3.51e-21     13.4 
17 mu_1       0.8      1.39      6.48e- 2  1.85e-32     10.7 
18 mu_1       0.9      1.31      6.42e- 7  2.57e-52     27.4 
19 mu_0       0.1      0.409     4.21e-30  4.56e-75     40.9 
20 mu_0       0.2      1.40      1.88e-16  5.64e-50    125.  
21 mu_0       0.3      0.500     1.77e- 9  1.79e-35     18.4 
22 mu_0       0.4      1.28      3.49e- 5  2.59e-25     14.4 
23 mu_0       0.5      1.03      1.69e- 2  1.44e-17     10.9 
24 mu_0       0.6      0.754     8.83e- 2  1.35e-12      5.72
25 mu_0       0.7      1.06      1.98e- 1  4.28e-20     14.5 
26 mu_0       0.8      1.34      1.29e- 1  3.86e-31     10.5 
27 mu_0       0.9      1.35      2.62e- 6  1.21e-50     21.7 
[1] "Total run time was 759.164 seconds"
