
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7275"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70  71 
  1   1   1   2   3   5   3   2   2   3   5   3   2   1   2   1   3   1   3   4 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91 
  2   2   6   2   2   2   2   1   4   2   2   2   1   2   1   1   4   1   3   1 
 92  93  94  95  99 100 
  2   2   1   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02312 0.32412 0.58727 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4344 2931 
[1] "treatment indicator table: "

   0    1 
2861 4414 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3541
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3734
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 670.279 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.590 0.188 
 2 mu         0.1   0.2 0.690 0.218 
 3 mu         0.1   0.3 0.778 0.243 
 4 mu         0.1   0.4 0.848 0.260 
 5 mu         0.1   0.5 0.896 0.283 
 6 mu         0.2   0.1 0.359 0.0518
 7 mu         0.2   0.2 0.416 0.0450
 8 mu         0.2   0.3 0.484 0.0490
 9 mu         0.2   0.4 0.516 0.0527
10 mu         0.2   0.5 0.543 0.0557
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.49         0.115  8.67e-10     49.3 
 2 mu         0.2      0.951        0.786  1.40e- 3      4.67
 3 mu         0.3      0.959        0.907  2.04e- 1      1.98
 4 mu         0.4      1.02         1.03   5.57e- 1      1.63
 5 mu         0.5      1.00         0.996  5.30e- 1      1.41
 6 mu         0.6      0.998        1.01   5.60e- 1      1.30
 7 mu         0.7      0.986        0.978  6.58e- 1      1.55
 8 mu         0.8      1.02         0.999  5.68e- 1      1.89
 9 mu         0.9      1.03         0.958  2.58e- 1      2.71
10 mu_1       0.1      1.44         0.205  2.97e- 9     40.6 
11 mu_1       0.2      0.930        0.762  2.47e- 3      4.56
12 mu_1       0.3      0.971        0.924  2.50e- 1      1.94
13 mu_1       0.4      1.02         1.01   5.89e- 1      1.59
14 mu_1       0.5      0.999        1.01   5.29e- 1      1.39
15 mu_1       0.6      0.997        1.02   5.61e- 1      1.30
16 mu_1       0.7      0.986        0.970  6.55e- 1      1.55
17 mu_1       0.8      1.02         0.995  5.62e- 1      1.92
18 mu_1       0.9      1.03         0.968  2.49e- 1      2.81
19 mu_0       0.1      1.49         0.104  6.33e-10     50.3 
20 mu_0       0.2      0.956        0.795  1.14e- 3      4.70
21 mu_0       0.3      0.954        0.889  1.84e- 1      2.00
22 mu_0       0.4      1.02         1.01   5.36e- 1      1.66
23 mu_0       0.5      1.00         0.992  5.31e- 1      1.43
24 mu_0       0.6      0.998        1.02   5.60e- 1      1.32
25 mu_0       0.7      0.985        0.971  6.40e- 1      1.56
26 mu_0       0.8      1.02         1.01   5.96e- 1      1.80
27 mu_0       0.9      1.02         0.961  3.41e- 1      2.53
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.643     1.66e-25  1.05e-60     53.1 
 2 mu         0.2      2.26      5.34e-13  6.10e-40    110.  
 3 mu         0.3      1.33      9.02e- 7  5.80e-28     21.8 
 4 mu         0.4      1.11      3.94e- 3  1.28e-19     19.4 
 5 mu         0.5      1.10      1.17e- 1  2.61e-13     14.7 
 6 mu         0.6      1.26      2.84e- 1  1.69e-12      8.25
 7 mu         0.7      1.11      3.35e- 1  5.85e-19      8.90
 8 mu         0.8      1.11      7.13e- 3  2.34e-28     14.3 
 9 mu         0.9      1.29      9.47e- 9  8.34e-45     35.2 
10 mu_1       0.1      0.885     1.04e-24  9.64e-60     66.4 
11 mu_1       0.2      2.26      1.60e-12  2.81e-39    110.  
12 mu_1       0.3      1.25      1.88e- 6  1.78e-27     19.8 
13 mu_1       0.4      1.12      6.14e- 3  2.95e-19     21.3 
14 mu_1       0.5      1.10      1.12e- 1  4.80e-13     12.9 
15 mu_1       0.6      1.25      3.16e- 1  3.52e-13      8.18
16 mu_1       0.7      1.11      2.84e- 1  1.04e-19      9.53
17 mu_1       0.8      1.10      5.47e- 3  3.66e-29     13.7 
18 mu_1       0.9      1.28      6.48e- 9  1.16e-45     36.0 
19 mu_0       0.1      0.617     6.97e-26  9.19e-62     51.6 
20 mu_0       0.2      2.26      2.67e-13  6.02e-41    110.  
21 mu_0       0.3      1.36      4.83e- 7  6.54e-29     22.6 
22 mu_0       0.4      1.10      2.47e- 3  1.69e-20     18.1 
23 mu_0       0.5      1.10      1.15e- 1  4.12e-14     16.5 
24 mu_0       0.6      1.26      3.11e- 1  3.70e-12      8.36
25 mu_0       0.7      1.09      3.15e- 1  1.71e-18      8.02
26 mu_0       0.8      1.11      1.32e- 2  1.03e-27     16.7 
27 mu_0       0.9      1.35      3.47e- 8  7.30e-44     30.1 
[1] "Total run time was 675.48 seconds"
