
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7720"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  61  62  63  65  66  67  68  69  72  73  74 
  3   2   2   1   1   2   2   1   1   1   2   2   5   1   2   1   4   2   3   2 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  1   3   1   2   5   4   4   1   1   4   2   2   2   2   2   3   3   3   2   1 
 95  96  97  98  99 100 
  2   1   2   2   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02115 0.31006 0.59111 1.00000 6.02662 
[1] "event indicator table: "

   0    1 
4506 3214 
[1] "treatment indicator table: "

   0    1 
3070 4650 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3916
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3804
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 376.365 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.680 0.174 
 2 mu         0.1   0.2 0.819 0.201 
 3 mu         0.1   0.3 0.892 0.214 
 4 mu         0.1   0.4 0.922 0.220 
 5 mu         0.1   0.5 1.02  0.237 
 6 mu         0.2   0.1 0.343 0.0363
 7 mu         0.2   0.2 0.444 0.0379
 8 mu         0.2   0.3 0.523 0.0435
 9 mu         0.2   0.4 0.564 0.0507
10 mu         0.2   0.5 0.626 0.0627
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.35         0.157  5.30e-13     17.4 
 2 mu         0.2      0.924        0.882  5.87e- 5      3.00
 3 mu         0.3      0.981        0.954  8.36e- 2      4.15
 4 mu         0.4      0.986        0.998  4.02e- 1      1.58
 5 mu         0.5      0.995        1.00   6.31e- 1      1.55
 6 mu         0.6      1.01         1.00   6.93e- 1      1.31
 7 mu         0.7      1.01         1.02   6.48e- 1      1.57
 8 mu         0.8      1.00         0.982  5.42e- 1      1.58
 9 mu         0.9      0.993        0.991  2.29e- 1      2.92
10 mu_1       0.1      1.18         0.272  1.99e-12     15.7 
11 mu_1       0.2      0.934        0.915  1.19e- 4      2.68
12 mu_1       0.3      0.980        0.961  1.14e- 1      4.14
13 mu_1       0.4      0.986        0.997  4.45e- 1      1.51
14 mu_1       0.5      0.996        0.999  6.24e- 1      1.55
15 mu_1       0.6      1.01         1.01   6.97e- 1      1.31
16 mu_1       0.7      1.01         1.02   6.32e- 1      1.56
17 mu_1       0.8      1.00         0.978  5.33e- 1      1.58
18 mu_1       0.9      0.993        0.976  2.18e- 1      2.96
19 mu_0       0.1      1.37         0.144  3.68e-13     18.6 
20 mu_0       0.2      0.921        0.852  4.37e- 5      3.08
21 mu_0       0.3      0.982        0.951  7.05e- 2      4.16
22 mu_0       0.4      0.986        0.989  3.74e- 1      1.74
23 mu_0       0.5      0.994        1.00   6.38e- 1      1.55
24 mu_0       0.6      1.00         1.00   6.88e- 1      1.35
25 mu_0       0.7      1.01         1.02   6.86e- 1      1.57
26 mu_0       0.8      1.00         0.995  5.43e- 1      1.58
27 mu_0       0.9      1.00         0.943  3.32e- 1      2.56
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.81      2.75e-26  7.45e-80    180.  
 2 mu         0.2      1.03      2.54e-14  4.05e-54     42.7 
 3 mu         0.3      1.87      7.18e- 8  3.78e-39     78.8 
 4 mu         0.4      1.40      6.43e- 4  1.32e-28     21.1 
 5 mu         0.5      0.897     6.88e- 2  1.65e-20      6.38
 6 mu         0.6      0.827     2.33e- 1  5.17e-19      7.41
 7 mu         0.7      1.20      1.25e- 1  5.67e-28      5.96
 8 mu         0.8      0.770     6.77e- 3  6.83e-41      8.73
 9 mu         0.9      1.56      4.32e- 9  2.32e-63     42.9 
10 mu_1       0.1      1.73      1.73e-25  7.20e-79    171.  
11 mu_1       0.2      1.19      8.10e-14  1.96e-53     45.3 
12 mu_1       0.3      1.86      1.52e- 7  1.22e-38     79.2 
13 mu_1       0.4      1.34      1.00e- 3  3.19e-28     15.9 
14 mu_1       0.5      0.868     6.44e- 2  3.19e-20      6.17
15 mu_1       0.6      0.841     2.26e- 1  8.21e-20      7.79
16 mu_1       0.7      1.20      1.01e- 1  7.72e-29      6.11
17 mu_1       0.8      0.762     5.50e- 3  8.14e-42      8.91
18 mu_1       0.9      1.58      3.10e- 9  2.46e-64     43.1 
19 mu_0       0.1      1.81      1.14e-26  2.79e-81    180.  
20 mu_0       0.2      0.986     1.06e-14  1.71e-55     42.0 
21 mu_0       0.3      1.87      3.75e- 8  1.82e-40     78.6 
22 mu_0       0.4      1.44      3.96e- 4  7.42e-30     24.6 
23 mu_0       0.5      0.927     4.93e- 2  1.11e-21      6.59
24 mu_0       0.6      0.806     1.88e- 1  1.17e-18      7.29
25 mu_0       0.7      1.18      1.81e- 1  1.71e-27      5.62
26 mu_0       0.8      0.805     7.51e- 3  3.09e-40      8.35
27 mu_0       0.9      1.39      1.53e- 8  2.10e-62     40.9 
[1] "Total run time was 379.42 seconds"
