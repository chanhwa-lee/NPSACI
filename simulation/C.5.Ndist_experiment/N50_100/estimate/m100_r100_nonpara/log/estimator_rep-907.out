
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7772"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  63  64  65  66  67  69  70  71  72  73  74 
  1   1   1   2   1   2   3   2   2   3   2   1   1   3   2   2   2   2   1   5 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  94  95 
  2   5   3   2   4   2   2   2   3   2   3   1   2   2   2   2   3   1   2   5 
 96  97  98  99 100 
  4   2   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0311  0.3349  0.6013  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4642 3130 
[1] "treatment indicator table: "

   0    1 
2756 5016 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3955
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3817
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.229 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.390 0.0821
 2 mu         0.1   0.2 0.495 0.0861
 3 mu         0.1   0.3 0.596 0.0966
 4 mu         0.1   0.4 0.651 0.106 
 5 mu         0.1   0.5 0.697 0.118 
 6 mu         0.2   0.1 0.359 0.0479
 7 mu         0.2   0.2 0.441 0.0494
 8 mu         0.2   0.3 0.517 0.0533
 9 mu         0.2   0.4 0.567 0.0557
10 mu         0.2   0.5 0.604 0.0585
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.936        0.269 0.000000101       7.76
 2 mu         0.2      0.915        0.782 0.0172            2.36
 3 mu         0.3      0.974        0.947 0.332             1.93
 4 mu         0.4      0.994        0.950 0.482             1.70
 5 mu         0.5      1.00         0.997 0.580             1.59
 6 mu         0.6      1.01         1.01  0.610             1.59
 7 mu         0.7      1.02         0.994 0.453             1.45
 8 mu         0.8      0.988        0.948 0.556             1.69
 9 mu         0.9      1.01         0.985 0.294             2.44
10 mu_1       0.1      0.964        0.399 0.000000301       6.78
11 mu_1       0.2      0.922        0.860 0.0263            2.18
12 mu_1       0.3      0.974        0.948 0.350             2.03
13 mu_1       0.4      0.995        0.960 0.476             1.64
14 mu_1       0.5      1.00         0.989 0.583             1.57
15 mu_1       0.6      1.01         1.01  0.623             1.56
16 mu_1       0.7      1.02         0.993 0.458             1.46
17 mu_1       0.8      0.988        0.946 0.554             1.70
18 mu_1       0.9      1.01         0.988 0.280             2.46
19 mu_0       0.1      0.933        0.255 0.0000000785      7.86
20 mu_0       0.2      0.913        0.762 0.0150            2.41
21 mu_0       0.3      0.973        0.946 0.324             1.94
22 mu_0       0.4      0.993        0.956 0.486             1.76
23 mu_0       0.5      1.00         0.993 0.566             1.61
24 mu_0       0.6      1.01         1.02  0.590             1.62
25 mu_0       0.7      1.02         1.01  0.442             1.43
26 mu_0       0.8      0.987        0.952 0.562             1.68
27 mu_0       0.9      1.01         0.985 0.415             2.26
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.121     3.72e-30  5.32e-68      11.9
 2 mu         0.2      0.705     9.78e-17  2.23e-44      25.9
 3 mu         0.3      0.807     1.31e- 9  8.19e-31      17.3
 4 mu         0.4      1.51      4.17e- 5  2.02e-21      66.6
 5 mu         0.5      1.17      9.06e- 3  2.22e-14      20.4
 6 mu         0.6      1.34      1.27e- 1  7.48e-13      16.5
 7 mu         0.7      1.22      1.88e- 1  4.80e-20      11.8
 8 mu         0.8      1.31      7.52e- 2  1.28e-30      20.4
 9 mu         0.9      1.48      9.39e- 7  2.85e-49      19.3
10 mu_1       0.1      0.193     2.38e-29  4.78e-67      18.8
11 mu_1       0.2      0.757     3.30e-16  1.00e-43      20.5
12 mu_1       0.3      0.807     2.93e- 9  2.46e-30      14.6
13 mu_1       0.4      1.54      7.00e- 5  4.55e-21      69.5
14 mu_1       0.5      1.16      1.09e- 2  3.99e-14      17.0
15 mu_1       0.6      1.34      1.26e- 1  1.97e-13      16.2
16 mu_1       0.7      1.21      1.95e- 1  1.08e-20      12.1
17 mu_1       0.8      1.32      6.40e- 2  2.53e-31      20.2
18 mu_1       0.9      1.48      6.66e- 7  5.00e-50      19.7
19 mu_0       0.1      0.113     1.48e-30  5.98e-69      11.1
20 mu_0       0.2      0.692     3.90e-17  2.82e-45      27.3
21 mu_0       0.3      0.806     6.08e-10  1.18e-31      18.5
22 mu_0       0.4      1.49      2.28e- 5  3.41e-22      64.7
23 mu_0       0.5      1.18      1.03e- 2  4.49e-15      23.8
24 mu_0       0.6      1.32      9.51e- 2  1.57e-12      18.1
25 mu_0       0.7      1.24      1.76e- 1  1.35e-19      11.2
26 mu_0       0.8      1.27      1.06e- 1  5.39e-30      21.2
27 mu_0       0.9      1.50      3.39e- 6  2.40e-48      21.4
[1] "Total run time was 444.787 seconds"
