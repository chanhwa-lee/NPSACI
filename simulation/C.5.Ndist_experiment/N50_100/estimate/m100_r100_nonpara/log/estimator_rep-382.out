
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7194"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  68  69  70  71 
  4   2   1   4   6   1   1   2   3   8   1   1   2   5   3   2   2   2   4   1 
 72  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  93 
  1   2   1   3   2   1   2   1   1   1   4   2   1   1   1   1   4   1   3   3 
 94  95  96  97  98 100 
  1   2   2   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03599 0.35621 0.61291 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4363 2831 
[1] "treatment indicator table: "

   0    1 
2698 4496 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3523
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3671
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 352.287 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.339 0.130 
 2 mu         0.1   0.2 0.446 0.157 
 3 mu         0.1   0.3 0.532 0.176 
 4 mu         0.1   0.4 0.605 0.201 
 5 mu         0.1   0.5 0.619 0.216 
 6 mu         0.2   0.1 0.298 0.0335
 7 mu         0.2   0.2 0.391 0.0381
 8 mu         0.2   0.3 0.465 0.0463
 9 mu         0.2   0.4 0.520 0.0531
10 mu         0.2   0.5 0.538 0.0567
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.04         0.262  3.11e-11     34.2 
 2 mu         0.2      0.958        0.844  2.75e- 4      4.31
 3 mu         0.3      0.968        0.945  1.61e- 1      2.28
 4 mu         0.4      0.986        0.970  4.81e- 1      1.74
 5 mu         0.5      1.00         0.994  7.04e- 1      1.52
 6 mu         0.6      1.02         1.00   6.75e- 1      1.44
 7 mu         0.7      1.02         1.02   7.24e- 1      1.75
 8 mu         0.8      0.998        0.968  5.93e- 1      1.49
 9 mu         0.9      0.908        0.891  1.58e- 1      1.95
10 mu_1       0.1      1.00         0.371  1.24e-10     25.5 
11 mu_1       0.2      0.949        0.852  5.47e- 4      4.00
12 mu_1       0.3      0.973        0.929  2.15e- 1      2.31
13 mu_1       0.4      0.987        0.978  4.99e- 1      1.70
14 mu_1       0.5      1.00         1.00   7.04e- 1      1.51
15 mu_1       0.6      1.02         0.999  6.94e- 1      1.46
16 mu_1       0.7      1.02         1.02   7.17e- 1      1.74
17 mu_1       0.8      0.997        0.966  5.77e- 1      1.49
18 mu_1       0.9      0.908        0.898  1.55e- 1      2.00
19 mu_0       0.1      1.05         0.253  2.08e-11     35.1 
20 mu_0       0.2      0.961        0.846  2.06e- 4      4.60
21 mu_0       0.3      0.966        0.954  1.37e- 1      2.27
22 mu_0       0.4      0.985        0.969  4.70e- 1      1.77
23 mu_0       0.5      0.999        0.991  6.86e- 1      1.54
24 mu_0       0.6      1.02         1.01   6.48e- 1      1.45
25 mu_0       0.7      1.02         1.02   7.29e- 1      1.77
26 mu_0       0.8      1.00         0.974  6.61e- 1      1.50
27 mu_0       0.9      0.909        0.905  1.82e- 1      1.83
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1       1.35     6.18e-26  3.01e-66    134.  
 2 mu         0.2       3.43     2.81e-14  2.00e-43    211.  
 3 mu         0.3       1.40     3.35e- 8  2.84e-30     35.1 
 4 mu         0.4       1.11     7.63e- 4  4.03e-21     12.6 
 5 mu         0.5       1.01     4.38e- 2  3.26e-14      7.73
 6 mu         0.6       1.17     2.73e- 1  3.46e-10      9.31
 7 mu         0.7       1.08     3.42e- 1  2.17e-16      5.43
 8 mu         0.8       1.33     4.15e- 2  1.88e-26      7.70
 9 mu         0.9       1.29     1.44e- 7  4.78e-45     23.2 
10 mu_1       0.1       2.07     4.59e-25  2.76e-65    206.  
11 mu_1       0.2       3.18     9.24e-14  9.15e-43    162.  
12 mu_1       0.3       1.26     7.30e- 8  8.68e-30     26.5 
13 mu_1       0.4       1.12     1.19e- 3  9.23e-21     11.9 
14 mu_1       0.5       1.01     5.17e- 2  5.97e-14      7.57
15 mu_1       0.6       1.19     2.56e- 1  8.86e-11      8.84
16 mu_1       0.7       1.07     3.73e- 1  4.77e-17      5.19
17 mu_1       0.8       1.35     3.38e- 2  5.32e-27      8.02
18 mu_1       0.9       1.26     1.01e- 7  1.20e-45     23.5 
19 mu_0       0.1       1.26     1.80e-26  2.79e-67    126.  
20 mu_0       0.2       3.49     1.21e-14  2.08e-44    223.  
21 mu_0       0.3       1.46     1.65e- 8  3.38e-31     38.8 
22 mu_0       0.4       1.11     4.80e- 4  5.59e-22     13.1 
23 mu_0       0.5       1.01     2.89e- 2  5.43e-15      8.40
24 mu_0       0.6       1.16     2.51e- 1  7.31e-10     10.0 
25 mu_0       0.7       1.09     3.12e- 1  6.12e-16      6.03
26 mu_0       0.8       1.25     7.22e- 2  7.28e-26      7.74
27 mu_0       0.9       1.50     5.64e- 7  3.70e-44     19.9 
[1] "Total run time was 355.577 seconds"
