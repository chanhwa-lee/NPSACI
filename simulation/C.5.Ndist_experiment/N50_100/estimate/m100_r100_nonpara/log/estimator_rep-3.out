
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7273"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  69  70  71 
  3   1   6   2   3   1   3   4   1   4   1   3   1   3   3   3   1   3   1   4 
 72  73  76  77  79  81  82  84  85  86  88  89  91  92  94  95  96  97  98  99 
  4   2   3   2   3   2   3   3   1   2   2   3   2   1   4   2   1   2   3   2 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02098 0.31691 0.58390 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4341 2932 
[1] "treatment indicator table: "

   0    1 
2636 4637 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3632
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3641
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 506.272 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.519 0.0586
 2 mu         0.1   0.2 0.645 0.0703
 3 mu         0.1   0.3 0.776 0.101 
 4 mu         0.1   0.4 0.787 0.0875
 5 mu         0.1   0.5 0.795 0.0774
 6 mu         0.2   0.1 0.402 0.0435
 7 mu         0.2   0.2 0.496 0.0481
 8 mu         0.2   0.3 0.600 0.0722
 9 mu         0.2   0.4 0.609 0.0566
10 mu         0.2   0.5 0.614 0.0415
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.23         1.01  0.00000146      8.60
 2 mu         0.2      0.999        0.920 0.0213          2.66
 3 mu         0.3      0.946        0.908 0.440           2.40
 4 mu         0.4      0.976        0.964 0.384           1.67
 5 mu         0.5      1.01         0.973 0.585           1.57
 6 mu         0.6      1.00         0.990 0.655           1.44
 7 mu         0.7      1.01         1.01  0.636           1.44
 8 mu         0.8      0.991        1.01  0.620           1.37
 9 mu         0.9      1.03         1.04  0.300           1.75
10 mu_1       0.1      1.22         1.02  0.00000469      6.62
11 mu_1       0.2      0.979        0.911 0.0348          2.58
12 mu_1       0.3      0.948        0.910 0.468           2.43
13 mu_1       0.4      0.981        0.952 0.390           1.70
14 mu_1       0.5      1.01         0.980 0.572           1.54
15 mu_1       0.6      1.00         0.979 0.649           1.45
16 mu_1       0.7      1.01         0.997 0.632           1.43
17 mu_1       0.8      0.992        1.01  0.618           1.35
18 mu_1       0.9      1.03         1.05  0.290           1.77
19 mu_0       0.1      1.23         1.02  0.00000110      8.82
20 mu_0       0.2      1.00         0.925 0.0179          2.73
21 mu_0       0.3      0.946        0.908 0.412           2.38
22 mu_0       0.4      0.973        0.962 0.379           1.65
23 mu_0       0.5      1.01         0.962 0.598           1.61
24 mu_0       0.6      1.00         0.988 0.653           1.43
25 mu_0       0.7      1.01         1.01  0.645           1.45
26 mu_0       0.8      0.988        0.997 0.625           1.42
27 mu_0       0.9      1.03         1.01  0.396           1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.657     1.15e-27  6.03e-72      65.1
 2 mu         0.2      0.720     1.12e-15  7.20e-49      41.6
 3 mu         0.3      1.22      5.84e- 9  2.00e-35      46.7
 4 mu         0.4      1.46      8.55e- 5  6.12e-26      12.5
 5 mu         0.5      1.11      8.47e- 3  1.23e-18      34.2
 6 mu         0.6      0.956     1.69e- 2  9.86e-13      10.9
 7 mu         0.7      1.34      3.22e- 1  1.81e-14      24.6
 8 mu         0.8      1.28      9.36e- 2  2.94e-22      10.7
 9 mu         0.9      1.00      1.14e- 5  6.81e-40      10.2
10 mu_1       0.1      0.890     7.95e-27  5.88e-71      87.6
11 mu_1       0.2      0.652     3.85e-15  3.51e-48      28.0
12 mu_1       0.3      1.29      1.28e- 8  6.49e-35      45.5
13 mu_1       0.4      1.43      1.48e- 4  1.49e-25      14.5
14 mu_1       0.5      1.10      7.78e- 3  2.40e-18      32.9
15 mu_1       0.6      0.956     1.82e- 2  1.60e-12      10.9
16 mu_1       0.7      1.36      3.25e- 1  3.49e-15      25.7
17 mu_1       0.8      1.28      8.94e- 2  9.26e-23      11.2
18 mu_1       0.9      0.999     8.82e- 6  2.21e-40      10.5
19 mu_0       0.1      0.631     3.91e-28  1.70e-73      62.6
20 mu_0       0.2      0.737     4.31e-16  2.28e-50      45.0
21 mu_0       0.3      1.20      2.85e- 9  7.23e-37      47.2
22 mu_0       0.4      1.47      4.36e- 5  2.58e-27      13.8
23 mu_0       0.5      1.12      6.19e- 3  6.24e-20      35.5
24 mu_0       0.6      0.955     1.57e- 2  3.96e-14      11.0
25 mu_0       0.7      1.30      2.04e- 1  5.23e-14      22.0
26 mu_0       0.8      1.32      9.41e- 2  1.04e-21      11.4
27 mu_0       0.9      1.01      3.61e- 5  4.82e-39      11.2
[1] "Total run time was 510.83 seconds"
