
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7337"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70 
  2   6   1   6   2   3   2   1   1   1   1   3   2   1   1   1   1   4   3   1 
 71  72  73  74  75  76  77  80  81  82  83  84  85  86  87  88  90  93  95  96 
  4   4   1   2   3   3   3   3   2   2   1   2   2   3   1   1   3   1   1   6 
 97  98  99 100 
  2   3   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03177 0.34672 0.61867 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4399 2938 
[1] "treatment indicator table: "

   0    1 
2862 4475 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3754
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3583
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 399.994 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.436 0.0995
 2 mu         0.1   0.2 0.486 0.110 
 3 mu         0.1   0.3 0.528 0.108 
 4 mu         0.1   0.4 0.565 0.0802
 5 mu         0.1   0.5 0.585 0.0842
 6 mu         0.2   0.1 0.379 0.0847
 7 mu         0.2   0.2 0.428 0.0860
 8 mu         0.2   0.3 0.479 0.0803
 9 mu         0.2   0.4 0.515 0.0547
10 mu         0.2   0.5 0.534 0.0542
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.791 0.0000138      3.73
 2 mu         0.2      0.970        0.947 0.0998         2.04
 3 mu         0.3      0.984        0.991 0.0629         1.81
 4 mu         0.4      0.994        0.987 0.585          1.80
 5 mu         0.5      1.00         1.01  0.610          1.38
 6 mu         0.6      1.02         0.995 0.711          1.52
 7 mu         0.7      0.986        0.960 0.544          1.52
 8 mu         0.8      1.00         0.978 0.588          1.45
 9 mu         0.9      1.02         0.980 0.298          2.01
10 mu_1       0.1      1.00         0.830 0.0000362      3.01
11 mu_1       0.2      0.969        0.939 0.143          2.18
12 mu_1       0.3      0.986        0.999 0.0674         1.77
13 mu_1       0.4      0.995        0.989 0.577          1.82
14 mu_1       0.5      1.00         1.02  0.606          1.37
15 mu_1       0.6      1.02         0.995 0.695          1.53
16 mu_1       0.7      0.984        0.961 0.552          1.52
17 mu_1       0.8      1.00         0.980 0.584          1.46
18 mu_1       0.9      1.02         0.969 0.285          2.00
19 mu_0       0.1      1.02         0.792 0.0000113      3.81
20 mu_0       0.2      0.970        0.941 0.0888         2.05
21 mu_0       0.3      0.984        0.987 0.0609         1.83
22 mu_0       0.4      0.994        0.987 0.569          1.78
23 mu_0       0.5      1.00         1.01  0.610          1.39
24 mu_0       0.6      1.02         0.995 0.724          1.51
25 mu_0       0.7      0.990        0.974 0.526          1.53
26 mu_0       0.8      0.995        0.982 0.600          1.40
27 mu_0       0.9      1.03         1.00  0.412          2.04
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.142     5.29e-25  3.23e-78     11.6 
 2 mu         0.2      0.949     6.24e-13  8.77e-52     35.6 
 3 mu         0.3      0.471     4.66e- 7  1.62e-36     12.8 
 4 mu         0.4      1.09      9.43e- 4  7.25e-26     10.5 
 5 mu         0.5      0.982     4.31e- 2  8.53e-18      7.82
 6 mu         0.6      0.851     2.13e- 1  3.01e-15      9.55
 7 mu         0.7      1.22      4.19e- 2  4.89e-24     10.3 
 8 mu         0.8      1.13      1.89e- 2  4.42e-37     10.0 
 9 mu         0.9      1.21      1.48e- 7  3.05e-60     18.3 
10 mu_1       0.1      0.239     3.67e-24  3.00e-77     18.9 
11 mu_1       0.2      0.898     1.95e-12  4.07e-51     28.9 
12 mu_1       0.3      0.483     9.82e- 7  5.00e-36      9.66
13 mu_1       0.4      1.14      1.11e- 3  1.68e-25     11.1 
14 mu_1       0.5      0.951     5.84e- 2  1.58e-17      7.36
15 mu_1       0.6      0.870     1.73e- 1  9.23e-16     10.4 
16 mu_1       0.7      1.22      4.33e- 2  1.28e-24      9.59
17 mu_1       0.8      1.14      1.87e- 2  1.02e-37     10.3 
18 mu_1       0.9      1.21      1.09e- 7  6.22e-61     18.6 
19 mu_0       0.1      0.131     1.81e-25  2.62e-79     10.8 
20 mu_0       0.2      0.962     2.93e-13  8.00e-53     37.3 
21 mu_0       0.3      0.466     2.44e- 7  1.69e-37     14.2 
22 mu_0       0.4      1.06      5.22e- 4  8.81e-27     10.2 
23 mu_0       0.5      1.01      2.78e- 2  1.24e-18      8.28
24 mu_0       0.6      0.823     1.62e- 1  6.15e-15      8.27
25 mu_0       0.7      1.21      3.06e- 2  1.33e-23     11.9 
26 mu_0       0.8      1.12      1.61e- 2  1.81e-36      8.89
27 mu_0       0.9      1.23      4.94e- 7  2.49e-59     16.1 
[1] "Total run time was 403.04 seconds"
