
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7715"
[1] "cluster size dist'n: "

 50  51  52  53  54  58  59  60  61  62  64  66  67  68  69  70  71  72  73  74 
  1   1   3   3   1   1   1   3   5   2   3   1   1   2   4   3   2   3   2   2 
 75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92  94  95  96 
  3   1   2   4   2   1   2   4   3   1   2   2   3   3   1   1   1   3   6   2 
 97  99 100 
  3   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01811 0.30178 0.56588 0.94104 6.00000 
[1] "event indicator table: "

   0    1 
4502 3213 
[1] "treatment indicator table: "

   0    1 
3086 4629 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3850
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3865
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 377.852 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.582 0.191 
 2 mu         0.1   0.2 0.661 0.231 
 3 mu         0.1   0.3 0.741 0.274 
 4 mu         0.1   0.4 0.795 0.306 
 5 mu         0.1   0.5 0.835 0.327 
 6 mu         0.2   0.1 0.389 0.0565
 7 mu         0.2   0.2 0.457 0.0501
 8 mu         0.2   0.3 0.518 0.0476
 9 mu         0.2   0.4 0.561 0.0469
10 mu         0.2   0.5 0.589 0.0481
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.33         0.497  1.80e-10     60.2 
 2 mu         0.2      0.973        0.934  2.83e- 4      2.98
 3 mu         0.3      0.942        0.930  8.53e- 2      1.81
 4 mu         0.4      0.972        0.958  4.75e- 1      1.51
 5 mu         0.5      0.963        0.928  6.23e- 1      1.36
 6 mu         0.6      0.966        0.965  6.09e- 1      1.47
 7 mu         0.7      1.03         0.993  5.45e- 1      1.73
 8 mu         0.8      1.05         1.05   5.79e- 1      1.62
 9 mu         0.9      1.04         1.01   2.36e- 1      2.54
10 mu_1       0.1      1.16         0.602  6.91e-10     35.4 
11 mu_1       0.2      0.967        0.924  5.51e- 4      2.68
12 mu_1       0.3      0.942        0.915  1.14e- 1      1.74
13 mu_1       0.4      0.975        0.970  5.04e- 1      1.50
14 mu_1       0.5      0.963        0.930  6.22e- 1      1.39
15 mu_1       0.6      0.967        0.959  6.05e- 1      1.44
16 mu_1       0.7      1.03         0.991  5.46e- 1      1.72
17 mu_1       0.8      1.05         1.06   5.75e- 1      1.63
18 mu_1       0.9      1.04         1.02   2.28e- 1      2.57
19 mu_0       0.1      1.35         0.486  1.23e-10     62.9 
20 mu_0       0.2      0.974        0.941  2.17e- 4      3.12
21 mu_0       0.3      0.942        0.917  7.32e- 2      1.84
22 mu_0       0.4      0.971        0.969  4.55e- 1      1.52
23 mu_0       0.5      0.962        0.931  6.23e- 1      1.35
24 mu_0       0.6      0.965        0.962  5.89e- 1      1.51
25 mu_0       0.7      1.02         1.01   5.21e- 1      1.76
26 mu_0       0.8      1.06         1.04   5.96e- 1      1.60
27 mu_0       0.9      1.03         0.999  2.84e- 1      2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.774     3.66e-22  9.58e-84     46.8 
 2 mu         0.2      2.68      2.14e-11  9.36e-56     88.2 
 3 mu         0.3      1.05      8.62e- 6  1.50e-39     15.2 
 4 mu         0.4      1.35      1.00e- 2  3.30e-28     18.3 
 5 mu         0.5      1.17      1.41e- 1  1.42e-19      8.90
 6 mu         0.6      1.17      1.27e- 1  2.79e-15     10.4 
 7 mu         0.7      1.06      7.54e- 2  5.79e-24     24.9 
 8 mu         0.8      1.06      1.80e- 3  1.04e-36     10.3 
 9 mu         0.9      1.79      4.79e-10  3.57e-59     32.9 
10 mu_1       0.1      1.24      2.18e-21  9.00e-83     71.9 
11 mu_1       0.2      2.40      6.46e-11  4.40e-55     69.3 
12 mu_1       0.3      1.05      1.75e- 5  4.70e-39     15.0 
13 mu_1       0.4      1.35      1.52e- 2  7.75e-28     16.6 
14 mu_1       0.5      1.16      1.57e- 1  2.67e-19      8.98
15 mu_1       0.6      1.18      1.02e- 1  7.16e-16     10.8 
16 mu_1       0.7      1.04      5.91e- 2  1.27e-24     24.3 
17 mu_1       0.8      1.06      1.35e- 3  1.99e-37     10.5 
18 mu_1       0.9      1.79      3.22e-10  6.10e-60     32.5 
19 mu_0       0.1      0.722     1.65e-22  6.38e-85     44.0 
20 mu_0       0.2      2.74      1.06e-11  7.02e-57     93.3 
21 mu_0       0.3      1.05      4.83e- 6  1.28e-40     17.6 
22 mu_0       0.4      1.36      6.58e- 3  3.30e-29     19.5 
23 mu_0       0.5      1.18      1.00e- 1  1.71e-20      9.35
24 mu_0       0.6      1.17      1.41e- 1  5.91e-15      9.96
25 mu_0       0.7      1.08      8.77e- 2  1.63e-23     26.2 
26 mu_0       0.8      1.04      2.67e- 3  4.39e-36      9.65
27 mu_0       0.9      1.73      1.89e- 9  3.02e-58     36.5 
[1] "Total run time was 381.206 seconds"
