
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7431"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  63  64  65  66  67  68  69  70  71 
  2   3   2   2   4   3   2   3   2   3   1   3   1   1   2   4   3   2   1   2 
 73  74  75  76  78  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  4   1   2   1   1   1   7   1   1   2   5   3   2   1   4   1   2   1   2   2 
 96  97  98  99 100 
  2   1   2   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03432 0.36322 0.61460 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4537 2894 
[1] "treatment indicator table: "

   0    1 
2630 4801 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3709
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3722
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 370.626 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.392 0.104 
 2 mu         0.1   0.2 0.437 0.0982
 3 mu         0.1   0.3 0.440 0.0862
 4 mu         0.1   0.4 0.477 0.0945
 5 mu         0.1   0.5 0.534 0.108 
 6 mu         0.2   0.1 0.400 0.0964
 7 mu         0.2   0.2 0.448 0.0837
 8 mu         0.2   0.3 0.458 0.0617
 9 mu         0.2   0.4 0.499 0.0698
10 mu         0.2   0.5 0.559 0.0826
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.765       0.0729  6.27e-23      8.69
 2 mu         0.2      0.850       0.593   9.74e-11      4.86
 3 mu         0.3      0.879       0.783   5.99e- 5      2.27
 4 mu         0.4      0.947       0.948   5.10e- 2      2.07
 5 mu         0.5      1.01        0.996   4.17e- 1      1.81
 6 mu         0.6      0.982       0.973   5.14e- 1      1.50
 7 mu         0.7      0.982       0.986   6.15e- 1      1.40
 8 mu         0.8      1.02        1.05    5.32e- 1      1.69
 9 mu         0.9      1.01        0.924   2.37e- 2      2.50
10 mu_1       0.1      0.810       0.131   3.08e-22      8.99
11 mu_1       0.2      0.852       0.670   2.40e-10      5.00
12 mu_1       0.3      0.883       0.767   9.94e- 5      2.39
13 mu_1       0.4      0.955       0.950   6.45e- 2      2.09
14 mu_1       0.5      1.01        0.993   4.33e- 1      1.78
15 mu_1       0.6      0.981       0.969   5.15e- 1      1.51
16 mu_1       0.7      0.983       0.981   6.09e- 1      1.41
17 mu_1       0.8      1.02        1.06    5.18e- 1      1.72
18 mu_1       0.9      1.01        0.934   2.14e- 2      2.55
19 mu_0       0.1      0.760       0.0676  3.55e-23      8.92
20 mu_0       0.2      0.849       0.575   6.17e-11      4.82
21 mu_0       0.3      0.877       0.787   4.29e- 5      2.22
22 mu_0       0.4      0.942       0.945   4.20e- 2      2.06
23 mu_0       0.5      1.01        1.00    4.02e- 1      1.83
24 mu_0       0.6      0.983       0.978   5.13e- 1      1.50
25 mu_0       0.7      0.979       0.985   6.27e- 1      1.37
26 mu_0       0.8      1.02        1.02    5.88e- 1      1.58
27 mu_0       0.9      0.996       0.973   4.49e- 2      2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      6.52      1.33e-28  4.50e-73    652.  
 2 mu         0.2      1.80      9.64e-16  6.78e-48    156.  
 3 mu         0.3      0.424     2.38e- 8  2.16e-33      9.21
 4 mu         0.4      1.08      2.76e- 4  2.62e-23     16.7 
 5 mu         0.5      1.21      6.29e- 2  1.05e-15     19.5 
 6 mu         0.6      1.45      1.93e- 1  3.90e-15     18.9 
 7 mu         0.7      1.37      2.71e- 1  2.45e-23     11.4 
 8 mu         0.8      1.49      7.44e- 2  2.93e-35     22.3 
 9 mu         0.9      4.56      2.44e- 6  4.03e-56    167.  
10 mu_1       0.1      8.05      8.82e-28  4.11e-72    805.  
11 mu_1       0.2      1.23      3.17e-15  3.10e-47     96.2 
12 mu_1       0.3      0.482     5.21e- 8  6.59e-33     11.2 
13 mu_1       0.4      1.10      4.47e- 4  6.00e-23     15.2 
14 mu_1       0.5      1.24      8.40e- 2  1.93e-15     21.4 
15 mu_1       0.6      1.45      2.39e- 1  8.02e-16     17.3 
16 mu_1       0.7      1.38      2.72e- 1  4.33e-24     11.7 
17 mu_1       0.8      1.48      6.70e- 2  4.52e-36     23.5 
18 mu_1       0.9      4.68      1.82e- 6  5.53e-57    172.  
19 mu_0       0.1      6.35      5.09e-29  4.30e-74    635.  
20 mu_0       0.2      1.94      3.88e-16  7.29e-49    171.  
21 mu_0       0.3      0.399     1.17e- 8  2.66e-34      8.36
22 mu_0       0.4      1.07      1.95e- 4  3.76e-24     17.7 
23 mu_0       0.5      1.19      4.16e- 2  1.81e-16     17.5 
24 mu_0       0.6      1.47      1.38e- 1  8.54e-15     21.3 
25 mu_0       0.7      1.33      2.52e- 1  7.17e-23     10.7 
26 mu_0       0.8      1.51      7.33e- 2  1.29e-34     17.9 
27 mu_0       0.9      3.48      7.97e- 6  3.53e-55    124.  
[1] "Total run time was 373.801 seconds"
