
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7561"
[1] "cluster size dist'n: "

50 51 52 53 55 56 57 58 59 60 61 62 63 64 65 66 67 69 70 71 72 73 74 75 76 77 
 3  1  2  1  1  2  1  1  1  2  1  5  1  1  2  2  2  1  5  2  7  3  3  4  2  1 
78 79 80 81 83 85 87 89 90 91 92 93 94 95 97 98 99 
 2  2  3  1  6  4  1  2  2  1  6  1  2  2  4  3  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01304 0.28390 0.56775 0.97266 8.00000 
[1] "event indicator table: "

   0    1 
4491 3070 
[1] "treatment indicator table: "

   0    1 
3040 4521 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3753
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3808
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 429.164 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.498 0.0691
 2 mu         0.1   0.2 0.644 0.0933
 3 mu         0.1   0.3 0.698 0.0959
 4 mu         0.1   0.4 0.718 0.0863
 5 mu         0.1   0.5 0.810 0.109 
 6 mu         0.2   0.1 0.396 0.0334
 7 mu         0.2   0.2 0.482 0.0352
 8 mu         0.2   0.3 0.545 0.0372
 9 mu         0.2   0.4 0.585 0.0335
10 mu         0.2   0.5 0.646 0.0407
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.19         0.845 0.000117       8.92
 2 mu         0.2      1.06         0.999 0.0883         2.74
 3 mu         0.3      0.982        0.954 0.413          2.19
 4 mu         0.4      0.994        0.976 0.470          1.62
 5 mu         0.5      1.01         0.971 0.538          1.66
 6 mu         0.6      0.982        0.960 0.570          1.49
 7 mu         0.7      1.01         1.01  0.618          1.47
 8 mu         0.8      1.05         1.05  0.648          1.63
 9 mu         0.9      0.974        0.938 0.225          2.10
10 mu_1       0.1      1.16         0.975 0.000317       7.68
11 mu_1       0.2      1.06         1.01  0.125          2.98
12 mu_1       0.3      0.977        0.955 0.388          1.95
13 mu_1       0.4      0.996        0.967 0.479          1.61
14 mu_1       0.5      1.01         0.966 0.542          1.64
15 mu_1       0.6      0.980        0.958 0.565          1.48
16 mu_1       0.7      1.02         1.01  0.604          1.47
17 mu_1       0.8      1.05         1.05  0.651          1.64
18 mu_1       0.9      0.973        0.942 0.225          2.10
19 mu_0       0.1      1.19         0.855 0.0000947      9.06
20 mu_0       0.2      1.07         0.997 0.0791         2.68
21 mu_0       0.3      0.985        0.951 0.424          2.29
22 mu_0       0.4      0.992        0.986 0.465          1.63
23 mu_0       0.5      1.01         0.970 0.534          1.68
24 mu_0       0.6      0.984        0.959 0.566          1.50
25 mu_0       0.7      1.00         1.01  0.593          1.47
26 mu_0       0.8      1.06         1.05  0.639          1.60
27 mu_0       0.9      0.986        0.950 0.227          2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.439     1.52e-25  3.63e-80     43.1 
 2 mu         0.2      0.643     1.57e-13  7.02e-54     18.4 
 3 mu         0.3      1.17      4.33e- 7  1.29e-38     16.7 
 4 mu         0.4      1.02      1.76e- 3  6.87e-28      8.14
 5 mu         0.5      1.08      4.45e- 2  1.12e-19      9.69
 6 mu         0.6      1.36      2.54e- 1  4.25e-13     10.3 
 7 mu         0.7      1.32      1.29e- 1  2.99e-19     18.5 
 8 mu         0.8      1.14      3.46e- 3  9.07e-31     15.0 
 9 mu         0.9      1.28      2.14e- 9  2.02e-51     25.3 
10 mu_1       0.1      0.449     9.55e-25  3.48e-79     43.1 
11 mu_1       0.2      0.722     4.51e-13  3.36e-53     20.0 
12 mu_1       0.3      1.16      9.26e- 7  4.11e-38     15.0 
13 mu_1       0.4      1.01      2.78e- 3  1.64e-27      8.61
14 mu_1       0.5      1.10      5.90e- 2  2.14e-19     10.1 
15 mu_1       0.6      1.36      2.26e- 1  6.78e-13      9.78
16 mu_1       0.7      1.32      1.08e- 1  9.30e-20     18.7 
17 mu_1       0.8      1.15      3.19e- 3  2.46e-31     15.3 
18 mu_1       0.9      1.27      1.50e- 9  4.89e-52     25.4 
19 mu_0       0.1      0.438     5.26e-26  1.76e-81     43.1 
20 mu_0       0.2      0.623     8.35e-14  3.82e-55     18.0 
21 mu_0       0.3      1.17      2.21e- 7  8.01e-40     17.4 
22 mu_0       0.4      1.02      1.09e- 3  4.98e-29      7.83
23 mu_0       0.5      1.06      3.19e- 2  9.72e-21     10.5 
24 mu_0       0.6      1.35      1.70e- 1  4.62e-14     11.0 
25 mu_0       0.7      1.33      9.70e- 2  7.81e-19     18.0 
26 mu_0       0.8      1.12      3.91e- 3  3.55e-30     14.1 
27 mu_0       0.9      1.29      7.95e- 9  1.58e-50     24.3 
[1] "Total run time was 438.729 seconds"
