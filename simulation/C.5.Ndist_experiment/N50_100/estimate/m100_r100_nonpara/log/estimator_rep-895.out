
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7301"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  64  65  66  67  68  70  71 
  2   2   1   4   1   8   1   3   3   1   1   2   4   2   4   2   1   1   3   1 
 73  74  75  76  77  79  80  81  82  83  84  85  86  87  88  89  92  93  94  95 
  2   2   1   3   3   3   3   2   5   2   2   3   2   1   3   2   4   2   2   1 
 97 100 
  4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03436 0.33421 0.59319 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4381 2920 
[1] "treatment indicator table: "

   0    1 
2723 4578 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3666
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3635
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 800.427 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.348 0.0811
 2 mu         0.1   0.2 0.492 0.115 
 3 mu         0.1   0.3 0.556 0.125 
 4 mu         0.1   0.4 0.649 0.163 
 5 mu         0.1   0.5 0.668 0.160 
 6 mu         0.2   0.1 0.295 0.0400
 7 mu         0.2   0.2 0.400 0.0520
 8 mu         0.2   0.3 0.447 0.0466
 9 mu         0.2   0.4 0.518 0.0833
10 mu         0.2   0.5 0.539 0.0715
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.14        0.0896 0.00000000524     18.5 
 2 mu         0.2      0.925       0.851  0.000745           3.44
 3 mu         0.3      1.02        0.980  0.108              2.25
 4 mu         0.4      1.02        0.986  0.554              1.95
 5 mu         0.5      1.01        0.973  0.717              1.70
 6 mu         0.6      1.01        1.01   0.628              1.64
 7 mu         0.7      0.989       1.00   0.577              1.31
 8 mu         0.8      0.981       0.988  0.609              1.38
 9 mu         0.9      1.05        0.993  0.0680             3.30
10 mu_1       0.1      1.00        0.159  0.0000000173      14.5 
11 mu_1       0.2      0.943       0.883  0.00146            3.32
12 mu_1       0.3      1.02        0.983  0.147              2.33
13 mu_1       0.4      1.02        1.00   0.591              1.88
14 mu_1       0.5      1.01        0.973  0.697              1.71
15 mu_1       0.6      1.01        1.01   0.635              1.63
16 mu_1       0.7      0.988       1.01   0.568              1.31
17 mu_1       0.8      0.983       0.991  0.611              1.38
18 mu_1       0.9      1.05        0.997  0.0634             3.40
19 mu_0       0.1      1.15        0.0806 0.00000000377     19.0 
20 mu_0       0.2      0.920       0.850  0.000568           3.47
21 mu_0       0.3      1.01        0.973  0.0912             2.22
22 mu_0       0.4      1.02        0.987  0.524              2.00
23 mu_0       0.5      1.01        0.975  0.724              1.69
24 mu_0       0.6      1.01        1.00   0.618              1.66
25 mu_0       0.7      0.991       0.992  0.575              1.33
26 mu_0       0.8      0.974       0.994  0.603              1.37
27 mu_0       0.9      1.04        1.01   0.110              2.45
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00346     6.24e-25  5.94e-67     0.286
 2 mu         0.2    0.466       3.67e-13  2.49e-43    26.3  
 3 mu         0.3    0.822       1.63e- 7  9.15e-30    21.5  
 4 mu         0.4    0.930       9.95e- 4  2.26e-20    11.9  
 5 mu         0.5    1.31        7.57e- 2  2.48e-13    14.1  
 6 mu         0.6    1.35        2.83e- 1  1.19e- 8    17.5  
 7 mu         0.7    1.09        2.91e- 1  3.58e-15     6.10 
 8 mu         0.8    1.36        2.94e- 2  3.63e-25    24.1  
 9 mu         0.9    1.42        2.71e- 7  2.63e-43    33.5  
10 mu_1       0.1    0.00846     3.99e-24  5.34e-66     0.689
11 mu_1       0.2    0.582       1.04e-12  1.12e-42    31.7  
12 mu_1       0.3    0.793       3.54e- 7  2.74e-29    19.5  
13 mu_1       0.4    0.959       1.52e- 3  5.08e-20    12.5  
14 mu_1       0.5    1.34        8.88e- 2  4.46e-13    14.1  
15 mu_1       0.6    1.32        3.33e- 1  5.09e- 9    17.4  
16 mu_1       0.7    1.11        2.43e- 1  1.31e-15     6.44 
17 mu_1       0.8    1.35        2.44e- 2  1.16e-25    24.3  
18 mu_1       0.9    1.45        1.92e- 7  7.47e-44    33.5  
19 mu_0       0.1    0.00290     2.27e-25  6.68e-68     0.241
20 mu_0       0.2    0.437       1.74e-13  3.15e-44    24.9  
21 mu_0       0.3    0.834       7.83e- 8  1.32e-30    23.3  
22 mu_0       0.4    0.911       6.47e- 4  3.81e-21    13.1  
23 mu_0       0.5    1.28        6.62e- 2  3.47e-14    14.1  
24 mu_0       0.6    1.38        2.46e- 1  1.08e- 9    17.7  
25 mu_0       0.7    1.06        3.93e- 1  8.88e-15     5.29 
26 mu_0       0.8    1.42        3.13e- 2  1.35e-24    23.3  
27 mu_0       0.9    1.17        9.83e- 7  1.95e-42    33.9  
[1] "Total run time was 804.616 seconds"
