
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7643"
[1] "cluster size dist'n: "

 51  52  53  55  56  57  58  59  60  61  62  63  65  66  69  70  71  75  76  77 
  2   2   3   1   1   2   2   4   1   5   1   2   1   2   3   3   5   3   4   2 
 78  79  80  81  82  83  84  85  88  89  90  91  92  93  94  95  96  97  98  99 
  5   3   1   1   2   2   4   4   2   4   3   2   4   2   2   1   1   4   1   1 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03005 0.34912 0.61364 1.00000 6.60841 
[1] "event indicator table: "

   0    1 
4498 3145 
[1] "treatment indicator table: "

   0    1 
2847 4796 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3774
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3869
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 451.919 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.348 0.0588
 2 mu         0.1   0.2 0.501 0.0882
 3 mu         0.1   0.3 0.557 0.0919
 4 mu         0.1   0.4 0.633 0.110 
 5 mu         0.1   0.5 0.646 0.105 
 6 mu         0.2   0.1 0.318 0.0225
 7 mu         0.2   0.2 0.462 0.0570
 8 mu         0.2   0.3 0.523 0.0535
 9 mu         0.2   0.4 0.594 0.0698
10 mu         0.2   0.5 0.610 0.0573
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.02         0.420 0.00000212     10.3 
 2 mu         0.2      1.06         0.968 0.0737          3.78
 3 mu         0.3      1.07         1.00  0.340           2.40
 4 mu         0.4      1.02         0.986 0.430           2.16
 5 mu         0.5      0.994        0.990 0.555           1.63
 6 mu         0.6      1.00         0.992 0.535           1.51
 7 mu         0.7      0.987        1.00  0.543           1.62
 8 mu         0.8      1.00         0.999 0.484           1.58
 9 mu         0.9      0.947        0.929 0.176           1.72
10 mu_1       0.1      0.997        0.590 0.00000663      9.20
11 mu_1       0.2      1.07         0.989 0.115           4.24
12 mu_1       0.3      1.07         0.992 0.334           2.18
13 mu_1       0.4      1.02         0.983 0.432           2.05
14 mu_1       0.5      0.993        0.990 0.562           1.61
15 mu_1       0.6      1.00         0.989 0.544           1.48
16 mu_1       0.7      0.988        0.997 0.545           1.63
17 mu_1       0.8      1.00         1.00  0.484           1.58
18 mu_1       0.9      0.948        0.930 0.175           1.73
19 mu_0       0.1      1.02         0.400 0.00000162     10.4 
20 mu_0       0.2      1.06         0.969 0.0632          3.82
21 mu_0       0.3      1.07         1.00  0.343           2.56
22 mu_0       0.4      1.02         1.01  0.429           2.22
23 mu_0       0.5      0.994        0.989 0.548           1.66
24 mu_0       0.6      1.00         0.991 0.522           1.55
25 mu_0       0.7      0.985        1.01  0.539           1.61
26 mu_0       0.8      1.01         1.00  0.485           1.57
27 mu_0       0.9      0.940        0.910 0.187           1.60
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.434     1.04e-26  5.17e-77     30.2 
 2 mu         0.2      2.14      3.85e-14  3.95e-51    156.  
 3 mu         0.3      1.26      1.63e- 7  3.70e-36     29.2 
 4 mu         0.4      0.858     1.28e- 3  1.09e-25     11.8 
 5 mu         0.5      0.858     4.12e- 2  9.82e-18      7.04
 6 mu         0.6      1.24      1.01e- 1  1.99e-11     13.0 
 7 mu         0.7      0.956     1.62e- 1  8.08e-17      9.12
 8 mu         0.8      1.10      1.85e- 2  1.64e-27     10.7 
 9 mu         0.9      1.65      1.21e- 7  1.48e-47     19.8 
10 mu_1       0.1      0.672     6.60e-26  4.84e-76     40.9 
11 mu_1       0.2      2.11      1.19e-13  1.85e-50    154.  
12 mu_1       0.3      1.19      3.35e- 7  1.15e-35     20.6 
13 mu_1       0.4      0.819     1.27e- 3  2.54e-25     10.9 
14 mu_1       0.5      0.901     3.05e- 2  1.84e-17      6.73
15 mu_1       0.6      1.23      1.08e- 1  1.25e-11     12.9 
16 mu_1       0.7      0.954     1.36e- 1  1.56e-17      9.84
17 mu_1       0.8      1.10      1.48e- 2  5.49e-28     10.1 
18 mu_1       0.9      1.65      8.54e- 8  4.42e-48     20.0 
19 mu_0       0.1      0.408     4.17e-27  3.71e-78     29.0 
20 mu_0       0.2      2.14      1.84e-14  3.18e-52    157.  
21 mu_0       0.3      1.29      8.90e- 8  3.41e-37     33.5 
22 mu_0       0.4      0.884     7.94e- 4  1.17e-26     12.3 
23 mu_0       0.5      0.816     4.01e- 2  1.27e-18      7.35
24 mu_0       0.6      1.25      6.92e- 2  3.21e-12     13.0 
25 mu_0       0.7      0.959     2.06e- 1  2.33e-16      7.43
26 mu_0       0.8      1.11      3.13e- 2  5.99e-27     13.1 
27 mu_0       0.9      1.67      4.39e- 7  1.09e-46     21.6 
[1] "Total run time was 455.575 seconds"
