
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7394"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  1   1   1   2   4   5   3   3   2   1   1   1   3   1   1   3   3   1   2   3 
 70  71  72  75  76  77  78  80  81  82  83  84  85  86  87  88  90  91  92  93 
  2   6   1   3   3   1   2   1   1   3   1   4   1   3   3   3   4   2   1   1 
 94  95  97  98 100 
  5   3   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03429 0.36372 0.62194 1.00000 5.74287 
[1] "event indicator table: "

   0    1 
4505 2889 
[1] "treatment indicator table: "

   0    1 
2611 4783 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3657
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3737
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 358.975 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.301 0.0862
 2 mu         0.1   0.2 0.404 0.0769
 3 mu         0.1   0.3 0.446 0.0826
 4 mu         0.1   0.4 0.452 0.0956
 5 mu         0.1   0.5 0.502 0.0914
 6 mu         0.2   0.1 0.346 0.0509
 7 mu         0.2   0.2 0.435 0.0506
 8 mu         0.2   0.3 0.482 0.0513
 9 mu         0.2   0.4 0.511 0.0533
10 mu         0.2   0.5 0.553 0.0501
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.855        0.260 0.00000291     11.0 
 2 mu         0.2      0.964        0.883 0.0662          4.46
 3 mu         0.3      0.957        0.913 0.175           2.13
 4 mu         0.4      0.987        0.985 0.368           1.90
 5 mu         0.5      0.989        0.969 0.571           1.48
 6 mu         0.6      0.980        0.976 0.641           1.44
 7 mu         0.7      1.01         1.01  0.656           1.44
 8 mu         0.8      1.01         1.01  0.609           1.41
 9 mu         0.9      0.979        0.934 0.384           1.97
10 mu_1       0.1      0.874        0.387 0.00000814      8.88
11 mu_1       0.2      0.958        0.877 0.0795          4.70
12 mu_1       0.3      0.963        0.919 0.201           2.18
13 mu_1       0.4      0.988        0.994 0.367           1.85
14 mu_1       0.5      0.987        0.978 0.580           1.48
15 mu_1       0.6      0.981        0.980 0.629           1.43
16 mu_1       0.7      1.02         1.01  0.644           1.44
17 mu_1       0.8      1.01         1.01  0.608           1.41
18 mu_1       0.9      0.979        0.940 0.387           1.99
19 mu_0       0.1      0.853        0.247 0.00000233     11.2 
20 mu_0       0.2      0.966        0.880 0.0589          4.43
21 mu_0       0.3      0.954        0.908 0.156           2.11
22 mu_0       0.4      0.987        0.974 0.369           1.93
23 mu_0       0.5      0.991        0.967 0.556           1.48
24 mu_0       0.6      0.977        0.977 0.659           1.46
25 mu_0       0.7      1.01         0.996 0.666           1.45
26 mu_0       0.8      1.01         1.02  0.612           1.42
27 mu_0       0.9      0.978        0.965 0.366           1.74
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.89      2.99e-28  4.21e-81    388.  
 2 mu         0.2      0.952     1.36e-15  9.15e-55     31.7 
 3 mu         0.3      1.02      1.73e- 8  1.92e-39     34.3 
 4 mu         0.4      0.559     2.53e- 4  1.19e-28      6.31
 5 mu         0.5      1.11      2.62e- 2  2.33e-20      9.57
 6 mu         0.6      1.17      1.77e- 1  7.25e-20      6.15
 7 mu         0.7      0.967     1.42e- 1  7.12e-30      6.68
 8 mu         0.8      1.35      4.43e- 2  2.22e-44     23.9 
 9 mu         0.9      1.52      1.29e- 6  1.05e-69     19.7 
10 mu_1       0.1      4.42      2.07e-27  4.07e-80    440.  
11 mu_1       0.2      0.949     4.42e-15  4.42e-54     18.2 
12 mu_1       0.3      0.951     3.58e- 8  6.19e-39     32.5 
13 mu_1       0.4      0.577     3.97e- 4  2.89e-28      6.49
14 mu_1       0.5      1.15      3.20e- 2  4.51e-20      9.79
15 mu_1       0.6      1.16      1.99e- 1  1.37e-20      6.49
16 mu_1       0.7      0.965     1.61e- 1  1.15e-30      7.02
17 mu_1       0.8      1.37      3.49e- 2  3.15e-45     24.3 
18 mu_1       0.9      1.50      8.89e- 7  1.32e-70     20.1 
19 mu_0       0.1      3.83      1.06e-28  1.54e-82    382.  
20 mu_0       0.2      0.952     5.97e-16  3.77e-56     35.1 
21 mu_0       0.3      1.05      9.50e- 9  9.04e-41     35.0 
22 mu_0       0.4      0.546     1.60e- 4  6.56e-30      6.19
23 mu_0       0.5      1.08      1.72e- 2  1.54e-21      9.36
24 mu_0       0.6      1.19      1.55e- 1  1.61e-19      6.37
25 mu_0       0.7      0.971     1.32e- 1  2.10e-29      6.96
26 mu_0       0.8      1.29      4.48e- 2  9.84e-44     22.5 
27 mu_0       0.9      1.61      4.87e- 6  9.29e-69     22.0 
[1] "Total run time was 362.194 seconds"
