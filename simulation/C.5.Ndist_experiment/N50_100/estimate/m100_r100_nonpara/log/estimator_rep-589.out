
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7564"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  59  60  61  63  64  65  66  67  68  69  70  71  75 
  1   1   4   3   1   1   3   2   5   3   3   1   1   3   3   4   2   2   2   3 
 76  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92  95  96  97  98 
  1   3   3   2   2   2   2   2   7   1   1   3   1   2   1   3   5   1   1   3 
 99 100 
  4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04855 0.37178 0.63742 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4526 3038 
[1] "treatment indicator table: "

   0    1 
2633 4931 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3725
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3839
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 419.461 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.330 0.112 
 2 mu         0.1   0.2 0.423 0.135 
 3 mu         0.1   0.3 0.449 0.151 
 4 mu         0.1   0.4 0.525 0.171 
 5 mu         0.1   0.5 0.534 0.173 
 6 mu         0.2   0.1 0.338 0.0636
 7 mu         0.2   0.2 0.422 0.0651
 8 mu         0.2   0.3 0.464 0.0738
 9 mu         0.2   0.4 0.534 0.0840
10 mu         0.2   0.5 0.549 0.0728
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.809       0.0143 0.0000000103      22.4 
 2 mu         0.2      0.904       0.762  0.00772            3.46
 3 mu         0.3      1.04        1.01   0.224              3.18
 4 mu         0.4      1.03        0.993  0.370              2.22
 5 mu         0.5      0.993       0.943  0.469              1.54
 6 mu         0.6      1.01        0.992  0.637              1.63
 7 mu         0.7      1.02        1.02   0.673              1.57
 8 mu         0.8      0.983       0.987  0.518              1.40
 9 mu         0.9      0.996       0.999  0.197              1.81
10 mu_1       0.1      0.833       0.0282 0.0000000329      16.1 
11 mu_1       0.2      0.915       0.774  0.0118             3.63
12 mu_1       0.3      1.04        1.05   0.238              2.91
13 mu_1       0.4      1.02        0.982  0.396              2.13
14 mu_1       0.5      0.993       0.946  0.466              1.56
15 mu_1       0.6      1.01        0.984  0.649              1.60
16 mu_1       0.7      1.02        1.02   0.676              1.59
17 mu_1       0.8      0.982       0.977  0.513              1.41
18 mu_1       0.9      0.998       0.994  0.196              1.84
19 mu_0       0.1      0.807       0.0127 0.00000000778     23.1 
20 mu_0       0.2      0.902       0.747  0.00670            3.54
21 mu_0       0.3      1.03        0.995  0.210              3.29
22 mu_0       0.4      1.03        0.979  0.353              2.29
23 mu_0       0.5      0.993       0.947  0.473              1.55
24 mu_0       0.6      1.01        0.987  0.619              1.67
25 mu_0       0.7      1.01        1.02   0.663              1.54
26 mu_0       0.8      0.987       0.999  0.536              1.44
27 mu_0       0.9      0.979       0.978  0.208              1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000203     1.01e-31  5.51e-83    0.0183
 2 mu         0.2   0.185        1.08e-17  5.38e-55    5.84  
 3 mu         0.3   1.51         6.39e-10  8.62e-39   61.2   
 4 mu         0.4   0.942        3.06e- 5  1.90e-27   14.9   
 5 mu         0.5   0.793        2.00e- 2  8.17e-19   10.2   
 6 mu         0.6   0.913        7.14e- 2  5.94e-12    6.56  
 7 mu         0.7   1.00         1.83e- 1  1.90e-14   10.2   
 8 mu         0.8   1.22         1.19e- 1  1.18e-24    7.74  
 9 mu         0.9   1.69         2.94e- 6  9.61e-44   51.8   
10 mu_1       0.1   0.000503     6.32e-31  5.18e-82    0.0440
11 mu_1       0.2   0.260        3.69e-17  2.53e-54    8.10  
12 mu_1       0.3   1.55         1.46e- 9  2.70e-38   62.3   
13 mu_1       0.4   0.910        5.08e- 5  4.46e-27   15.3   
14 mu_1       0.5   0.795        2.43e- 2  1.54e-18    9.68  
15 mu_1       0.6   0.923        6.23e- 2  9.31e-12    6.59  
16 mu_1       0.7   1.00         2.02e- 1  6.52e-15    9.95  
17 mu_1       0.8   1.24         1.08e- 1  4.19e-25    8.32  
18 mu_1       0.9   1.69         2.23e- 6  3.03e-44   54.1   
19 mu_0       0.1   0.000170     4.17e-32  3.67e-84    0.0155
20 mu_0       0.2   0.166        4.71e-18  4.03e-56    5.54  
21 mu_0       0.3   1.49         2.89e-10  7.39e-40   60.8   
22 mu_0       0.4   0.963        1.77e- 5  1.90e-28   14.7   
23 mu_0       0.5   0.792        1.26e- 2  9.81e-20   10.6   
24 mu_0       0.6   0.897        6.09e- 2  8.91e-13    6.51  
25 mu_0       0.7   1.01         1.46e- 1  4.82e-14   10.7   
26 mu_0       0.8   1.11         1.97e- 1  4.22e-24    5.58  
27 mu_0       0.9   1.67         9.26e- 6  6.88e-43   31.1   
[1] "Total run time was 422.826 seconds"
