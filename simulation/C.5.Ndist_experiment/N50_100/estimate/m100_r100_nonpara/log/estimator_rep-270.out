
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7589"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  59  60  61  62  64  66  67  68  69  71  72  73  74 
  2   2   3   1   4   1   1   1   2   1   3   1   3   4   4   2   5   2   1   4 
 75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92  93  95  96 
  1   5   5   1   2   1   2   3   1   1   2   3   2   5   4   1   1   1   1   2 
 97  98  99 100 
  3   1   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03741 0.34973 0.60886 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4490 3099 
[1] "treatment indicator table: "

   0    1 
2933 4656 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3748
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3841
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 392.8 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.404 0.0702
 2 mu         0.1   0.2 0.438 0.0736
 3 mu         0.1   0.3 0.497 0.105 
 4 mu         0.1   0.4 0.538 0.101 
 5 mu         0.1   0.5 0.541 0.115 
 6 mu         0.2   0.1 0.385 0.0596
 7 mu         0.2   0.2 0.436 0.0495
 8 mu         0.2   0.3 0.509 0.0647
 9 mu         0.2   0.4 0.542 0.0614
10 mu         0.2   0.5 0.547 0.0617
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.07         0.861 0.0000000266      4.87
 2 mu         0.2      0.965        0.912 0.0209            2.59
 3 mu         0.3      0.952        0.916 0.384             2.24
 4 mu         0.4      0.987        0.983 0.595             1.55
 5 mu         0.5      1.03         1.02  0.604             1.64
 6 mu         0.6      1.02         1.00  0.595             1.89
 7 mu         0.7      0.996        0.976 0.505             1.71
 8 mu         0.8      1.02         1.01  0.458             1.56
 9 mu         0.9      1.02         0.983 0.396             2.03
10 mu_1       0.1      1.04         0.849 0.0000000835      5.06
11 mu_1       0.2      0.964        0.913 0.0329            2.77
12 mu_1       0.3      0.952        0.931 0.373             2.07
13 mu_1       0.4      0.992        0.989 0.578             1.57
14 mu_1       0.5      1.03         1.01  0.598             1.64
15 mu_1       0.6      1.02         0.995 0.609             1.93
16 mu_1       0.7      0.997        0.981 0.508             1.71
17 mu_1       0.8      1.03         1.02  0.452             1.56
18 mu_1       0.9      1.02         0.982 0.396             2.05
19 mu_0       0.1      1.07         0.832 0.0000000203      4.85
20 mu_0       0.2      0.965        0.908 0.0178            2.55
21 mu_0       0.3      0.951        0.917 0.379             2.32
22 mu_0       0.4      0.984        0.969 0.607             1.53
23 mu_0       0.5      1.03         1.02  0.609             1.64
24 mu_0       0.6      1.02         1.01  0.574             1.83
25 mu_0       0.7      0.995        0.965 0.499             1.72
26 mu_0       0.8      1.02         1.02  0.481             1.53
27 mu_0       0.9      1.02         0.984 0.396             2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.180     7.78e-25  3.42e-82     16.6 
 2 mu         0.2      1.15      1.45e-12  4.70e-55     35.1 
 3 mu         0.3      1.66      5.53e- 6  2.55e-39     59.5 
 4 mu         0.4      1.11      1.20e- 2  2.76e-28     19.4 
 5 mu         0.5      1.24      5.56e- 2  7.31e-20     13.2 
 6 mu         0.6      1.04      9.24e- 2  2.22e-15      7.35
 7 mu         0.7      0.627     4.19e- 2  6.15e-24      4.42
 8 mu         0.8      1.25      1.93e- 3  1.65e-36     18.2 
 9 mu         0.9      1.16      4.92e-10  1.14e-58     13.9 
10 mu_1       0.1      0.289     4.76e-24  3.24e-81     25.8 
11 mu_1       0.2      1.24      4.20e-12  2.23e-54     35.8 
12 mu_1       0.3      1.61      1.03e- 5  8.06e-39     57.9 
13 mu_1       0.4      1.11      1.77e- 2  6.55e-28     19.7 
14 mu_1       0.5      1.25      6.86e- 2  1.39e-19     13.4 
15 mu_1       0.6      1.01      8.72e- 2  5.77e-16      7.42
16 mu_1       0.7      0.626     3.16e- 2  1.37e-24      4.34
17 mu_1       0.8      1.27      1.45e- 3  3.21e-37     18.6 
18 mu_1       0.9      1.16      3.34e-10  1.97e-59     14.3 
19 mu_0       0.1      0.168     3.42e-25  1.98e-83     15.5 
20 mu_0       0.2      1.12      7.66e-13  3.06e-56     37.1 
21 mu_0       0.3      1.68      3.48e- 6  1.90e-40     60.1 
22 mu_0       0.4      1.12      8.15e- 3  2.40e-29     19.2 
23 mu_0       0.5      1.23      4.74e- 2  7.62e-21     13.0 
24 mu_0       0.6      1.09      1.07e- 1  4.70e-15      7.47
25 mu_0       0.7      0.628     5.20e- 2  1.73e-23      4.62
26 mu_0       0.8      1.18      1.65e- 3  6.98e-36     16.6 
27 mu_0       0.9      1.19      1.91e- 9  9.60e-58     13.2 
[1] "Total run time was 397.238 seconds"
