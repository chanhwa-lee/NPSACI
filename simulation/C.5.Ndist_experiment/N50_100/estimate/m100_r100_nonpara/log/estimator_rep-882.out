
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7524"
[1] "cluster size dist'n: "

 50  51  52  55  56  57  58  59  60  61  62  63  64  65  66  67  68  71  72  74 
  2   2   1   2   3   3   1   4   3   5   2   1   2   1   2   3   1   3   2   5 
 76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93  94  96  98 
  2   2   3   2   5   3   1   2   1   3   2   2   3   3   2   2   3   3   2   3 
 99 100 
  1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03773 0.34633 0.61740 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4355 3169 
[1] "treatment indicator table: "

   0    1 
2900 4624 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3669
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3855
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 424.32 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.364 0.0495
 2 mu         0.1   0.2 0.467 0.0639
 3 mu         0.1   0.3 0.551 0.0628
 4 mu         0.1   0.4 0.607 0.0656
 5 mu         0.1   0.5 0.647 0.0716
 6 mu         0.2   0.1 0.353 0.0394
 7 mu         0.2   0.2 0.433 0.0404
 8 mu         0.2   0.3 0.500 0.0369
 9 mu         0.2   0.4 0.541 0.0364
10 mu         0.2   0.5 0.567 0.0327
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.11         0.709 0.000000853      5.91
 2 mu         0.2      0.987        0.957 0.0309           2.47
 3 mu         0.3      0.981        0.967 0.385            2.07
 4 mu         0.4      1.00         0.965 0.567            1.82
 5 mu         0.5      0.985        0.962 0.602            1.51
 6 mu         0.6      0.987        0.968 0.583            1.51
 7 mu         0.7      0.988        0.968 0.513            1.74
 8 mu         0.8      1.04         1.02  0.557            1.68
 9 mu         0.9      1.05         0.978 0.292            2.20
10 mu_1       0.1      1.13         0.828 0.00000251       5.63
11 mu_1       0.2      0.980        1.01  0.0462           2.43
12 mu_1       0.3      0.986        0.950 0.400            1.96
13 mu_1       0.4      0.998        0.960 0.594            1.74
14 mu_1       0.5      0.986        0.972 0.602            1.55
15 mu_1       0.6      0.986        0.985 0.580            1.52
16 mu_1       0.7      0.989        0.972 0.517            1.74
17 mu_1       0.8      1.04         1.02  0.555            1.69
18 mu_1       0.9      1.05         0.981 0.287            2.22
19 mu_0       0.1      1.11         0.678 0.000000669      5.94
20 mu_0       0.2      0.989        0.943 0.0271           2.48
21 mu_0       0.3      0.980        0.962 0.362            2.12
22 mu_0       0.4      1.00         0.974 0.549            1.88
23 mu_0       0.5      0.984        0.974 0.603            1.46
24 mu_0       0.6      0.989        0.971 0.587            1.51
25 mu_0       0.7      0.985        0.965 0.504            1.74
26 mu_0       0.8      1.03         1.01  0.565            1.66
27 mu_0       0.9      1.06         0.992 0.340            2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.510     2.50e-28  2.88e-83     48.0 
 2 mu         0.2      1.06      7.46e-15  2.50e-56     40.8 
 3 mu         0.3      0.686     7.29e- 8  1.18e-40     14.5 
 4 mu         0.4      1.19      7.77e- 4  1.31e-29     33.5 
 5 mu         0.5      1.33      1.20e- 2  3.98e-21     15.0 
 6 mu         0.6      1.08      8.15e- 2  4.59e-15     12.7 
 7 mu         0.7      0.792     1.45e- 1  2.95e-23      4.62
 8 mu         0.8      1.09      9.59e- 3  3.07e-35      7.94
 9 mu         0.9      1.14      2.05e- 8  2.67e-56     23.5 
10 mu_1       0.1      0.742     1.82e-27  2.78e-82     68.6 
11 mu_1       0.2      0.991     2.39e-14  1.21e-55     29.3 
12 mu_1       0.3      0.682     1.53e- 7  3.81e-40     13.8 
13 mu_1       0.4      1.25      1.20e- 3  3.16e-29     35.6 
14 mu_1       0.5      1.32      1.58e- 2  7.71e-21     12.8 
15 mu_1       0.6      1.06      8.25e- 2  1.09e-15     13.0 
16 mu_1       0.7      0.801     1.36e- 1  6.02e-24      4.99
17 mu_1       0.8      1.10      9.42e- 3  5.48e-36      8.36
18 mu_1       0.9      1.13      1.39e- 8  4.24e-57     23.5 
19 mu_0       0.1      0.484     8.33e-29  1.03e-84     45.7 
20 mu_0       0.2      1.08      3.36e-15  1.01e-57     43.7 
21 mu_0       0.3      0.687     4.00e- 8  5.44e-42     14.9 
22 mu_0       0.4      1.15      4.92e- 4  7.02e-31     32.1 
23 mu_0       0.5      1.35      7.45e- 3  2.57e-22     17.3 
24 mu_0       0.6      1.11      6.86e- 2  2.20e-15     12.7 
25 mu_0       0.7      0.772     1.15e- 1  8.43e-23      4.56
26 mu_0       0.8      1.06      1.22e- 2  1.32e-34      6.65
27 mu_0       0.9      1.23      8.03e- 8  2.29e-55     23.8 
[1] "Total run time was 428.093 seconds"
