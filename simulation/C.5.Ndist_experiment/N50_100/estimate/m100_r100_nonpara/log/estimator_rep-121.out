
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7531"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  59  60  61  62  63  64  65  67  68  69  70  71  72 
  1   3   2   3   4   3   2   3   1   3   1   2   1   3   2   3   3   4   2   2 
 74  75  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  95  96  97 
  1   1   2   3   4   2   2   4   2   1   6   1   2   3   1   2   1   2   1   3 
 98 100 
  3   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02906 0.33343 0.61285 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4536 2995 
[1] "treatment indicator table: "

   0    1 
2795 4736 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3860
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3671
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 557.878 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.337 0.102 
 2 mu         0.1   0.2 0.464 0.103 
 3 mu         0.1   0.3 0.541 0.124 
 4 mu         0.1   0.4 0.612 0.125 
 5 mu         0.1   0.5 0.654 0.137 
 6 mu         0.2   0.1 0.297 0.0524
 7 mu         0.2   0.2 0.400 0.0415
 8 mu         0.2   0.3 0.476 0.0552
 9 mu         0.2   0.4 0.528 0.0448
10 mu         0.2   0.5 0.581 0.0568
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.15        0.0801 0.0000000600     13.0 
 2 mu         0.2      1.02        0.899  0.0106            3.21
 3 mu         0.3      0.992       0.976  0.159             2.30
 4 mu         0.4      0.993       0.978  0.502             1.96
 5 mu         0.5      0.996       0.956  0.600             1.55
 6 mu         0.6      1.01        0.990  0.668             1.52
 7 mu         0.7      1.01        1.00   0.632             1.55
 8 mu         0.8      0.990       0.988  0.404             1.68
 9 mu         0.9      0.996       0.972  0.185             2.20
10 mu_1       0.1      1.11        0.146  0.000000190       8.75
11 mu_1       0.2      1.02        0.936  0.0165            3.04
12 mu_1       0.3      0.987       0.970  0.180             2.28
13 mu_1       0.4      0.994       0.962  0.545             2.00
14 mu_1       0.5      0.997       0.954  0.591             1.52
15 mu_1       0.6      1.01        1.00   0.660             1.51
16 mu_1       0.7      1.01        1.01   0.613             1.53
17 mu_1       0.8      0.991       0.989  0.397             1.68
18 mu_1       0.9      0.994       0.971  0.177             2.13
19 mu_0       0.1      1.15        0.0721 0.0000000456     13.9 
20 mu_0       0.2      1.02        0.898  0.00918           3.28
21 mu_0       0.3      0.994       0.961  0.150             2.31
22 mu_0       0.4      0.992       0.978  0.473             1.93
23 mu_0       0.5      0.996       0.961  0.609             1.57
24 mu_0       0.6      1.01        0.983  0.679             1.54
25 mu_0       0.7      1.01        1.00   0.658             1.60
26 mu_0       0.8      0.985       0.995  0.434             1.68
27 mu_0       0.9      1.02        1.02   0.261             2.79
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.643     6.81e-27  5.55e-77     62.1 
 2 mu         0.2      1.24      3.53e-14  7.54e-52     91.3 
 3 mu         0.3      0.418     9.31e- 8  3.13e-37     11.1 
 4 mu         0.4      1.10      1.43e- 3  6.15e-27     31.0 
 5 mu         0.5      1.40      1.07e- 1  4.92e-19     15.1 
 6 mu         0.6      1.56      3.81e- 1  3.38e-17     16.1 
 7 mu         0.7      1.23      2.23e- 1  8.20e-27     11.7 
 8 mu         0.8      0.949     8.11e- 3  6.55e-41      7.62
 9 mu         0.9      1.14      4.15e- 8  9.90e-66     31.3 
10 mu_1       0.1      0.977     4.46e-26  5.36e-76     93.1 
11 mu_1       0.2      1.04      1.11e-13  3.64e-51     68.4 
12 mu_1       0.3      0.445     1.97e- 7  1.01e-36     14.3 
13 mu_1       0.4      1.15      2.24e- 3  1.49e-26     29.8 
14 mu_1       0.5      1.43      1.44e- 1  9.50e-19     16.6 
15 mu_1       0.6      1.54      3.53e- 1  8.46e-18     15.1 
16 mu_1       0.7      1.22      1.89e- 1  1.76e-27     12.3 
17 mu_1       0.8      0.948     6.15e- 3  1.23e-41      7.31
18 mu_1       0.9      1.15      2.71e- 8  1.65e-66     32.4 
19 mu_0       0.1      0.606     2.62e-27  2.13e-78     58.6 
20 mu_0       0.2      1.30      1.47e-14  3.25e-53     97.0 
21 mu_0       0.3      0.407     4.87e- 8  1.54e-38      9.78
22 mu_0       0.4      1.07      9.01e- 4  3.54e-28     31.8 
23 mu_0       0.5      1.38      6.95e- 2  3.39e-20     13.5 
24 mu_0       0.6      1.59      3.10e- 1  7.19e-17     18.1 
25 mu_0       0.7      1.25      3.00e- 1  2.32e-26     10.3 
26 mu_0       0.8      0.957     1.61e- 2  2.78e-40      9.13
27 mu_0       0.9      1.07      1.72e- 7  8.42e-65     21.6 
[1] "Total run time was 561.719 seconds"
