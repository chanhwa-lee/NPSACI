
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7647"
[1] "cluster size dist'n: "

 50  51  52  53  56  59  60  62  63  64  65  67  68  69  70  71  73  74  75  76 
  3   2   2   3   2   3   4   2   1   2   2   4   1   2   2   5   2   1   2   2 
 77  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93  95  96  97  99 
  2   4   3   2   3   2   1   2   7   1   4   1   1   3   1   1   2   2   5   4 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02165 0.31254 0.57226 0.99237 6.00000 
[1] "event indicator table: "

   0    1 
4573 3074 
[1] "treatment indicator table: "

   0    1 
2929 4718 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3763
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3884
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 462.949 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.475 0.0896
 2 mu         0.1   0.2 0.484 0.0648
 3 mu         0.1   0.3 0.571 0.0767
 4 mu         0.1   0.4 0.642 0.0849
 5 mu         0.1   0.5 0.714 0.112 
 6 mu         0.2   0.1 0.435 0.0677
 7 mu         0.2   0.2 0.465 0.0384
 8 mu         0.2   0.3 0.551 0.0493
 9 mu         0.2   0.4 0.610 0.0515
10 mu         0.2   0.5 0.671 0.0767
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.989        0.634   0.00260      4.88
 2 mu         0.2      1.04         1.05    0.225        2.20
 3 mu         0.3      0.997        1.03    0.325        1.70
 4 mu         0.4      0.971        0.952   0.534        1.48
 5 mu         0.5      0.975        0.951   0.454        1.52
 6 mu         0.6      0.995        1.01    0.565        1.39
 7 mu         0.7      1.01         0.982   0.653        1.60
 8 mu         0.8      0.970        0.956   0.464        1.71
 9 mu         0.9      0.959        0.965   0.107        2.12
10 mu_1       0.1      1.02         0.759   0.00531      5.10
11 mu_1       0.2      1.04         0.993   0.252        2.26
12 mu_1       0.3      0.996        1.03    0.363        1.64
13 mu_1       0.4      0.969        0.952   0.572        1.49
14 mu_1       0.5      0.976        0.964   0.460        1.56
15 mu_1       0.6      0.998        1.01    0.576        1.37
16 mu_1       0.7      1.01         0.977   0.663        1.63
17 mu_1       0.8      0.969        0.960   0.458        1.70
18 mu_1       0.9      0.958        0.959   0.0990       2.14
19 mu_0       0.1      0.985        0.616   0.00230      4.94
20 mu_0       0.2      1.04         1.03    0.218        2.18
21 mu_0       0.3      0.997        1.03    0.310        1.73
22 mu_0       0.4      0.973        0.967   0.506        1.51
23 mu_0       0.5      0.974        0.944   0.449        1.55
24 mu_0       0.6      0.992        0.989   0.550        1.42
25 mu_0       0.7      1.01         0.976   0.628        1.51
26 mu_0       0.8      0.973        0.952   0.490        1.74
27 mu_0       0.9      0.963        0.964   0.181        2.16
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.47      2.17e-27  4.18e-76    103.  
 2 mu         0.2      0.632     4.08e-14  2.84e-51     24.8 
 3 mu         0.3      0.552     1.69e- 7  7.84e-37     10.6 
 4 mu         0.4      1.03      1.91e- 3  1.16e-26     25.4 
 5 mu         0.5      1.73      4.71e- 2  7.40e-19     36.5 
 6 mu         0.6      1.46      3.84e- 1  5.94e-16     24.1 
 7 mu         0.7      1.09      2.96e- 1  4.09e-23      8.56
 8 mu         0.8      0.939     3.64e- 3  2.17e-33     10.0 
 9 mu         0.9      1.17      6.06e- 9  3.39e-51     22.3 
10 mu_1       0.1      1.38      1.48e-26  4.03e-75     79.4 
11 mu_1       0.2      0.606     1.28e-13  1.37e-50     16.4 
12 mu_1       0.3      0.538     3.49e- 7  2.52e-36     10.1 
13 mu_1       0.4      1.11      2.12e- 3  2.79e-26     28.0 
14 mu_1       0.5      1.75      6.34e- 2  1.43e-18     39.2 
15 mu_1       0.6      1.42      4.55e- 1  7.61e-17     21.5 
16 mu_1       0.7      1.08      2.48e- 1  4.50e-24      8.47
17 mu_1       0.8      0.931     3.03e- 3  2.09e-34     10.5 
18 mu_1       0.9      1.19      4.13e- 9  2.90e-52     22.7 
19 mu_0       0.1      1.48      7.60e-28  1.62e-77    106.  
20 mu_0       0.2      0.638     1.91e-14  1.24e-52     26.9 
21 mu_0       0.3      0.558     9.18e- 8  3.91e-38     10.9 
22 mu_0       0.4      0.973     1.28e- 3  6.73e-28     23.7 
23 mu_0       0.5      1.71      3.13e- 2  5.16e-20     33.7 
24 mu_0       0.6      1.53      3.09e- 1  1.37e-15     27.8 
25 mu_0       0.7      1.11      3.10e- 1  1.26e-22      8.78
26 mu_0       0.8      0.970     5.10e- 3  1.00e-32      8.21
27 mu_0       0.9      0.962     2.34e- 8  3.13e-50     18.8 
[1] "Total run time was 466.326 seconds"
