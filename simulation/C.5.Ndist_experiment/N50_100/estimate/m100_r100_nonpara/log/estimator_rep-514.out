
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7520"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  60  61  62  63  64  65  66  67  70  71  72  74 
  1   3   3   3   1   1   5   1   1   1   3   1   4   3   3   5   2   1   5   2 
 75  76  77  78  80  82  83  84  85  86  87  88  90  91  92  93  94  95  96  97 
  2   3   2   3   4   3   2   1   1   2   1   1   2   2   3   3   2   3   3   1 
 98  99 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03876 0.38630 0.63005 1.00000 5.43348 
[1] "event indicator table: "

   0    1 
4507 3013 
[1] "treatment indicator table: "

   0    1 
2732 4788 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3811
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3709
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 479.755 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.382 0.0867
 2 mu         0.1   0.2 0.445 0.0962
 3 mu         0.1   0.3 0.527 0.106 
 4 mu         0.1   0.4 0.572 0.117 
 5 mu         0.1   0.5 0.577 0.116 
 6 mu         0.2   0.1 0.353 0.0424
 7 mu         0.2   0.2 0.424 0.0419
 8 mu         0.2   0.3 0.507 0.0470
 9 mu         0.2   0.4 0.560 0.0578
10 mu         0.2   0.5 0.572 0.0484
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.953        0.171  1.21e-14     14.7 
 2 mu         0.2      1.03         0.929  6.23e- 6      3.87
 3 mu         0.3      0.950        0.920  2.91e- 2      2.47
 4 mu         0.4      0.996        0.984  2.36e- 1      1.80
 5 mu         0.5      1.00         0.993  6.67e- 1      1.53
 6 mu         0.6      0.985        0.997  6.23e- 1      1.41
 7 mu         0.7      0.997        0.973  6.51e- 1      1.55
 8 mu         0.8      1.02         1.00   5.36e- 1      2.10
 9 mu         0.9      1.07         1.04   3.45e- 1      2.19
10 mu_1       0.1      0.960        0.291  4.96e-14      9.86
11 mu_1       0.2      1.02         0.886  1.29e- 5      3.95
12 mu_1       0.3      0.950        0.955  4.08e- 2      2.28
13 mu_1       0.4      1.00         0.971  2.25e- 1      1.82
14 mu_1       0.5      1.00         1.01   6.39e- 1      1.52
15 mu_1       0.6      0.984        0.981  6.30e- 1      1.40
16 mu_1       0.7      0.998        0.969  6.47e- 1      1.58
17 mu_1       0.8      1.02         1.00   5.29e- 1      2.11
18 mu_1       0.9      1.07         1.05   3.34e- 1      2.21
19 mu_0       0.1      0.952        0.156  7.95e-15     15.2 
20 mu_0       0.2      1.04         0.943  4.57e- 6      4.15
21 mu_0       0.3      0.949        0.933  2.41e- 2      2.55
22 mu_0       0.4      0.993        0.972  2.44e- 1      1.79
23 mu_0       0.5      1.00         0.994  6.71e- 1      1.54
24 mu_0       0.6      0.987        0.994  6.09e- 1      1.42
25 mu_0       0.7      0.995        0.965  6.59e- 1      1.49
26 mu_0       0.8      1.02         0.994  5.64e- 1      2.03
27 mu_0       0.9      1.05         1.03   4.20e- 1      2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00564     1.16e-27  5.18e-83     0.293
 2 mu         0.2    0.650       8.05e-15  8.01e-56    26.6  
 3 mu         0.3    0.950       5.18e- 8  4.97e-40    33.7  
 4 mu         0.4    0.888       1.15e- 3  6.28e-29    14.9  
 5 mu         0.5    1.23        1.09e- 1  1.99e-20    10.3  
 6 mu         0.6    1.39        3.86e- 1  1.31e-13    10.3  
 7 mu         0.7    1.15        2.57e- 1  3.27e-21     8.45 
 8 mu         0.8    0.983       1.46e- 2  2.57e-33    18.7  
 9 mu         0.9    0.971       1.27e- 7  6.38e-55    16.2  
10 mu_1       0.1    0.0126      6.99e-27  4.97e-82     0.676
11 mu_1       0.2    0.758       2.59e-14  3.84e-55    30.7  
12 mu_1       0.3    0.941       1.09e- 7  1.59e-39    34.4  
13 mu_1       0.4    0.897       1.43e- 3  1.50e-28    14.4  
14 mu_1       0.5    1.25        8.66e- 2  3.82e-20    10.3  
15 mu_1       0.6    1.40        3.20e- 1  1.38e-13     9.56 
16 mu_1       0.7    1.12        2.93e- 1  9.45e-22     8.53 
17 mu_1       0.8    0.993       1.19e- 2  6.50e-34    19.2  
18 mu_1       0.9    0.965       9.25e- 8  1.43e-55    16.0  
19 mu_0       0.1    0.00487     5.15e-28  0            0.250
20 mu_0       0.2    0.623       3.58e-15  0           25.6  
21 mu_0       0.3    0.953       2.75e- 8  0           33.5  
22 mu_0       0.4    0.881       7.62e- 4  0           15.2  
23 mu_0       0.5    1.22        1.18e- 1  0           10.3  
24 mu_0       0.6    1.38        3.45e- 1  0           11.4  
25 mu_0       0.7    1.20        2.07e- 1  0            8.25 
26 mu_0       0.8    0.942       2.55e- 2  0           16.5  
27 mu_0       0.9    1.02        5.68e- 8  0           17.7  
[1] "Total run time was 484.747 seconds"
