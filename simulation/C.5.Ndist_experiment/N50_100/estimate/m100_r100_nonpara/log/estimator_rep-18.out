
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7523"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  59  60  62  63  64  65  66  67  68  69  70  71  72 
  1   3   3   1   1   2   6   3   2   1   1   5   2   2   1   1   2   1   4   3 
 74  75  76  77  78  79  80  82  84  85  86  87  88  89  90  91  92  93  94  95 
  1   6   2   1   3   1   5   3   1   2   2   2   3   1   1   3   3   1   4   1 
 96  97  98  99 100 
  2   1   1   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02145 0.30685 0.57341 0.97259 8.00000 
[1] "event indicator table: "

   0    1 
4405 3118 
[1] "treatment indicator table: "

   0    1 
3127 4396 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3768
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3755
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 1504.146 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.524 0.100 
 2 mu         0.1   0.2 0.555 0.0733
 3 mu         0.1   0.3 0.623 0.0828
 4 mu         0.1   0.4 0.667 0.0844
 5 mu         0.1   0.5 0.724 0.0949
 6 mu         0.2   0.1 0.418 0.0509
 7 mu         0.2   0.2 0.496 0.0514
 8 mu         0.2   0.3 0.538 0.0366
 9 mu         0.2   0.4 0.598 0.0474
10 mu         0.2   0.5 0.667 0.0759
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.989        0.866    0.0158      4.90
 2 mu         0.2      1.02         1.02     0.316       2.16
 3 mu         0.3      1.04         1.04     0.534       2.16
 4 mu         0.4      1.02         1.02     0.641       1.46
 5 mu         0.5      1.00         0.999    0.627       1.41
 6 mu         0.6      0.970        0.962    0.649       1.37
 7 mu         0.7      1.00         1.00     0.649       1.55
 8 mu         0.8      0.975        0.966    0.583       1.52
 9 mu         0.9      0.976        0.964    0.0589      2.18
10 mu_1       0.1      1.00         0.869    0.0293      4.56
11 mu_1       0.2      1.03         1.01     0.347       2.15
12 mu_1       0.3      1.04         1.04     0.534       2.04
13 mu_1       0.4      1.02         1.01     0.614       1.45
14 mu_1       0.5      0.997        0.996    0.637       1.41
15 mu_1       0.6      0.970        0.963    0.632       1.36
16 mu_1       0.7      1.00         0.998    0.646       1.56
17 mu_1       0.8      0.975        0.966    0.569       1.52
18 mu_1       0.9      0.977        0.955    0.0584      2.19
19 mu_0       0.1      0.988        0.870    0.0143      4.94
20 mu_0       0.2      1.02         1.02     0.309       2.16
21 mu_0       0.3      1.05         1.03     0.534       2.21
22 mu_0       0.4      1.02         1.02     0.621       1.46
23 mu_0       0.5      1.00         1.01     0.610       1.45
24 mu_0       0.6      0.969        0.955    0.675       1.37
25 mu_0       0.7      0.998        0.998    0.632       1.53
26 mu_0       0.8      0.978        0.976    0.629       1.50
27 mu_0       0.9      0.972        0.998    0.0631      2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.781     1.23e-20  4.72e-77     57.1 
 2 mu         0.2      0.285     4.66e-10  1.14e-51     10.1 
 3 mu         0.3      0.440     6.99e- 5  6.20e-37      4.45
 4 mu         0.4      1.12      2.08e- 2  1.40e-26      7.89
 5 mu         0.5      1.35      3.39e- 1  1.16e-18      7.69
 6 mu         0.6      1.14      2.66e- 1  4.57e-21      5.97
 7 mu         0.7      0.913     2.28e- 2  3.68e-30      8.83
 8 mu         0.8      0.698     9.83e- 4  2.28e-43      8.44
 9 mu         0.9      1.61      6.48e-11  2.72e-68     20.8 
10 mu_1       0.1      0.712     7.05e-20  4.51e-76     41.8 
11 mu_1       0.2      0.261     1.26e- 9  5.44e-51      9.46
12 mu_1       0.3      0.500     9.40e- 5  1.97e-36      5.02
13 mu_1       0.4      1.15      1.89e- 2  3.33e-26      8.11
14 mu_1       0.5      1.35      3.34e- 1  2.22e-18      8.33
15 mu_1       0.6      1.13      2.09e- 1  5.57e-22      5.62
16 mu_1       0.7      0.894     2.15e- 2  3.85e-31      9.06
17 mu_1       0.8      0.709     7.39e- 4  3.11e-44      8.79
18 mu_1       0.9      1.62      4.31e-11  4.01e-69     21.0 
19 mu_0       0.1      0.788     5.85e-21  0            58.8 
20 mu_0       0.2      0.291     2.67e-10  0            10.7 
21 mu_0       0.3      0.414     4.01e- 5  0             4.22
22 mu_0       0.4      1.10      1.58e- 2  0             7.89
23 mu_0       0.5      1.35      2.81e- 1  0             7.05
24 mu_0       0.6      1.15      2.77e- 1  0             6.84
25 mu_0       0.7      0.957     1.68e- 2  0             8.29
26 mu_0       0.8      0.651     8.96e- 4  0             7.03
27 mu_0       0.9      1.58      1.23e-10  0            19.7 
[1] "Total run time was 1508.999 seconds"
