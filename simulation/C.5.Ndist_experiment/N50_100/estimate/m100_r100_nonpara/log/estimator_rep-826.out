
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7546"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  61  62  63  64  65  66  67  68  69  70  71 
  1   1   1   1   1   4   2   2   4   4   1   2   3   2   2   2   6   4   2   1 
 72  74  75  78  80  81  82  84  85  86  87  88  90  91  92  93  94  95  96  97 
  4   1   6   1   3   1   1   3   3   3   1   5   2   1   1   2   4   3   1   2 
 98  99 100 
  4   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03791 0.34897 0.60868 1.00000 6.02821 
[1] "event indicator table: "

   0    1 
4445 3101 
[1] "treatment indicator table: "

   0    1 
2827 4719 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3640
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3906
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 388.6 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.418 0.0459
 2 mu         0.1   0.2 0.519 0.0498
 3 mu         0.1   0.3 0.566 0.0511
 4 mu         0.1   0.4 0.621 0.0522
 5 mu         0.1   0.5 0.679 0.0579
 6 mu         0.2   0.1 0.347 0.0261
 7 mu         0.2   0.2 0.433 0.0306
 8 mu         0.2   0.3 0.481 0.0274
 9 mu         0.2   0.4 0.530 0.0282
10 mu         0.2   0.5 0.571 0.0347
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.13         0.972  0.000216      4.13
 2 mu         0.2      1.04         1.02   0.155         2.51
 3 mu         0.3      0.949        0.946  0.312         1.62
 4 mu         0.4      0.968        0.941  0.490         1.59
 5 mu         0.5      1.00         0.980  0.607         1.48
 6 mu         0.6      1.03         1.03   0.674         1.54
 7 mu         0.7      1.02         1.01   0.551         1.43
 8 mu         0.8      1.01         0.976  0.616         1.58
 9 mu         0.9      0.979        0.996  0.139         1.65
10 mu_1       0.1      1.12         1.01   0.000608      3.27
11 mu_1       0.2      1.02         1.01   0.226         2.41
12 mu_1       0.3      0.949        0.933  0.332         1.69
13 mu_1       0.4      0.970        0.946  0.474         1.57
14 mu_1       0.5      1.01         0.968  0.627         1.50
15 mu_1       0.6      1.03         1.03   0.680         1.53
16 mu_1       0.7      1.02         1.00   0.542         1.44
17 mu_1       0.8      1.01         0.970  0.611         1.60
18 mu_1       0.9      0.978        0.995  0.132         1.66
19 mu_0       0.1      1.13         0.991  0.000173      4.23
20 mu_0       0.2      1.05         1.04   0.138         2.54
21 mu_0       0.3      0.949        0.940  0.303         1.59
22 mu_0       0.4      0.967        0.952  0.468         1.61
23 mu_0       0.5      1.00         0.984  0.586         1.49
24 mu_0       0.6      1.03         1.03   0.665         1.55
25 mu_0       0.7      1.01         1.02   0.573         1.44
26 mu_0       0.8      1.01         0.970  0.586         1.60
27 mu_0       0.9      0.989        1.02   0.203         1.77
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0611     8.20e-30  5.55e-66      3.32
 2 mu         0.2     0.921      2.68e-16  1.16e-43     24.5 
 3 mu         0.3     0.635      6.64e- 9  9.61e-31      8.40
 4 mu         0.4     0.898      1.10e- 4  1.04e-21     12.5 
 5 mu         0.5     0.829      7.99e- 3  7.77e-15     12.6 
 6 mu         0.6     0.923      1.27e- 1  1.41e-15      6.15
 7 mu         0.7     1.54       3.36e- 1  2.24e-24      8.91
 8 mu         0.8     1.47       9.51e- 2  2.33e-37      9.77
 9 mu         0.9     1.69       7.86e- 7  2.53e-60     34.8 
10 mu_1       0.1     0.110      5.20e-29  5.20e-65      5.59
11 mu_1       0.2     0.924      8.66e-16  5.45e-43     24.5 
12 mu_1       0.3     0.662      1.42e- 8  3.00e-30      9.43
13 mu_1       0.4     0.895      9.28e- 5  2.44e-21     14.1 
14 mu_1       0.5     0.822      1.09e- 2  1.46e-14     11.4 
15 mu_1       0.6     0.946      1.26e- 1  3.96e-16      6.32
16 mu_1       0.7     1.57       3.04e- 1  5.39e-25      8.74
17 mu_1       0.8     1.47       9.70e- 2  4.90e-38     10.4 
18 mu_1       0.9     1.71       6.01e- 7  4.74e-61     36.2 
19 mu_0       0.1     0.0558     3.34e-30  3.85e-67      3.07
20 mu_0       0.2     0.921      1.12e-16  9.09e-45     24.5 
21 mu_0       0.3     0.623      3.13e- 9  8.58e-32      8.30
22 mu_0       0.4     0.900      5.68e- 5  1.09e-22     11.5 
23 mu_0       0.5     0.835      5.04e- 3  9.72e-16     13.9 
24 mu_0       0.6     0.889      1.15e- 1  2.93e-15      5.90
25 mu_0       0.7     1.49       3.49e- 1  6.21e-24      9.33
26 mu_0       0.8     1.49       5.87e- 2  9.68e-37      9.52
27 mu_0       0.9     1.55       2.46e- 6  2.11e-59     22.8 
[1] "Total run time was 391.492 seconds"
