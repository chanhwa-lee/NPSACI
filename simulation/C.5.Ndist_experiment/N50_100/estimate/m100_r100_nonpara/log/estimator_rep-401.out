
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7376"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 71 73 74 75 77 80 
 1  7  2  2  1  1  3  1  2  1  2  3  1  3  1  4  1  3  3  5  2  4  4  2  1  2 
81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 1  1  2  2  1  2  3  2  3  2  1  6  1  2  1  1  2  3  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03381 0.33475 0.60291 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4354 3022 
[1] "treatment indicator table: "

   0    1 
2804 4572 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3664
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3712
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 476.369 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.284 0.0707
 2 mu         0.1   0.2 0.351 0.0737
 3 mu         0.1   0.3 0.373 0.0894
 4 mu         0.1   0.4 0.415 0.0936
 5 mu         0.1   0.5 0.473 0.0900
 6 mu         0.2   0.1 0.257 0.0424
 7 mu         0.2   0.2 0.320 0.0372
 8 mu         0.2   0.3 0.354 0.0508
 9 mu         0.2   0.4 0.401 0.0468
10 mu         0.2   0.5 0.458 0.0347
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.914        0.288 0.00000291     10.1 
 2 mu         0.2      0.963        0.917 0.0673          2.49
 3 mu         0.3      0.947        0.937 0.209           1.94
 4 mu         0.4      0.986        1.01  0.545           1.52
 5 mu         0.5      1.02         1.01  0.490           1.58
 6 mu         0.6      1.03         1.01  0.698           1.55
 7 mu         0.7      1.01         0.995 0.657           1.33
 8 mu         0.8      0.999        0.999 0.520           1.50
 9 mu         0.9      1.03         0.987 0.0745          2.62
10 mu_1       0.1      0.935        0.412 0.00000791      8.45
11 mu_1       0.2      0.961        0.949 0.0715          2.61
12 mu_1       0.3      0.952        0.907 0.225           1.89
13 mu_1       0.4      0.987        1.01  0.568           1.53
14 mu_1       0.5      1.02         1.02  0.475           1.61
15 mu_1       0.6      1.03         1.00  0.683           1.55
16 mu_1       0.7      1.01         0.998 0.669           1.33
17 mu_1       0.8      0.999        0.991 0.518           1.51
18 mu_1       0.9      1.03         0.986 0.0698          2.66
19 mu_0       0.1      0.912        0.268 0.00000236     10.3 
20 mu_0       0.2      0.963        0.922 0.0606          2.46
21 mu_0       0.3      0.945        0.934 0.202           1.97
22 mu_0       0.4      0.985        1.00  0.520           1.53
23 mu_0       0.5      1.02         1.01  0.505           1.55
24 mu_0       0.6      1.02         1.01  0.709           1.54
25 mu_0       0.7      1.01         0.998 0.631           1.36
26 mu_0       0.8      0.998        1.01  0.527           1.45
27 mu_0       0.9      1.04         0.988 0.118           2.27
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0916     4.14e-25  3.35e-80      6.76
 2 mu         0.2     1.93       3.16e-13  6.47e-54     94.5 
 3 mu         0.3     1.22       2.84e- 7  1.19e-38     22.4 
 4 mu         0.4     0.931      1.17e- 3  6.33e-28     12.1 
 5 mu         0.5     0.992      8.14e- 2  1.03e-19      7.54
 6 mu         0.6     1.35       2.03e- 1  7.91e-14     35.5 
 7 mu         0.7     1.32       1.66e- 1  2.28e-22     21.3 
 8 mu         0.8     1.21       3.87e- 2  4.64e-35     11.0 
 9 mu         0.9     1.17       7.07e- 7  1.28e-57     37.6 
10 mu_1       0.1     0.174      2.47e-24  3.20e-79     12.8 
11 mu_1       0.2     1.96       9.01e-13  3.09e-53     89.4 
12 mu_1       0.3     1.17       6.32e- 7  3.79e-38     23.2 
13 mu_1       0.4     0.930      1.84e- 3  1.51e-27     11.6 
14 mu_1       0.5     0.987      7.33e- 2  1.97e-19      7.54
15 mu_1       0.6     1.39       1.60e- 1  2.47e-14     37.8 
16 mu_1       0.7     1.30       1.94e- 1  6.11e-23     19.4 
17 mu_1       0.8     1.22       3.14e- 2  1.09e-35     11.7 
18 mu_1       0.9     1.17       5.05e- 7  2.67e-58     37.8 
19 mu_0       0.1     0.0825     1.85e-25  1.62e-81      6.09
20 mu_0       0.2     1.92       1.45e-13  3.52e-55     95.8 
21 mu_0       0.3     1.24       1.32e- 7  7.38e-40     23.5 
22 mu_0       0.4     0.931      6.90e- 4  4.59e-29     12.5 
23 mu_0       0.5     0.997      5.67e- 2  8.96e-21      7.54
24 mu_0       0.6     1.30       2.46e- 1  4.26e-14     32.0 
25 mu_0       0.7     1.37       2.10e- 1  6.18e-22     25.6 
26 mu_0       0.8     1.18       5.51e- 2  1.89e-34      8.82
27 mu_0       0.9     1.18       2.39e- 6  1.04e-56     35.8 
[1] "Total run time was 480.65 seconds"
