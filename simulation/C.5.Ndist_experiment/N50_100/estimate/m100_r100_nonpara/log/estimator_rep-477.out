
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7523"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  63  64  65  66  67  68  69  70 
  1   2   3   2   2   3   1   1   2   2   2   1   5   3   2   4   1   3   1   3 
 71  73  75  77  78  79  80  81  82  83  84  85  86  87  88  89  91  92  93  94 
  5   2   1   1   2   2   1   2   1   5   3   1   1   1   3   4   1   2   1   3 
 95  97  98  99 100 
  3   1   4   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03854 0.37098 0.63697 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4446 3077 
[1] "treatment indicator table: "

   0    1 
2756 4767 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3640
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3883
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 472.118 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.198 0.0542
 2 mu         0.1   0.2 0.291 0.0720
 3 mu         0.1   0.3 0.290 0.0746
 4 mu         0.1   0.4 0.324 0.0774
 5 mu         0.1   0.5 0.346 0.0827
 6 mu         0.2   0.1 0.306 0.0675
 7 mu         0.2   0.2 0.409 0.0892
 8 mu         0.2   0.3 0.461 0.101 
 9 mu         0.2   0.4 0.496 0.108 
10 mu         0.2   0.5 0.533 0.116 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.578      0.00659  3.12e-14      8.15
 2 mu         0.2      0.966      0.536    8.32e- 7     21.2 
 3 mu         0.3      1.02       0.869    2.30e- 3      6.96
 4 mu         0.4      0.970      0.962    9.89e- 2      2.86
 5 mu         0.5      0.953      0.952    1.13e- 1      1.80
 6 mu         0.6      0.974      0.967    6.07e- 1      2.37
 7 mu         0.7      1.00       0.977    6.44e- 1      1.51
 8 mu         0.8      1.05       1.03     3.35e- 1      2.34
 9 mu         0.9      1.08       1.01     1.83e- 4      4.26
10 mu_1       0.1      0.623      0.0140   1.38e-13      7.25
11 mu_1       0.2      0.993      0.529    2.00e- 6     19.3 
12 mu_1       0.3      1.01       0.856    3.69e- 3      6.19
13 mu_1       0.4      0.970      0.977    1.20e- 1      2.72
14 mu_1       0.5      0.953      0.958    1.26e- 1      1.82
15 mu_1       0.6      0.976      0.976    6.19e- 1      2.33
16 mu_1       0.7      1.00       0.977    6.54e- 1      1.50
17 mu_1       0.8      1.05       1.03     3.14e- 1      2.41
18 mu_1       0.9      1.08       1.01     1.57e- 4      4.32
19 mu_0       0.1      0.573      0.00580  1.90e-14      8.25
20 mu_0       0.2      0.960      0.539    5.40e- 7     21.7 
21 mu_0       0.3      1.03       0.881    1.70e- 3      7.30
22 mu_0       0.4      0.971      0.949    8.46e- 2      2.95
23 mu_0       0.5      0.954      0.941    9.93e- 2      1.79
24 mu_0       0.6      0.971      0.958    5.79e- 1      2.44
25 mu_0       0.7      0.998      0.971    6.22e- 1      1.55
26 mu_0       0.8      1.05       1.03     3.69e- 1      2.15
27 mu_0       0.9      1.08       1.00     4.25e- 4      3.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000718     1.50e-26  3.43e-75    0.0716
 2 mu         0.2   0.0985       3.62e-14  1.14e-49    6.58  
 3 mu         0.3   1.98         6.10e- 8  3.62e-36   89.0   
 4 mu         0.4   2.25         4.99e- 4  1.30e-26   67.7   
 5 mu         0.5   1.35         6.85e- 2  3.13e-19   15.1   
 6 mu         0.6   1.54         5.57e- 1  3.13e-13   20.9   
 7 mu         0.7   1.38         3.44e- 1  1.17e-13   12.0   
 8 mu         0.8   1.33         3.48e- 2  6.87e-23   33.2   
 9 mu         0.9   2.67         1.31e- 7  5.97e-40  173.    
10 mu_1       0.1   0.00173      9.31e-26  3.08e-74    0.173 
11 mu_1       0.2   0.131        1.15e-13  5.64e-49    7.95  
12 mu_1       0.3   2.24         1.41e- 7  1.19e-35   98.9   
13 mu_1       0.4   2.13         8.10e- 4  3.20e-26   62.8   
14 mu_1       0.5   1.35         7.57e- 2  6.18e-19   14.2   
15 mu_1       0.6   1.56         4.86e- 1  5.15e-13   21.2   
16 mu_1       0.7   1.34         3.38e- 1  4.64e-14   11.0   
17 mu_1       0.8   1.35         2.83e- 2  2.38e-23   34.1   
18 mu_1       0.9   2.72         9.29e- 8  2.17e-40  179.    
19 mu_0       0.1   0.000605     6.07e-27  0           0.0603
20 mu_0       0.2   0.0904       1.65e-14  0           6.24  
21 mu_0       0.3   1.86         2.67e- 8  0          84.8   
22 mu_0       0.4   2.33         2.75e- 4  0          70.9   
23 mu_0       0.5   1.35         5.67e- 2  0          16.0   
24 mu_0       0.6   1.50         4.46e- 1  0          20.4   
25 mu_0       0.7   1.46         3.38e- 1  0          14.4   
26 mu_0       0.8   1.23         5.88e- 2  0          29.7   
27 mu_0       0.9   2.20         3.53e- 7  0         117.    
[1] "Total run time was 476.207 seconds"
