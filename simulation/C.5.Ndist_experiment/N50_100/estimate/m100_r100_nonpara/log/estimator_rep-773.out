
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7556"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  60  61  62  63  64  65  67  69  70  71  72  73 
  3   3   2   2   2   1   2   2   3   3   1   3   2   2   3   2   2   2   2   3 
 74  75  76  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  95 
  2   1   1   3   2   4   2   2   1   1   3   3   2   3   3   4   1   1   3   1 
 96  97  98  99 100 
  2   5   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02935 0.34530 0.61752 1.00000 6.33076 
[1] "event indicator table: "

   0    1 
4445 3111 
[1] "treatment indicator table: "

   0    1 
2888 4668 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3722
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3834
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 362.366 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.572 0.0615
 2 mu         0.1   0.2 0.624 0.0605
 3 mu         0.1   0.3 0.686 0.0543
 4 mu         0.1   0.4 0.734 0.0573
 5 mu         0.1   0.5 0.794 0.0662
 6 mu         0.2   0.1 0.481 0.0370
 7 mu         0.2   0.2 0.522 0.0311
 8 mu         0.2   0.3 0.565 0.0433
 9 mu         0.2   0.4 0.594 0.0577
10 mu         0.2   0.5 0.641 0.0678
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.17         0.915   0.00175      4.06
 2 mu         0.2      1.08         1.03    0.293        2.37
 3 mu         0.3      0.995        0.935   0.298        1.85
 4 mu         0.4      1.02         1.02    0.413        1.49
 5 mu         0.5      1.00         1.01    0.648        1.54
 6 mu         0.6      0.995        0.972   0.689        1.64
 7 mu         0.7      1.01         1.00    0.562        1.54
 8 mu         0.8      0.991        0.981   0.522        1.82
 9 mu         0.9      0.982        0.979   0.240        2.02
10 mu_1       0.1      1.17         0.936   0.00390      3.75
11 mu_1       0.2      1.08         0.995   0.265        2.28
12 mu_1       0.3      0.992        0.946   0.325        1.79
13 mu_1       0.4      1.02         1.03    0.432        1.46
14 mu_1       0.5      0.999        1.00    0.644        1.55
15 mu_1       0.6      0.996        0.975   0.680        1.65
16 mu_1       0.7      1.01         1.00    0.564        1.54
17 mu_1       0.8      0.990        0.979   0.529        1.83
18 mu_1       0.9      0.981        0.976   0.224        2.01
19 mu_0       0.1      1.17         0.914   0.00152      4.09
20 mu_0       0.2      1.09         1.03    0.300        2.39
21 mu_0       0.3      0.996        0.927   0.286        1.88
22 mu_0       0.4      1.01         1.01    0.400        1.51
23 mu_0       0.5      1.00         1.01    0.652        1.53
24 mu_0       0.6      0.992        0.966   0.677        1.62
25 mu_0       0.7      1.01         0.998   0.558        1.56
26 mu_0       0.8      0.994        0.981   0.496        1.75
27 mu_0       0.9      0.988        1.02    0.273        2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.843     5.03e-28  9.17e-83     65.0 
 2 mu         0.2      0.517     1.94e-15  1.42e-55     20.9 
 3 mu         0.3      1.06      3.81e- 9  8.78e-40     34.0 
 4 mu         0.4      0.711     2.66e- 5  1.11e-28     11.5 
 5 mu         0.5      0.995     8.91e- 3  2.54e-21      7.49
 6 mu         0.6      1.00      1.21e- 1  6.93e-30      8.69
 7 mu         0.7      1.48      1.53e- 1  5.37e-41     12.2 
 8 mu         0.8      1.86      2.03e- 2  9.95e-57     15.9 
 9 mu         0.9      0.957     2.89e- 7  1.02e-83     20.4 
10 mu_1       0.1      0.594     3.39e-27  8.78e-82     43.8 
11 mu_1       0.2      0.614     7.05e-15  6.79e-55     27.2 
12 mu_1       0.3      1.04      7.14e- 9  2.80e-39     29.6 
13 mu_1       0.4      0.702     4.65e- 5  2.66e-28     11.7 
14 mu_1       0.5      1.02      6.63e- 3  1.10e-22      7.41
15 mu_1       0.6      0.992     1.52e- 1  2.51e-31      8.53
16 mu_1       0.7      1.52      1.69e- 1  1.67e-42     12.9 
17 mu_1       0.8      1.84      1.55e- 2  2.70e-58     16.5 
18 mu_1       0.9      0.955     2.02e- 7  2.46e-85     21.0 
19 mu_0       0.1      0.871     1.60e-28  4.29e-84     67.4 
20 mu_0       0.2      0.492     6.64e-16  7.46e-57     19.3 
21 mu_0       0.3      1.07      1.55e- 9  5.28e-41     35.9 
22 mu_0       0.4      0.717     1.33e- 5  7.79e-30     11.4 
23 mu_0       0.5      0.968     5.38e- 3  2.97e-21      7.57
24 mu_0       0.6      1.02      7.47e- 2  1.69e-29      8.93
25 mu_0       0.7      1.39      1.81e- 1  1.75e-40     10.7 
26 mu_0       0.8      1.91      3.49e- 2  4.86e-56     14.0 
27 mu_0       0.9      0.978     1.10e- 6  9.95e-83     15.2 
[1] "Total run time was 365.762 seconds"
