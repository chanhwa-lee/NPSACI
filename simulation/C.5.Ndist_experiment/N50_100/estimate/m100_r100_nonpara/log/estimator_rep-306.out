
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7132"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  3   1   2   3   3   3   3   1   2   1   4   5   3   2   2   4   3   2   5   1 
 71  72  74  75  76  78  79  80  81  82  83  84  85  86  87  88  90  92  93  94 
  4   2   3   1   3   2   3   3   2   2   1   1   1   3   1   3   1   1   1   3 
 95  96  97  98 100 
  2   1   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03365 0.35980 0.62597 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4359 2773 
[1] "treatment indicator table: "

   0    1 
2399 4733 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3490
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3642
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 322.936 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.383 0.0623
 2 mu         0.1   0.2 0.412 0.0735
 3 mu         0.1   0.3 0.519 0.0847
 4 mu         0.1   0.4 0.549 0.0923
 5 mu         0.1   0.5 0.595 0.0993
 6 mu         0.2   0.1 0.359 0.0369
 7 mu         0.2   0.2 0.392 0.0366
 8 mu         0.2   0.3 0.491 0.0422
 9 mu         0.2   0.4 0.523 0.0441
10 mu         0.2   0.5 0.564 0.0471
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.992        0.114 0.000000471     11.2 
 2 mu         0.2      0.993        0.813 0.0159           4.18
 3 mu         0.3      1.02         0.969 0.0483           3.61
 4 mu         0.4      0.997        0.993 0.329            2.21
 5 mu         0.5      0.990        0.971 0.487            1.60
 6 mu         0.6      1.00         0.965 0.550            1.77
 7 mu         0.7      0.981        1.00  0.511            1.48
 8 mu         0.8      0.977        0.965 0.426            1.43
 9 mu         0.9      1.01         0.993 0.224            1.95
10 mu_1       0.1      1.00         0.187 0.00000135      12.3 
11 mu_1       0.2      0.989        0.830 0.0229           3.66
12 mu_1       0.3      1.02         0.956 0.0561           3.58
13 mu_1       0.4      0.997        0.993 0.348            2.16
14 mu_1       0.5      0.989        0.970 0.450            1.59
15 mu_1       0.6      1.00         0.967 0.581            1.75
16 mu_1       0.7      0.979        0.997 0.509            1.47
17 mu_1       0.8      0.978        0.966 0.431            1.43
18 mu_1       0.9      1.01         0.992 0.210            1.94
19 mu_0       0.1      0.991        0.103 0.000000373     11.1 
20 mu_0       0.2      0.994        0.829 0.0141           4.44
21 mu_0       0.3      1.02         0.967 0.0449           3.62
22 mu_0       0.4      0.998        0.983 0.308            2.25
23 mu_0       0.5      0.990        0.973 0.525            1.61
24 mu_0       0.6      0.999        0.960 0.503            1.80
25 mu_0       0.7      0.985        0.991 0.515            1.54
26 mu_0       0.8      0.973        0.961 0.407            1.44
27 mu_0       0.9      1.01         0.987 0.343            2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00263     1.11e-29  4.77e-81     0.242
 2 mu         0.2    0.473       8.30e-17  3.27e-54    27.5  
 3 mu         0.3    0.888       3.56e- 9  2.45e-39    31.8  
 4 mu         0.4    0.991       8.57e- 5  3.70e-29    13.8  
 5 mu         0.5    1.25        1.05e- 2  2.73e-21    14.2  
 6 mu         0.6    1.01        1.49e- 1  6.78e-15    11.1  
 7 mu         0.7    1.21        1.82e- 1  1.73e-14    15.0  
 8 mu         0.8    1.02        4.69e- 2  6.82e-24    12.8  
 9 mu         0.9    1.60        3.04e- 5  6.24e-41    44.5  
10 mu_1       0.1    0.00609     6.89e-29  4.52e-80     0.554
11 mu_1       0.2    0.587       2.64e-16  1.55e-53    31.4  
12 mu_1       0.3    0.883       7.89e- 9  8.08e-39    33.5  
13 mu_1       0.4    1.02        1.41e- 4  9.14e-29    10.9  
14 mu_1       0.5    1.25        1.50e- 2  5.39e-21    14.2  
15 mu_1       0.6    1.01        1.30e- 1  1.12e-14    11.6  
16 mu_1       0.7    1.22        1.63e- 1  6.20e-15    15.3  
17 mu_1       0.8    1.01        3.70e- 2  2.13e-24    13.2  
18 mu_1       0.9    1.60        2.34e- 5  1.73e-41    44.4  
19 mu_0       0.1    0.00224     4.07e-30  2.79e-82     0.208
20 mu_0       0.2    0.444       3.78e-17  1.54e-55    26.5  
21 mu_0       0.3    0.891       1.52e- 9  4.23e-41    31.1  
22 mu_0       0.4    0.972       4.89e- 5  7.43e-31    15.8  
23 mu_0       0.5    1.26        6.24e- 3  6.57e-23    14.2  
24 mu_0       0.6    1.01        1.73e- 1  2.04e-16    10.4  
25 mu_0       0.7    1.19        1.54e- 1  4.34e-14    14.4  
26 mu_0       0.8    1.06        6.98e- 2  2.56e-23    11.1  
27 mu_0       0.9    1.56        9.33e- 5  4.68e-40    45.5  
[1] "Total run time was 325.921 seconds"
