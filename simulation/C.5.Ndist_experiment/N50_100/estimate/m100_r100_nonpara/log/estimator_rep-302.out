
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7539"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  59  60  61  62  63  64  66  67  68  70  71  72  73 
  4   4   1   1   1   2   3   3   1   3   5   1   1   2   7   2   3   2   3   1 
 75  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  94  95  97 
  1   1   2   3   1   1   4   1   1   4   2   3   2   2   1   3   2   3   4   1 
 98  99 100 
  1   3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02404 0.30604 0.57373 0.97144 5.00000 
[1] "event indicator table: "

   0    1 
4386 3153 
[1] "treatment indicator table: "

   0    1 
3167 4372 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3887
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3652
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 513.961 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.422 0.0569
 2 mu         0.1   0.2 0.486 0.0556
 3 mu         0.1   0.3 0.544 0.0679
 4 mu         0.1   0.4 0.619 0.0759
 5 mu         0.1   0.5 0.640 0.0700
 6 mu         0.2   0.1 0.366 0.0302
 7 mu         0.2   0.2 0.442 0.0277
 8 mu         0.2   0.3 0.500 0.0321
 9 mu         0.2   0.4 0.568 0.0371
10 mu         0.2   0.5 0.596 0.0354
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.991        0.729   0.00153      4.93
 2 mu         0.2      1.02         1.00    0.268        2.25
 3 mu         0.3      1.04         1.02    0.383        1.70
 4 mu         0.4      0.999        0.989   0.535        1.48
 5 mu         0.5      1.00         0.998   0.583        1.46
 6 mu         0.6      0.987        0.973   0.630        1.51
 7 mu         0.7      0.974        0.941   0.670        1.40
 8 mu         0.8      1.00         1.01    0.527        1.70
 9 mu         0.9      1.11         1.08    0.0758       2.28
10 mu_1       0.1      0.980        0.754   0.00331      4.26
11 mu_1       0.2      1.03         1.04    0.325        2.18
12 mu_1       0.3      1.03         1.01    0.394        1.71
13 mu_1       0.4      1.00         0.988   0.545        1.46
14 mu_1       0.5      0.999        0.993   0.580        1.44
15 mu_1       0.6      0.987        0.980   0.631        1.52
16 mu_1       0.7      0.974        0.935   0.677        1.38
17 mu_1       0.8      1.00         1.01    0.524        1.70
18 mu_1       0.9      1.11         1.07    0.0703       2.35
19 mu_0       0.1      0.992        0.708   0.00133      5.01
20 mu_0       0.2      1.02         0.983   0.254        2.27
21 mu_0       0.3      1.04         1.02    0.379        1.70
22 mu_0       0.4      0.999        0.991   0.528        1.50
23 mu_0       0.5      1.00         1.01    0.587        1.47
24 mu_0       0.6      0.986        0.977   0.629        1.49
25 mu_0       0.7      0.976        0.953   0.656        1.42
26 mu_0       0.8      0.990        0.985   0.498        1.72
27 mu_0       0.9      1.10         1.08    0.125        2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0887     9.11e-23  6.73e-75      7.15
 2 mu         0.2     0.720      1.59e-10  9.23e-50     19.2 
 3 mu         0.3     0.902      6.95e- 5  1.49e-35     10.7 
 4 mu         0.4     1.07       1.63e- 2  1.41e-25     14.6 
 5 mu         0.5     1.09       8.27e- 2  6.02e-18     13.1 
 6 mu         0.6     0.975      1.54e- 1  4.86e-15     13.2 
 7 mu         0.7     1.17       1.29e- 1  2.39e-23      8.28
 8 mu         0.8     1.36       3.84e- 4  1.44e-35     10.8 
 9 mu         0.9     1.29       1.65e-10  3.98e-57     39.5 
10 mu_1       0.1     0.149      4.87e-22  6.17e-74     11.4 
11 mu_1       0.2     0.736      4.23e-10  4.40e-49     15.3 
12 mu_1       0.3     0.935      1.31e- 4  4.73e-35     12.1 
13 mu_1       0.4     1.07       1.87e- 2  3.37e-25     16.3 
14 mu_1       0.5     1.08       7.51e- 2  1.15e-17     11.7 
15 mu_1       0.6     0.970      1.39e- 1  1.29e-15     13.4 
16 mu_1       0.7     1.18       1.09e- 1  5.43e-24      8.43
17 mu_1       0.8     1.35       2.62e- 4  2.87e-36     11.2 
18 mu_1       0.9     1.32       1.01e-10  7.03e-58     40.9 
19 mu_0       0.1     0.0820     4.71e-23  6.30e-76      6.68
20 mu_0       0.2     0.716      9.37e-11  5.37e-51     20.2 
21 mu_0       0.3     0.888      4.31e- 5  9.89e-37     11.0 
22 mu_0       0.4     1.07       1.91e- 2  1.09e-26     13.5 
23 mu_0       0.5     1.09       8.04e- 2  5.60e-19     14.5 
24 mu_0       0.6     0.982      1.30e- 1  1.02e-14     12.8 
25 mu_0       0.7     1.14       1.31e- 1  6.70e-23      7.93
26 mu_0       0.8     1.37       8.67e- 4  6.07e-35     11.0 
27 mu_0       0.9     1.05       7.52e-10  3.34e-56     26.9 
[1] "Total run time was 519.141 seconds"
