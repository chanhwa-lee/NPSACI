
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7266"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  65  66  67  68  69  70 
  1   5   1   2   1   2   4   3   3   1   3   1   2   5   3   2   3   3   1   1 
 71  72  73  74  75  76  77  78  79  81  82  84  85  86  87  88  89  90  91  92 
  1   4   2   3   3   1   1   1   4   4   4   2   2   1   1   2   1   3   2   1 
 93  94  97  98  99 100 
  1   1   1   4   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03312 0.34157 0.61194 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4233 3033 
[1] "treatment indicator table: "

   0    1 
2774 4492 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3741
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3525
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 385.377 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.426 0.0955
 2 mu         0.1   0.2 0.510 0.119 
 3 mu         0.1   0.3 0.565 0.133 
 4 mu         0.1   0.4 0.593 0.134 
 5 mu         0.1   0.5 0.664 0.124 
 6 mu         0.2   0.1 0.388 0.0399
 7 mu         0.2   0.2 0.495 0.0498
 8 mu         0.2   0.3 0.541 0.0558
 9 mu         0.2   0.4 0.587 0.0524
10 mu         0.2   0.5 0.636 0.0496
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.01         0.542 0.00000000321     12.9 
 2 mu         0.2      1.02         0.963 0.00376            2.80
 3 mu         0.3      1.05         0.996 0.310              2.10
 4 mu         0.4      1.03         0.980 0.527              1.99
 5 mu         0.5      0.981        0.969 0.543              1.65
 6 mu         0.6      0.984        1.00  0.612              1.40
 7 mu         0.7      0.993        0.996 0.526              1.41
 8 mu         0.8      1.02         1.01  0.572              1.92
 9 mu         0.9      1.02         0.993 0.218              2.38
10 mu_1       0.1      1.03         0.641 0.0000000108       9.37
11 mu_1       0.2      1.02         0.922 0.00634            2.73
12 mu_1       0.3      1.04         1.03  0.352              2.00
13 mu_1       0.4      1.02         0.970 0.541              2.02
14 mu_1       0.5      0.979        0.973 0.524              1.58
15 mu_1       0.6      0.985        0.995 0.599              1.40
16 mu_1       0.7      0.995        1.00  0.531              1.43
17 mu_1       0.8      1.02         1.01  0.572              1.92
18 mu_1       0.9      1.02         1.00  0.210              2.41
19 mu_0       0.1      1.00         0.519 0.00000000237     13.3 
20 mu_0       0.2      1.02         0.958 0.00311            2.96
21 mu_0       0.3      1.05         0.998 0.292              2.14
22 mu_0       0.4      1.03         0.980 0.519              1.98
23 mu_0       0.5      0.983        0.972 0.561              1.72
24 mu_0       0.6      0.983        0.999 0.632              1.40
25 mu_0       0.7      0.990        0.978 0.515              1.41
26 mu_0       0.8      1.02         1.01  0.571              1.90
27 mu_0       0.9      1.01         0.995 0.286              2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.98      9.70e-27  6.92e-80    154.  
 2 mu         0.2      1.97      1.74e-13  7.51e-53     80.2 
 3 mu         0.3      1.34      1.22e- 7  3.12e-37     45.1 
 4 mu         0.4      0.774     4.83e- 4  2.48e-26     14.2 
 5 mu         0.5      1.19      3.45e- 2  4.56e-18     23.3 
 6 mu         0.6      1.02      1.31e- 1  3.92e-15     11.3 
 7 mu         0.7      1.22      1.25e- 1  6.69e-23      9.23
 8 mu         0.8      1.17      2.56e- 2  3.54e-34      9.26
 9 mu         0.9      1.57      2.17e- 7  6.92e-54     42.3 
10 mu_1       0.1      2.50      5.55e-26  6.42e-79    182.  
11 mu_1       0.2      1.81      5.41e-13  3.49e-52     77.8 
12 mu_1       0.3      1.29      2.68e- 7  9.65e-37     47.7 
13 mu_1       0.4      0.774     7.10e- 4  5.76e-26     11.3 
14 mu_1       0.5      1.21      3.52e- 2  8.48e-18     24.4 
15 mu_1       0.6      1.02      1.10e- 1  7.74e-16     12.0 
16 mu_1       0.7      1.24      1.28e- 1  1.13e-23      9.65
17 mu_1       0.8      1.17      2.55e- 2  5.24e-35      9.55
18 mu_1       0.9      1.58      1.56e- 7  9.11e-55     44.0 
19 mu_0       0.1      1.92      4.61e-27  5.49e-81    150.  
20 mu_0       0.2      2.01      8.23e-14  6.71e-54     80.8 
21 mu_0       0.3      1.36      6.14e- 8  3.18e-38     44.0 
22 mu_0       0.4      0.774     2.79e- 4  2.95e-27     16.2 
23 mu_0       0.5      1.17      2.59e- 2  6.52e-19     22.3 
24 mu_0       0.6      1.03      9.98e- 2  8.65e-15     12.5 
25 mu_0       0.7      1.19      1.76e- 1  1.96e-22      9.27
26 mu_0       0.8      1.20      3.93e- 2  1.56e-33     10.1 
27 mu_0       0.9      1.45      7.66e- 7  6.10e-53     27.3 
[1] "Total run time was 389.587 seconds"
