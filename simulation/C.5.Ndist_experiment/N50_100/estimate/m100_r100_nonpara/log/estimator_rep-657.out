
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7591"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  70  71 
  1   1   5   2   4   4   1   1   3   2   1   1   1   3   2   3   1   1   2   3 
 72  75  76  77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  93  94 
  3   1   2   3   1   3   1   2   3   1   3   4   2   1   3   1   1   2   3   1 
 95  96  97  98  99 100 
  2   3   3   3   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02681 0.33403 0.60111 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4514 3077 
[1] "treatment indicator table: "

   0    1 
2734 4857 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3872
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 384.144 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.263 0.0521
 2 mu         0.1   0.2 0.291 0.0614
 3 mu         0.1   0.3 0.320 0.0741
 4 mu         0.1   0.4 0.325 0.0902
 5 mu         0.1   0.5 0.337 0.0804
 6 mu         0.2   0.1 0.320 0.0409
 7 mu         0.2   0.2 0.360 0.0436
 8 mu         0.2   0.3 0.403 0.0525
 9 mu         0.2   0.4 0.409 0.0621
10 mu         0.2   0.5 0.428 0.0537
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.536       0.0150  4.91e-16      5.29
 2 mu         0.2      0.710       0.620   1.20e- 6      3.49
 3 mu         0.3      0.978       0.929   7.16e- 3      6.23
 4 mu         0.4      1.01        0.994   2.89e- 1      2.02
 5 mu         0.5      1.03        1.00    5.72e- 1      1.75
 6 mu         0.6      1.00        0.993   6.48e- 1      1.45
 7 mu         0.7      0.997       0.989   7.54e- 1      1.67
 8 mu         0.8      0.999       0.990   3.54e- 1      1.51
 9 mu         0.9      0.863       0.802   4.38e- 3      3.12
10 mu_1       0.1      0.536       0.0292  2.08e-15      4.47
11 mu_1       0.2      0.745       0.670   2.51e- 6      3.72
12 mu_1       0.3      0.980       0.929   1.01e- 2      5.89
13 mu_1       0.4      1.01        0.999   3.32e- 1      1.94
14 mu_1       0.5      1.02        0.998   6.09e- 1      1.73
15 mu_1       0.6      1.00        0.993   6.55e- 1      1.45
16 mu_1       0.7      0.996       0.999   7.44e- 1      1.68
17 mu_1       0.8      0.999       0.988   3.37e- 1      1.52
18 mu_1       0.9      0.862       0.797   3.82e- 3      3.22
19 mu_0       0.1      0.536       0.0133  3.15e-16      5.39
20 mu_0       0.2      0.702       0.584   8.69e- 7      3.43
21 mu_0       0.3      0.978       0.913   5.88e- 3      6.38
22 mu_0       0.4      1.00        1.01    2.60e- 1      2.07
23 mu_0       0.5      1.03        0.997   5.35e- 1      1.77
24 mu_0       0.6      1.00        0.999   6.38e- 1      1.44
25 mu_0       0.7      0.999       0.994   7.55e- 1      1.66
26 mu_0       0.8      1.00        0.997   4.22e- 1      1.50
27 mu_0       0.9      0.875       0.839   9.34e- 3      2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.378     4.26e-28  2.73e-76     29.2 
 2 mu         0.2      7.23      1.81e-14  5.85e-50    358.  
 3 mu         0.3      3.03      4.20e- 8  8.27e-35    114.  
 4 mu         0.4      1.27      4.86e- 4  2.72e-24     23.0 
 5 mu         0.5      1.51      4.28e- 2  2.22e-16     12.5 
 6 mu         0.6      1.38      2.15e- 1  5.73e-13     21.5 
 7 mu         0.7      1.22      2.47e- 1  2.20e-21      6.83
 8 mu         0.8      1.35      7.68e- 2  6.73e-34     12.8 
 9 mu         0.9      5.59      4.73e- 7  3.71e-56    353.  
10 mu_1       0.1      0.701     2.64e-27  2.48e-75     53.4 
11 mu_1       0.2      7.07      6.38e-14  2.66e-49    327.  
12 mu_1       0.3      2.83      8.56e- 8  2.50e-34    114.  
13 mu_1       0.4      1.24      8.11e- 4  6.18e-24     21.0 
14 mu_1       0.5      1.53      3.94e- 2  4.04e-16     11.7 
15 mu_1       0.6      1.35      2.56e- 1  1.81e-13     20.5 
16 mu_1       0.7      1.23      2.56e- 1  5.96e-22      6.86
17 mu_1       0.8      1.36      6.31e- 2  1.59e-34     14.4 
18 mu_1       0.9      5.58      3.46e- 7  7.81e-57    352.  
19 mu_0       0.1      0.342     1.80e-28  2.79e-77     26.5 
20 mu_0       0.2      7.27      6.66e-15  6.72e-51    365.  
21 mu_0       0.3      3.11      2.38e- 8  1.09e-35    115.  
22 mu_0       0.4      1.30      2.69e- 4  4.16e-25     24.4 
23 mu_0       0.5      1.49      2.81e- 2  4.08e-17     13.3 
24 mu_0       0.6      1.43      1.93e- 1  1.16e-12     23.0 
25 mu_0       0.7      1.20      2.35e- 1  5.95e-21      7.80
26 mu_0       0.8      1.28      1.15e- 1  2.73e-33     10.4 
27 mu_0       0.9      5.65      1.73e- 6  3.01e-55    364.  
[1] "Total run time was 387.284 seconds"
