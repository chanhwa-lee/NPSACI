
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7580"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  60  61  63  64  65  66  67  69  70  71  72  73  74 
  3   2   2   1   2   5   1   2   2   1   3   2   1   3   1   3   3   2   1   3 
 75  76  77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  93  94  95 
  4   5   4   4   1   3   2   1   3   2   2   1   3   1   1   2   2   2   2   2 
 96  97  98 100 
  2   4   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03697 0.35156 0.61628 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4576 3004 
[1] "treatment indicator table: "

   0    1 
2600 4980 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3859
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3721
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 364.614 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.453 0.0664
 2 mu         0.1   0.2 0.559 0.0835
 3 mu         0.1   0.3 0.623 0.0968
 4 mu         0.1   0.4 0.677 0.105 
 5 mu         0.1   0.5 0.718 0.114 
 6 mu         0.2   0.1 0.385 0.0311
 7 mu         0.2   0.2 0.485 0.0412
 8 mu         0.2   0.3 0.538 0.0448
 9 mu         0.2   0.4 0.585 0.0446
10 mu         0.2   0.5 0.622 0.0471
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.26         0.683 0.000000168     19.7 
 2 mu         0.2      1.10         0.967 0.0296           4.22
 3 mu         0.3      0.975        0.957 0.324            1.74
 4 mu         0.4      0.988        0.964 0.483            1.87
 5 mu         0.5      0.975        0.979 0.420            1.61
 6 mu         0.6      0.982        0.974 0.561            1.46
 7 mu         0.7      1.01         1.01  0.656            1.88
 8 mu         0.8      1.01         0.996 0.586            1.57
 9 mu         0.9      1.02         1.00  0.343            1.80
10 mu_1       0.1      1.19         0.846 0.000000494     11.3 
11 mu_1       0.2      1.08         0.979 0.0497           4.09
12 mu_1       0.3      0.977        0.961 0.326            1.73
13 mu_1       0.4      0.985        0.961 0.485            1.83
14 mu_1       0.5      0.976        0.990 0.401            1.59
15 mu_1       0.6      0.983        0.970 0.578            1.44
16 mu_1       0.7      1.02         1.01  0.659            1.87
17 mu_1       0.8      1.01         0.996 0.581            1.56
18 mu_1       0.9      1.02         0.997 0.339            1.82
19 mu_0       0.1      1.26         0.660 0.000000132     20.6 
20 mu_0       0.2      1.11         0.968 0.0246           4.25
21 mu_0       0.3      0.973        0.963 0.324            1.74
22 mu_0       0.4      0.989        0.955 0.481            1.90
23 mu_0       0.5      0.974        0.978 0.439            1.64
24 mu_0       0.6      0.981        0.979 0.535            1.48
25 mu_0       0.7      1.01         1.00  0.648            1.88
26 mu_0       0.8      1.01         0.993 0.609            1.58
27 mu_0       0.9      1.02         1.03  0.384            1.70
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.483     8.03e-32  2.87e-83     41.9 
 2 mu         0.2      1.23      3.51e-18  1.11e-57     61.7 
 3 mu         0.3      1.02      1.28e-10  1.03e-42     25.4 
 4 mu         0.4      0.868     8.90e- 6  4.30e-32     16.8 
 5 mu         0.5      1.10      5.10e- 3  7.43e-24     11.3 
 6 mu         0.6      1.24      1.20e- 1  2.29e-17     12.8 
 7 mu         0.7      1.35      1.94e- 1  5.54e-27     10.1 
 8 mu         0.8      1.31      6.59e- 2  4.42e-41     12.1 
 9 mu         0.9      0.872     1.34e- 5  6.69e-66     18.7 
10 mu_1       0.1      0.745     5.75e-31  2.87e-82     62.9 
11 mu_1       0.2      1.13      1.23e-17  5.56e-57     46.2 
12 mu_1       0.3      1.00      2.94e-10  3.44e-42     24.7 
13 mu_1       0.4      0.880     1.53e- 5  1.07e-31     16.7 
14 mu_1       0.5      1.13      4.56e- 3  1.49e-23     12.1 
15 mu_1       0.6      1.24      1.32e- 1  5.72e-18     12.9 
16 mu_1       0.7      1.36      2.19e- 1  1.19e-27     10.3 
17 mu_1       0.8      1.30      5.49e- 2  8.29e-42     11.8 
18 mu_1       0.9      0.869     1.06e- 5  1.12e-66     19.4 
19 mu_0       0.1      0.453     2.54e-32  0            39.6 
20 mu_0       0.2      1.26      1.30e-18  0            65.5 
21 mu_0       0.3      1.03      4.72e-11  0            25.7 
22 mu_0       0.4      0.860     4.64e- 6  0            16.9 
23 mu_0       0.5      1.08      4.56e- 3  0            10.4 
24 mu_0       0.6      1.25      7.86e- 2  0            12.6 
25 mu_0       0.7      1.34      1.31e- 1  0             9.50
26 mu_0       0.8      1.33      8.30e- 2  0            13.5 
27 mu_0       0.9      0.902     3.24e- 5  0            16.1 
[1] "Total run time was 367.98 seconds"
