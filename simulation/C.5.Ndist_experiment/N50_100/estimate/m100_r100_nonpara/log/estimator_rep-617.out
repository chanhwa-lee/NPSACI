
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7501"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 60 62 63 64 67 68 69 71 72 73 74 75 76 77 78 80 81 
 2  2  1  2  2  2  4  3  3  2  5  1  2  2  2  3  1  1  1  6  1  7  1  3  1  1 
82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 99 
 1  2  5  1  1  2  2  3  1  5  2  4  1  3  3  2  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04723 0.38372 0.63370 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4436 3065 
[1] "treatment indicator table: "

   0    1 
2777 4724 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3772
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3729
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 620.896 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.420 0.113 
 2 mu         0.1   0.2 0.503 0.146 
 3 mu         0.1   0.3 0.600 0.170 
 4 mu         0.1   0.4 0.643 0.186 
 5 mu         0.1   0.5 0.724 0.205 
 6 mu         0.2   0.1 0.358 0.0322
 7 mu         0.2   0.2 0.422 0.0325
 8 mu         0.2   0.3 0.504 0.0348
 9 mu         0.2   0.4 0.543 0.0379
10 mu         0.2   0.5 0.608 0.0459
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.27        0.0656 0.000000970     26.8 
 2 mu         0.2      1.08        0.985  0.0405           3.24
 3 mu         0.3      1.11        1.08   0.351            2.20
 4 mu         0.4      1.01        0.968  0.467            1.90
 5 mu         0.5      1.02        1.01   0.632            1.58
 6 mu         0.6      0.985       0.993  0.595            1.39
 7 mu         0.7      0.984       0.989  0.667            1.37
 8 mu         0.8      1.01        0.991  0.546            1.75
 9 mu         0.9      1.01        0.887  0.0608           2.38
10 mu_1       0.1      1.15        0.122  0.00000284      17.1 
11 mu_1       0.2      1.09        0.989  0.0595           3.07
12 mu_1       0.3      1.10        1.01   0.353            2.27
13 mu_1       0.4      1.00        0.980  0.427            1.88
14 mu_1       0.5      1.01        1.00   0.634            1.55
15 mu_1       0.6      0.984       0.997  0.602            1.40
16 mu_1       0.7      0.985       0.979  0.663            1.36
17 mu_1       0.8      1.01        0.989  0.534            1.76
18 mu_1       0.9      1.01        0.870  0.0570           2.41
19 mu_0       0.1      1.28        0.0594 0.000000763     28.2 
20 mu_0       0.2      1.08        0.980  0.0355           3.29
21 mu_0       0.3      1.11        1.07   0.342            2.17
22 mu_0       0.4      1.01        0.963  0.463            1.90
23 mu_0       0.5      1.02        0.999  0.603            1.61
24 mu_0       0.6      0.986       0.999  0.585            1.38
25 mu_0       0.7      0.983       0.988  0.676            1.39
26 mu_0       0.8      1.00        0.976  0.577            1.72
27 mu_0       0.9      1.02        0.959  0.0956           2.16
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000130     6.52e-27  8.37e-78    0.0129
 2 mu         0.2   0.141        3.45e-14  2.27e-51   10.3   
 3 mu         0.3   0.658        8.31e- 8  4.19e-36   19.3   
 4 mu         0.4   1.26         1.25e- 3  1.88e-25   24.1   
 5 mu         0.5   1.27         1.21e- 1  2.21e-17    7.91  
 6 mu         0.6   1.01         3.11e- 1  5.16e-11    9.57  
 7 mu         0.7   1.03         2.90e- 1  6.77e-15   11.0   
 8 mu         0.8   1.27         9.05e- 3  1.76e-25    8.77  
 9 mu         0.9   1.57         9.13e- 9  7.18e-45   59.3   
10 mu_1       0.1   0.000321     4.01e-26  7.76e-77    0.0319
11 mu_1       0.2   0.183        1.07e-13  1.05e-50   12.7   
12 mu_1       0.3   0.697        1.76e- 7  1.30e-35   21.5   
13 mu_1       0.4   1.32         1.93e- 3  4.35e-25   25.2   
14 mu_1       0.5   1.24         1.33e- 1  4.09e-17    7.73  
15 mu_1       0.6   1.01         3.15e- 1  7.98e-11    9.71  
16 mu_1       0.7   1.04         2.50e- 1  2.72e-15   11.4   
17 mu_1       0.8   1.27         6.85e- 3  6.20e-26    8.78  
18 mu_1       0.9   1.57         6.42e- 9  2.24e-45   61.2   
19 mu_0       0.1   0.000109     2.79e-27  6.78e-79    0.0108
20 mu_0       0.2   0.131        1.65e-14  2.07e-52    9.65  
21 mu_0       0.3   0.641        4.33e- 8  4.37e-37   19.8   
22 mu_0       0.4   1.22         7.94e- 4  2.28e-26   23.3   
23 mu_0       0.5   1.30         8.88e- 2  3.22e-18    8.91  
24 mu_0       0.6   1.02         3.31e- 1  9.41e-12    9.37  
25 mu_0       0.7   1.00         3.02e- 1  1.62e-14   10.1   
26 mu_0       0.8   1.26         1.75e- 2  6.33e-25    9.90  
27 mu_0       0.9   1.51         3.34e- 8  5.16e-44   41.6   
[1] "Total run time was 625.761 seconds"
