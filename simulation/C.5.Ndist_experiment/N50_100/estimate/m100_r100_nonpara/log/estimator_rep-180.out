
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7440"
[1] "cluster size dist'n: "

 50  51  52  53  56  57  58  62  64  65  66  67  68  69  70  71  72  73  74  75 
  2   2   1   5   2   2   6   4   1   2   1   4   4   1   4   2   2   5   2   2 
 76  77  78  80  81  82  83  84  85  86  87  88  89  91  92  93  94  95  97  98 
  6   3   2   1   2   2   2   1   2   2   1   1   1   4   2   3   2   2   1   1 
 99 100 
  4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04294 0.37096 0.62680 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4434 3006 
[1] "treatment indicator table: "

   0    1 
2504 4936 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3683
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 424.436 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.290 0.0905
 2 mu         0.1   0.2 0.370 0.0861
 3 mu         0.1   0.3 0.419 0.0851
 4 mu         0.1   0.4 0.440 0.0955
 5 mu         0.1   0.5 0.508 0.0951
 6 mu         0.2   0.1 0.329 0.0612
 7 mu         0.2   0.2 0.419 0.0594
 8 mu         0.2   0.3 0.474 0.0574
 9 mu         0.2   0.4 0.514 0.0652
10 mu         0.2   0.5 0.576 0.0607
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.863        0.194 0.00000000181      6.94
 2 mu         0.2      1.00         0.785 0.00148            4.05
 3 mu         0.3      1.02         0.951 0.136              3.13
 4 mu         0.4      0.980        0.965 0.347              1.69
 5 mu         0.5      0.986        0.987 0.582              1.42
 6 mu         0.6      1.01         1.00  0.584              1.55
 7 mu         0.7      1.02         1.02  0.691              1.52
 8 mu         0.8      1.01         0.997 0.532              1.60
 9 mu         0.9      1.02         0.995 0.397              1.62
10 mu_1       0.1      0.849        0.334 0.00000000587      5.97
11 mu_1       0.2      1.01         0.893 0.00293            3.96
12 mu_1       0.3      1.01         0.974 0.189              2.99
13 mu_1       0.4      0.979        0.959 0.360              1.65
14 mu_1       0.5      0.987        0.978 0.584              1.42
15 mu_1       0.6      1.01         1.01  0.565              1.54
16 mu_1       0.7      1.02         1.02  0.694              1.52
17 mu_1       0.8      1.01         0.989 0.534              1.58
18 mu_1       0.9      1.02         0.999 0.387              1.62
19 mu_0       0.1      0.865        0.176 0.00000000136      7.17
20 mu_0       0.2      0.999        0.769 0.00112            4.08
21 mu_0       0.3      1.02         0.934 0.113              3.19
22 mu_0       0.4      0.980        0.983 0.339              1.71
23 mu_0       0.5      0.986        0.987 0.580              1.42
24 mu_0       0.6      1.01         0.995 0.613              1.55
25 mu_0       0.7      1.02         1.02  0.674              1.51
26 mu_0       0.8      1.01         1.01  0.528              1.66
27 mu_0       0.9      1.02         0.993 0.466              1.68
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00606     1.21e-31  8.47e-82     0.303
 2 mu         0.2    1.22        7.31e-18  3.68e-54    27.8  
 3 mu         0.3    1.60        1.11e-10  3.44e-38    25.1  
 4 mu         0.4    0.695       6.16e- 6  4.86e-27    12.7  
 5 mu         0.5    0.745       2.35e- 3  1.40e-18    11.1  
 6 mu         0.6    1.19        7.57e- 2  4.57e-13    11.9  
 7 mu         0.7    1.41        4.12e- 1  6.82e-16    10.1  
 8 mu         0.8    1.25        2.80e- 1  5.26e-27     7.49 
 9 mu         0.9    1.23        4.13e- 5  2.68e-47    12.7  
10 mu_1       0.1    0.0144      8.70e-31  7.88e-81     0.731
11 mu_1       0.2    1.51        2.69e-17  1.71e-53    33.6  
12 mu_1       0.3    1.42        2.66e-10  1.07e-37    22.5  
13 mu_1       0.4    0.693       1.10e- 5  1.13e-26    12.7  
14 mu_1       0.5    0.767       2.53e- 3  2.60e-18    11.8  
15 mu_1       0.6    1.20        8.41e- 2  7.62e-13    12.0  
16 mu_1       0.7    1.42        4.16e- 1  2.66e-16    10.0  
17 mu_1       0.8    1.25        2.40e- 1  1.79e-27     7.96 
18 mu_1       0.9    1.22        3.18e- 5  8.12e-48    12.6  
19 mu_0       0.1    0.00513     3.77e-32  0            0.255
20 mu_0       0.2    1.15        2.42e-18  0           26.4  
21 mu_0       0.3    1.68        4.24e-11  0           27.0  
22 mu_0       0.4    0.697       2.99e- 6  0           12.6  
23 mu_0       0.5    0.723       1.57e- 3  0           10.3  
24 mu_0       0.6    1.16        5.04e- 2  0           11.6  
25 mu_0       0.7    1.40        4.40e- 1  0           10.3  
26 mu_0       0.8    1.25        2.97e- 1  0            6.50 
27 mu_0       0.9    1.37        9.76e- 5  0           13.3  
[1] "Total run time was 427.883 seconds"
