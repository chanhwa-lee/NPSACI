
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7611"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  60  63  64  65  66  69  70  71  72  73  74  75 
  5   1   4   1   1   2   2   1   3   3   2   2   1   3   2   2   4   2   2   3 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  95  96 
  4   3   1   3   3   1   2   2   1   3   1   2   3   1   2   1   5   4   2   2 
 97  98  99 100 
  3   1   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04686 0.37662 0.63460 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4590 3021 
[1] "treatment indicator table: "

   0    1 
2608 5003 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3760
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3851
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 420.626 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.271 0.0357
 2 mu         0.1   0.2 0.396 0.0467
 3 mu         0.1   0.3 0.447 0.0548
 4 mu         0.1   0.4 0.553 0.0667
 5 mu         0.1   0.5 0.556 0.0656
 6 mu         0.2   0.1 0.267 0.0232
 7 mu         0.2   0.2 0.376 0.0276
 8 mu         0.2   0.3 0.427 0.0324
 9 mu         0.2   0.4 0.518 0.0402
10 mu         0.2   0.5 0.527 0.0384
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.01         0.680 0.00000000876      7.86
 2 mu         0.2      0.995        0.889 0.00924            5.50
 3 mu         0.3      1.03         0.913 0.459              2.77
 4 mu         0.4      1.01         1.01  0.498              1.65
 5 mu         0.5      1.01         1.00  0.472              1.72
 6 mu         0.6      1.02         1.00  0.673              1.47
 7 mu         0.7      1.03         0.996 0.676              1.51
 8 mu         0.8      0.973        0.972 0.551              1.78
 9 mu         0.9      0.948        0.953 0.0865             1.70
10 mu_1       0.1      0.975        0.750 0.0000000274       6.56
11 mu_1       0.2      1.00         0.911 0.0148             5.89
12 mu_1       0.3      1.03         0.911 0.469              2.76
13 mu_1       0.4      1.01         1.02  0.485              1.63
14 mu_1       0.5      1.01         1.00  0.465              1.68
15 mu_1       0.6      1.03         1.01  0.678              1.51
16 mu_1       0.7      1.03         0.999 0.675              1.49
17 mu_1       0.8      0.971        0.966 0.556              1.79
18 mu_1       0.9      0.948        0.959 0.0796             1.73
19 mu_0       0.1      1.01         0.661 0.00000000668      8.00
20 mu_0       0.2      0.994        0.893 0.00784            5.41
21 mu_0       0.3      1.03         0.932 0.426              2.78
22 mu_0       0.4      1.01         1.02  0.502              1.66
23 mu_0       0.5      1.01         1.00  0.479              1.76
24 mu_0       0.6      1.02         1.01  0.664              1.43
25 mu_0       0.7      1.03         1.00  0.677              1.56
26 mu_0       0.8      0.980        0.966 0.527              1.75
27 mu_0       0.9      0.947        0.930 0.149              1.56
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0698     3.86e-30  2.44e-77      6.57
 2 mu         0.2     0.393      1.18e-17  5.90e-51     17.9 
 3 mu         0.3     1.08       2.13e-10  9.52e-36     22.4 
 4 mu         0.4     1.00       2.47e- 5  3.65e-25     10.8 
 5 mu         0.5     0.727      3.11e- 3  3.58e-17      6.51
 6 mu         0.6     0.901      4.32e- 2  1.69e-11      6.51
 7 mu         0.7     1.16       1.93e- 1  1.06e-17     10.4 
 8 mu         0.8     1.69       9.61e- 2  8.35e-27     26.2 
 9 mu         0.9     1.37       6.52e- 5  7.53e-43     24.3 
10 mu_1       0.1     0.110      2.82e-29  2.24e-76     10.1 
11 mu_1       0.2     0.435      3.83e-17  2.71e-50     19.6 
12 mu_1       0.3     1.14       4.87e-10  2.91e-35     23.8 
13 mu_1       0.4     0.972      4.26e- 5  8.38e-25     10.1 
14 mu_1       0.5     0.725      2.60e- 3  6.58e-17      6.19
15 mu_1       0.6     0.911      3.85e- 2  4.35e-12      7.06
16 mu_1       0.7     1.18       2.05e- 1  2.34e-18      9.92
17 mu_1       0.8     1.68       9.83e- 2  1.61e-27     26.7 
18 mu_1       0.9     1.38       5.00e- 5  1.29e-43     23.9 
19 mu_0       0.1     0.0653     1.01e-30  2.24e-78      6.18
20 mu_0       0.2     0.382      5.19e-18  6.08e-52     17.5 
21 mu_0       0.3     1.06       9.65e-11  1.12e-36     21.7 
22 mu_0       0.4     1.02       1.28e- 5  5.02e-26     11.5 
23 mu_0       0.5     0.728      3.23e- 3  5.91e-18      7.25
24 mu_0       0.6     0.886      2.43e- 2  1.38e-11      6.82
25 mu_0       0.7     1.11       1.67e- 1  3.00e-17     11.6 
26 mu_0       0.8     1.73       6.96e- 2  3.53e-26     24.1 
27 mu_0       0.9     1.28       2.02e- 4  6.37e-42     27.6 
[1] "Total run time was 424.573 seconds"
