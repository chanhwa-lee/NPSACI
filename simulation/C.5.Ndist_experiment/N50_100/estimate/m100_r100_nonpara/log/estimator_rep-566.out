
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7591"
[1] "cluster size dist'n: "

 50  51  53  54  56  57  58  59  60  61  62  63  64  65  66  67  69  70  71  72 
  1   3   2   2   2   2   1   3   3   2   4   2   4   1   4   3   3   1   2   2 
 73  74  75  76  78  79  80  81  82  83  84  85  87  89  90  92  93  94  95  96 
  1   3   1   2   1   2   1   1   5   2   1   1   4   2   1   3   2   1   4   2 
 97  98  99 100 
  4   2   4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04655 0.38245 0.63818 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4530 3061 
[1] "treatment indicator table: "

   0    1 
2678 4913 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3762
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 61"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3829
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 352.52 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.355 0.115 
 2 mu         0.1   0.2 0.444 0.136 
 3 mu         0.1   0.3 0.515 0.154 
 4 mu         0.1   0.4 0.538 0.166 
 5 mu         0.1   0.5 0.552 0.181 
 6 mu         0.2   0.1 0.358 0.0508
 7 mu         0.2   0.2 0.432 0.0546
 8 mu         0.2   0.3 0.499 0.0595
 9 mu         0.2   0.4 0.524 0.0603
10 mu         0.2   0.5 0.559 0.0710
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.955       0.0203 0.0000000874     21.2 
 2 mu         0.2      0.961       0.710  0.00421           5.52
 3 mu         0.3      1.04        1.04   0.160             2.23
 4 mu         0.4      1.00        0.984  0.370             1.82
 5 mu         0.5      0.968       0.966  0.480             1.42
 6 mu         0.6      1.00        0.996  0.440             1.66
 7 mu         0.7      1.03        0.992  0.709             2.31
 8 mu         0.8      0.997       0.988  0.273             1.59
 9 mu         0.9      1.00        1.00   0.188             2.12
10 mu_1       0.1      0.903       0.0445 0.000000284      19.5 
11 mu_1       0.2      0.984       0.788  0.00689           5.13
12 mu_1       0.3      1.03        1.03   0.194             2.22
13 mu_1       0.4      0.999       0.971  0.366             1.76
14 mu_1       0.5      0.968       0.964  0.467             1.43
15 mu_1       0.6      1.01        0.984  0.452             1.65
16 mu_1       0.7      1.03        1.00   0.711             2.33
17 mu_1       0.8      0.995       0.994  0.265             1.58
18 mu_1       0.9      1.00        1.00   0.178             2.13
19 mu_0       0.1      0.960       0.0179 0.0000000656     21.4 
20 mu_0       0.2      0.955       0.713  0.00354           5.62
21 mu_0       0.3      1.04        1.02   0.146             2.23
22 mu_0       0.4      1.00        0.989  0.372             1.85
23 mu_0       0.5      0.968       0.951  0.493             1.45
24 mu_0       0.6      1.00        1.00   0.422             1.68
25 mu_0       0.7      1.03        0.992  0.703             2.28
26 mu_0       0.8      1.00        0.967  0.305             1.67
27 mu_0       0.9      0.994       0.995  0.278             2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1 0.00000335     1.99e-29  5.25e-74  0.000270
 2 mu         0.2 0.105          7.18e-16  5.00e-48  6.01    
 3 mu         0.3 0.795          6.89e- 9  4.12e-33 35.6     
 4 mu         0.4 0.905          8.48e- 5  5.18e-23  8.84    
 5 mu         0.5 1.14           1.13e- 2  6.03e-16  9.42    
 6 mu         0.6 0.948          1.69e- 1  2.47e-10  7.16    
 7 mu         0.7 0.951          2.40e- 1  9.10e-15  8.50    
 8 mu         0.8 1.26           6.72e- 2  3.11e-25 17.6     
 9 mu         0.9 1.56           2.97e- 6  2.25e-44 43.8     
10 mu_1       0.1 0.00000943     1.31e-28  4.71e-73  0.000746
11 mu_1       0.2 0.148          2.53e-15  2.25e-47  8.31    
12 mu_1       0.3 0.803          1.38e- 8  1.23e-32 34.3     
13 mu_1       0.4 0.963          1.41e- 4  1.22e-22  9.94    
14 mu_1       0.5 1.13           1.57e- 2  1.13e-15  9.93    
15 mu_1       0.6 0.937          1.77e- 1  3.87e-10  7.11    
16 mu_1       0.7 0.955          2.46e- 1  3.59e-15  8.59    
17 mu_1       0.8 1.27           5.60e- 2  1.07e-25 18.3     
18 mu_1       0.9 1.57           2.24e- 6  6.92e-45 45.0     
19 mu_0       0.1 0.00000267     7.53e-30  5.95e-75  0.000217
20 mu_0       0.2 0.0938         2.39e-16  6.38e-49  5.44    
21 mu_0       0.3 0.792          3.63e- 9  6.01e-34 36.2     
22 mu_0       0.4 0.867          4.74e- 5  5.26e-24  8.10    
23 mu_0       0.5 1.15           7.16e- 3  7.36e-17 10.0     
24 mu_0       0.6 0.965          1.52e- 1  3.77e-11  7.22    
25 mu_0       0.7 0.943          2.29e- 1  2.19e-14  8.30    
26 mu_0       0.8 1.21           1.12e- 1  1.12e-24 14.6     
27 mu_0       0.9 1.41           9.39e- 6  1.63e-43 33.3     
[1] "Total run time was 355.626 seconds"
