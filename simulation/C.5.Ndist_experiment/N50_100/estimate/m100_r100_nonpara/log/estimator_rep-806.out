
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7756"
[1] "cluster size dist'n: "

 51  52  54  55  56  57  58  62  64  65  66  67  68  69  70  71  73  74  75  76 
  1   1   2   1   4   1   2   4   1   2   2   4   4   1   3   3   3   1   3   3 
 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94  95  96  97 
  4   1   3   2   3   4   3   3   2   1   1   1   4   2   2   2   3   2   1   3 
 98  99 100 
  2   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02253 0.30625 0.57898 0.97419 6.00000 
[1] "event indicator table: "

   0    1 
4644 3112 
[1] "treatment indicator table: "

   0    1 
3092 4664 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3854
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3902
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 385.657 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.432 0.0451
 2 mu         0.1   0.2 0.564 0.0686
 3 mu         0.1   0.3 0.646 0.0809
 4 mu         0.1   0.4 0.684 0.0771
 5 mu         0.1   0.5 0.698 0.0728
 6 mu         0.2   0.1 0.377 0.0265
 7 mu         0.2   0.2 0.479 0.0332
 8 mu         0.2   0.3 0.556 0.0435
 9 mu         0.2   0.4 0.601 0.0426
10 mu         0.2   0.5 0.623 0.0405
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.08         0.772 0.000000311      5.36
 2 mu         0.2      1.00         0.956 0.0125           2.39
 3 mu         0.3      1.04         1.00  0.319            2.00
 4 mu         0.4      1.02         0.993 0.422            1.68
 5 mu         0.5      0.983        0.960 0.649            1.37
 6 mu         0.6      0.997        0.980 0.672            1.50
 7 mu         0.7      1.01         0.997 0.637            1.53
 8 mu         0.8      1.01         0.983 0.525            1.72
 9 mu         0.9      0.974        0.948 0.251            1.74
10 mu_1       0.1      1.13         0.920 0.000000962      5.37
11 mu_1       0.2      0.995        0.954 0.0199           2.28
12 mu_1       0.3      1.04         1.02  0.359            1.97
13 mu_1       0.4      1.02         1.00  0.411            1.66
14 mu_1       0.5      0.981        0.952 0.635            1.43
15 mu_1       0.6      0.999        0.981 0.674            1.51
16 mu_1       0.7      1.01         1.01  0.635            1.53
17 mu_1       0.8      1.01         0.984 0.519            1.72
18 mu_1       0.9      0.974        0.937 0.245            1.74
19 mu_0       0.1      1.07         0.747 0.000000238      5.35
20 mu_0       0.2      1.01         0.954 0.0107           2.42
21 mu_0       0.3      1.04         1.01  0.303            2.01
22 mu_0       0.4      1.02         0.986 0.430            1.69
23 mu_0       0.5      0.984        0.960 0.660            1.37
24 mu_0       0.6      0.995        0.979 0.668            1.49
25 mu_0       0.7      1.01         0.998 0.642            1.52
26 mu_0       0.8      1.01         0.989 0.549            1.72
27 mu_0       0.9      0.972        0.976 0.297            1.73
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.432     6.48e-27  6.70e-75     33.7 
 2 mu         0.2      1.24      1.98e-14  4.04e-49     35.4 
 3 mu         0.3      0.970     2.47e- 7  2.90e-34     13.2 
 4 mu         0.4      1.26      7.62e- 4  6.26e-24     11.4 
 5 mu         0.5      1.29      3.91e- 2  3.93e-16     20.3 
 6 mu         0.6      0.902     1.18e- 1  3.35e-16     12.8 
 7 mu         0.7      1.22      9.52e- 2  5.96e-25     11.3 
 8 mu         0.8      1.48      2.46e- 2  9.34e-38     33.1 
 9 mu         0.9      0.967     2.48e- 7  2.86e-60     16.3 
10 mu_1       0.1      0.652     3.66e-26  6.13e-74     48.7 
11 mu_1       0.2      1.15      5.80e-14  1.85e-48     29.8 
12 mu_1       0.3      1.02      5.14e- 7  8.85e-34     13.6 
13 mu_1       0.4      1.26      8.21e- 4  1.43e-23      9.92
14 mu_1       0.5      1.27      5.19e- 2  7.19e-16     19.6 
15 mu_1       0.6      0.903     1.37e- 1  8.07e-17     12.1 
16 mu_1       0.7      1.24      9.28e- 2  1.23e-25     11.8 
17 mu_1       0.8      1.47      1.89e- 2  1.69e-38     33.0 
18 mu_1       0.9      0.968     1.74e- 7  4.59e-61     16.5 
19 mu_0       0.1      0.407     3.13e-27  6.27e-76     32.0 
20 mu_0       0.2      1.26      1.03e-14  4.25e-50     36.7 
21 mu_0       0.3      0.948     1.33e- 7  3.49e-35     14.2 
22 mu_0       0.4      1.27      4.17e- 4  8.78e-25     12.4 
23 mu_0       0.5      1.31      2.62e- 2  6.61e-17     21.0 
24 mu_0       0.6      0.901     9.78e- 2  7.17e-16     13.8 
25 mu_0       0.7      1.18      1.08e- 1  1.70e-24     10.1 
26 mu_0       0.8      1.52      3.53e- 2  4.00e-37     33.5 
27 mu_0       0.9      0.954     9.15e- 7  2.45e-59     14.6 
[1] "Total run time was 388.78 seconds"
