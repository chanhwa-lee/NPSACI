
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7511"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  64  65  66  69  70  71  72  73 
  4   5   2   1   1   4   3   2   1   1   2   1   1   2   1   2   3   5   6   1 
 74  76  77  78  79  80  81  82  83  84  85  86  87  88  89  91  92  93  95  96 
  2   1   2   1   2   5   1   1   1   2   3   2   4   3   2   1   1   4   3   1 
 97  98  99 100 
  2   1   3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05112 0.40193 0.66026 1.00000 5.97621 
[1] "event indicator table: "

   0    1 
4598 2913 
[1] "treatment indicator table: "

   0    1 
2390 5121 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3850
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3661
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 396.76 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.258 0.0477
 2 mu         0.1   0.2 0.315 0.0495
 3 mu         0.1   0.3 0.340 0.0578
 4 mu         0.1   0.4 0.347 0.0721
 5 mu         0.1   0.5 0.357 0.0842
 6 mu         0.2   0.1 0.299 0.0348
 7 mu         0.2   0.2 0.376 0.0229
 8 mu         0.2   0.3 0.414 0.0277
 9 mu         0.2   0.4 0.434 0.0427
10 mu         0.2   0.5 0.454 0.0544
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.748        0.296 0.0000134      5.68
 2 mu         0.2      0.984        0.914 0.0898         3.56
 3 mu         0.3      1.00         0.987 0.338          2.64
 4 mu         0.4      1.02         1.02  0.405          2.22
 5 mu         0.5      1.03         1.02  0.517          1.59
 6 mu         0.6      1.03         0.982 0.593          1.86
 7 mu         0.7      1.00         0.988 0.636          1.46
 8 mu         0.8      1.02         0.975 0.536          2.11
 9 mu         0.9      0.979        0.944 0.180          1.72
10 mu_1       0.1      0.798        0.445 0.0000363      5.85
11 mu_1       0.2      0.997        0.954 0.125          3.57
12 mu_1       0.3      1.00         0.994 0.369          2.84
13 mu_1       0.4      1.02         1.01  0.413          2.07
14 mu_1       0.5      1.04         1.03  0.511          1.58
15 mu_1       0.6      1.03         0.977 0.593          1.87
16 mu_1       0.7      1.00         0.998 0.634          1.46
17 mu_1       0.8      1.02         0.975 0.532          2.08
18 mu_1       0.9      0.979        0.944 0.172          1.74
19 mu_0       0.1      0.742        0.279 0.0000108      5.66
20 mu_0       0.2      0.981        0.906 0.0810         3.56
21 mu_0       0.3      1.00         0.997 0.325          2.56
22 mu_0       0.4      1.02         1.02  0.400          2.32
23 mu_0       0.5      1.03         1.02  0.523          1.60
24 mu_0       0.6      1.03         0.998 0.595          1.84
25 mu_0       0.7      1.00         1.01  0.641          1.46
26 mu_0       0.8      1.03         0.986 0.550          2.20
27 mu_0       0.9      0.979        0.947 0.249          1.63
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00141     1.66e-29  5.60e-79    0.112 
 2 mu         0.2    0.324       3.50e-17  4.81e-54   17.4   
 3 mu         0.3    0.355       1.63e-10  1.74e-39   18.6   
 4 mu         0.4    0.630       1.05e- 5  3.49e-29   10.2   
 5 mu         0.5    1.45        1.28e- 2  3.21e-21   25.2   
 6 mu         0.6    1.41        1.18e- 1  9.60e-15   15.6   
 7 mu         0.7    1.25        2.96e- 1  1.53e-18    9.67  
 8 mu         0.8    1.16        1.60e- 1  1.37e-29   15.7   
 9 mu         0.9    2.03        9.07e- 5  2.17e-49   27.0   
10 mu_1       0.1    0.00316     1.11e-28  5.53e-78    0.242 
11 mu_1       0.2    0.379       1.33e-16  2.38e-53   18.9   
12 mu_1       0.3    0.355       3.94e-10  5.72e-39   15.8   
13 mu_1       0.4    0.670       1.76e- 5  8.62e-29   10.3   
14 mu_1       0.5    1.49        1.80e- 2  6.35e-21   27.1   
15 mu_1       0.6    1.39        1.20e- 1  1.58e-14   14.0   
16 mu_1       0.7    1.25        3.18e- 1  4.72e-19    9.14  
17 mu_1       0.8    1.17        1.43e- 1  3.70e-30   16.8   
18 mu_1       0.9    2.05        7.42e- 5  5.22e-50   28.4   
19 mu_0       0.1    0.00122     6.12e-30  7.40e-81    0.0976
20 mu_0       0.2    0.310       1.06e-17  7.16e-56   17.0   
21 mu_0       0.3    0.355       7.48e-11  2.95e-41   19.9   
22 mu_0       0.4    0.603       5.74e- 6  6.92e-31   10.2   
23 mu_0       0.5    1.40        7.67e- 3  7.65e-23   23.3   
24 mu_0       0.6    1.44        8.96e- 2  2.86e-16   18.0   
25 mu_0       0.7    1.24        3.46e- 1  4.00e-18   10.9   
26 mu_0       0.8    1.15        2.28e- 1  5.37e-29   11.4   
27 mu_0       0.9    1.88        2.39e- 4  1.71e-48   23.4   
[1] "Total run time was 400.089 seconds"
