
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7406"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  62  63  64  65  67  68  69  70  71  72 
  2   3   2   2   2   1   3   2   4   5   4   1   2   3   1   5   1   2   3   1 
 73  74  75  76  77  78  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  2   4   1   3   1   2   1   2   2   1   2   2   1   5   1   2   2   2   3   1 
 95  96  97  98  99 100 
  4   2   1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02695 0.32112 0.59052 1.00000 6.70803 
[1] "event indicator table: "

   0    1 
4301 3105 
[1] "treatment indicator table: "

   0    1 
2900 4506 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3564
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3842
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.679 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.360 0.0798
 2 mu         0.1   0.2 0.427 0.0615
 3 mu         0.1   0.3 0.521 0.0831
 4 mu         0.1   0.4 0.556 0.0732
 5 mu         0.1   0.5 0.565 0.0645
 6 mu         0.2   0.1 0.374 0.0562
 7 mu         0.2   0.2 0.438 0.0369
 8 mu         0.2   0.3 0.520 0.0434
 9 mu         0.2   0.4 0.582 0.0522
10 mu         0.2   0.5 0.614 0.0558
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.874        0.661  0.000805      3.48
 2 mu         0.2      1.01         0.969  0.255         2.18
 3 mu         0.3      0.998        0.974  0.450         2.26
 4 mu         0.4      1.02         1.00   0.617         1.83
 5 mu         0.5      1.00         1.01   0.489         1.43
 6 mu         0.6      0.987        0.962  0.523         1.44
 7 mu         0.7      0.991        0.981  0.392         1.52
 8 mu         0.8      0.959        0.944  0.467         1.57
 9 mu         0.9      1.07         1.02   0.0321        2.38
10 mu_1       0.1      0.893        0.800  0.00193       3.69
11 mu_1       0.2      1.01         1.02   0.324         2.28
12 mu_1       0.3      0.996        0.981  0.437         2.13
13 mu_1       0.4      1.03         0.994  0.621         1.82
14 mu_1       0.5      0.999        1.01   0.501         1.40
15 mu_1       0.6      0.988        0.962  0.526         1.43
16 mu_1       0.7      0.990        0.977  0.384         1.52
17 mu_1       0.8      0.959        0.948  0.470         1.58
18 mu_1       0.9      1.07         1.01   0.0294        2.42
19 mu_0       0.1      0.872        0.656  0.000680      3.46
20 mu_0       0.2      1.01         0.954  0.238         2.23
21 mu_0       0.3      0.999        0.958  0.455         2.32
22 mu_0       0.4      1.02         1.00   0.604         1.84
23 mu_0       0.5      1.00         1.01   0.477         1.47
24 mu_0       0.6      0.986        0.951  0.518         1.45
25 mu_0       0.7      0.994        0.988  0.410         1.53
26 mu_0       0.8      0.956        0.950  0.453         1.62
27 mu_0       0.9      1.06         1.08   0.0564        2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0469     1.77e-22  2.58e-70      3.92
 2 mu         0.2     0.386      4.22e-12  1.24e-46     13.8 
 3 mu         0.3     0.617      2.40e- 6  2.64e-33     12.1 
 4 mu         0.4     1.46       5.57e- 3  5.94e-24     14.2 
 5 mu         0.5     1.22       1.55e- 1  8.30e-17     12.7 
 6 mu         0.6     0.900      7.70e- 2  1.84e-13      8.55
 7 mu         0.7     1.05       5.70e- 2  1.68e-21      8.57
 8 mu         0.8     1.59       2.02e- 3  1.73e-33     11.0 
 9 mu         0.9     1.49       8.79e-10  7.63e-55     22.5 
10 mu_1       0.1     0.0793     9.43e-22  2.26e-69      6.42
11 mu_1       0.2     0.397      1.42e-11  5.90e-46     13.6 
12 mu_1       0.3     0.686      4.67e- 6  8.36e-33     12.9 
13 mu_1       0.4     1.49       4.33e- 3  1.41e-23     14.9 
14 mu_1       0.5     1.20       1.91e- 1  1.58e-16     13.5 
15 mu_1       0.6     0.888      6.86e- 2  6.00e-14      8.34
16 mu_1       0.7     1.08       4.73e- 2  4.69e-22      8.40
17 mu_1       0.8     1.60       1.56e- 3  4.23e-34     11.1 
18 mu_1       0.9     1.46       5.64e-10  1.66e-55     22.4 
19 mu_0       0.1     0.0433     9.15e-23  3.51e-71      3.64
20 mu_0       0.2     0.383      1.73e-12  7.67e-48     13.8 
21 mu_0       0.3     0.587      1.45e- 6  1.86e-34     11.7 
22 mu_0       0.4     1.45       3.58e- 3  4.89e-25     13.7 
23 mu_0       0.5     1.24       1.25e- 1  8.20e-18     11.8 
24 mu_0       0.6     0.918      5.27e- 2  3.70e-13      8.87
25 mu_0       0.7     0.998      6.10e- 2  4.50e-21      8.96
26 mu_0       0.8     1.57       1.87e- 3  6.95e-33     11.6 
27 mu_0       0.9     1.75       3.71e- 9  6.13e-54     23.8 
[1] "Total run time was 401.943 seconds"
