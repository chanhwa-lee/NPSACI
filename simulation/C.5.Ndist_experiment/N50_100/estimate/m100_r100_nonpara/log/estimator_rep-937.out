
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7692"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  63  64  66  67  69  71  72  73  74 
  1   3   2   1   1   3   1   3   3   4   3   1   5   1   1   2   1   2   1   1 
 75  76  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  94  95 
  3   4   1   3   2   3   1   2   1   1   2   2   4   6   2   2   3   4   1   2 
 96  97  98  99 100 
  1   2   3   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03742 0.36249 0.63115 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4606 3086 
[1] "treatment indicator table: "

   0    1 
2819 4873 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3841
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3851
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 387.618 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.346 0.0316
 2 mu         0.1   0.2 0.410 0.0450
 3 mu         0.1   0.3 0.489 0.0474
 4 mu         0.1   0.4 0.526 0.0478
 5 mu         0.1   0.5 0.582 0.0578
 6 mu         0.2   0.1 0.340 0.0196
 7 mu         0.2   0.2 0.402 0.0285
 8 mu         0.2   0.3 0.455 0.0270
 9 mu         0.2   0.4 0.498 0.0310
10 mu         0.2   0.5 0.536 0.0290
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.942        0.781 0.000000885      4.84
 2 mu         0.2      0.981        0.973 0.0415           2.26
 3 mu         0.3      1.00         0.986 0.357            1.85
 4 mu         0.4      1.04         1.03  0.547            1.65
 5 mu         0.5      1.03         1.04  0.568            1.55
 6 mu         0.6      1.00         0.998 0.714            1.43
 7 mu         0.7      1.01         0.989 0.597            1.48
 8 mu         0.8      1.01         0.986 0.560            1.62
 9 mu         0.9      1.01         1.05  0.238            1.81
10 mu_1       0.1      0.999        0.850 0.00000247       4.63
11 mu_1       0.2      0.973        0.973 0.0610           2.24
12 mu_1       0.3      1.01         1.00  0.376            1.93
13 mu_1       0.4      1.04         1.03  0.574            1.63
14 mu_1       0.5      1.03         1.04  0.548            1.54
15 mu_1       0.6      1.00         1.00  0.706            1.44
16 mu_1       0.7      1.01         0.983 0.586            1.48
17 mu_1       0.8      1.01         0.996 0.560            1.61
18 mu_1       0.9      1.01         1.04  0.235            1.81
19 mu_0       0.1      0.936        0.758 0.000000708      4.86
20 mu_0       0.2      0.982        0.997 0.0366           2.27
21 mu_0       0.3      0.999        0.993 0.348            1.82
22 mu_0       0.4      1.04         1.03  0.529            1.68
23 mu_0       0.5      1.03         1.04  0.589            1.57
24 mu_0       0.6      1.00         0.987 0.707            1.43
25 mu_0       0.7      1.01         1.01  0.623            1.47
26 mu_0       0.8      1.01         0.950 0.560            1.68
27 mu_0       0.9      1.01         1.02  0.271            1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.58      1.95e-25  1.30e-77     141. 
 2 mu         0.2      0.438     3.46e-13  3.52e-52      20.2
 3 mu         0.3      0.477     5.46e- 7  1.46e-37      15.8
 4 mu         0.4      0.697     1.05e- 3  2.87e-27      16.8
 5 mu         0.5      1.40      7.30e- 2  2.30e-19      25.0
 6 mu         0.6      1.40      2.02e- 1  2.14e-19      13.5
 7 mu         0.7      1.46      1.03e- 1  1.16e-28      18.8
 8 mu         0.8      1.51      2.38e- 2  4.73e-42      19.4
 9 mu         0.9      2.04      3.81e- 7  2.26e-65      22.9
10 mu_1       0.1      1.71      1.16e-24  1.20e-76     145. 
11 mu_1       0.2      0.376     1.10e-12  1.70e-51      15.5
12 mu_1       0.3      0.483     1.21e- 6  4.70e-37      15.4
13 mu_1       0.4      0.755     9.89e- 4  6.93e-27      19.3
14 mu_1       0.5      1.41      7.37e- 2  4.43e-19      23.0
15 mu_1       0.6      1.41      2.52e- 1  3.66e-20      14.1
16 mu_1       0.7      1.45      8.41e- 2  1.69e-29      18.6
17 mu_1       0.8      1.52      2.16e- 2  6.04e-43      20.3
18 mu_1       0.9      2.04      2.61e- 7  2.56e-66      23.6
19 mu_0       0.1      1.57      8.75e-26  9.93e-79     141. 
20 mu_0       0.2      0.454     1.65e-13  1.52e-53      21.4
21 mu_0       0.3      0.475     2.63e- 7  7.19e-39      15.9
22 mu_0       0.4      0.658     7.30e- 4  1.65e-28      15.1
23 mu_0       0.5      1.38      6.35e- 2  1.58e-20      27.0
24 mu_0       0.6      1.38      1.32e- 1  4.81e-19      12.7
25 mu_0       0.7      1.47      1.29e- 1  3.47e-28      19.2
26 mu_0       0.8      1.47      1.65e- 2  2.12e-41      15.5
27 mu_0       0.9      1.99      1.46e- 6  2.03e-64      23.6
[1] "Total run time was 390.676 seconds"
