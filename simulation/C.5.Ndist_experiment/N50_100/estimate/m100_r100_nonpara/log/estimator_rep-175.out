
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7548"
[1] "cluster size dist'n: "

 51  53  54  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71  72 
  3   1   1   2   4   3   2   3   1   3   3   3   1   1   3   1   2   3   2   2 
 73  74  75  76  77  78  80  81  82  83  84  85  86  87  88  89  90  91  93  94 
  2   1   2   5   2   5   1   1   2   2   2   2   2   2   1   2   2   1   3   6 
 95  97  98  99 100 
  2   2   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0376  0.3734  0.6292  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4527 3021 
[1] "treatment indicator table: "

   0    1 
2701 4847 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3819
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3729
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 435.755 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.371 0.101 
 2 mu         0.1   0.2 0.375 0.120 
 3 mu         0.1   0.3 0.413 0.125 
 4 mu         0.1   0.4 0.487 0.130 
 5 mu         0.1   0.5 0.541 0.125 
 6 mu         0.2   0.1 0.353 0.0713
 7 mu         0.2   0.2 0.364 0.0636
 8 mu         0.2   0.3 0.400 0.0622
 9 mu         0.2   0.4 0.467 0.0619
10 mu         0.2   0.5 0.515 0.0554
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.11         0.114  1.15e- 9     10.2 
 2 mu         0.2      1.07         0.988  1.57e- 3      5.88
 3 mu         0.3      0.989        0.977  1.37e- 1      2.53
 4 mu         0.4      0.981        1.00   2.97e- 1      2.15
 5 mu         0.5      0.994        0.969  6.45e- 1      1.60
 6 mu         0.6      1.02         1.00   7.14e- 1      1.40
 7 mu         0.7      1.01         1.04   6.37e- 1      1.32
 8 mu         0.8      1.02         1.00   6.76e- 1      1.71
 9 mu         0.9      1.06         1.03   2.11e- 1      2.20
10 mu_1       0.1      1.22         0.194  3.77e- 9     11.4 
11 mu_1       0.2      1.05         0.907  2.61e- 3      5.27
12 mu_1       0.3      0.986        0.946  1.76e- 1      2.29
13 mu_1       0.4      0.979        0.993  3.01e- 1      2.05
14 mu_1       0.5      0.997        0.968  6.66e- 1      1.64
15 mu_1       0.6      1.02         1.00   7.08e- 1      1.40
16 mu_1       0.7      1.01         1.05   6.39e- 1      1.33
17 mu_1       0.8      1.02         1.01   6.82e- 1      1.72
18 mu_1       0.9      1.06         1.03   2.11e- 1      2.22
19 mu_0       0.1      1.10         0.106  8.61e-10     10.5 
20 mu_0       0.2      1.08         0.951  1.28e- 3      6.03
21 mu_0       0.3      0.990        0.967  1.20e- 1      2.63
22 mu_0       0.4      0.983        1.00   2.94e- 1      2.21
23 mu_0       0.5      0.990        0.969  6.11e- 1      1.56
24 mu_0       0.6      1.02         0.997  7.03e- 1      1.41
25 mu_0       0.7      1.02         1.03   6.32e- 1      1.31
26 mu_0       0.8      1.01         0.989  6.42e- 1      1.67
27 mu_0       0.9      1.06         1.04   2.12e- 1      1.99
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00127     7.60e-30  7.70e-93     0.116
 2 mu         0.2    0.201       2.83e-16  1.08e-63     8.89 
 3 mu         0.3    0.932       7.01e- 9  1.14e-46    24.0  
 4 mu         0.4    1.55        2.66e- 4  1.29e-34    38.0  
 5 mu         0.5    1.31        7.46e- 2  2.70e-25    15.0  
 6 mu         0.6    1.08        2.12e- 1  1.03e-17     6.90 
 7 mu         0.7    0.919       1.40e- 1  2.18e-21     9.73 
 8 mu         0.8    1.02        1.76e- 2  1.71e-33     7.73 
 9 mu         0.9    1.63        1.92e- 7  4.25e-55    41.3  
10 mu_1       0.1    0.00266     4.59e-29  7.62e-92     0.235
11 mu_1       0.2    0.253       8.72e-16  5.36e-63     8.99 
12 mu_1       0.3    0.993       1.46e- 8  3.77e-46    23.5  
13 mu_1       0.4    1.58        4.17e- 4  3.19e-34    38.0  
14 mu_1       0.5    1.28        8.15e- 2  5.34e-25    13.4  
15 mu_1       0.6    1.08        1.86e- 1  1.71e-17     6.74 
16 mu_1       0.7    0.913       1.53e- 1  6.30e-22    10.3  
17 mu_1       0.8    1.04        1.41e- 2  4.33e-34     7.96 
18 mu_1       0.9    1.63        1.32e- 7  9.54e-56    42.2  
19 mu_0       0.1    0.00112     3.34e-30  8.73e-95     0.103
20 mu_0       0.2    0.188       1.36e-16  1.38e-65     8.87 
21 mu_0       0.3    0.906       3.77e- 9  1.67e-48    24.4  
22 mu_0       0.4    1.52        1.66e- 4  2.19e-36    38.0  
23 mu_0       0.5    1.35        5.34e- 2  5.51e-27    16.6  
24 mu_0       0.6    1.09        2.62e- 1  2.64e-19     7.14 
25 mu_0       0.7    0.934       1.75e- 1  5.80e-21     8.32 
26 mu_0       0.8    0.949       3.07e- 2  6.83e-33     8.66 
27 mu_0       0.9    1.68        7.29e- 7  3.39e-54    33.3  
[1] "Total run time was 439.062 seconds"
