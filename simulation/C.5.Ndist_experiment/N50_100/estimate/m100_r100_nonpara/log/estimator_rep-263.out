
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7123"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  3   3   4   4   1   2   6   2   1   3   1   2   3   2   2   4   2   4   2   3 
 71  72  73  76  77  79  80  81  82  83  84  86  87  88  89  90  91  92  93  94 
  4   2   4   2   2   1   2   1   3   2   1   1   1   3   1   1   1   2   3   2 
 96  97 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02894 0.34122 0.60406 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4211 2912 
[1] "treatment indicator table: "

   0    1 
2686 4437 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3587
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3536
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 415.492 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.586 0.129 
 2 mu         0.1   0.2 0.733 0.163 
 3 mu         0.1   0.3 0.839 0.184 
 4 mu         0.1   0.4 0.911 0.201 
 5 mu         0.1   0.5 0.956 0.210 
 6 mu         0.2   0.1 0.387 0.0279
 7 mu         0.2   0.2 0.483 0.0381
 8 mu         0.2   0.3 0.579 0.0482
 9 mu         0.2   0.4 0.637 0.0580
10 mu         0.2   0.5 0.671 0.0565
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.47        0.0957 0.0000000177     26.2 
 2 mu         0.2      1.08        1.04   0.00572           2.78
 3 mu         0.3      0.983       0.930  0.293             2.52
 4 mu         0.4      0.977       0.920  0.567             1.84
 5 mu         0.5      1.00        0.977  0.595             1.41
 6 mu         0.6      0.988       0.978  0.660             1.45
 7 mu         0.7      0.994       0.995  0.533             1.66
 8 mu         0.8      1.01        1.03   0.422             1.70
 9 mu         0.9      1.05        1.01   0.214             2.14
10 mu_1       0.1      1.29        0.164  0.0000000552     13.8 
11 mu_1       0.2      1.08        1.03   0.00905           2.81
12 mu_1       0.3      0.972       0.902  0.337             2.49
13 mu_1       0.4      0.982       0.926  0.557             1.85
14 mu_1       0.5      1.00        0.975  0.618             1.39
15 mu_1       0.6      0.987       0.977  0.649             1.50
16 mu_1       0.7      0.995       0.997  0.530             1.62
17 mu_1       0.8      1.01        1.04   0.420             1.72
18 mu_1       0.9      1.05        1.01   0.205             2.18
19 mu_0       0.1      1.49        0.0874 0.0000000135     27.5 
20 mu_0       0.2      1.08        1.05   0.00488           2.91
21 mu_0       0.3      0.988       0.938  0.273             2.54
22 mu_0       0.4      0.974       0.921  0.560             1.83
23 mu_0       0.5      1.00        0.975  0.573             1.43
24 mu_0       0.6      0.989       0.975  0.656             1.38
25 mu_0       0.7      0.992       0.991  0.541             1.74
26 mu_0       0.8      1.01        1.01   0.429             1.59
27 mu_0       0.9      1.04        1.02   0.236             2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.72      1.76e-25  3.54e-71    171.  
 2 mu         0.2      0.968     7.48e-14  1.18e-45     52.6 
 3 mu         0.3      1.46      2.75e- 7  4.36e-31     66.8 
 4 mu         0.4      1.14      5.65e- 4  4.35e-21     12.5 
 5 mu         0.5      1.07      2.33e- 2  1.10e-13     20.1 
 6 mu         0.6      0.849     1.80e- 1  1.12e-13      6.69
 7 mu         0.7      1.26      1.38e- 1  6.05e-21     12.8 
 8 mu         0.8      1.11      9.15e- 2  1.62e-31      9.97
 9 mu         0.9      1.14      2.23e- 6  5.07e-50     22.1 
10 mu_1       0.1      2.15      1.21e-24  3.08e-70    214.  
11 mu_1       0.2      0.896     2.35e-13  5.15e-45     32.9 
12 mu_1       0.3      1.47      5.64e- 7  1.26e-30     68.7 
13 mu_1       0.4      1.14      9.48e- 4  9.47e-21     11.8 
14 mu_1       0.5      1.05      3.08e- 2  1.91e-13     19.7 
15 mu_1       0.6      0.865     2.22e- 1  2.34e-14      7.49
16 mu_1       0.7      1.28      1.44e- 1  1.08e-21     12.3 
17 mu_1       0.8      1.10      7.47e- 2  2.53e-32      9.43
18 mu_1       0.9      1.12      1.61e- 6  7.04e-51     22.4 
19 mu_0       0.1      1.67      6.14e-26  5.11e-72    167.  
20 mu_0       0.2      0.986     3.48e-14  1.92e-46     57.5 
21 mu_0       0.3      1.45      1.37e- 7  8.10e-32     66.0 
22 mu_0       0.4      1.13      3.79e- 4  9.43e-22     14.4 
23 mu_0       0.5      1.10      1.94e- 2  2.86e-14     20.6 
24 mu_0       0.6      0.825     1.38e- 1  2.46e-13      5.50
25 mu_0       0.7      1.23      1.40e- 1  1.76e-20     14.0 
26 mu_0       0.8      1.14      1.58e- 1  7.09e-31     12.3 
27 mu_0       0.9      1.29      7.90e- 6  4.44e-49     19.7 
[1] "Total run time was 419.186 seconds"
