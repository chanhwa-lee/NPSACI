
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7421"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  61  62  63  64  65  66  67  68  69  70  71 
  2   5   1   4   1   2   2   4   1   6   1   1   3   1   4   1   2   1   1   2 
 72  73  74  75  76  77  78  79  80  81  82  83  85  86  87  88  89  90  91  92 
  1   2   2   2   4   1   1   1   1   2   3   2   2   2   4   1   2   5   2   3 
 93  94  95  96  97  98  99 100 
  2   2   2   1   1   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04124 0.35921 0.63112 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4279 3142 
[1] "treatment indicator table: "

   0    1 
2869 4552 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3809
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3612
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 426.141 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.433 0.114 
 2 mu         0.1   0.2 0.542 0.113 
 3 mu         0.1   0.3 0.591 0.110 
 4 mu         0.1   0.4 0.666 0.122 
 5 mu         0.1   0.5 0.695 0.123 
 6 mu         0.2   0.1 0.351 0.0413
 7 mu         0.2   0.2 0.465 0.0547
 8 mu         0.2   0.3 0.515 0.0527
 9 mu         0.2   0.4 0.590 0.0624
10 mu         0.2   0.5 0.615 0.0517
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.07         0.562 0.0000000153     10.9 
 2 mu         0.2      1.00         0.959 0.00540           5.46
 3 mu         0.3      1.02         0.960 0.343             2.51
 4 mu         0.4      0.974        0.957 0.560             1.55
 5 mu         0.5      0.983        0.984 0.632             1.48
 6 mu         0.6      1.00         1.03  0.645             1.55
 7 mu         0.7      0.995        1.00  0.577             1.38
 8 mu         0.8      1.00         0.979 0.533             1.46
 9 mu         0.9      1.05         0.982 0.370             2.25
10 mu_1       0.1      1.08         0.592 0.0000000486      8.34
11 mu_1       0.2      0.996        0.972 0.00977           4.72
12 mu_1       0.3      1.01         0.970 0.386             2.41
13 mu_1       0.4      0.972        0.957 0.561             1.51
14 mu_1       0.5      0.986        0.975 0.645             1.46
15 mu_1       0.6      1.00         1.01  0.625             1.57
16 mu_1       0.7      0.995        1.00  0.571             1.38
17 mu_1       0.8      1.00         0.984 0.536             1.46
18 mu_1       0.9      1.05         0.981 0.359             2.30
19 mu_0       0.1      1.07         0.548 0.0000000116     11.4 
20 mu_0       0.2      1.00         0.973 0.00430           5.65
21 mu_0       0.3      1.02         0.966 0.324             2.55
22 mu_0       0.4      0.976        0.948 0.543             1.58
23 mu_0       0.5      0.981        0.978 0.620             1.51
24 mu_0       0.6      1.01         1.03  0.672             1.54
25 mu_0       0.7      0.995        0.994 0.589             1.37
26 mu_0       0.8      0.997        0.974 0.518             1.48
27 mu_0       0.9      1.04         0.989 0.380             1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.57      5.10e-25  9.38e-77    356.  
 2 mu         0.2      1.85      5.53e-13  4.03e-51     66.1 
 3 mu         0.3      1.19      4.80e- 7  2.88e-36     20.2 
 4 mu         0.4      1.01      2.54e- 3  7.39e-26      9.83
 5 mu         0.5      1.07      1.15e- 1  6.42e-18      5.80
 6 mu         0.6      1.06      2.02e- 1  6.10e-12      6.17
 7 mu         0.7      0.823     4.30e- 2  5.67e-20      6.00
 8 mu         0.8      0.828     3.25e- 3  5.09e-32      8.98
 9 mu         0.9      1.60      6.29e-10  1.42e-53     19.5 
10 mu_1       0.1      3.84      3.09e-24  8.87e-76    382.  
11 mu_1       0.2      1.72      1.66e-12  1.90e-50     69.5 
12 mu_1       0.3      1.15      1.05e- 6  9.06e-36     21.7 
13 mu_1       0.4      1.00      3.07e- 3  1.75e-25      9.19
14 mu_1       0.5      1.08      1.25e- 1  1.21e-17      6.01
15 mu_1       0.6      1.05      1.80e- 1  2.14e-12      6.60
16 mu_1       0.7      0.822     3.73e- 2  1.71e-20      6.26
17 mu_1       0.8      0.828     2.53e- 3  1.34e-32      9.36
18 mu_1       0.9      1.64      4.37e-10  3.32e-54     21.3 
19 mu_0       0.1      3.54      2.23e-25  5.73e-78    353.  
20 mu_0       0.2      1.88      2.85e-13  2.77e-52     70.4 
21 mu_0       0.3      1.21      2.37e- 7  2.26e-37     19.5 
22 mu_0       0.4      1.01      1.83e- 3  6.77e-27     11.1 
23 mu_0       0.5      1.07      7.96e- 2  7.05e-19      5.59
24 mu_0       0.6      1.08      1.51e- 1  1.86e-12      6.76
25 mu_0       0.7      0.826     4.84e- 2  1.49e-19      5.59
26 mu_0       0.8      0.828     4.30e- 3  2.01e-31      7.49
27 mu_0       0.9      1.28      2.35e- 9  1.12e-52     14.5 
[1] "Total run time was 431.451 seconds"
