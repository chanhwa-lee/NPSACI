
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7393"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70 
  2   2   5   3   2   5   1   3   2   3   2   2   1   3   3   2   1   4   1   1 
 71  74  76  77  78  79  80  82  83  85  87  88  89  90  91  92  93  94  96  97 
  4   1   2   1   1   4   3   3   1   2   2   1   1   2   2   2   1   2   2   3 
 98  99 100 
  5   3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04221 0.38831 0.63417 1.00000 5.87010 
[1] "event indicator table: "

   0    1 
4458 2935 
[1] "treatment indicator table: "

   0    1 
2517 4876 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3674
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 372.217 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.392 0.108 
 2 mu         0.1   0.2 0.453 0.141 
 3 mu         0.1   0.3 0.515 0.148 
 4 mu         0.1   0.4 0.544 0.160 
 5 mu         0.1   0.5 0.563 0.171 
 6 mu         0.2   0.1 0.382 0.0411
 7 mu         0.2   0.2 0.475 0.0555
 8 mu         0.2   0.3 0.522 0.0550
 9 mu         0.2   0.4 0.571 0.0564
10 mu         0.2   0.5 0.599 0.0572
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.19         0.263 0.0000000942     14.4 
 2 mu         0.2      1.10         0.901 0.0110            3.15
 3 mu         0.3      0.973        0.887 0.371             1.90
 4 mu         0.4      1.01         0.994 0.540             1.55
 5 mu         0.5      1.01         0.997 0.555             1.57
 6 mu         0.6      0.986        0.990 0.517             1.53
 7 mu         0.7      1.02         1.01  0.698             1.45
 8 mu         0.8      0.982        0.958 0.555             2.05
 9 mu         0.9      0.961        0.970 0.298             1.80
10 mu_1       0.1      1.20         0.401 0.000000306       7.76
11 mu_1       0.2      1.06         0.920 0.0179            2.77
12 mu_1       0.3      0.978        0.907 0.422             1.94
13 mu_1       0.4      1.01         1.01  0.505             1.51
14 mu_1       0.5      1.01         0.982 0.578             1.56
15 mu_1       0.6      0.986        0.991 0.512             1.53
16 mu_1       0.7      1.02         1.01  0.690             1.45
17 mu_1       0.8      0.982        0.955 0.558             2.05
18 mu_1       0.9      0.961        0.970 0.294             1.81
19 mu_0       0.1      1.19         0.248 0.0000000706     15.4 
20 mu_0       0.2      1.11         0.887 0.00926           3.24
21 mu_0       0.3      0.971        0.895 0.349             1.88
22 mu_0       0.4      1.01         0.998 0.532             1.59
23 mu_0       0.5      1.01         0.993 0.532             1.58
24 mu_0       0.6      0.985        0.987 0.524             1.53
25 mu_0       0.7      1.02         1.01  0.701             1.47
26 mu_0       0.8      0.985        0.979 0.542             2.04
27 mu_0       0.9      0.964        0.984 0.334             1.73
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0392     7.31e-30  1.23e-78      3.23
 2 mu         0.2     0.460      2.00e-16  1.33e-52     20.9 
 3 mu         0.3     0.550      3.68e- 9  5.52e-38     11.0 
 4 mu         0.4     0.620      7.56e- 5  1.09e-27     11.6 
 5 mu         0.5     0.917      7.48e- 3  8.69e-20     19.8 
 6 mu         0.6     0.943      2.08e- 1  1.99e-13      5.03
 7 mu         0.7     1.09       3.18e- 1  8.77e-15      7.64
 8 mu         0.8     1.18       1.12e- 1  6.07e-25      8.88
 9 mu         0.9     1.32       9.00e- 6  1.56e-43     19.6 
10 mu_1       0.1     0.0762     4.99e-29  1.13e-77      6.10
11 mu_1       0.2     0.494      6.45e-16  6.43e-52     19.7 
12 mu_1       0.3     0.541      8.58e- 9  1.78e-37     10.1 
13 mu_1       0.4     0.630      1.31e- 4  2.62e-27     10.6 
14 mu_1       0.5     0.937      1.03e- 2  1.68e-19     20.1 
15 mu_1       0.6     0.949      2.51e- 1  3.21e-13      5.32
16 mu_1       0.7     1.10       2.77e- 1  2.97e-15      8.02
17 mu_1       0.8     1.19       9.90e- 2  2.09e-25      9.01
18 mu_1       0.9     1.32       7.00e- 6  4.77e-44     20.1 
19 mu_0       0.1     0.0351     2.59e-30  1.11e-79      2.91
20 mu_0       0.2     0.452      8.92e-17  5.74e-54     21.2 
21 mu_0       0.3     0.554      1.58e- 9  2.72e-39     11.4 
22 mu_0       0.4     0.613      4.08e- 5  6.24e-29     12.3 
23 mu_0       0.5     0.896      6.75e- 3  5.99e-21     19.6 
24 mu_0       0.6     0.935      1.50e- 1  1.72e-14      5.15
25 mu_0       0.7     1.08       3.22e- 1  2.18e-14      6.80
26 mu_0       0.8     1.17       1.36e- 1  2.20e-24      9.05
27 mu_0       0.9     1.30       2.76e- 5  1.13e-42     18.8 
[1] "Total run time was 375.348 seconds"
