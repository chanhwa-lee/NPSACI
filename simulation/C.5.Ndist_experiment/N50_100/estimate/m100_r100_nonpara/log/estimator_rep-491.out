
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7300"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  66  67  69  70  71  72 
  4   1   4   2   2   1   2   2   1   3   1   3   1   2   4   5   5   2   3   2 
 73  74  75  76  77  78  79  80  81  83  84  85  86  89  90  91  92  93  94  96 
  3   2   1   1   6   3   2   1   4   1   2   3   2   2   3   2   1   3   4   1 
 97 100 
  2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04662 0.38620 0.64947 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4349 2951 
[1] "treatment indicator table: "

   0    1 
2525 4775 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3554
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 417.635 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.508 0.147 
 2 mu         0.1   0.2 0.576 0.139 
 3 mu         0.1   0.3 0.674 0.168 
 4 mu         0.1   0.4 0.690 0.161 
 5 mu         0.1   0.5 0.744 0.176 
 6 mu         0.2   0.1 0.510 0.121 
 7 mu         0.2   0.2 0.591 0.0970
 8 mu         0.2   0.3 0.687 0.123 
 9 mu         0.2   0.4 0.717 0.107 
10 mu         0.2   0.5 0.778 0.122 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.997        0.399 0.0000000334     15.8 
 2 mu         0.2      1.19         0.967 0.00866           7.23
 3 mu         0.3      1.01         0.933 0.378             2.39
 4 mu         0.4      0.976        0.974 0.224             1.62
 5 mu         0.5      0.998        0.973 0.506             1.46
 6 mu         0.6      1.02         1.04  0.680             1.40
 7 mu         0.7      1.02         1.01  0.557             1.40
 8 mu         0.8      0.983        0.982 0.541             1.62
 9 mu         0.9      0.950        0.961 0.160             1.87
10 mu_1       0.1      0.982        0.512 0.000000103      11.8 
11 mu_1       0.2      1.19         0.988 0.0153            6.58
12 mu_1       0.3      0.992        0.922 0.296             2.34
13 mu_1       0.4      0.979        0.966 0.255             1.67
14 mu_1       0.5      0.999        0.980 0.504             1.47
15 mu_1       0.6      1.02         1.03  0.694             1.39
16 mu_1       0.7      1.02         1.00  0.555             1.39
17 mu_1       0.8      0.983        0.983 0.539             1.64
18 mu_1       0.9      0.948        0.951 0.149             1.87
19 mu_0       0.1      0.999        0.382 0.0000000256     16.5 
20 mu_0       0.2      1.19         0.976 0.00700           7.39
21 mu_0       0.3      1.01         0.947 0.367             2.41
22 mu_0       0.4      0.975        0.970 0.204             1.59
23 mu_0       0.5      0.997        0.973 0.508             1.49
24 mu_0       0.6      1.02         1.04  0.659             1.43
25 mu_0       0.7      1.03         1.03  0.563             1.42
26 mu_0       0.8      0.983        0.978 0.546             1.56
27 mu_0       0.9      0.964        0.970 0.259             1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.39      4.71e-29  9.12e-72     78.7 
 2 mu         0.2      3.31      4.46e-16  1.93e-48    226.  
 3 mu         0.3      2.33      4.26e- 9  7.04e-35     91.1 
 4 mu         0.4      1.18      1.74e- 4  2.47e-25     19.5 
 5 mu         0.5      0.917     2.16e- 2  5.17e-18      8.33
 6 mu         0.6      1.08      2.94e- 1  3.97e-12      9.67
 7 mu         0.7      0.986     2.82e- 1  1.46e-18      8.48
 8 mu         0.8      1.22      6.83e- 2  4.46e-28      9.68
 9 mu         0.9      2.01      2.26e- 6  8.94e-45     43.5 
10 mu_1       0.1      2.17      2.83e-28  8.78e-71    134.  
11 mu_1       0.2      3.05      1.42e-15  9.32e-48    192.  
12 mu_1       0.3      2.20      9.01e- 9  2.26e-34     85.9 
13 mu_1       0.4      1.11      2.80e- 4  5.94e-25     16.9 
14 mu_1       0.5      0.929     2.53e- 2  9.96e-18      7.89
15 mu_1       0.6      1.08      3.29e- 1  1.10e-12      9.43
16 mu_1       0.7      0.979     2.55e- 1  2.85e-19      8.69
17 mu_1       0.8      1.25      5.55e- 2  7.61e-29     10.1 
18 mu_1       0.9      2.04      1.67e- 6  1.35e-45     45.6 
19 mu_0       0.1      1.30      2.10e-29  3.75e-73     72.6 
20 mu_0       0.2      3.38      1.85e-16  8.96e-50    235.  
21 mu_0       0.3      2.38      2.22e- 9  3.73e-36     93.3 
22 mu_0       0.4      1.23      1.06e- 4  1.52e-26     23.3 
23 mu_0       0.5      0.905     1.76e- 2  3.83e-19      8.77
24 mu_0       0.6      1.08      2.10e- 1  3.68e-13     10.0 
25 mu_0       0.7      1.00      2.63e- 1  4.21e-18      7.99
26 mu_0       0.8      1.12      5.24e- 2  1.93e-27      7.88
27 mu_0       0.9      1.78      7.59e- 6  7.72e-44     36.2 
[1] "Total run time was 421.188 seconds"
