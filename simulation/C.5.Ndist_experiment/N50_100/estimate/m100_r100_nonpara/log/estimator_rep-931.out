
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7004"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  4   1   3   3   4   3   4   5   2   3   1   6   4   1   2   2   3   1   1   2 
 70  71  72  74  75  77  78  79  81  82  84  85  86  88  89  90  91  92  94  97 
  1   2   3   2   2   1   3   4   2   1   1   2   3   4   1   2   1   2   1   2 
 98 100 
  2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04626 0.36834 0.63375 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4235 2769 
[1] "treatment indicator table: "

   0    1 
2437 4567 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3478
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3526
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 514.624 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.429 0.107 
 2 mu         0.1   0.2 0.525 0.142 
 3 mu         0.1   0.3 0.590 0.146 
 4 mu         0.1   0.4 0.685 0.149 
 5 mu         0.1   0.5 0.690 0.154 
 6 mu         0.2   0.1 0.341 0.0515
 7 mu         0.2   0.2 0.423 0.0785
 8 mu         0.2   0.3 0.491 0.0743
 9 mu         0.2   0.4 0.584 0.0580
10 mu         0.2   0.5 0.589 0.0591
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.16         0.157  8.52e-10     13.6 
 2 mu         0.2      1.10         0.987  9.70e- 4      4.09
 3 mu         0.3      1.05         1.01   1.27e- 1      2.33
 4 mu         0.4      1.04         1.02   4.77e- 1      1.86
 5 mu         0.5      0.984        0.964  5.61e- 1      1.85
 6 mu         0.6      0.980        0.974  6.35e- 1      1.37
 7 mu         0.7      1.00         0.980  6.70e- 1      1.38
 8 mu         0.8      0.996        0.991  3.96e- 1      1.62
 9 mu         0.9      1.04         1.01   2.23e- 1      2.05
10 mu_1       0.1      1.21         0.269  3.02e- 9     12.5 
11 mu_1       0.2      1.07         0.895  1.73e- 3      4.40
12 mu_1       0.3      1.05         1.01   1.56e- 1      2.36
13 mu_1       0.4      1.03         1.00   5.28e- 1      1.96
14 mu_1       0.5      0.981        0.970  5.57e- 1      1.77
15 mu_1       0.6      0.981        0.974  6.41e- 1      1.37
16 mu_1       0.7      0.999        0.983  6.71e- 1      1.40
17 mu_1       0.8      0.997        0.991  3.81e- 1      1.63
18 mu_1       0.9      1.04         1.02   2.13e- 1      2.06
19 mu_0       0.1      1.16         0.141  6.12e-10     13.7 
20 mu_0       0.2      1.11         1.01   7.79e- 4      4.01
21 mu_0       0.3      1.05         0.999  1.14e- 1      2.32
22 mu_0       0.4      1.04         1.03   4.43e- 1      1.79
23 mu_0       0.5      0.986        0.955  5.66e- 1      1.93
24 mu_0       0.6      0.978        0.978  6.25e- 1      1.37
25 mu_0       0.7      1.00         0.975  6.68e- 1      1.35
26 mu_0       0.8      0.989        0.973  4.55e- 1      1.59
27 mu_0       0.9      1.04         1.02   3.15e- 1      2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0529     7.78e-28  2.71e-73      5.29
 2 mu         0.2     0.406      2.80e-15  1.29e-48     38.0 
 3 mu         0.3     0.676      2.64e- 8  2.39e-34     11.7 
 4 mu         0.4     1.21       4.62e- 4  2.22e-24     17.5 
 5 mu         0.5     1.10       6.46e- 2  8.23e-17     22.1 
 6 mu         0.6     1.22       1.57e- 1  8.05e-11     13.9 
 7 mu         0.7     1.16       3.73e- 1  1.31e-13      7.39
 8 mu         0.8     1.25       6.19e- 2  2.01e-21     16.5 
 9 mu         0.9     1.23       4.48e- 6  2.61e-35     32.1 
10 mu_1       0.1     0.0987     5.13e-27  2.53e-72      9.87
11 mu_1       0.2     0.399      8.58e-15  6.02e-48     35.4 
12 mu_1       0.3     0.777      5.42e- 8  7.44e-34     13.5 
13 mu_1       0.4     1.19       7.52e- 4  5.18e-24     16.3 
14 mu_1       0.5     1.09       8.25e- 2  1.54e-16     21.1 
15 mu_1       0.6     1.24       1.80e- 1  1.25e-10     14.6 
16 mu_1       0.7     1.16       3.59e- 1  3.49e-14      7.25
17 mu_1       0.8     1.25       5.00e- 2  4.69e-22     17.2 
18 mu_1       0.9     1.25       3.37e- 6  5.41e-36     34.0 
19 mu_0       0.1     0.0479     2.94e-28  2.03e-74      4.78
20 mu_0       0.2     0.408      1.26e-15  1.09e-49     38.6 
21 mu_0       0.3     0.634      1.45e- 8  2.30e-35     10.9 
22 mu_0       0.4     1.23       2.39e- 4  2.50e-25     18.3 
23 mu_0       0.5     1.11       4.06e- 2  1.11e-17     23.1 
24 mu_0       0.6     1.19       1.10e- 1  1.36e-11     12.8 
25 mu_0       0.7     1.17       3.10e- 1  3.56e-13      7.72
26 mu_0       0.8     1.25       7.70e- 2  8.18e-21     13.8 
27 mu_0       0.9     1.02       1.45e- 5  2.12e-34     14.8 
[1] "Total run time was 520.143 seconds"
