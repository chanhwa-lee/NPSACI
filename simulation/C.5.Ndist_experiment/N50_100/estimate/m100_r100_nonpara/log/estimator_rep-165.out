
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7214"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 69 70 71 72 73 74 75 77 
 2  3  1  1  3  5  5  1  2  1  3  2  1  1  1  1  2  2  3  4  4  5  4  1  4  3 
78 79 80 81 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 4  1  5  2  1  2  1  1  1  2  1  2  2  2  1  3  1  1  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02966 0.34890 0.61827 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4312 2902 
[1] "treatment indicator table: "

   0    1 
2769 4445 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3549
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3665
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.236 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.337 0.0682
 2 mu         0.1   0.2 0.402 0.0859
 3 mu         0.1   0.3 0.449 0.0918
 4 mu         0.1   0.4 0.504 0.0967
 5 mu         0.1   0.5 0.554 0.103 
 6 mu         0.2   0.1 0.293 0.0449
 7 mu         0.2   0.2 0.358 0.0525
 8 mu         0.2   0.3 0.413 0.0622
 9 mu         0.2   0.4 0.483 0.0579
10 mu         0.2   0.5 0.531 0.0602
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.920        0.114 0.0000000411     10.4 
 2 mu         0.2      1.02         0.793 0.00866           9.86
 3 mu         0.3      1.05         0.975 0.240             3.37
 4 mu         0.4      1.04         1.01  0.402             3.80
 5 mu         0.5      1.04         0.995 0.531             1.91
 6 mu         0.6      1.02         0.982 0.504             1.90
 7 mu         0.7      0.994        0.978 0.548             2.01
 8 mu         0.8      1.01         1.02  0.488             2.19
 9 mu         0.9      1.07         1.01  0.160             3.14
10 mu_1       0.1      0.922        0.200 0.000000142       9.08
11 mu_1       0.2      1.04         0.795 0.0150            8.65
12 mu_1       0.3      1.05         0.977 0.272             3.11
13 mu_1       0.4      1.04         1.01  0.410             3.61
14 mu_1       0.5      1.04         0.998 0.538             1.91
15 mu_1       0.6      1.02         0.988 0.502             1.87
16 mu_1       0.7      0.993        0.973 0.536             2.02
17 mu_1       0.8      1.01         1.02  0.490             2.22
18 mu_1       0.9      1.07         1.01  0.152             3.14
19 mu_0       0.1      0.920        0.104 0.0000000298     10.5 
20 mu_0       0.2      1.02         0.771 0.00707          10.2 
21 mu_0       0.3      1.05         0.981 0.226             3.49
22 mu_0       0.4      1.04         0.998 0.398             3.93
23 mu_0       0.5      1.04         1.00  0.507             2.01
24 mu_0       0.6      1.02         0.981 0.509             1.96
25 mu_0       0.7      0.995        0.975 0.575             2.00
26 mu_0       0.8      1.00         1.01  0.475             2.09
27 mu_0       0.9      1.06         0.982 0.229             3.12
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00413     2.27e-26  1.63e-80     0.231
 2 mu         0.2    5.36        6.03e-14  1.99e-53   453.   
 3 mu         0.3    9.72        1.30e- 7  9.43e-38   872.   
 4 mu         0.4    0.891       1.16e- 3  8.75e-27    20.5  
 5 mu         0.5    1.56        6.64e- 2  1.93e-18    39.5  
 6 mu         0.6    1.36        3.55e- 1  8.13e-12    12.9  
 7 mu         0.7    1.46        1.91e- 1  2.09e-15    18.9  
 8 mu         0.8    1.39        8.34e- 3  9.14e-26    15.4  
 9 mu         0.9    1.12        3.19e- 8  7.36e-46    27.2  
10 mu_1       0.1    0.00935     1.29e-25  1.53e-79     0.487
11 mu_1       0.2    6.89        1.88e-13  9.32e-53   589.   
12 mu_1       0.3    8.51        2.62e- 7  2.95e-37   757.   
13 mu_1       0.4    0.851       1.78e- 3  2.05e-26    13.3  
14 mu_1       0.5    1.60        7.51e- 2  3.62e-18    40.1  
15 mu_1       0.6    1.35        3.42e- 1  1.27e-11    12.8  
16 mu_1       0.7    1.47        2.01e- 1  6.31e-16    19.9  
17 mu_1       0.8    1.39        6.40e- 3  2.98e-26    15.9  
18 mu_1       0.9    1.13        2.14e- 8  2.13e-46    28.5  
19 mu_0       0.1    0.00355     1.10e-26  1.12e-81     0.202
20 mu_0       0.2    4.97        2.83e-14  1.54e-54   418.   
21 mu_0       0.3   10.2         7.29e- 8  8.33e-39   922.   
22 mu_0       0.4    0.917       7.42e- 4  9.02e-28    25.2  
23 mu_0       0.5    1.53        5.24e- 2  2.39e-19    39.0  
24 mu_0       0.6    1.39        3.24e- 1  1.26e-12    13.2  
25 mu_0       0.7    1.42        2.33e- 1  5.50e-15    16.6  
26 mu_0       0.8    1.42        1.33e- 2  3.38e-25    19.3  
27 mu_0       0.9    0.981       1.27e- 7  5.44e-45    15.3  
[1] "Total run time was 425.774 seconds"
