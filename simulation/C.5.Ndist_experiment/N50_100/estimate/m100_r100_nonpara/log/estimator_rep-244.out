
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7078"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  2   4   2   1   1   3   3   4   2   4   4   1   3   4   5   2   3   1   1   4 
 71  72  73  74  75  76  77  78  79  81  82  83  84  85  87  88  89  90  91  93 
  2   3   1   1   2   1   3   3   3   1   3   2   2   3   3   3   1   3   1   1 
 95  96  99 100 
  1   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01898 0.28676 0.55719 0.95379 7.00000 
[1] "event indicator table: "

   0    1 
4136 2942 
[1] "treatment indicator table: "

   0    1 
2978 4100 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3565
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3513
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 385.948 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.519 0.0745
 2 mu         0.1   0.2 0.643 0.101 
 3 mu         0.1   0.3 0.756 0.120 
 4 mu         0.1   0.4 0.820 0.131 
 5 mu         0.1   0.5 0.829 0.126 
 6 mu         0.2   0.1 0.421 0.0374
 7 mu         0.2   0.2 0.533 0.0623
 8 mu         0.2   0.3 0.621 0.0751
 9 mu         0.2   0.4 0.677 0.0816
10 mu         0.2   0.5 0.686 0.0695
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.18         0.529   0.00193      9.39
 2 mu         0.2      1.03         0.956   0.201        2.28
 3 mu         0.3      0.993        0.998   0.356        1.78
 4 mu         0.4      0.963        0.946   0.458        1.54
 5 mu         0.5      0.988        0.995   0.587        1.45
 6 mu         0.6      0.999        1.00    0.503        1.44
 7 mu         0.7      1.01         0.977   0.346        1.68
 8 mu         0.8      1.03         1.03    0.531        1.79
 9 mu         0.9      1.03         0.981   0.0267       2.82
10 mu_1       0.1      1.17         0.652   0.00431      8.98
11 mu_1       0.2      1.01         0.997   0.212        2.01
12 mu_1       0.3      0.989        0.994   0.381        1.90
13 mu_1       0.4      0.963        0.940   0.458        1.50
14 mu_1       0.5      0.991        0.988   0.584        1.44
15 mu_1       0.6      0.999        0.997   0.494        1.44
16 mu_1       0.7      1.01         0.989   0.331        1.68
17 mu_1       0.8      1.03         1.02    0.523        1.80
18 mu_1       0.9      1.03         0.982   0.0243       2.92
19 mu_0       0.1      1.18         0.507   0.00167      9.49
20 mu_0       0.2      1.03         0.966   0.199        2.39
21 mu_0       0.3      0.994        0.993   0.345        1.73
22 mu_0       0.4      0.963        0.944   0.458        1.61
23 mu_0       0.5      0.986        0.985   0.591        1.46
24 mu_0       0.6      1.00         1.01    0.516        1.42
25 mu_0       0.7      1.01         0.975   0.381        1.68
26 mu_0       0.8      1.03         1.04    0.487        1.76
27 mu_0       0.9      1.02         0.980   0.0485       2.14
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.525     6.25e-23  2.82e-57     48.5 
 2 mu         0.2      0.759     9.96e-12  1.15e-37     24.2 
 3 mu         0.3      0.936     5.31e- 6  2.48e-26     12.4 
 4 mu         0.4      1.11      1.15e- 2  2.02e-18     13.2 
 5 mu         0.5      0.946     1.42e- 1  2.02e-12      8.53
 6 mu         0.6      1.10      2.02e- 1  1.76e-11      9.75
 7 mu         0.7      1.28      1.62e- 1  1.44e-17     13.3 
 8 mu         0.8      1.56      2.33e- 3  1.95e-26     16.6 
 9 mu         0.9      1.60      2.65e-10  5.56e-42     45.6 
10 mu_1       0.1      0.712     3.96e-22  2.62e-56     63.6 
11 mu_1       0.2      0.699     2.89e-11  5.36e-37     21.6 
12 mu_1       0.3      1.00      1.10e- 5  7.68e-26     11.6 
13 mu_1       0.4      1.08      1.44e- 2  4.70e-18     11.9 
14 mu_1       0.5      0.952     1.64e- 1  3.76e-12      9.30
15 mu_1       0.6      1.11      1.61e- 1  3.85e-12      9.71
16 mu_1       0.7      1.29      1.70e- 1  2.70e-18     14.1 
17 mu_1       0.8      1.56      1.78e- 3  3.20e-27     17.2 
18 mu_1       0.9      1.59      1.66e-10  8.10e-43     47.1 
19 mu_0       0.1      0.504     2.54e-23  2.21e-58     46.9 
20 mu_0       0.2      0.775     5.24e-12  1.02e-38     26.2 
21 mu_0       0.3      0.907     2.88e- 6  2.49e-27     12.8 
22 mu_0       0.4      1.13      7.77e- 3  2.37e-19     14.0 
23 mu_0       0.5      0.941     1.19e- 1  2.85e-13      7.75
24 mu_0       0.6      1.07      2.17e- 1  3.82e-11      9.82
25 mu_0       0.7      1.25      1.80e- 1  4.18e-17     11.6 
26 mu_0       0.8      1.52      4.54e- 3  8.48e-26     14.4 
27 mu_0       0.9      1.65      1.16e- 9  4.83e-41     32.1 
[1] "Total run time was 389.957 seconds"
