
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7729"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  60  61  63  64  65  66  67  68  69  70  71  72 
  1   1   1   1   2   2   1   2   2   2   3   1   2   2   3   2   3   2   2   1 
 73  74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93 
  2   1   2   6   7   3   1   2   3   4   1   1   2   3   1   3   3   1   1   2 
 94  95  96  97  98  99 100 
  2   2   2   2   1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03055 0.34253 0.61543 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4653 3076 
[1] "treatment indicator table: "

   0    1 
2813 4916 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3910
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3819
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 428.942 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.370 0.101 
 2 mu         0.1   0.2 0.475 0.123 
 3 mu         0.1   0.3 0.516 0.139 
 4 mu         0.1   0.4 0.567 0.152 
 5 mu         0.1   0.5 0.574 0.165 
 6 mu         0.2   0.1 0.335 0.0391
 7 mu         0.2   0.2 0.424 0.0406
 8 mu         0.2   0.3 0.471 0.0433
 9 mu         0.2   0.4 0.531 0.0522
10 mu         0.2   0.5 0.543 0.0571
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.972       0.0383  3.26e-10     16.9 
 2 mu         0.2      0.901       0.752   9.95e- 4      2.85
 3 mu         0.3      0.922       0.875   1.66e- 1      1.83
 4 mu         0.4      0.962       0.981   3.89e- 1      1.56
 5 mu         0.5      1.03        0.987   5.73e- 1      1.76
 6 mu         0.6      0.993       0.980   7.11e- 1      1.44
 7 mu         0.7      1.01        0.991   6.79e- 1      1.60
 8 mu         0.8      0.999       0.987   4.85e- 1      1.65
 9 mu         0.9      1.02        0.925   3.16e- 2      2.52
10 mu_1       0.1      0.869       0.0729  1.15e- 9     10.4 
11 mu_1       0.2      0.912       0.771   1.76e- 3      3.14
12 mu_1       0.3      0.920       0.910   1.97e- 1      1.74
13 mu_1       0.4      0.969       0.973   4.03e- 1      1.54
14 mu_1       0.5      1.03        0.991   5.93e- 1      1.74
15 mu_1       0.6      0.992       0.981   7.12e- 1      1.43
16 mu_1       0.7      1.01        0.993   6.77e- 1      1.58
17 mu_1       0.8      0.999       0.985   4.77e- 1      1.65
18 mu_1       0.9      1.02        0.927   2.86e- 2      2.55
19 mu_0       0.1      0.983       0.0347  2.35e-10     17.6 
20 mu_0       0.2      0.898       0.763   8.04e- 4      2.90
21 mu_0       0.3      0.922       0.876   1.52e- 1      1.86
22 mu_0       0.4      0.957       0.974   3.79e- 1      1.59
23 mu_0       0.5      1.03        0.985   5.54e- 1      1.78
24 mu_0       0.6      0.993       0.997   7.09e- 1      1.47
25 mu_0       0.7      1.01        0.985   6.82e- 1      1.65
26 mu_0       0.8      1.00        0.975   5.19e- 1      1.70
27 mu_0       0.9      0.994       0.928   5.87e- 2      2.24
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.44      2.96e-29  5.48e-77    144.  
 2 mu         0.2      0.536     7.03e-16  4.19e-51     25.1 
 3 mu         0.3      0.998     6.43e- 9  3.92e-36     29.3 
 4 mu         0.4      0.943     7.68e- 5  1.15e-25     25.0 
 5 mu         0.5      0.917     1.36e- 2  1.04e-17     10.7 
 6 mu         0.6      1.06      1.80e- 1  7.63e-13     14.0 
 7 mu         0.7      1.20      2.53e- 1  2.26e-19     12.6 
 8 mu         0.8      1.19      4.55e- 2  7.93e-29      8.84
 9 mu         0.9      0.735     2.99e- 6  6.18e-46     15.6 
10 mu_1       0.1      1.60      1.87e-28  5.13e-76    160.  
11 mu_1       0.2      0.505     2.42e-15  1.96e-50     14.0 
12 mu_1       0.3      1.03      1.48e- 8  1.22e-35     29.6 
13 mu_1       0.4      0.906     1.13e- 4  2.70e-25     23.8 
14 mu_1       0.5      0.950     1.55e- 2  1.95e-17     11.9 
15 mu_1       0.6      1.05      2.12e- 1  1.41e-13     13.0 
16 mu_1       0.7      1.22      2.54e- 1  3.59e-20     13.2 
17 mu_1       0.8      1.18      4.47e- 2  1.10e-29      8.98
18 mu_1       0.9      0.738     2.29e- 6  1.70e-46     16.2 
19 mu_0       0.1      1.42      1.28e-29  3.93e-78    142.  
20 mu_0       0.2      0.543     2.74e-16  3.38e-52     27.9 
21 mu_0       0.3      0.984     2.74e- 9  3.62e-37     29.1 
22 mu_0       0.4      0.968     3.92e- 5  1.24e-26     25.8 
23 mu_0       0.5      0.883     1.27e- 2  1.34e-18      9.44
24 mu_0       0.6      1.08      1.20e- 1  1.69e-12     15.5 
25 mu_0       0.7      1.15      2.26e- 1  6.70e-19     11.5 
26 mu_0       0.8      1.24      4.26e- 2  3.52e-28      8.79
27 mu_0       0.9      0.702     9.29e- 6  4.65e-45     11.6 
[1] "Total run time was 432.403 seconds"
