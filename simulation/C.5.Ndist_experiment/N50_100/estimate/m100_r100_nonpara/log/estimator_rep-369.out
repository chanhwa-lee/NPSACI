
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7542"
[1] "cluster size dist'n: "

50 51 53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 69 70 71 72 73 74 75 76 78 
 1  4  1  1  1  2  1  3  2  1  1  4  3  2  2  3  7  1  2  2  1  4  3  3  3  4 
79 81 82 83 84 85 87 89 93 94 95 96 97 98 99 
 2  1  1  1  2  5  1  2  1  3  9  1  3  3  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04493 0.36308 0.62574 1.00000 6.37977 
[1] "event indicator table: "

   0    1 
4489 3053 
[1] "treatment indicator table: "

   0    1 
2635 4907 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3727
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3815
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 377.708 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.387 0.0674
 2 mu         0.1   0.2 0.477 0.0756
 3 mu         0.1   0.3 0.537 0.0781
 4 mu         0.1   0.4 0.586 0.0876
 5 mu         0.1   0.5 0.632 0.0932
 6 mu         0.2   0.1 0.383 0.0824
 7 mu         0.2   0.2 0.478 0.0888
 8 mu         0.2   0.3 0.535 0.0827
 9 mu         0.2   0.4 0.560 0.0745
10 mu         0.2   0.5 0.604 0.0766
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.00         0.456 0.000000246      6.03
 2 mu         0.2      0.991        0.876 0.0219           4.32
 3 mu         0.3      0.971        0.929 0.387            2.07
 4 mu         0.4      1.01         1.02  0.426            1.69
 5 mu         0.5      1.01         0.973 0.613            1.91
 6 mu         0.6      1.01         0.996 0.654            1.39
 7 mu         0.7      1.01         0.988 0.694            1.66
 8 mu         0.8      0.987        1.00  0.579            1.46
 9 mu         0.9      1.01         0.990 0.298            2.29
10 mu_1       0.1      0.997        0.632 0.000000720      5.28
11 mu_1       0.2      0.985        0.897 0.0361           3.58
12 mu_1       0.3      0.978        0.939 0.396            2.09
13 mu_1       0.4      1.01         1.01  0.430            1.67
14 mu_1       0.5      1.01         0.990 0.629            1.89
15 mu_1       0.6      1.01         0.986 0.662            1.38
16 mu_1       0.7      1.01         0.994 0.692            1.63
17 mu_1       0.8      0.987        0.998 0.557            1.46
18 mu_1       0.9      1.01         0.992 0.288            2.32
19 mu_0       0.1      1.01         0.436 0.000000193      6.11
20 mu_0       0.2      0.992        0.882 0.0184           4.50
21 mu_0       0.3      0.968        0.929 0.371            2.07
22 mu_0       0.4      1.01         1.03  0.424            1.69
23 mu_0       0.5      1.01         0.976 0.591            1.92
24 mu_0       0.6      1.01         1.01  0.642            1.40
25 mu_0       0.7      1.01         0.980 0.675            1.72
26 mu_0       0.8      0.988        0.996 0.581            1.47
27 mu_0       0.9      1.01         1.01  0.382            2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00177     2.22e-30  2.46e-73    0.0880
 2 mu         0.2    1.13        5.34e-17  6.59e-48   93.4   
 3 mu         0.3    1.16        1.18e- 9  2.76e-33   46.9   
 4 mu         0.4    0.885       6.10e- 5  1.83e-23   35.7   
 5 mu         0.5    1.04        1.12e- 2  1.00e-16   12.0   
 6 mu         0.6    1.13        1.94e- 1  2.58e-11   11.7   
 7 mu         0.7    1.21        3.04e- 1  3.44e-18    9.09  
 8 mu         0.8    1.37        6.56e- 2  4.61e-30   10.9   
 9 mu         0.9    1.20        2.00e- 6  1.83e-51   19.1   
10 mu_1       0.1    0.00417     1.48e-29  2.23e-72    0.203 
11 mu_1       0.2    1.35        1.89e-16  2.98e-47  110.    
12 mu_1       0.3    1.07        2.58e- 9  8.33e-33   36.7   
13 mu_1       0.4    0.902       1.06e- 4  4.38e-23   36.1   
14 mu_1       0.5    1.06        1.32e- 2  1.93e-16   12.2   
15 mu_1       0.6    1.12        2.32e- 1  4.13e-11   11.2   
16 mu_1       0.7    1.22        3.01e- 1  1.15e-18    9.31  
17 mu_1       0.8    1.36        6.14e- 2  1.35e-30   11.1   
18 mu_1       0.9    1.22        1.51e- 6  4.77e-52   20.0   
19 mu_0       0.1    0.00151     8.20e-31  2.59e-74    0.0752
20 mu_0       0.2    1.07        1.95e-17  7.81e-49   89.4   
21 mu_0       0.3    1.20        5.88e-10  3.74e-34   51.3   
22 mu_0       0.4    0.873       3.12e- 5  1.22e-24   35.4   
23 mu_0       0.5    1.03        8.39e- 3  8.03e-18   11.8   
24 mu_0       0.6    1.14        1.77e- 1  2.58e-12   12.4   
25 mu_0       0.7    1.18        2.40e- 1  8.77e-18    8.57  
26 mu_0       0.8    1.41        4.25e- 2  1.76e-29   10.5   
27 mu_0       0.9    1.04        6.43e- 6  1.40e-50   13.8   
[1] "Total run time was 381.254 seconds"
