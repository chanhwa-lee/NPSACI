
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7517"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  58  59  60  61  62  63  64  66  67  68  69  70  71  73 
  2   2   2   1   1   2   1   1   1   2   3   3   1   6   3   1   3   2   2   3 
 74  75  76  77  78  79  80  81  82  84  85  86  87  88  90  91  93  94  95  98 
  4   4   4   3   3   3   2   2   4   2   3   4   2   1   3   2   4   2   1   2 
 99 100 
  1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03417 0.36722 0.62940 1.00000 6.22954 
[1] "event indicator table: "

   0    1 
4545 2972 
[1] "treatment indicator table: "

   0    1 
2844 4673 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3820
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3697
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 474.067 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.322 0.0652
 2 mu         0.1   0.2 0.368 0.0708
 3 mu         0.1   0.3 0.439 0.0866
 4 mu         0.1   0.4 0.477 0.0954
 5 mu         0.1   0.5 0.519 0.105 
 6 mu         0.2   0.1 0.383 0.0408
 7 mu         0.2   0.2 0.449 0.0431
 8 mu         0.2   0.3 0.507 0.0445
 9 mu         0.2   0.4 0.551 0.0446
10 mu         0.2   0.5 0.581 0.0504
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.909        0.521 0.0000000427     17.2 
 2 mu         0.2      1.10         0.884 0.0141            6.57
 3 mu         0.3      0.983        0.986 0.386             1.80
 4 mu         0.4      0.991        0.962 0.519             1.70
 5 mu         0.5      0.983        0.992 0.574             1.56
 6 mu         0.6      1.01         1.01  0.622             1.42
 7 mu         0.7      0.992        0.978 0.596             1.45
 8 mu         0.8      1.01         1.01  0.557             1.44
 9 mu         0.9      1.02         0.999 0.341             1.72
10 mu_1       0.1      1.02         0.657 0.000000133      20.0 
11 mu_1       0.2      1.08         0.902 0.0225            5.54
12 mu_1       0.3      0.987        0.984 0.428             1.74
13 mu_1       0.4      0.989        0.957 0.524             1.69
14 mu_1       0.5      0.984        0.982 0.580             1.54
15 mu_1       0.6      1.01         0.996 0.617             1.43
16 mu_1       0.7      0.991        0.985 0.599             1.45
17 mu_1       0.8      1.01         1.00  0.559             1.43
18 mu_1       0.9      1.02         0.999 0.329             1.76
19 mu_0       0.1      0.897        0.505 0.0000000326     16.9 
20 mu_0       0.2      1.11         0.877 0.0117            6.82
21 mu_0       0.3      0.982        0.987 0.368             1.83
22 mu_0       0.4      0.993        0.975 0.515             1.71
23 mu_0       0.5      0.982        0.985 0.561             1.59
24 mu_0       0.6      1.01         1.01  0.630             1.42
25 mu_0       0.7      0.994        0.983 0.587             1.44
26 mu_0       0.8      1.00         0.999 0.551             1.52
27 mu_0       0.9      1.03         0.997 0.445             1.65
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     12.4       2.23e-29  5.91e-77   1138.  
 2 mu         0.2      2.67      2.97e-15  2.53e-50    167.  
 3 mu         0.3      1.20      4.72e- 8  5.37e-35     27.8 
 4 mu         0.4      1.06      2.85e- 4  2.35e-24     11.5 
 5 mu         0.5      0.849     4.13e- 2  2.41e-16      5.90
 6 mu         0.6      0.938     8.69e- 2  1.28e-20      7.04
 7 mu         0.7      1.12      1.55e- 1  1.35e-29     10.1 
 8 mu         0.8      1.28      1.58e- 1  2.14e-42      9.57
 9 mu         0.9      1.38      5.66e- 6  1.82e-64     22.3 
10 mu_1       0.1      7.50      1.43e-28  5.37e-76    584.  
11 mu_1       0.2      2.20      9.04e-15  1.15e-49    132.  
12 mu_1       0.3      1.22      1.04e- 7  1.63e-34     30.2 
13 mu_1       0.4      1.04      4.93e- 4  5.35e-24      9.33
14 mu_1       0.5      0.850     3.96e- 2  4.37e-16      6.22
15 mu_1       0.6      0.948     9.53e- 2  1.09e-21      7.09
16 mu_1       0.7      1.13      1.53e- 1  9.87e-31      9.91
17 mu_1       0.8      1.28      1.41e- 1  1.37e-43      9.28
18 mu_1       0.9      1.39      4.25e- 6  1.03e-65     23.6 
19 mu_0       0.1     13.0       9.20e-30  5.97e-78   1200.  
20 mu_0       0.2      2.79      1.41e-15  2.88e-51    175.  
21 mu_0       0.3      1.18      2.39e- 8  6.97e-36     26.8 
22 mu_0       0.4      1.08      1.46e- 4  3.57e-25     12.9 
23 mu_0       0.5      0.848     2.96e- 2  4.37e-17      5.82
24 mu_0       0.6      0.923     1.04e- 1  3.04e-20      6.96
25 mu_0       0.7      1.09      1.47e- 1  4.26e-29     10.5 
26 mu_0       0.8      1.30      9.45e- 2  1.02e-41     10.7 
27 mu_0       0.9      1.33      1.74e- 5  1.72e-63     17.4 
[1] "Total run time was 477.556 seconds"
