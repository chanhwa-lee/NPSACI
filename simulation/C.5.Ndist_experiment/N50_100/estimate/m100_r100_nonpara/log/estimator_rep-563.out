
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7506"
[1] "cluster size dist'n: "

50 52 53 54 55 56 57 59 60 61 62 63 64 65 66 67 68 71 72 73 74 75 76 78 79 80 
 2  1  3  1  2  2  1  2  1  3  2  6  2  4  5  1  1  5  1  3  1  3  3  4  1  1 
81 82 83 84 85 86 87 89 90 91 92 93 94 95 96 97 98 99 
 2  1  2  3  2  3  2  4  1  1  6  2  3  1  1  2  1  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04527 0.37949 0.63445 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4430 3076 
[1] "treatment indicator table: "

   0    1 
2647 4859 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3843
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3663
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.406 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.422 0.121 
 2 mu         0.1   0.2 0.475 0.108 
 3 mu         0.1   0.3 0.538 0.0931
 4 mu         0.1   0.4 0.560 0.0882
 5 mu         0.1   0.5 0.619 0.101 
 6 mu         0.2   0.1 0.388 0.0812
 7 mu         0.2   0.2 0.468 0.0689
 8 mu         0.2   0.3 0.560 0.0657
 9 mu         0.2   0.4 0.611 0.0781
10 mu         0.2   0.5 0.668 0.0859
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.909        0.754  0.00105       5.84
 2 mu         0.2      1.03         1.05   0.337         1.87
 3 mu         0.3      1.03         1.03   0.408         1.88
 4 mu         0.4      1.01         1.00   0.524         1.69
 5 mu         0.5      0.988        0.964  0.589         1.50
 6 mu         0.6      0.993        0.978  0.548         1.48
 7 mu         0.7      1.01         1.00   0.602         1.31
 8 mu         0.8      0.993        1.02   0.491         1.37
 9 mu         0.9      0.998        0.961  0.452         1.67
10 mu_1       0.1      0.936        0.787  0.00238       5.29
11 mu_1       0.2      1.03         1.05   0.360         1.99
12 mu_1       0.3      1.02         1.01   0.452         1.84
13 mu_1       0.4      1.01         1.00   0.540         1.63
14 mu_1       0.5      0.985        0.963  0.596         1.48
15 mu_1       0.6      0.995        0.985  0.538         1.48
16 mu_1       0.7      1.01         1.01   0.620         1.32
17 mu_1       0.8      0.992        1.02   0.493         1.37
18 mu_1       0.9      0.998        0.957  0.440         1.66
19 mu_0       0.1      0.906        0.754  0.000906      5.90
20 mu_0       0.2      1.03         1.05   0.326         1.84
21 mu_0       0.3      1.03         1.04   0.387         1.92
22 mu_0       0.4      1.00         0.995  0.513         1.73
23 mu_0       0.5      0.990        0.966  0.581         1.52
24 mu_0       0.6      0.990        0.984  0.562         1.47
25 mu_0       0.7      1.01         1.01   0.561         1.32
26 mu_0       0.8      0.993        1.02   0.485         1.39
27 mu_0       0.9      0.994        0.961  0.509         1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0866     3.49e-30  1.32e-74      6.35
 2 mu         0.2     0.694      1.42e-16  1.41e-48     28.8 
 3 mu         0.3     0.577      8.76e-10  1.33e-33      9.76
 4 mu         0.4     1.14       3.06e- 5  3.29e-23     17.2 
 5 mu         0.5     0.937      6.99e- 3  1.13e-15     17.1 
 6 mu         0.6     0.836      8.32e- 2  4.37e-11      5.72
 7 mu         0.7     1.18       5.41e- 2  2.40e-17     14.7 
 8 mu         0.8     1.00       1.07e- 1  8.82e-27     11.6 
 9 mu         0.9     1.66       2.11e- 5  1.42e-44     32.0 
10 mu_1       0.1     0.151      2.50e-29  1.20e-73     10.4 
11 mu_1       0.2     0.687      4.59e-16  6.42e-48     30.2 
12 mu_1       0.3     0.613      2.12e- 9  4.03e-33     10.1 
13 mu_1       0.4     1.16       5.04e- 5  7.46e-23     15.9 
14 mu_1       0.5     0.918      9.54e- 3  2.23e-15     16.1 
15 mu_1       0.6     0.844      8.05e- 2  1.20e-11      5.72
16 mu_1       0.7     1.19       6.48e- 2  5.63e-18     14.9 
17 mu_1       0.8     1.01       8.87e- 2  2.37e-27     11.4 
18 mu_1       0.9     1.66       1.63e- 5  3.39e-45     32.3 
19 mu_0       0.1     0.0795     1.10e-30  0             5.90
20 mu_0       0.2     0.696      5.67e-17  0            28.5 
21 mu_0       0.3     0.562      3.43e-10  0             9.62
22 mu_0       0.4     1.13       1.74e- 5  0            18.1 
23 mu_0       0.5     0.956      4.10e- 3  0            18.1 
24 mu_0       0.6     0.822      7.92e- 2  0             6.01
25 mu_0       0.7     1.17       5.40e- 2  0            14.3 
26 mu_0       0.8     0.971      5.95e- 2  0            12.5 
27 mu_0       0.9     1.73       2.35e- 5  0            29.7 
[1] "Total run time was 421.845 seconds"
