
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7519"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  4   1   1   2   1   2   1   2   4   1   2   2   2   2   1   1   2   3   1   4 
 71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  91 
  1   1   3   3   3   4   2   1   1   2   3   2   4   3   1   4   1   2   2   2 
 92  94  95  96  97  98 100 
  3   3   2   3   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04049 0.37138 0.62886 1.00000 6.99958 
[1] "event indicator table: "

   0    1 
4473 3046 
[1] "treatment indicator table: "

   0    1 
2712 4807 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3796
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3723
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.357 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.483 0.127 
 2 mu         0.1   0.2 0.591 0.149 
 3 mu         0.1   0.3 0.662 0.158 
 4 mu         0.1   0.4 0.700 0.162 
 5 mu         0.1   0.5 0.695 0.156 
 6 mu         0.2   0.1 0.404 0.0594
 7 mu         0.2   0.2 0.507 0.0678
 8 mu         0.2   0.3 0.581 0.0725
 9 mu         0.2   0.4 0.624 0.0768
10 mu         0.2   0.5 0.629 0.0577
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.961        0.217  2.22e-10     19.2 
 2 mu         0.2      0.974        0.902  9.12e- 4      3.62
 3 mu         0.3      1.05         1.03   1.94e- 1      3.55
 4 mu         0.4      1.02         1.01   5.04e- 1      1.89
 5 mu         0.5      1.01         1.04   4.39e- 1      1.51
 6 mu         0.6      1.03         1.01   7.56e- 1      1.53
 7 mu         0.7      0.998        0.990  6.13e- 1      1.50
 8 mu         0.8      1.02         1.01   5.48e- 1      1.59
 9 mu         0.9      1.02         1.01   2.66e- 1      1.79
10 mu_1       0.1      0.904        0.328  7.73e-10     13.3 
11 mu_1       0.2      0.985        0.968  1.60e- 3      3.48
12 mu_1       0.3      1.05         1.01   2.36e- 1      3.51
13 mu_1       0.4      1.02         1.01   5.19e- 1      1.97
14 mu_1       0.5      1.01         1.03   4.45e- 1      1.48
15 mu_1       0.6      1.03         1.01   7.68e- 1      1.53
16 mu_1       0.7      0.998        0.986  6.05e- 1      1.50
17 mu_1       0.8      1.02         1.02   5.35e- 1      1.60
18 mu_1       0.9      1.02         1.01   2.62e- 1      1.81
19 mu_0       0.1      0.968        0.204  1.61e-10     19.8 
20 mu_0       0.2      0.971        0.904  7.40e- 4      3.66
21 mu_0       0.3      1.05         1.04   1.77e- 1      3.56
22 mu_0       0.4      1.02         1.01   4.94e- 1      1.84
23 mu_0       0.5      1.01         1.03   4.33e- 1      1.59
24 mu_0       0.6      1.03         1.01   7.37e- 1      1.54
25 mu_0       0.7      1.00         0.994  6.22e- 1      1.49
26 mu_0       0.8      1.02         1.03   5.99e- 1      1.53
27 mu_0       0.9      1.01         1.00   2.99e- 1      1.65
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.171     4.64e-29  3.95e-79     15.7 
 2 mu         0.2      1.11      1.52e-16  3.82e-53     50.0 
 3 mu         0.3      1.29      3.74e- 9  4.68e-38     32.4 
 4 mu         0.4      0.722     9.60e- 5  9.23e-28      8.83
 5 mu         0.5      0.941     1.27e- 2  4.35e-20      9.24
 6 mu         0.6      0.937     1.86e- 1  7.52e-14      6.89
 7 mu         0.7      1.38      5.10e- 1  1.33e-19     13.3 
 8 mu         0.8      1.57      7.20e- 2  9.14e-31     16.0 
 9 mu         0.9      1.09      2.70e- 6  1.15e-50     26.7 
10 mu_1       0.1      0.296     3.54e-28  3.78e-78     26.6 
11 mu_1       0.2      1.13      4.85e-16  1.83e-52     42.4 
12 mu_1       0.3      1.27      8.34e- 9  1.49e-37     32.5 
13 mu_1       0.4      0.688     1.59e- 4  2.28e-27      7.86
14 mu_1       0.5      0.967     1.11e- 2  8.60e-20      9.60
15 mu_1       0.6      0.937     2.27e- 1  1.24e-13      6.69
16 mu_1       0.7      1.40      5.88e- 1  3.77e-20     14.4 
17 mu_1       0.8      1.56      5.96e- 2  2.26e-31     15.1 
18 mu_1       0.9      1.08      2.10e- 6  2.52e-51     26.4 
19 mu_0       0.1      0.157     1.22e-29  1.93e-80     14.5 
20 mu_0       0.2      1.10      6.85e-17  2.10e-54     51.9 
21 mu_0       0.3      1.29      1.77e- 9  1.92e-39     32.3 
22 mu_0       0.4      0.745     5.56e- 5  1.90e-29     10.1 
23 mu_0       0.5      0.916     7.37e- 3  1.07e-21      8.88
24 mu_0       0.6      0.938     1.70e- 1  2.32e-15      7.42
25 mu_0       0.7      1.32      3.96e- 1  3.57e-19     10.8 
26 mu_0       0.8      1.61      1.14e- 1  3.67e-30     19.4 
27 mu_0       0.9      1.16      8.05e- 6  9.20e-50     29.0 
[1] "Total run time was 424.684 seconds"
