
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7613"
[1] "cluster size dist'n: "

 50  51  52  55  56  58  59  60  61  62  63  64  66  67  68  69  70  73  74  75 
  1   4   2   3   5   1   3   1   2   4   2   3   3   3   2   3   1   1   4   1 
 76  77  78  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  1   3   1   2   1   2   3   1   1   1   2   3   1   1   4   3   2   4   4   3 
 97  98  99 100 
  2   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02341 0.31418 0.58929 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4518 3095 
[1] "treatment indicator table: "

   0    1 
3072 4541 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3978
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3635
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 444.348 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.401 0.0719
 2 mu         0.1   0.2 0.461 0.0746
 3 mu         0.1   0.3 0.537 0.0925
 4 mu         0.1   0.4 0.572 0.0974
 5 mu         0.1   0.5 0.612 0.101 
 6 mu         0.2   0.1 0.345 0.0314
 7 mu         0.2   0.2 0.417 0.0309
 8 mu         0.2   0.3 0.480 0.0395
 9 mu         0.2   0.4 0.517 0.0399
10 mu         0.2   0.5 0.558 0.0381
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.06         0.465  3.96e-10     11.2 
 2 mu         0.2      1.01         0.900  8.96e- 4      2.97
 3 mu         0.3      0.952        0.971  3.59e- 2      1.68
 4 mu         0.4      0.956        0.960  4.49e- 1      1.58
 5 mu         0.5      1.02         1.01   6.53e- 1      1.45
 6 mu         0.6      1.02         1.01   6.99e- 1      1.42
 7 mu         0.7      1.01         0.989  7.11e- 1      1.38
 8 mu         0.8      0.999        0.965  5.47e- 1      1.64
 9 mu         0.9      1.02         0.945  1.15e- 1      2.74
10 mu_1       0.1      1.07         0.624  1.35e- 9      9.49
11 mu_1       0.2      1.00         0.911  1.56e- 3      3.12
12 mu_1       0.3      0.948        0.970  4.71e- 2      1.60
13 mu_1       0.4      0.960        0.968  4.74e- 1      1.57
14 mu_1       0.5      1.02         1.01   6.46e- 1      1.46
15 mu_1       0.6      1.02         1.01   6.88e- 1      1.43
16 mu_1       0.7      1.01         0.985  7.06e- 1      1.38
17 mu_1       0.8      0.999        0.970  5.36e- 1      1.65
18 mu_1       0.9      1.02         0.945  1.07e- 1      2.79
19 mu_0       0.1      1.06         0.448  2.90e-10     11.4 
20 mu_0       0.2      1.01         0.880  7.30e- 4      2.93
21 mu_0       0.3      0.954        0.978  3.11e- 2      1.73
22 mu_0       0.4      0.953        0.960  4.20e- 1      1.58
23 mu_0       0.5      1.01         1.01   6.47e- 1      1.45
24 mu_0       0.6      1.02         1.02   7.14e- 1      1.42
25 mu_0       0.7      1.01         0.980  7.24e- 1      1.39
26 mu_0       0.8      0.998        0.970  5.71e- 1      1.60
27 mu_0       0.9      1.02         0.975  1.90e- 1      2.38
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.362     1.15e-25  1.36e-80     36.1 
 2 mu         0.2      0.637     4.19e-14  2.96e-53     22.2 
 3 mu         0.3      0.982     2.04e- 7  1.84e-37     30.3 
 4 mu         0.4      1.02      1.51e- 3  1.95e-26     14.0 
 5 mu         0.5      1.11      8.18e- 2  4.49e-18      9.96
 6 mu         0.6      0.927     3.44e- 1  3.03e-16      7.01
 7 mu         0.7      1.15      1.50e- 1  8.22e-25      7.80
 8 mu         0.8      1.09      2.66e- 3  2.54e-37      8.59
 9 mu         0.9      1.71      8.58e-10  2.76e-59     31.4 
10 mu_1       0.1      0.500     7.18e-25  1.26e-79     49.8 
11 mu_1       0.2      0.665     1.45e-13  1.37e-52     25.2 
12 mu_1       0.3      1.01      4.08e- 7  5.70e-37     33.2 
13 mu_1       0.4      1.03      2.34e- 3  4.54e-26     11.5 
14 mu_1       0.5      1.10      9.30e- 2  8.35e-18      9.84
15 mu_1       0.6      0.930     3.03e- 1  6.97e-17      7.33
16 mu_1       0.7      1.16      1.20e- 1  1.62e-25      7.47
17 mu_1       0.8      1.08      1.90e- 3  4.37e-38      8.72
18 mu_1       0.9      1.71      5.89e-10  4.23e-60     32.4 
19 mu_0       0.1      0.346     4.52e-26  1.07e-81     34.6 
20 mu_0       0.2      0.630     1.77e-14  2.61e-54     23.2 
21 mu_0       0.3      0.971     1.16e- 7  1.86e-38     29.0 
22 mu_0       0.4      1.01      9.57e- 4  2.30e-27     15.6 
23 mu_0       0.5      1.13      5.83e- 2  6.35e-19     10.1 
24 mu_0       0.6      0.924     2.85e- 1  6.54e-16      6.52
25 mu_0       0.7      1.14      1.95e- 1  2.36e-24      8.58
26 mu_0       0.8      1.10      5.68e- 3  1.09e-36      8.92
27 mu_0       0.9      1.71      3.28e- 9  2.38e-58     29.4 
[1] "Total run time was 447.783 seconds"
