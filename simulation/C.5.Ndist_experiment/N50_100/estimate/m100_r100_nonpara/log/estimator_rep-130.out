
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7609"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  59  61  62  64  65  66  67  68  69  70  72  73  74 
  4   1   2   1   1   3   2   2   3   2   1   1   4   2   1   3   5   3   3   1 
 75  76  77  78  79  80  81  82  83  84  86  87  88  89  91  92  93  94  95  96 
  1   2   2   5   2   1   3   4   2   3   3   3   1   4   2   2   1   1   2   2 
 97  98 100 
  3   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03756 0.37236 0.63904 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4644 2965 
[1] "treatment indicator table: "

   0    1 
2621 4988 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3904
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3705
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 490.619 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.589 0.147 
 2 mu         0.1   0.2 0.677 0.171 
 3 mu         0.1   0.3 0.725 0.195 
 4 mu         0.1   0.4 0.823 0.217 
 5 mu         0.1   0.5 0.869 0.229 
 6 mu         0.2   0.1 0.394 0.0622
 7 mu         0.2   0.2 0.448 0.0492
 8 mu         0.2   0.3 0.475 0.0432
 9 mu         0.2   0.4 0.565 0.0676
10 mu         0.2   0.5 0.587 0.0592
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.45         0.509 0.000000238     36.0 
 2 mu         0.2      0.998        0.835 0.0233           3.63
 3 mu         0.3      0.969        0.939 0.313            2.25
 4 mu         0.4      0.952        0.951 0.405            1.74
 5 mu         0.5      0.995        0.972 0.538            1.69
 6 mu         0.6      1.01         1.04  0.679            1.50
 7 mu         0.7      1.03         1.02  0.654            1.48
 8 mu         0.8      1.02         1.02  0.670            1.48
 9 mu         0.9      0.959        0.935 0.289            1.83
10 mu_1       0.1      1.29         0.709 0.000000748     20.2 
11 mu_1       0.2      0.985        0.803 0.0373           3.83
12 mu_1       0.3      0.970        0.929 0.346            2.18
13 mu_1       0.4      0.949        0.942 0.398            1.72
14 mu_1       0.5      1.00         0.975 0.512            1.70
15 mu_1       0.6      1.01         1.03  0.668            1.50
16 mu_1       0.7      1.03         1.02  0.649            1.51
17 mu_1       0.8      1.02         1.01  0.676            1.48
18 mu_1       0.9      0.958        0.926 0.279            1.84
19 mu_0       0.1      1.47         0.479 0.000000181     37.7 
20 mu_0       0.2      1.00         0.852 0.0198           3.58
21 mu_0       0.3      0.969        0.955 0.299            2.28
22 mu_0       0.4      0.953        0.949 0.403            1.75
23 mu_0       0.5      0.990        0.967 0.564            1.69
24 mu_0       0.6      1.01         1.02  0.690            1.50
25 mu_0       0.7      1.03         1.03  0.667            1.40
26 mu_0       0.8      1.02         1.01  0.646            1.52
27 mu_0       0.9      0.964        0.959 0.366            1.69
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.70      1.48e-30  6.00e-73    364.  
 2 mu         0.2      3.28      3.64e-17  1.61e-47    174.  
 3 mu         0.3      1.39      6.54e-10  6.73e-33     50.9 
 4 mu         0.4      1.04      4.96e- 5  4.93e-23     18.8 
 5 mu         0.5      0.852     9.65e- 3  5.12e-16      8.40
 6 mu         0.6      1.02      1.84e- 1  1.31e-14      8.10
 7 mu         0.7      1.24      4.05e- 1  9.60e-23      5.90
 8 mu         0.8      1.20      9.84e- 2  1.31e-34     10.7 
 9 mu         0.9      1.33      2.29e- 6  2.03e-55     18.0 
10 mu_1       0.1      5.00      1.04e-29  5.43e-72    489.  
11 mu_1       0.2      2.87      1.28e-16  7.28e-47    117.  
12 mu_1       0.3      1.27      1.45e- 9  2.03e-32     44.7 
13 mu_1       0.4      1.05      8.50e- 5  1.14e-22     19.3 
14 mu_1       0.5      0.850     7.95e- 3  9.71e-16      8.40
15 mu_1       0.6      1.03      2.07e- 1  2.92e-15      7.87
16 mu_1       0.7      1.25      3.55e- 1  1.84e-23      6.49
17 mu_1       0.8      1.20      9.92e- 2  2.20e-35     10.6 
18 mu_1       0.9      1.34      1.71e- 6  3.02e-56     18.1 
19 mu_0       0.1      3.56      4.88e-31  6.31e-74    351.  
20 mu_0       0.2      3.38      1.24e-17  1.90e-48    189.  
21 mu_0       0.3      1.44      3.14e-10  9.11e-34     53.6 
22 mu_0       0.4      1.04      2.51e- 5  6.12e-24     20.2 
23 mu_0       0.5      0.854     7.01e- 3  5.25e-17      8.40
24 mu_0       0.6      0.999     1.34e- 1  2.83e-14      8.43
25 mu_0       0.7      1.23      4.09e- 1  2.77e-22      5.60
26 mu_0       0.8      1.23      8.62e- 2  5.67e-34     12.3 
27 mu_0       0.9      1.23      7.46e- 6  1.76e-54     17.0 
[1] "Total run time was 494.193 seconds"
