
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7545"
[1] "cluster size dist'n: "

 50  51  52  53  56  57  58  59  60  61  62  63  65  67  68  69  70  71  72  73 
  3   3   1   3   1   1   2   3   4   2   1   7   2   3   2   4   3   1   2   1 
 74  75  76  77  79  81  82  83  84  85  86  88  89  90  93  94  95  96  97  98 
  2   1   1   3   1   3   3   2   2   3   1   3   3   1   2   3   3   3   3   3 
 99 100 
  1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05509 0.39620 0.65103 1.00000 7.31023 
[1] "event indicator table: "

   0    1 
4438 3107 
[1] "treatment indicator table: "

   0    1 
2605 4940 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3799
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 522.256 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.398 0.0552
 2 mu         0.1   0.2 0.494 0.0740
 3 mu         0.1   0.3 0.548 0.0949
 4 mu         0.1   0.4 0.586 0.0797
 5 mu         0.1   0.5 0.648 0.0848
 6 mu         0.2   0.1 0.391 0.0505
 7 mu         0.2   0.2 0.482 0.0659
 8 mu         0.2   0.3 0.536 0.0842
 9 mu         0.2   0.4 0.580 0.0678
10 mu         0.2   0.5 0.641 0.0726
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.986        0.816  7.67e-12      5.05
 2 mu         0.2      1.02         0.918  3.18e- 4      3.64
 3 mu         0.3      0.984        0.964  1.64e- 1      2.45
 4 mu         0.4      0.989        0.956  5.69e- 1      1.85
 5 mu         0.5      1.02         1.02   5.56e- 1      1.66
 6 mu         0.6      0.988        0.976  6.33e- 1      1.47
 7 mu         0.7      1.01         1.02   6.62e- 1      1.41
 8 mu         0.8      1.01         1.02   5.38e- 1      1.57
 9 mu         0.9      0.993        0.963  2.93e- 1      2.82
10 mu_1       0.1      1.07         0.946  2.79e-11      5.48
11 mu_1       0.2      1.01         0.923  5.78e- 4      3.35
12 mu_1       0.3      0.982        0.965  2.01e- 1      2.30
13 mu_1       0.4      0.991        0.960  5.83e- 1      1.85
14 mu_1       0.5      1.02         1.01   5.41e- 1      1.62
15 mu_1       0.6      0.987        0.982  6.32e- 1      1.44
16 mu_1       0.7      1.02         1.02   6.65e- 1      1.40
17 mu_1       0.8      1.01         1.01   5.34e- 1      1.58
18 mu_1       0.9      0.993        0.960  2.84e- 1      2.87
19 mu_0       0.1      0.977        0.804  5.42e-12      5.00
20 mu_0       0.2      1.03         0.931  2.53e- 4      3.71
21 mu_0       0.3      0.985        0.960  1.49e- 1      2.51
22 mu_0       0.4      0.987        0.969  5.46e- 1      1.85
23 mu_0       0.5      1.02         1.02   5.61e- 1      1.70
24 mu_0       0.6      0.990        0.980  6.35e- 1      1.53
25 mu_0       0.7      1.01         1.00   6.37e- 1      1.43
26 mu_0       0.8      1.02         1.03   5.57e- 1      1.53
27 mu_0       0.9      0.994        0.943  3.76e- 1      2.43
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.451     6.09e-33  8.60e-78     44.4 
 2 mu         0.2      2.94      3.35e-18  4.15e-51    265.  
 3 mu         0.3      0.681     1.33e-10  3.15e-37     15.7 
 4 mu         0.4      0.936     1.65e- 5  9.85e-28     13.9 
 5 mu         0.5      1.01      6.53e- 3  2.28e-20     13.1 
 6 mu         0.6      0.955     6.56e- 2  1.89e-14      7.92
 7 mu         0.7      1.07      3.02e- 1  3.00e-23     12.9 
 8 mu         0.8      1.60      6.60e- 2  3.11e-36      9.33
 9 mu         0.9      1.04      6.35e- 6  3.39e-59     22.3 
10 mu_1       0.1      0.763     4.38e-32  7.90e-77     74.8 
11 mu_1       0.2      2.56      1.17e-17  1.91e-50    223.  
12 mu_1       0.3      0.712     3.06e-10  1.05e-36     17.2 
13 mu_1       0.4      0.943     2.78e- 5  2.46e-27     14.9 
14 mu_1       0.5      1.01      8.92e- 3  4.57e-20     12.7 
15 mu_1       0.6      0.940     5.94e- 2  5.30e-15      7.58
16 mu_1       0.7      1.09      2.82e- 1  7.21e-24     13.6 
17 mu_1       0.8      1.60      6.71e- 2  6.56e-37      9.44
18 mu_1       0.9      1.04      4.97e- 6  6.35e-60     22.1 
19 mu_0       0.1      0.417     1.90e-33  0            41.0 
20 mu_0       0.2      3.03      1.27e-18  0           275.  
21 mu_0       0.3      0.668     5.88e-11  0            15.1 
22 mu_0       0.4      0.931     9.06e- 6  0            13.1 
23 mu_0       0.5      1.01      4.14e- 3  0            13.5 
24 mu_0       0.6      0.978     3.99e- 2  0             8.42
25 mu_0       0.7      1.01      2.56e- 1  0            11.1 
26 mu_0       0.8      1.62      7.30e- 2  0             9.89
27 mu_0       0.9      1.06      9.22e- 6  0            24.6 
[1] "Total run time was 526.073 seconds"
