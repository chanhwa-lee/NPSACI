
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7609"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  58  59  60  61  63  64  65  66  67  68  69  70  71  72 
  3   1   4   2   2   1   1   1   1   1   1   4   3   1   1   4   5   3   4   2 
 73  74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  92  95  96 
  1   4   2   1   1   2   2   2   1   2   2   1   4   3   1   3   3   3   7   3 
 97  98  99 100 
  4   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03494 0.35273 0.61083 1.00000 5.25890 
[1] "event indicator table: "

   0    1 
4467 3142 
[1] "treatment indicator table: "

   0    1 
2724 4885 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3925
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3684
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 404.573 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.503 0.0874
 2 mu         0.1   0.2 0.591 0.0931
 3 mu         0.1   0.3 0.669 0.112 
 4 mu         0.1   0.4 0.678 0.105 
 5 mu         0.1   0.5 0.688 0.105 
 6 mu         0.2   0.1 0.463 0.0651
 7 mu         0.2   0.2 0.554 0.0639
 8 mu         0.2   0.3 0.632 0.0765
 9 mu         0.2   0.4 0.651 0.0615
10 mu         0.2   0.5 0.673 0.0570
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.09         0.487 0.0000135      9.56
 2 mu         0.2      1.13         1.08  0.0942         3.74
 3 mu         0.3      1.00         0.920 0.299          2.50
 4 mu         0.4      0.960        0.956 0.314          1.69
 5 mu         0.5      0.984        0.972 0.507          1.71
 6 mu         0.6      1.00         1.01  0.640          1.43
 7 mu         0.7      1.01         1.02  0.681          1.37
 8 mu         0.8      0.988        0.953 0.625          1.54
 9 mu         0.9      1.00         0.957 0.300          1.78
10 mu_1       0.1      1.10         0.701 0.0000380     10.1 
11 mu_1       0.2      1.13         1.03  0.122          3.76
12 mu_1       0.3      0.988        0.934 0.283          2.51
13 mu_1       0.4      0.963        0.959 0.287          1.63
14 mu_1       0.5      0.985        0.964 0.529          1.68
15 mu_1       0.6      1.00         1.00  0.646          1.44
16 mu_1       0.7      1.01         1.02  0.688          1.37
17 mu_1       0.8      0.988        0.955 0.619          1.55
18 mu_1       0.9      1.00         0.952 0.304          1.80
19 mu_0       0.1      1.09         0.464 0.0000108      9.68
20 mu_0       0.2      1.13         1.08  0.0873         3.73
21 mu_0       0.3      1.01         0.931 0.305          2.49
22 mu_0       0.4      0.959        0.944 0.332          1.73
23 mu_0       0.5      0.982        0.960 0.475          1.74
24 mu_0       0.6      1.00         1.01  0.607          1.42
25 mu_0       0.7      1.01         1.03  0.664          1.39
26 mu_0       0.8      0.989        0.964 0.650          1.54
27 mu_0       0.9      1.01         0.984 0.259          1.70
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.193     2.87e-27  9.31e-86     19.2 
 2 mu         0.2      0.655     7.27e-15  1.15e-57     28.8 
 3 mu         0.3      1.18      5.76e- 8  2.41e-41     36.5 
 4 mu         0.4      1.82      7.17e- 4  7.21e-30     48.1 
 5 mu         0.5      1.42      6.70e- 2  4.48e-21     12.1 
 6 mu         0.6      1.49      1.69e- 1  5.09e-14     19.9 
 7 mu         0.7      1.10      1.29e- 1  9.94e-20      6.35
 8 mu         0.8      1.19      2.58e- 2  5.22e-30      9.67
 9 mu         0.9      1.49      3.75e- 7  4.13e-48     26.6 
10 mu_1       0.1      0.292     1.97e-26  8.93e-85     28.9 
11 mu_1       0.2      0.675     2.22e-14  5.52e-57     33.2 
12 mu_1       0.3      1.26      1.27e- 7  7.70e-41     34.7 
13 mu_1       0.4      1.81      6.26e- 4  1.73e-29     43.4 
14 mu_1       0.5      1.42      9.02e- 2  8.59e-21     13.7 
15 mu_1       0.6      1.47      1.70e- 1  8.13e-14     18.8 
16 mu_1       0.7      1.10      1.23e- 1  2.14e-20      6.48
17 mu_1       0.8      1.20      2.04e- 2  9.83e-31      9.77
18 mu_1       0.9      1.49      2.65e- 7  6.92e-49     25.9 
19 mu_0       0.1      0.182     1.00e-27  4.22e-87     18.1 
20 mu_0       0.2      0.650     3.54e-15  5.87e-59     28.1 
21 mu_0       0.3      1.15      2.78e- 8  1.40e-42     37.9 
22 mu_0       0.4      1.83      4.59e- 4  4.91e-31     51.2 
23 mu_0       0.5      1.41      4.38e- 2  3.65e-22     11.6 
24 mu_0       0.6      1.52      1.49e- 1  5.19e-15     21.4 
25 mu_0       0.7      1.11      1.22e- 1  2.81e-19      6.04
26 mu_0       0.8      1.17      3.35e- 2  2.22e-29     10.0 
27 mu_0       0.9      1.44      1.36e- 6  3.51e-47     33.7 
[1] "Total run time was 407.796 seconds"
