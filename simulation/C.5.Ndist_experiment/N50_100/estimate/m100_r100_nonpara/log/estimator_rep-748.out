
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7421"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71 
  2   3   4   1   1   1   2   1   2   2   1   3   2   4   2   1   3   7   3   3 
 72  73  74  75  77  78  79  80  81  83  85  86  87  88  90  91  93  94  95  96 
  2   3   3   1   4   1   4   1   3   1   4   1   3   2   3   3   2   2   1   1 
 97  98  99 100 
  1   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0366  0.3547  0.6233  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4354 3067 
[1] "treatment indicator table: "

   0    1 
2781 4640 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3631
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3790
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 440.486 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.512 0.136 
 2 mu         0.1   0.2 0.621 0.163 
 3 mu         0.1   0.3 0.716 0.182 
 4 mu         0.1   0.4 0.774 0.186 
 5 mu         0.1   0.5 0.782 0.186 
 6 mu         0.2   0.1 0.445 0.0729
 7 mu         0.2   0.2 0.536 0.0790
 8 mu         0.2   0.3 0.627 0.0907
 9 mu         0.2   0.4 0.677 0.0836
10 mu         0.2   0.5 0.687 0.0752
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.21         0.167 0.000000550     25.2 
 2 mu         0.2      1.07         0.890 0.0175           6.15
 3 mu         0.3      1.06         1.02  0.209            2.29
 4 mu         0.4      1.01         1.00  0.444            1.74
 5 mu         0.5      1.03         1.03  0.603            1.51
 6 mu         0.6      1.03         1.02  0.548            1.38
 7 mu         0.7      0.976        0.949 0.679            1.51
 8 mu         0.8      0.985        0.996 0.542            1.74
 9 mu         0.9      0.981        0.969 0.149            3.01
10 mu_1       0.1      1.30         0.309 0.00000176      24.4 
11 mu_1       0.2      1.07         0.917 0.0281           4.66
12 mu_1       0.3      1.05         1.01  0.219            2.35
13 mu_1       0.4      1.00         1.00  0.448            1.62
14 mu_1       0.5      1.04         1.04  0.594            1.50
15 mu_1       0.6      1.03         1.04  0.552            1.37
16 mu_1       0.7      0.974        0.947 0.679            1.50
17 mu_1       0.8      0.985        0.995 0.532            1.74
18 mu_1       0.9      0.983        0.971 0.142            3.13
19 mu_0       0.1      1.20         0.153 0.000000417     25.3 
20 mu_0       0.2      1.07         0.889 0.0148           6.55
21 mu_0       0.3      1.06         1.03  0.186            2.26
22 mu_0       0.4      1.01         1.01  0.442            1.82
23 mu_0       0.5      1.03         1.02  0.597            1.53
24 mu_0       0.6      1.04         1.03  0.542            1.43
25 mu_0       0.7      0.979        0.954 0.679            1.52
26 mu_0       0.8      0.986        0.976 0.580            1.75
27 mu_0       0.9      0.965        0.963 0.217            1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.277     9.74e-29  1.74e-68     27.4 
 2 mu         0.2      4.19      1.17e-15  1.46e-44    268.  
 3 mu         0.3      1.19      5.28e- 9  8.03e-31     29.4 
 4 mu         0.4      0.910     2.82e- 4  2.64e-21     12.8 
 5 mu         0.5      0.848     5.11e- 2  3.62e-14      7.54
 6 mu         0.6      0.973     2.88e- 1  8.06e-11      5.68
 7 mu         0.7      1.09      4.62e- 1  1.56e-18      7.74
 8 mu         0.8      1.24      3.07e- 2  3.59e-30     19.4 
 9 mu         0.9      2.14      2.29e- 7  4.51e-51     49.5 
10 mu_1       0.1      0.506     6.40e-28  1.56e-67     49.7 
11 mu_1       0.2      4.17      3.84e-15  6.55e-44    244.  
12 mu_1       0.3      1.03      1.13e- 8  2.41e-30     22.5 
13 mu_1       0.4      0.928     4.36e- 4  5.95e-21     11.7 
14 mu_1       0.5      0.835     6.70e- 2  6.52e-14      7.54
15 mu_1       0.6      0.999     3.35e- 1  3.00e-11      6.00
16 mu_1       0.7      1.08      4.08e- 1  4.96e-19      8.14
17 mu_1       0.8      1.26      2.47e- 2  1.00e-30     19.8 
18 mu_1       0.9      2.16      1.61e- 7  1.12e-51     51.4 
19 mu_0       0.1      0.252     3.71e-29  1.93e-69     24.9 
20 mu_0       0.2      4.20      5.07e-16  1.82e-45    275.  
21 mu_0       0.3      1.25      2.68e- 9  1.15e-31     32.3 
22 mu_0       0.4      0.898     1.76e- 4  4.40e-22     13.5 
23 mu_0       0.5      0.860     3.58e- 2  7.25e-15      7.54
24 mu_0       0.6      0.935     2.40e- 1  1.57e-10      5.22
25 mu_0       0.7      1.11      5.09e- 1  4.03e-18      6.82
26 mu_0       0.8      1.17      4.70e- 2  1.39e-29     17.8 
27 mu_0       0.9      1.97      8.40e- 7  3.50e-50     45.0 
[1] "Total run time was 444.023 seconds"
