
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7483"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  58  59  60  61  62  63  64  65  67  69  70  71  72  74 
  3   3   2   1   2   1   2   3   3   2   4   1   3   5   6   1   3   2   5   1 
 75  76  78  79  80  81  82  83  84  85  88  89  90  91  92  93  94  95  96  97 
  1   1   2   1   3   1   2   3   3   2   2   2   1   4   2   3   1   2   4   3 
 98  99 100 
  1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02348 0.29426 0.56757 0.96303 6.00000 
[1] "event indicator table: "

   0    1 
4364 3119 
[1] "treatment indicator table: "

   0    1 
3104 4379 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3739
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3744
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 439.729 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.457 0.0555
 2 mu         0.1   0.2 0.550 0.0601
 3 mu         0.1   0.3 0.595 0.0655
 4 mu         0.1   0.4 0.631 0.0597
 5 mu         0.1   0.5 0.658 0.0564
 6 mu         0.2   0.1 0.372 0.0401
 7 mu         0.2   0.2 0.455 0.0423
 8 mu         0.2   0.3 0.494 0.0440
 9 mu         0.2   0.4 0.538 0.0395
10 mu         0.2   0.5 0.561 0.0353
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.03         0.928   0.00295      3.26
 2 mu         0.2      0.928        0.949   0.0917       1.75
 3 mu         0.3      0.983        0.967   0.313        1.65
 4 mu         0.4      1.01         0.987   0.502        2.14
 5 mu         0.5      1.02         1.01    0.643        1.52
 6 mu         0.6      0.995        0.983   0.618        1.32
 7 mu         0.7      1.01         1.00    0.530        1.57
 8 mu         0.8      1.03         1.01    0.549        1.60
 9 mu         0.9      0.992        0.927   0.173        2.27
10 mu_1       0.1      1.00         0.818   0.00620      3.34
11 mu_1       0.2      0.932        0.953   0.120        1.91
12 mu_1       0.3      0.986        0.969   0.338        1.63
13 mu_1       0.4      1.01         0.990   0.523        2.06
14 mu_1       0.5      1.01         1.01    0.651        1.50
15 mu_1       0.6      0.995        0.977   0.615        1.35
16 mu_1       0.7      1.01         1.00    0.518        1.58
17 mu_1       0.8      1.03         1.01    0.542        1.60
18 mu_1       0.9      0.992        0.915   0.171        2.28
19 mu_0       0.1      1.03         0.939   0.00259      3.36
20 mu_0       0.2      0.927        0.950   0.0846       1.70
21 mu_0       0.3      0.982        0.961   0.303        1.66
22 mu_0       0.4      1.01         0.976   0.487        2.19
23 mu_0       0.5      1.02         1.01    0.628        1.54
24 mu_0       0.6      0.995        0.988   0.623        1.31
25 mu_0       0.7      1.00         1.00    0.556        1.55
26 mu_0       0.8      1.03         1.01    0.565        1.58
27 mu_0       0.9      0.999        0.961   0.185        2.18
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.567     3.63e-25  1.61e-76     27.4 
 2 mu         0.2      1.32      2.56e-13  2.19e-50     26.8 
 3 mu         0.3      0.769     1.09e- 7  2.70e-35      9.07
 4 mu         0.4      0.858     6.43e- 4  9.05e-25      7.76
 5 mu         0.5      0.946     4.58e- 2  8.52e-17     13.9 
 6 mu         0.6      0.965     2.35e- 1  2.88e-15      6.23
 7 mu         0.7      1.39      1.78e- 1  9.30e-24      7.13
 8 mu         0.8      1.15      1.24e- 2  2.85e-36     12.7 
 9 mu         0.9      1.31      2.13e- 8  2.21e-58     31.8 
10 mu_1       0.1      0.835     2.06e-24  1.50e-75     39.1 
11 mu_1       0.2      1.19      9.03e-13  1.01e-49     25.9 
12 mu_1       0.3      0.792     2.33e- 7  8.33e-35      9.66
13 mu_1       0.4      0.851     7.26e- 4  2.10e-24      7.38
14 mu_1       0.5      0.949     5.38e- 2  1.58e-16     14.5 
15 mu_1       0.6      0.983     2.35e- 1  7.92e-16      6.37
16 mu_1       0.7      1.40      1.60e- 1  2.19e-24      6.98
17 mu_1       0.8      1.13      9.87e- 3  5.88e-37     12.8 
18 mu_1       0.9      1.32      1.37e- 8  4.05e-59     32.7 
19 mu_0       0.1      0.537     1.74e-25  1.32e-77     26.1 
20 mu_0       0.2      1.35      9.40e-14  2.02e-51     27.0 
21 mu_0       0.3      0.759     5.80e- 8  2.84e-36      9.51
22 mu_0       0.4      0.862     3.84e- 4  1.11e-25      8.02
23 mu_0       0.5      0.942     3.07e- 2  1.26e-17     13.2 
24 mu_0       0.6      0.938     1.82e- 1  6.02e-15      6.70
25 mu_0       0.7      1.37      2.44e- 1  2.59e-23      7.48
26 mu_0       0.8      1.21      2.04e- 2  1.19e-35     12.5 
27 mu_0       0.9      1.27      8.97e- 8  1.85e-57     27.6 
[1] "Total run time was 443.143 seconds"
