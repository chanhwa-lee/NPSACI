
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 8026"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  59  60  62  63  64  65  66  67  68  69  70  71  74  75 
  1   1   2   2   2   1   2   1   2   2   3   3   1   2   2   1   1   1   2   4 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  95  96 
  3   2   4   1   1   1   2   3   1   2   4   1   4   2   2   1   3   2   6   2 
 97  98  99 100 
  4   3   4   6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0265  0.3362  0.6006  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4786 3240 
[1] "treatment indicator table: "

   0    1 
3053 4973 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3897
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 4129
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 544.361 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.485 0.182 
 2 mu         0.1   0.2 0.634 0.239 
 3 mu         0.1   0.3 0.726 0.270 
 4 mu         0.1   0.4 0.776 0.291 
 5 mu         0.1   0.5 0.813 0.307 
 6 mu         0.2   0.1 0.346 0.0356
 7 mu         0.2   0.2 0.450 0.0522
 8 mu         0.2   0.3 0.524 0.0569
 9 mu         0.2   0.4 0.565 0.0600
10 mu         0.2   0.5 0.587 0.0572
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.35         0.252  3.61e-14     43.0 
 2 mu         0.2      1.00         0.949  1.42e- 5      6.81
 3 mu         0.3      1.06         0.995  4.67e- 2      3.46
 4 mu         0.4      0.996        0.985  4.43e- 1      2.11
 5 mu         0.5      0.975        0.968  5.82e- 1      1.35
 6 mu         0.6      1.01         0.993  6.44e- 1      1.48
 7 mu         0.7      0.995        0.996  3.99e- 1      1.37
 8 mu         0.8      1.01         1.05   3.50e- 1      1.49
 9 mu         0.9      1.09         1.06   3.95e- 1      2.04
10 mu_1       0.1      1.29         0.342  1.45e-13     43.4 
11 mu_1       0.2      1.01         0.954  2.86e- 5      6.00
12 mu_1       0.3      1.07         1.00   6.38e- 2      3.36
13 mu_1       0.4      0.990        0.978  4.78e- 1      2.00
14 mu_1       0.5      0.976        0.974  5.80e- 1      1.38
15 mu_1       0.6      1.01         0.994  6.52e- 1      1.48
16 mu_1       0.7      0.995        0.996  3.88e- 1      1.36
17 mu_1       0.8      1.01         1.05   3.52e- 1      1.50
18 mu_1       0.9      1.09         1.06   3.79e- 1      2.03
19 mu_0       0.1      1.36         0.229  2.40e-14     43.0 
20 mu_0       0.2      1.00         0.944  1.06e- 5      7.01
21 mu_0       0.3      1.06         1.00   3.94e- 2      3.50
22 mu_0       0.4      0.999        0.982  4.20e- 1      2.18
23 mu_0       0.5      0.973        0.967  5.84e- 1      1.37
24 mu_0       0.6      1.01         0.993  6.33e- 1      1.48
25 mu_0       0.7      0.997        1.00   4.27e- 1      1.37
26 mu_0       0.8      1.01         1.04   3.43e- 1      1.54
27 mu_0       0.9      1.08         1.06   4.94e- 1      2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00190     1.63e-28  7.00e-88     0.153
 2 mu         0.2    0.945       8.64e-15  3.46e-59    37.6  
 3 mu         0.3    2.52        1.04e- 7  1.63e-42    68.3  
 4 mu         0.4    1.50        1.68e- 3  8.68e-31    26.4  
 5 mu         0.5    1.07        1.86e- 1  8.42e-22     9.98 
 6 mu         0.6    1.22        1.85e- 1  1.38e-14     7.15 
 7 mu         0.7    0.954       1.13e- 1  2.24e-21     5.92 
 8 mu         0.8    0.982       2.25e- 3  8.92e-34    10.9  
 9 mu         0.9    1.30        1.21e- 9  6.22e-56    28.1  
10 mu_1       0.1    0.00413     9.49e-28  6.72e-87     0.316
11 mu_1       0.2    1.19        2.86e-14  1.66e-58    45.1  
12 mu_1       0.3    2.52        2.25e- 7  5.22e-42    63.6  
13 mu_1       0.4    1.41        2.01e- 3  2.08e-30    23.8  
14 mu_1       0.5    1.06        1.21e- 1  1.62e-21     8.96 
15 mu_1       0.6    1.22        1.65e- 1  2.20e-14     7.18 
16 mu_1       0.7    0.946       8.58e- 2  6.59e-22     6.17 
17 mu_1       0.8    0.984       1.89e- 3  2.30e-34    11.1  
18 mu_1       0.9    1.30        8.29e-10  1.43e-56    28.3  
19 mu_0       0.1    0.00165     7.61e-29  3.11e-89     0.135
20 mu_0       0.2    0.883       3.66e-15  1.73e-60    35.7  
21 mu_0       0.3    2.51        5.27e- 8  9.31e-44    70.3  
22 mu_0       0.4    1.57        1.14e- 3  5.79e-32    28.1  
23 mu_0       0.5    1.07        1.75e- 1  6.73e-23    11.0  
24 mu_0       0.6    1.22        1.64e- 1  1.38e-15     7.10 
25 mu_0       0.7    0.973       1.19e- 1  5.92e-21     5.44 
26 mu_0       0.8    0.975       3.92e- 3  3.54e-33    10.2  
27 mu_0       0.9    1.29        4.61e- 9  4.94e-55    26.3  
[1] "Total run time was 549.253 seconds"
