
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7561"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  70  71  72 
  2   5   3   1   2   2   2   4   3   3   1   1   1   1   2   4   1   2   1   3 
 73  74  75  77  78  80  82  83  84  85  88  89  90  91  92  93  94  95  96  97 
  2   5   1   2   1   4   1   3   1   2   5   1   1   1   2   1   3   1   4   3 
 98  99 100 
  3   5   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03977 0.38602 0.63617 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4578 2983 
[1] "treatment indicator table: "

   0    1 
2603 4958 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3780
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3781
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 469.811 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.317 0.0783
 2 mu         0.1   0.2 0.401 0.0887
 3 mu         0.1   0.3 0.412 0.0998
 4 mu         0.1   0.4 0.449 0.114 
 5 mu         0.1   0.5 0.499 0.131 
 6 mu         0.2   0.1 0.330 0.0475
 7 mu         0.2   0.2 0.423 0.0421
 8 mu         0.2   0.3 0.446 0.0383
 9 mu         0.2   0.4 0.487 0.0506
10 mu         0.2   0.5 0.542 0.0658
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.962        0.127  9.41e-11     18.4 
 2 mu         0.2      1.05         1.00   5.53e- 4      3.91
 3 mu         0.3      0.983        0.964  1.55e- 1      2.01
 4 mu         0.4      1.00         0.932  4.51e- 1      1.94
 5 mu         0.5      1.00         1.02   6.05e- 1      1.43
 6 mu         0.6      1.01         1.00   6.26e- 1      1.41
 7 mu         0.7      1.01         1.01   5.90e- 1      1.49
 8 mu         0.8      1.03         1.01   4.80e- 1      1.56
 9 mu         0.9      0.956        0.990  2.79e- 1      1.82
10 mu_1       0.1      0.975        0.218  3.39e-10     15.3 
11 mu_1       0.2      1.06         1.00   1.00e- 3      3.93
12 mu_1       0.3      0.979        0.982  1.91e- 1      2.01
13 mu_1       0.4      1.00         0.935  4.64e- 1      1.99
14 mu_1       0.5      1.00         1.01   6.01e- 1      1.42
15 mu_1       0.6      1.01         1.00   6.26e- 1      1.40
16 mu_1       0.7      1.01         1.01   5.93e- 1      1.51
17 mu_1       0.8      1.02         1.01   4.68e- 1      1.57
18 mu_1       0.9      0.957        0.981  2.69e- 1      1.83
19 mu_0       0.1      0.960        0.118  6.68e-11     18.7 
20 mu_0       0.2      1.05         0.986  4.41e- 4      3.91
21 mu_0       0.3      0.984        0.957  1.39e- 1      2.02
22 mu_0       0.4      0.999        0.934  4.42e- 1      1.91
23 mu_0       0.5      1.00         1.02   6.08e- 1      1.44
24 mu_0       0.6      1.01         1.00   6.27e- 1      1.41
25 mu_0       0.7      1.01         1.01   5.64e- 1      1.47
26 mu_0       0.8      1.03         0.994  5.32e- 1      1.51
27 mu_0       0.9      0.952        0.966  2.77e- 1      1.73
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000184     3.28e-28  1.81e-84    0.0141
 2 mu         0.2   0.185        9.01e-16  1.99e-56    8.19  
 3 mu         0.3   0.941        1.63e- 9  3.64e-40   25.4   
 4 mu         0.4   1.14         5.10e- 5  9.36e-29   27.2   
 5 mu         0.5   1.01         2.85e- 2  4.84e-20    7.89  
 6 mu         0.6   1.04         1.30e- 1  4.40e-13   16.3   
 7 mu         0.7   0.860        1.51e- 1  2.22e-14    6.75  
 8 mu         0.8   1.28         1.69e- 2  1.30e-24   11.6   
 9 mu         0.9   1.43         4.31e- 7  2.12e-43   24.0   
10 mu_1       0.1   0.000498     1.91e-27  1.72e-83    0.0380
11 mu_1       0.2   0.254        3.21e-15  9.45e-56   11.0   
12 mu_1       0.3   0.983        3.83e- 9  1.15e-39   28.5   
13 mu_1       0.4   1.14         8.02e- 5  2.22e-28   27.5   
14 mu_1       0.5   1.01         3.49e- 2  9.19e-20    7.03  
15 mu_1       0.6   1.03         1.12e- 1  6.96e-13   16.0   
16 mu_1       0.7   0.860        1.79e- 1  9.11e-15    7.06  
17 mu_1       0.8   1.30         1.31e- 2  4.67e-25   11.8   
18 mu_1       0.9   1.44         2.94e- 7  6.77e-44   24.3   
19 mu_0       0.1   0.000150     1.52e-28  1.02e-85    0.0114
20 mu_0       0.2   0.168        3.24e-16  1.26e-57    7.47  
21 mu_0       0.3   0.922        6.88e-10  2.63e-41   24.0   
22 mu_0       0.4   1.14         3.16e- 5  7.88e-30   27.0   
23 mu_0       0.5   1.01         2.65e- 2  4.89e-21    8.74  
24 mu_0       0.6   1.06         1.41e- 1  5.55e-14   16.7   
25 mu_0       0.7   0.859        9.93e- 2  5.28e-14    6.03  
26 mu_0       0.8   1.20         2.62e- 2  4.64e-24   11.7   
27 mu_0       0.9   1.41         1.66e- 6  1.51e-42   21.8   
[1] "Total run time was 473.318 seconds"
