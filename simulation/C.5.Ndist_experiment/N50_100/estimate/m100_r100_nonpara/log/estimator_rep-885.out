
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7252"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  3   1   2   3   3   6   1   2   2   4   1   3   3   1   3   1   2   3   3   3 
 71  72  73  74  75  77  78  79  81  82  84  85  86  87  88  89  90  91  92  94 
  2   3   5   2   1   3   1   3   3   1   1   2   1   1   1   1   1   2   3   1 
 95  96  97  98 100 
  2   3   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04046 0.38903 0.64963 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4303 2949 
[1] "treatment indicator table: "

   0    1 
2564 4688 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3644
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3608
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 392.277 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.399 0.0629
 2 mu         0.1   0.2 0.481 0.0704
 3 mu         0.1   0.3 0.532 0.0731
 4 mu         0.1   0.4 0.546 0.0792
 5 mu         0.1   0.5 0.588 0.0858
 6 mu         0.2   0.1 0.377 0.0420
 7 mu         0.2   0.2 0.457 0.0441
 8 mu         0.2   0.3 0.514 0.0384
 9 mu         0.2   0.4 0.529 0.0358
10 mu         0.2   0.5 0.569 0.0354
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.990        0.437 0.000000113       8.83
 2 mu         0.2      1.00         1.01  0.0171            2.56
 3 mu         0.3      0.978        1.00  0.314             1.75
 4 mu         0.4      0.987        0.988 0.516             1.63
 5 mu         0.5      0.984        0.974 0.574             1.43
 6 mu         0.6      1.04         1.01  0.712             1.60
 7 mu         0.7      1.05         1.05  0.701             1.43
 8 mu         0.8      0.990        0.991 0.544             1.49
 9 mu         0.9      0.939        0.929 0.387             1.54
10 mu_1       0.1      1.02         0.595 0.000000333       8.63
11 mu_1       0.2      0.994        0.953 0.0260            2.52
12 mu_1       0.3      0.983        0.987 0.313             1.67
13 mu_1       0.4      0.984        0.973 0.495             1.58
14 mu_1       0.5      0.987        0.988 0.565             1.44
15 mu_1       0.6      1.04         1.01  0.732             1.61
16 mu_1       0.7      1.05         1.05  0.707             1.41
17 mu_1       0.8      0.988        0.986 0.543             1.51
18 mu_1       0.9      0.941        0.940 0.388             1.56
19 mu_0       0.1      0.987        0.423 0.0000000885      8.85
20 mu_0       0.2      1.01         1.01  0.0149            2.57
21 mu_0       0.3      0.976        0.988 0.315             1.79
22 mu_0       0.4      0.989        0.995 0.530             1.66
23 mu_0       0.5      0.981        0.970 0.548             1.44
24 mu_0       0.6      1.03         1.02  0.683             1.59
25 mu_0       0.7      1.05         1.06  0.689             1.50
26 mu_0       0.8      0.998        0.988 0.549             1.47
27 mu_0       0.9      0.919        0.907 0.351             1.47
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0923     1.09e-27  2.58e-76      9.16
 2 mu         0.2     0.490      6.22e-16  9.86e-51     20.2 
 3 mu         0.3     1.34       3.82e- 9  6.16e-36     30.6 
 4 mu         0.4     1.07       1.66e- 4  1.36e-25     19.7 
 5 mu         0.5     0.766      1.53e- 2  9.82e-18      7.97
 6 mu         0.6     0.895      1.59e- 1  1.24e-11      8.62
 7 mu         0.7     1.16       1.50e- 1  3.84e-18     11.8 
 8 mu         0.8     1.21       8.79e- 2  8.49e-29      8.99
 9 mu         0.9     1.25       2.14e- 5  1.71e-49     14.6 
10 mu_1       0.1     0.148      8.02e-27  2.42e-75     14.6 
11 mu_1       0.2     0.546      2.15e-15  4.61e-50     16.1 
12 mu_1       0.3     1.38       8.56e- 9  1.92e-35     32.6 
13 mu_1       0.4     1.04       2.65e- 4  3.17e-25     18.5 
14 mu_1       0.5     0.753      1.82e- 2  1.84e-17      7.56
15 mu_1       0.6     0.912      1.76e- 1  3.31e-12      8.54
16 mu_1       0.7     1.17       1.23e- 1  8.76e-19     12.4 
17 mu_1       0.8     1.21       8.68e- 2  2.71e-29      9.46
18 mu_1       0.9     1.25       1.62e- 5  4.84e-50     14.4 
19 mu_0       0.1     0.0862     3.22e-28  1.87e-77      8.55
20 mu_0       0.2     0.476      2.41e-16  8.04e-52     21.3 
21 mu_0       0.3     1.32       1.79e- 9  5.74e-37     29.8 
22 mu_0       0.4     1.09       9.95e- 5  1.48e-26     20.4 
23 mu_0       0.5     0.778      1.05e- 2  1.28e-18      8.38
24 mu_0       0.6     0.870      1.22e- 1  2.71e-12      8.75
25 mu_0       0.7     1.15       1.36e- 1  1.08e-17     10.2 
26 mu_0       0.8     1.18       9.05e- 2  3.16e-28      7.91
27 mu_0       0.9     1.25       6.80e- 5  1.27e-48     16.5 
[1] "Total run time was 395.308 seconds"
