
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7541"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  62  63  64  65  66  67  68  69  72  74 
  1   1   1   2   2   3   1   3   3   5   1   4   2   4   2   3   2   5   3   4 
 75  78  79  80  81  82  83  85  87  89  90  91  92  93  94  95  97  98  99 100 
  4   3   1   1   1   2   5   1   3   2   1   2   1   1   3   3   1   3   7   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03215 0.34497 0.61637 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4383 3158 
[1] "treatment indicator table: "

   0    1 
2922 4619 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3667
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3874
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 90"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 1761.138 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.492 0.126 
 2 mu         0.1   0.2 0.544 0.118 
 3 mu         0.1   0.3 0.549 0.103 
 4 mu         0.1   0.4 0.598 0.114 
 5 mu         0.1   0.5 0.612 0.107 
 6 mu         0.2   0.1 0.476 0.102 
 7 mu         0.2   0.2 0.540 0.0848
 8 mu         0.2   0.3 0.589 0.0766
 9 mu         0.2   0.4 0.649 0.0851
10 mu         0.2   0.5 0.672 0.0732
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.826        0.287 0.00000640      7.69
 2 mu         0.2      1.06         0.945 0.0937          3.72
 3 mu         0.3      1.03         0.964 0.252           1.96
 4 mu         0.4      0.998        0.992 0.404           1.55
 5 mu         0.5      1.02         1.00  0.644           1.46
 6 mu         0.6      1.04         1.02  0.572           1.65
 7 mu         0.7      1.01         1.00  0.595           1.71
 8 mu         0.8      0.966        0.964 0.578           1.34
 9 mu         0.9      0.963        0.943 0.156           1.76
10 mu_1       0.1      0.873        0.439 0.0000180       6.64
11 mu_1       0.2      1.06         0.935 0.144           3.74
12 mu_1       0.3      1.03         0.983 0.253           2.03
13 mu_1       0.4      0.997        0.992 0.432           1.50
14 mu_1       0.5      1.02         1.01  0.631           1.46
15 mu_1       0.6      1.04         1.02  0.570           1.66
16 mu_1       0.7      1.01         1.01  0.597           1.70
17 mu_1       0.8      0.964        0.965 0.574           1.33
18 mu_1       0.9      0.965        0.945 0.150           1.77
19 mu_0       0.1      0.821        0.266 0.00000511      7.87
20 mu_0       0.2      1.06         0.944 0.0811          3.72
21 mu_0       0.3      1.03         0.967 0.252           1.93
22 mu_0       0.4      0.999        0.984 0.385           1.58
23 mu_0       0.5      1.02         0.993 0.653           1.47
24 mu_0       0.6      1.04         1.02  0.576           1.64
25 mu_0       0.7      1.02         1.02  0.589           1.72
26 mu_0       0.8      0.973        0.958 0.546           1.40
27 mu_0       0.9      0.946        0.915 0.211           1.62
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.297     1.84e-27  2.10e-75     24.7 
 2 mu         0.2      0.710     1.54e-14  1.43e-49     44.0 
 3 mu         0.3      0.882     9.46e- 8  1.17e-34     19.3 
 4 mu         0.4      1.19      1.80e- 3  2.80e-24     28.5 
 5 mu         0.5      1.24      9.49e- 2  4.29e-17     10.2 
 6 mu         0.6      1.30      3.27e- 1  1.04e-12     14.8 
 7 mu         0.7      0.988     2.88e- 1  7.43e-21      6.11
 8 mu         0.8      0.798     3.11e- 3  3.87e-33      9.98
 9 mu         0.9      1.83      6.74e-10  3.42e-55     46.0 
10 mu_1       0.1      0.386     1.05e-26  1.95e-74     29.3 
11 mu_1       0.2      0.707     4.93e-14  6.61e-49     41.3 
12 mu_1       0.3      0.929     2.01e- 7  3.61e-34     18.8 
13 mu_1       0.4      1.19      2.74e- 3  6.53e-24     26.8 
14 mu_1       0.5      1.25      1.25e- 1  8.35e-17      9.69
15 mu_1       0.6      1.29      3.58e- 1  3.86e-13     15.3 
16 mu_1       0.7      0.987     2.39e- 1  2.36e-21      6.13
17 mu_1       0.8      0.785     2.41e- 3  1.08e-33     10.4 
18 mu_1       0.9      1.87      4.45e-10  8.44e-56     47.3 
19 mu_0       0.1      0.287     8.76e-28  1.74e-76     24.2 
20 mu_0       0.2      0.711     6.88e-15  1.33e-50     44.7 
21 mu_0       0.3      0.861     4.91e- 8  1.25e-35     19.5 
22 mu_0       0.4      1.20      1.18e- 3  2.93e-25     29.6 
23 mu_0       0.5      1.23      7.95e- 2  2.32e-18     10.8 
24 mu_0       0.6      1.32      2.28e- 1  9.32e-13     14.1 
25 mu_0       0.7      0.991     3.64e- 1  1.93e-20      7.71
26 mu_0       0.8      0.847     4.29e- 3  1.51e-32     10.3 
27 mu_0       0.9      1.44      2.78e- 9  2.66e-54     34.2 
[1] "Total run time was 1765.957 seconds"
