
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7444"
[1] "cluster size dist'n: "

 50  51  54  55  56  57  59  60  61  62  63  64  65  67  68  69  70  71  72  74 
  2   6   1   2   5   3   1   2   2   2   4   1   3   3   2   4   3   2   2   2 
 75  76  77  78  79  81  82  84  86  87  89  90  91  92  93  94  95  96  97  98 
  3   2   4   1   3   1   1   3   2   1   1   2   1   3   5   1   2   4   1   4 
 99 100 
  2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03828 0.35658 0.61609 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4443 3001 
[1] "treatment indicator table: "

   0    1 
2705 4739 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3679
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3765
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 499.239 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.346 0.0770
 2 mu         0.1   0.2 0.403 0.0899
 3 mu         0.1   0.3 0.448 0.0966
 4 mu         0.1   0.4 0.490 0.114 
 5 mu         0.1   0.5 0.506 0.120 
 6 mu         0.2   0.1 0.384 0.0447
 7 mu         0.2   0.2 0.461 0.0498
 8 mu         0.2   0.3 0.535 0.0547
 9 mu         0.2   0.4 0.588 0.0643
10 mu         0.2   0.5 0.630 0.0717
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.743       0.0357  6.59e-14      7.95
 2 mu         0.2      1.06        0.825   1.79e- 5      5.90
 3 mu         0.3      0.927       0.868   4.19e- 2      2.57
 4 mu         0.4      0.912       0.914   4.08e- 1      1.49
 5 mu         0.5      0.958       0.935   5.92e- 1      1.67
 6 mu         0.6      0.996       0.978   5.35e- 1      1.55
 7 mu         0.7      1.01        1.01    5.82e- 1      1.49
 8 mu         0.8      1.05        1.04    6.09e- 1      1.77
 9 mu         0.9      0.989       0.936   2.80e- 1      2.60
10 mu_1       0.1      0.853       0.0703  2.56e-13      7.69
11 mu_1       0.2      1.04        0.813   3.49e- 5      5.69
12 mu_1       0.3      0.922       0.856   5.59e- 2      2.57
13 mu_1       0.4      0.913       0.909   4.01e- 1      1.48
14 mu_1       0.5      0.962       0.931   6.08e- 1      1.68
15 mu_1       0.6      0.997       0.982   5.31e- 1      1.55
16 mu_1       0.7      1.01        1.01    5.83e- 1      1.49
17 mu_1       0.8      1.05        1.03    5.86e- 1      1.78
18 mu_1       0.9      0.990       0.948   2.65e- 1      2.58
19 mu_0       0.1      0.730       0.0319  4.48e-14      8.10
20 mu_0       0.2      1.06        0.826   1.36e- 5      5.95
21 mu_0       0.3      0.930       0.861   3.58e- 2      2.58
22 mu_0       0.4      0.912       0.898   3.91e- 1      1.50
23 mu_0       0.5      0.954       0.932   5.66e- 1      1.67
24 mu_0       0.6      0.995       0.964   5.40e- 1      1.55
25 mu_0       0.7      1.00        1.01    5.78e- 1      1.47
26 mu_0       0.8      1.05        1.04    6.19e- 1      1.75
27 mu_0       0.9      0.979       0.939   2.02e- 1      2.77
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00865     6.90e-27  5.10e-68     0.459
 2 mu         0.2    0.392       1.75e-14  7.61e-45    20.5  
 3 mu         0.3    0.997       4.70e- 8  1.86e-31    34.4  
 4 mu         0.4    1.12        6.35e- 4  2.43e-22    15.1  
 5 mu         0.5    1.42        6.44e- 2  1.07e-15    20.5  
 6 mu         0.6    1.18        2.06e- 1  2.29e-10    10.0  
 7 mu         0.7    1.45        3.76e- 1  4.16e-15    19.0  
 8 mu         0.8    2.22        2.95e- 2  4.25e-24    50.8  
 9 mu         0.9    0.916       1.11e- 7  3.07e-41    25.9  
10 mu_1       0.1    0.0187      4.42e-26  4.74e-67     0.969
11 mu_1       0.2    0.461       5.70e-14  3.53e-44    21.7  
12 mu_1       0.3    1.02        1.05e- 7  5.74e-31    33.6  
13 mu_1       0.4    1.15        1.03e- 3  5.84e-22    16.0  
14 mu_1       0.5    1.40        7.34e- 2  2.05e-15    20.8  
15 mu_1       0.6    1.18        1.91e- 1  3.67e-10    11.2  
16 mu_1       0.7    1.45        3.77e- 1  1.26e-15    18.1  
17 mu_1       0.8    2.23        2.78e- 2  1.12e-24    50.7  
18 mu_1       0.9    0.918       8.05e- 8  1.00e-41    26.7  
19 mu_0       0.1    0.00754     2.76e-27  4.05e-69     0.402
20 mu_0       0.2    0.374       7.60e-15  6.79e-46    20.2  
21 mu_0       0.3    0.987       2.51e- 8  1.89e-32    34.7  
22 mu_0       0.4    1.10        3.73e- 4  1.65e-23    15.5  
23 mu_0       0.5    1.43        5.50e- 2  8.68e-17    20.3  
24 mu_0       0.6    1.17        2.04e- 1  2.33e-11     9.22 
25 mu_0       0.7    1.43        2.88e- 1  1.09e-14    21.1  
26 mu_0       0.8    2.21        4.90e- 2  1.67e-23    51.5  
27 mu_0       0.9    0.898       3.82e- 7  2.17e-40    18.5  
[1] "Total run time was 503.743 seconds"
