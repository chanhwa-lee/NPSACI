
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7705"
[1] "cluster size dist'n: "

 50  51  53  55  56  57  58  59  60  62  63  64  65  66  67  68  70  71  72  73 
  1   2   3   2   4   2   1   2   2   1   1   3   2   1   1   2   2   1   2   2 
 74  75  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92  93  94  95 
  3   3   6   1   1   4   1   3   2   1   3   5   3   6   3   3   1   1   1   1 
 96  97  99 100 
  2   3   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04002 0.34804 0.61470 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4408 3297 
[1] "treatment indicator table: "

   0    1 
2857 4848 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3705
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 4000
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 374.316 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.329 0.108 
 2 mu         0.1   0.2 0.458 0.144 
 3 mu         0.1   0.3 0.550 0.169 
 4 mu         0.1   0.4 0.576 0.189 
 5 mu         0.1   0.5 0.648 0.202 
 6 mu         0.2   0.1 0.292 0.0287
 7 mu         0.2   0.2 0.403 0.0346
 8 mu         0.2   0.3 0.479 0.0349
 9 mu         0.2   0.4 0.500 0.0462
10 mu         0.2   0.5 0.576 0.0488
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.17         0.232  2.84e-11     33.7 
 2 mu         0.2      1.05         0.908  1.91e- 4      4.14
 3 mu         0.3      1.02         0.945  8.65e- 2      2.27
 4 mu         0.4      0.979        0.972  3.61e- 1      1.84
 5 mu         0.5      0.990        0.996  4.67e- 1      1.74
 6 mu         0.6      1.01         0.994  5.05e- 1      1.58
 7 mu         0.7      1.00         1.02   6.20e- 1      1.44
 8 mu         0.8      1.02         1.01   4.60e- 1      1.63
 9 mu         0.9      1.08         1.05   1.19e- 1      2.53
10 mu_1       0.1      0.950        0.338  1.04e-10     11.1 
11 mu_1       0.2      1.06         0.908  3.84e- 4      3.83
12 mu_1       0.3      1.01         0.929  1.11e- 1      2.08
13 mu_1       0.4      0.977        0.946  3.67e- 1      1.82
14 mu_1       0.5      0.993        0.992  4.78e- 1      1.73
15 mu_1       0.6      1.00         0.995  4.92e- 1      1.57
16 mu_1       0.7      1.01         1.02   6.16e- 1      1.43
17 mu_1       0.8      1.02         1.01   4.51e- 1      1.64
18 mu_1       0.9      1.08         1.06   1.08e- 1      2.57
19 mu_0       0.1      1.20         0.215  2.00e-11     36.8 
20 mu_0       0.2      1.05         0.911  1.43e- 4      4.22
21 mu_0       0.3      1.02         0.950  7.35e- 2      2.35
22 mu_0       0.4      0.980        0.973  3.57e- 1      1.91
23 mu_0       0.5      0.987        1.01   4.55e- 1      1.75
24 mu_0       0.6      1.01         0.995  5.25e- 1      1.60
25 mu_0       0.7      1.00         1.00   6.27e- 1      1.47
26 mu_0       0.8      1.02         1.02   4.98e- 1      1.59
27 mu_0       0.9      1.06         1.06   2.14e- 1      2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.293     1.56e-29  6.61e-72     29.3 
 2 mu         0.2      2.53      2.46e-16  4.98e-47    224.  
 3 mu         0.3      1.09      1.02e- 8  1.06e-32     19.1 
 4 mu         0.4      0.972     1.75e- 4  9.65e-23     11.8 
 5 mu         0.5      1.28      1.83e- 2  3.10e-15     11.5 
 6 mu         0.6      1.03      1.01e- 1  1.36e-12     23.6 
 7 mu         0.7      0.963     8.65e- 2  1.85e-20      7.38
 8 mu         0.8      1.24      8.28e- 3  4.32e-32     11.0 
 9 mu         0.9      1.94      3.57e- 9  1.07e-52     39.2 
10 mu_1       0.1      0.512     1.12e-28  6.04e-71     51.1 
11 mu_1       0.2      2.35      7.57e-16  2.28e-46    195.  
12 mu_1       0.3      1.07      2.16e- 8  3.23e-32     19.6 
13 mu_1       0.4      0.991     2.90e- 4  2.20e-22     12.8 
14 mu_1       0.5      1.27      2.17e- 2  5.66e-15     11.4 
15 mu_1       0.6      1.01      1.17e- 1  3.96e-13     24.0 
16 mu_1       0.7      0.979     7.37e- 2  4.61e-21      7.58
17 mu_1       0.8      1.25      6.71e- 3  9.41e-33     11.0 
18 mu_1       0.9      1.93      2.56e- 9  2.07e-53     38.7 
19 mu_0       0.1      0.269     4.92e-30  6.39e-73     26.9 
20 mu_0       0.2      2.58      1.18e-16  5.42e-48    231.  
21 mu_0       0.3      1.10      5.26e- 9  1.32e-33     18.9 
22 mu_0       0.4      0.959     9.92e- 5  1.40e-23     11.2 
23 mu_0       0.5      1.28      2.46e- 2  5.39e-16     11.6 
24 mu_0       0.6      1.06      9.08e- 2  2.81e-12     23.2 
25 mu_0       0.7      0.924     8.71e- 2  5.10e-20      7.07
26 mu_0       0.8      1.19      9.98e- 3  1.78e-31     11.0 
27 mu_0       0.9      2.01      1.26e- 8  8.83e-52     43.6 
[1] "Total run time was 377.325 seconds"
