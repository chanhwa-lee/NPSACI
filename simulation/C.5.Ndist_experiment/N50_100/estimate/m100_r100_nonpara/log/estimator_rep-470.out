
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7228"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  66  68  69  70  71  72  74 
  3   9   2   3   3   4   2   2   3   2   2   1   3   4   2   4   2   2   2   1 
 75  77  78  80  82  83  84  85  86  88  89  91  92  93  94  95  96  97  98  99 
  3   1   2   2   1   2   2   2   3   5   2   3   1   2   2   1   3   1   1   3 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03128 0.34827 0.61792 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4296 2932 
[1] "treatment indicator table: "

   0    1 
2611 4617 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3731
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3497
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 365.18 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.430 0.0729
 2 mu         0.1   0.2 0.578 0.104 
 3 mu         0.1   0.3 0.612 0.0958
 4 mu         0.1   0.4 0.650 0.0960
 5 mu         0.1   0.5 0.669 0.0964
 6 mu         0.2   0.1 0.381 0.0328
 7 mu         0.2   0.2 0.513 0.0535
 8 mu         0.2   0.3 0.573 0.0575
 9 mu         0.2   0.4 0.608 0.0515
10 mu         0.2   0.5 0.643 0.0500
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.626 0.0000890      6.99
 2 mu         0.2      1.04         0.991 0.0805         2.92
 3 mu         0.3      1.02         1.00  0.410          2.37
 4 mu         0.4      0.956        0.920 0.306          1.87
 5 mu         0.5      1.03         1.00  0.570          1.96
 6 mu         0.6      1.01         1.04  0.637          1.69
 7 mu         0.7      0.985        0.985 0.527          1.42
 8 mu         0.8      0.970        0.958 0.499          1.51
 9 mu         0.9      0.995        0.968 0.335          1.82
10 mu_1       0.1      1.04         0.787 0.000256       8.13
11 mu_1       0.2      1.04         0.951 0.0920         3.04
12 mu_1       0.3      1.01         0.995 0.408          2.54
13 mu_1       0.4      0.958        0.923 0.327          1.73
14 mu_1       0.5      1.03         1.00  0.584          2.02
15 mu_1       0.6      1.01         1.03  0.646          1.62
16 mu_1       0.7      0.986        0.983 0.514          1.41
17 mu_1       0.8      0.969        0.961 0.490          1.50
18 mu_1       0.9      0.997        0.967 0.326          1.83
19 mu_0       0.1      1.02         0.594 0.0000704      7.05
20 mu_0       0.2      1.04         1.00  0.0703         2.90
21 mu_0       0.3      1.02         1.00  0.398          2.29
22 mu_0       0.4      0.954        0.936 0.291          1.95
23 mu_0       0.5      1.03         1.01  0.555          1.90
24 mu_0       0.6      1.02         1.03  0.624          1.79
25 mu_0       0.7      0.984        0.986 0.556          1.44
26 mu_0       0.8      0.977        0.959 0.536          1.58
27 mu_0       0.9      0.978        0.999 0.414          1.71
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00246     3.39e-26  8.31e-80     0.202
 2 mu         0.2    0.289       2.22e-13  5.08e-53    11.6  
 3 mu         0.3    0.781       1.23e- 6  1.61e-37    18.4  
 4 mu         0.4    1.19        8.92e- 3  1.12e-26    14.7  
 5 mu         0.5    1.82        5.65e- 2  1.97e-18    17.1  
 6 mu         0.6    1.39        1.21e- 1  6.92e-12    12.1  
 7 mu         0.7    0.895       8.39e- 2  2.70e-15    23.2  
 8 mu         0.8    1.41        4.66e- 3  2.08e-25    19.1  
 9 mu         0.9    2.28        3.99e- 9  8.48e-44    57.7  
10 mu_1       0.1    0.00568     1.99e-25  7.79e-79     0.456
11 mu_1       0.2    0.358       6.56e-13  2.38e-52    13.1  
12 mu_1       0.3    0.806       2.43e- 6  5.02e-37    19.8  
13 mu_1       0.4    1.26        1.37e- 2  2.62e-26    16.6  
14 mu_1       0.5    1.82        7.00e- 2  3.70e-18    15.8  
15 mu_1       0.6    1.35        1.20e- 1  1.08e-11    11.7  
16 mu_1       0.7    0.910       7.47e- 2  1.01e-15    24.7  
17 mu_1       0.8    1.41        3.39e- 3  6.81e-26    19.7  
18 mu_1       0.9    2.31        2.79e- 9  2.46e-44    59.7  
19 mu_0       0.1    0.00211     1.56e-26  5.77e-81     0.174
20 mu_0       0.2    0.271       1.13e-13  3.97e-54    11.2  
21 mu_0       0.3    0.770       7.22e- 7  1.43e-38    17.8  
22 mu_0       0.4    1.15        5.70e- 3  1.16e-27    13.3  
23 mu_0       0.5    1.81        5.20e- 2  2.47e-19    18.7  
24 mu_0       0.6    1.45        1.01e- 1  1.08e-12    12.7  
25 mu_0       0.7    0.862       7.27e- 2  6.64e-15    19.7  
26 mu_0       0.8    1.38        6.34e- 3  7.70e-25    24.3  
27 mu_0       0.9    1.96        1.48e- 8  6.26e-43    39.1  
[1] "Total run time was 368.367 seconds"
