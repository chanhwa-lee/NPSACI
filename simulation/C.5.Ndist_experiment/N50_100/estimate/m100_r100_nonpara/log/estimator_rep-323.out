
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7746"
[1] "cluster size dist'n: "

 50  51  52  53  54  57  59  60  61  62  63  64  65  66  68  69  70  73  74  76 
  3   1   2   2   2   1   3   3   6   2   2   1   3   2   1   1   1   2   3   3 
 78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97 
  1   2   2   3   2   3   2   4   3   2   2   2   2   2   3   4   2   5   1   2 
 98  99 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04113 0.37190 0.62944 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4638 3108 
[1] "treatment indicator table: "

   0    1 
2549 5197 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 4000
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 432.813 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.474 0.125 
 2 mu         0.1   0.2 0.552 0.112 
 3 mu         0.1   0.3 0.631 0.121 
 4 mu         0.1   0.4 0.675 0.128 
 5 mu         0.1   0.5 0.749 0.150 
 6 mu         0.2   0.1 0.396 0.0654
 7 mu         0.2   0.2 0.486 0.0523
 8 mu         0.2   0.3 0.563 0.0623
 9 mu         0.2   0.4 0.606 0.0647
10 mu         0.2   0.5 0.674 0.0842
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.250  1.34e- 9      9.83
 2 mu         0.2      1.04         0.899  3.46e- 3      5.28
 3 mu         0.3      0.935        0.866  1.75e- 1      3.59
 4 mu         0.4      0.996        0.973  4.14e- 1      1.76
 5 mu         0.5      1.02         0.992  5.08e- 1      2.29
 6 mu         0.6      0.967        0.973  5.71e- 1      1.49
 7 mu         0.7      0.963        0.964  5.44e- 1      1.72
 8 mu         0.8      0.961        0.926  5.75e- 1      2.02
 9 mu         0.9      0.989        0.960  4.63e- 1      2.00
10 mu_1       0.1      1.09         0.358  4.55e- 9     11.0 
11 mu_1       0.2      1.01         0.829  5.63e- 3      5.01
12 mu_1       0.3      0.944        0.874  2.05e- 1      3.77
13 mu_1       0.4      0.996        0.959  4.37e- 1      1.74
14 mu_1       0.5      1.02         0.988  5.15e- 1      2.32
15 mu_1       0.6      0.964        0.966  5.70e- 1      1.51
16 mu_1       0.7      0.963        0.964  5.39e- 1      1.74
17 mu_1       0.8      0.962        0.928  5.72e- 1      2.00
18 mu_1       0.9      0.990        0.962  4.63e- 1      2.03
19 mu_0       0.1      1.04         0.233  9.82e-10      9.70
20 mu_0       0.2      1.05         0.930  2.84e- 3      5.35
21 mu_0       0.3      0.931        0.870  1.60e- 1      3.51
22 mu_0       0.4      0.996        0.971  3.90e- 1      1.78
23 mu_0       0.5      1.02         0.982  5.00e- 1      2.25
24 mu_0       0.6      0.971        0.973  5.72e- 1      1.47
25 mu_0       0.7      0.963        0.964  5.54e- 1      1.68
26 mu_0       0.8      0.960        0.938  5.88e- 1      2.10
27 mu_0       0.9      0.981        0.940  4.42e- 1      1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      9.30      1.48e-32  3.77e-78    929.  
 2 mu         0.2      0.710     5.48e-19  1.62e-53     32.1 
 3 mu         0.3      1.05      1.92e-11  3.90e-39     17.5 
 4 mu         0.4      1.27      9.50e- 7  5.87e-29     21.2 
 5 mu         0.5      0.999     1.98e- 3  4.33e-21      9.37
 6 mu         0.6      0.861     4.46e- 2  1.08e-14     19.2 
 7 mu         0.7      0.894     9.30e- 2  3.32e-21      8.50
 8 mu         0.8      1.75      1.15e- 1  3.96e-31     22.1 
 9 mu         0.9      1.78      1.60e- 4  2.47e-48     37.7 
10 mu_1       0.1      7.38      1.09e-31  3.72e-77    738.  
11 mu_1       0.2      0.602     1.95e-18  8.00e-53     29.2 
12 mu_1       0.3      1.11      4.89e-11  1.28e-38     19.1 
13 mu_1       0.4      1.24      1.70e- 6  1.45e-28     21.1 
14 mu_1       0.5      0.984     1.32e- 3  8.55e-21      9.74
15 mu_1       0.6      0.853     5.57e- 2  3.58e-15     18.8 
16 mu_1       0.7      0.915     9.22e- 2  3.76e-22      9.06
17 mu_1       0.8      1.76      1.16e- 1  3.92e-32     22.5 
18 mu_1       0.9      1.77      1.30e- 4  2.18e-49     37.1 
19 mu_0       0.1      9.51      4.29e-33  5.04e-80    951.  
20 mu_0       0.2      0.737     1.96e-19  2.44e-55     36.9 
21 mu_0       0.3      1.02      6.13e-12  6.71e-41     17.2 
22 mu_0       0.4      1.29      4.50e- 7  1.18e-30     21.3 
23 mu_0       0.5      1.01      1.23e- 3  1.04e-22      8.99
24 mu_0       0.6      0.874     2.78e- 2  3.24e-16     19.8 
25 mu_0       0.7      0.847     1.14e- 1  1.02e-20      7.20
26 mu_0       0.8      1.68      1.03e- 1  1.82e-30     22.1 
27 mu_0       0.9      1.86      4.28e- 4  2.28e-47     43.7 
[1] "Total run time was 436.597 seconds"
