
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7527"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71  73 
  3   3   2   2   3   5   2   2   1   1   1   2   3   1   1   6   1   2   2   4 
 75  76  77  78  79  80  81  82  83  84  85  86  87  90  91  92  94  95  96  97 
  3   3   1   3   1   4   2   2   2   2   4   1   2   2   2   1   2   4   1   2 
 98  99 100 
  3   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01806 0.31407 0.57427 0.98766 8.00000 
[1] "event indicator table: "

   0    1 
4561 2966 
[1] "treatment indicator table: "

   0    1 
2857 4670 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3545
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3982
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 405.976 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.436 0.0461
 2 mu         0.1   0.2 0.532 0.0624
 3 mu         0.1   0.3 0.569 0.0630
 4 mu         0.1   0.4 0.609 0.0734
 5 mu         0.1   0.5 0.635 0.0774
 6 mu         0.2   0.1 0.389 0.0276
 7 mu         0.2   0.2 0.475 0.0341
 8 mu         0.2   0.3 0.517 0.0377
 9 mu         0.2   0.4 0.557 0.0447
10 mu         0.2   0.5 0.584 0.0479
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.10         0.976 0.00000590      5.84
 2 mu         0.2      1.06         1.05  0.0907          2.27
 3 mu         0.3      0.988        0.985 0.149           2.21
 4 mu         0.4      0.992        0.960 0.569           1.74
 5 mu         0.5      1.01         0.995 0.658           1.56
 6 mu         0.6      1.02         1.00  0.599           1.50
 7 mu         0.7      0.963        0.941 0.581           1.30
 8 mu         0.8      0.994        1.01  0.441           1.46
 9 mu         0.9      1.04         1.03  0.349           1.81
10 mu_1       0.1      1.12         1.03  0.0000155       4.42
11 mu_1       0.2      1.06         1.03  0.124           2.42
12 mu_1       0.3      0.985        0.970 0.145           2.09
13 mu_1       0.4      0.993        0.961 0.606           1.74
14 mu_1       0.5      1.01         1.00  0.680           1.54
15 mu_1       0.6      1.02         1.01  0.615           1.51
16 mu_1       0.7      0.962        0.945 0.594           1.30
17 mu_1       0.8      0.995        1.01  0.427           1.48
18 mu_1       0.9      1.04         1.03  0.335           1.82
19 mu_0       0.1      1.10         0.943 0.00000484      6.00
20 mu_0       0.2      1.07         1.04  0.0824          2.23
21 mu_0       0.3      0.989        0.985 0.150           2.26
22 mu_0       0.4      0.991        0.952 0.544           1.74
23 mu_0       0.5      1.00         0.984 0.635           1.57
24 mu_0       0.6      1.02         1.00  0.576           1.48
25 mu_0       0.7      0.967        0.944 0.552           1.32
26 mu_0       0.8      0.987        1.01  0.453           1.41
27 mu_0       0.9      1.05         1.05  0.393           1.76
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.372     3.63e-26  3.62e-85     37.2 
 2 mu         0.2      0.500     3.42e-14  3.98e-57     17.4 
 3 mu         0.3      1.35      1.50e- 7  7.28e-41     22.7 
 4 mu         0.4      1.20      5.66e- 4  1.87e-29     10.3 
 5 mu         0.5      1.28      5.92e- 2  9.66e-21     27.8 
 6 mu         0.6      0.897     7.13e- 2  8.78e-14     10.8 
 7 mu         0.7      1.09      1.60e- 1  2.03e-18     15.1 
 8 mu         0.8      1.22      1.40e- 2  1.61e-28      7.21
 9 mu         0.9      0.843     7.14e- 8  3.24e-49     18.8 
10 mu_1       0.1      0.392     2.54e-25  3.43e-84     39.2 
11 mu_1       0.2      0.604     1.02e-13  1.89e-56     21.1 
12 mu_1       0.3      1.36      3.36e- 7  2.30e-40     21.3 
13 mu_1       0.4      1.21      9.60e- 4  4.44e-29      8.58
14 mu_1       0.5      1.25      5.79e- 2  1.84e-20     27.6 
15 mu_1       0.6      0.904     8.20e- 2  1.39e-13     11.0 
16 mu_1       0.7      1.10      1.38e- 1  3.06e-19     15.3 
17 mu_1       0.8      1.21      1.07e- 2  5.13e-29      7.18
18 mu_1       0.9      0.838     5.27e- 8  9.18e-50     19.2 
19 mu_0       0.1      0.370     1.21e-26  2.03e-86     37.0 
20 mu_0       0.2      0.474     1.72e-14  2.51e-58     16.5 
21 mu_0       0.3      1.34      7.01e- 8  5.25e-42     23.3 
22 mu_0       0.4      1.20      3.03e- 4  1.57e-30     11.4 
23 mu_0       0.5      1.31      4.02e- 2  9.76e-22     28.1 
24 mu_0       0.6      0.887     5.79e- 2  1.11e-14     10.6 
25 mu_0       0.7      1.07      1.10e- 1  6.06e-18     14.5 
26 mu_0       0.8      1.24      2.73e- 2  6.00e-28      7.30
27 mu_0       0.9      0.891     2.40e- 7  2.41e-48     15.3 
[1] "Total run time was 409.373 seconds"
