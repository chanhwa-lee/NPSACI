
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7300"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  63  64  65  66  67  68  69  70  71 
  1   1   4   1   3   3   1   2   6   4   2   5   2   1   2   4   3   3   1   1 
 72  73  74  75  76  77  79  80  81  85  86  87  88  89  90  91  92  94  95  96 
  4   1   3   3   2   2   1   2   1   4   4   3   2   1   2   2   1   1   3   2 
 97  99 100 
  2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03691 0.35442 0.61420 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4348 2952 
[1] "treatment indicator table: "

   0    1 
2670 4630 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3734
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3566
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 469.579 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.374 0.0592
 2 mu         0.1   0.2 0.448 0.0619
 3 mu         0.1   0.3 0.508 0.0706
 4 mu         0.1   0.4 0.575 0.0824
 5 mu         0.1   0.5 0.609 0.0859
 6 mu         0.2   0.1 0.283 0.0264
 7 mu         0.2   0.2 0.344 0.0238
 8 mu         0.2   0.3 0.392 0.0278
 9 mu         0.2   0.4 0.445 0.0460
10 mu         0.2   0.5 0.477 0.0438
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.13         0.390 0.00000201      7.56
 2 mu         0.2      0.938        0.862 0.0302          2.54
 3 mu         0.3      0.973        0.983 0.106           2.13
 4 mu         0.4      1.01         0.994 0.211           2.07
 5 mu         0.5      1.01         0.983 0.522           2.32
 6 mu         0.6      0.998        0.949 0.561           1.99
 7 mu         0.7      0.999        0.990 0.592           1.46
 8 mu         0.8      0.972        0.931 0.576           1.66
 9 mu         0.9      0.947        0.948 0.272           1.63
10 mu_1       0.1      1.12         0.562 0.00000565      6.96
11 mu_1       0.2      0.928        0.895 0.0434          2.54
12 mu_1       0.3      0.978        0.982 0.120           1.98
13 mu_1       0.4      1.02         0.974 0.233           2.11
14 mu_1       0.5      1.01         0.974 0.510           2.31
15 mu_1       0.6      0.998        0.952 0.575           1.98
16 mu_1       0.7      0.998        0.991 0.589           1.48
17 mu_1       0.8      0.972        0.918 0.570           1.70
18 mu_1       0.9      0.947        0.953 0.263           1.64
19 mu_0       0.1      1.13         0.375 0.00000161      7.75
20 mu_0       0.2      0.940        0.856 0.0269          2.54
21 mu_0       0.3      0.971        0.984 0.0999          2.19
22 mu_0       0.4      1.01         1.00  0.196           2.05
23 mu_0       0.5      1.01         0.979 0.535           2.33
24 mu_0       0.6      0.996        0.953 0.540           2.00
25 mu_0       0.7      1.00         0.998 0.597           1.45
26 mu_0       0.8      0.973        0.948 0.598           1.58
27 mu_0       0.9      0.945        0.910 0.304           1.59
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00178     2.09e-25  3.13e-86     0.120
 2 mu         0.2    0.615       1.44e-13  2.18e-58    30.2  
 3 mu         0.3    1.35        1.48e- 7  3.47e-42    26.4  
 4 mu         0.4    1.05        7.76e- 4  9.10e-31    14.4  
 5 mu         0.5    1.00        7.30e- 2  5.42e-22    12.1  
 6 mu         0.6    1.03        3.45e- 1  6.41e-15     7.84 
 7 mu         0.7    1.16        1.68e- 1  1.38e-14    15.0  
 8 mu         0.8    0.914       2.06e- 2  6.24e-24    18.7  
 9 mu         0.9    1.14        1.81e- 7  4.79e-41    24.1  
10 mu_1       0.1    0.00430     1.24e-24  3.03e-85     0.281
11 mu_1       0.2    0.776       4.69e-13  1.05e-57    35.3  
12 mu_1       0.3    1.34        3.27e- 7  1.12e-41    28.8  
13 mu_1       0.4    1.04        1.28e- 3  2.20e-30    11.8  
14 mu_1       0.5    0.984       8.26e- 2  1.05e-21    11.4  
15 mu_1       0.6    1.05        2.80e- 1  1.04e-14     8.19 
16 mu_1       0.7    1.14        1.76e- 1  4.62e-15    15.1  
17 mu_1       0.8    0.916       1.69e- 2  1.82e-24    19.5  
18 mu_1       0.9    1.16        1.27e- 7  1.51e-41    24.6  
19 mu_0       0.1    0.00149     9.45e-26  1.09e-87     0.102
20 mu_0       0.2    0.575       6.27e-14  8.50e-60    28.9  
21 mu_0       0.3    1.35        7.08e- 8  1.55e-43    25.3  
22 mu_0       0.4    1.05        4.38e- 4  4.74e-32    16.1  
23 mu_0       0.5    1.02        5.51e- 2  3.39e-23    12.8  
24 mu_0       0.6    1.00        3.34e- 1  5.01e-16     7.34 
25 mu_0       0.7    1.20        9.82e- 2  3.53e-14    14.9  
26 mu_0       0.8    0.905       2.60e- 2  2.39e-23    15.4  
27 mu_0       0.9    0.944       6.71e- 7  3.43e-40    19.3  
[1] "Total run time was 473.11 seconds"
