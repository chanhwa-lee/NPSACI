
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7634"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  63  64  66  67  68  69  70  71  72  73 
  1   2   1   1   3   1   1   3   3   1   2   2   1   5   5   2   3   3   2   1 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  3   3   1   2   3   1   4   3   1   2   2   3   1   3   2   1   4   2   1   1 
 94  95  96  97  98  99 100 
  1   2   3   2   1   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0340  0.3555  0.6164  1.0000  8.0000 
[1] "event indicator table: "

   0    1 
4494 3140 
[1] "treatment indicator table: "

   0    1 
2808 4826 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3820
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.899 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.326 0.0488
 2 mu         0.1   0.2 0.406 0.0592
 3 mu         0.1   0.3 0.467 0.0758
 4 mu         0.1   0.4 0.504 0.0799
 5 mu         0.1   0.5 0.575 0.0886
 6 mu         0.2   0.1 0.372 0.0300
 7 mu         0.2   0.2 0.492 0.0394
 8 mu         0.2   0.3 0.539 0.0378
 9 mu         0.2   0.4 0.593 0.0376
10 mu         0.2   0.5 0.653 0.0362
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.841        0.460 0.0000000824      8.41
 2 mu         0.2      1.04         1.03  0.0128            2.30
 3 mu         0.3      1.05         1.01  0.392             1.91
 4 mu         0.4      0.997        0.997 0.399             1.73
 5 mu         0.5      1.01         0.969 0.603             1.61
 6 mu         0.6      1.01         1.01  0.598             1.63
 7 mu         0.7      0.990        0.979 0.418             1.51
 8 mu         0.8      0.981        0.947 0.513             1.72
 9 mu         0.9      1.01         0.990 0.302             2.11
10 mu_1       0.1      0.878        0.554 0.000000242       5.90
11 mu_1       0.2      1.05         1.00  0.0195            2.38
12 mu_1       0.3      1.05         0.998 0.423             1.90
13 mu_1       0.4      0.997        1.01  0.411             1.70
14 mu_1       0.5      1.01         0.970 0.583             1.64
15 mu_1       0.6      1.01         1.02  0.598             1.60
16 mu_1       0.7      0.989        0.979 0.420             1.54
17 mu_1       0.8      0.980        0.952 0.517             1.72
18 mu_1       0.9      1.01         0.982 0.303             2.12
19 mu_0       0.1      0.836        0.437 0.0000000646      8.69
20 mu_0       0.2      1.04         1.01  0.0112            2.29
21 mu_0       0.3      1.05         1.01  0.379             1.96
22 mu_0       0.4      0.996        0.998 0.391             1.75
23 mu_0       0.5      1.01         0.975 0.593             1.62
24 mu_0       0.6      1.01         1.01  0.583             1.67
25 mu_0       0.7      0.993        0.984 0.415             1.47
26 mu_0       0.8      0.981        0.952 0.494             1.72
27 mu_0       0.9      1.00         1.00  0.298             2.04
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.49      1.52e-29  5.93e-83    149.  
 2 mu         0.2      0.221     9.94e-16  9.17e-56      6.25
 3 mu         0.3      0.760     7.00e- 9  5.69e-40     28.2 
 4 mu         0.4      0.568     1.79e- 4  7.19e-29      9.41
 5 mu         0.5      0.887     2.17e- 2  2.28e-20     10.6 
 6 mu         0.6      1.29      1.79e- 1  1.69e-16      9.87
 7 mu         0.7      1.49      2.47e- 1  6.54e-24     11.6 
 8 mu         0.8      1.29      3.13e- 2  1.54e-34     15.4 
 9 mu         0.9      1.18      2.81e- 7  6.03e-53     21.1 
10 mu_1       0.1      1.11      9.16e-29  5.69e-82    111.  
11 mu_1       0.2      0.261     3.43e-15  4.39e-55      7.15
12 mu_1       0.3      0.760     1.53e- 8  1.82e-39     26.4 
13 mu_1       0.4      0.575     2.96e- 4  1.72e-28     10.3 
14 mu_1       0.5      0.919     2.39e- 2  4.37e-20     11.5 
15 mu_1       0.6      1.30      1.48e- 1  2.10e-17     10.1 
16 mu_1       0.7      1.48      2.70e- 1  6.98e-25     12.1 
17 mu_1       0.8      1.30      2.54e- 2  1.44e-35     16.2 
18 mu_1       0.9      1.18      2.04e- 7  5.00e-54     20.8 
19 mu_0       0.1      1.53      6.75e-30  2.78e-84    153.  
20 mu_0       0.2      0.211     3.86e-16  4.83e-57      6.02
21 mu_0       0.3      0.760     3.45e- 9  3.42e-41     28.9 
22 mu_0       0.4      0.564     1.01e- 4  5.04e-30      8.84
23 mu_0       0.5      0.855     1.70e- 2  1.92e-21      9.62
24 mu_0       0.6      1.27      2.02e- 1  3.90e-16      9.88
25 mu_0       0.7      1.50      2.07e- 1  2.02e-23     11.3 
26 mu_0       0.8      1.27      5.31e- 2  7.13e-34     12.8 
27 mu_0       0.9      1.20      9.70e- 7  5.58e-52     23.8 
[1] "Total run time was 445.383 seconds"
