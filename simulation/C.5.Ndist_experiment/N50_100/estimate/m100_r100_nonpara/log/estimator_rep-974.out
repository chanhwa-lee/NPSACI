
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7545"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  59  60  61  62  63  64  65  66  68  69  70  71  72  73 
  2   1   3   4   3   2   2   3   2   2   2   4   5   1   1   2   2   1   1   4 
 74  75  76  77  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  95 
  1   1   2   1   2   5   2   1   2   2   1   3   3   1   4   4   2   2   2   3 
 96  97  98  99 100 
  1   2   2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03526 0.33672 0.60801 1.00000 7.13298 
[1] "event indicator table: "

   0    1 
4522 3023 
[1] "treatment indicator table: "

   0    1 
2909 4636 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3748
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3797
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 386.344 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.205 0.0725
 2 mu         0.1   0.2 0.202 0.0707
 3 mu         0.1   0.3 0.239 0.0831
 4 mu         0.1   0.4 0.263 0.0954
 5 mu         0.1   0.5 0.267 0.102 
 6 mu         0.2   0.1 0.282 0.0532
 7 mu         0.2   0.2 0.296 0.0387
 8 mu         0.2   0.3 0.345 0.0475
 9 mu         0.2   0.4 0.378 0.0555
10 mu         0.2   0.5 0.391 0.0558
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.403     0.000695  5.52e-23     14.8 
 2 mu         0.2      0.651     0.491     3.14e-11      3.14
 3 mu         0.3      1.36      0.914     1.19e- 5     54.5 
 4 mu         0.4      1.13      1.02      1.08e- 2     13.7 
 5 mu         0.5      1.04      0.998     3.36e- 1      2.02
 6 mu         0.6      0.986     0.961     6.47e- 1      1.61
 7 mu         0.7      0.993     0.980     6.29e- 1      1.47
 8 mu         0.8      0.979     0.950     2.68e- 1      2.09
 9 mu         0.9      1.01      0.896     7.07e- 4      3.19
10 mu_1       0.1      0.441     0.00188   2.80e-22     10.7 
11 mu_1       0.2      0.687     0.574     8.02e-11      3.23
12 mu_1       0.3      1.40      0.896     2.03e- 5     57.4 
13 mu_1       0.4      1.11      1.01      1.43e- 2     10.9 
14 mu_1       0.5      1.03      1.01      3.77e- 1      1.96
15 mu_1       0.6      0.986     0.965     6.58e- 1      1.58
16 mu_1       0.7      0.991     0.975     6.36e- 1      1.47
17 mu_1       0.8      0.981     0.953     2.53e- 1      2.12
18 mu_1       0.9      1.01      0.875     6.11e- 4      3.28
19 mu_0       0.1      0.399     0.000567  3.02e-23     15.3 
20 mu_0       0.2      0.642     0.473     1.92e-11      3.21
21 mu_0       0.3      1.34      0.899     8.22e- 6     53.3 
22 mu_0       0.4      1.14      1.01      8.45e- 3     15.6 
23 mu_0       0.5      1.04      1.01      2.96e- 1      2.07
24 mu_0       0.6      0.987     0.973     6.31e- 1      1.65
25 mu_0       0.7      0.996     0.982     6.13e- 1      1.48
26 mu_0       0.8      0.973     0.949     2.99e- 1      1.98
27 mu_0       0.9      1.00      0.957     1.57e- 3      2.76
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0439     1.04e-28  3.67e-61      4.36
 2 mu         0.2    14.7        1.46e-15  1.20e-38   1369.  
 3 mu         0.3    22.6        2.35e- 8  7.66e-26    674.  
 4 mu         0.4    15.4        5.30e- 4  4.31e-17    704.  
 5 mu         0.5     1.60       9.71e- 2  1.17e-10     36.9 
 6 mu         0.6     1.20       2.87e- 1  6.66e- 8      7.60
 7 mu         0.7     1.34       6.04e- 1  1.78e-14     10.4 
 8 mu         0.8     2.39       1.54e- 2  1.20e-24     22.9 
 9 mu         0.9     0.969      2.17e- 8  3.09e-43     35.6 
10 mu_1       0.1     0.102      6.47e-28  3.14e-60     10.1 
11 mu_1       0.2    17.4        5.10e-15  5.14e-38   1586.  
12 mu_1       0.3    22.8        4.83e- 8  2.19e-25    685.  
13 mu_1       0.4    13.8        8.56e- 4  9.22e-17    623.  
14 mu_1       0.5     1.39       1.17e- 1  2.00e-10     32.5 
15 mu_1       0.6     1.23       3.45e- 1  3.05e- 8      7.11
16 mu_1       0.7     1.34       6.90e- 1  7.00e-15     10.0 
17 mu_1       0.8     2.42       1.23e- 2  4.12e-25     23.3 
18 mu_1       0.9     0.936      1.53e- 8  9.43e-44     35.7 
19 mu_0       0.1     0.0375     3.73e-29  5.89e-62      3.72
20 mu_0       0.2    14.0        5.74e-16  2.17e-39   1315.  
21 mu_0       0.3    22.5        1.29e- 8  1.58e-26    740.  
22 mu_0       0.4    16.4        3.16e- 4  1.04e-17    757.  
23 mu_0       0.5     1.80       7.74e- 2  3.37e-11     43.0 
24 mu_0       0.6     1.15       2.52e- 1  1.21e- 7      8.33
25 mu_0       0.7     1.34       6.46e- 1  4.31e-14     11.3 
26 mu_0       0.8     2.25       2.77e- 2  4.35e-24     23.2 
27 mu_0       0.9     1.27       7.93e- 8  2.24e-42     33.9 
[1] "Total run time was 389.379 seconds"
