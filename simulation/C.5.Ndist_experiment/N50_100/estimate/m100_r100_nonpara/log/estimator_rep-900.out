
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7599"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  61  63  64  66  67  68  69  70  71  72  73 
  2   1   3   4   2   4   3   2   2   3   1   1   2   2   2   1   2   4   1   2 
 74  75  76  77  79  80  81  82  83  84  85  86  87  88  90  91  92  93  94  95 
  2   1   1   2   3   1   4   3   1   5   3   2   2   1   2   1   1   2   4   2 
 96  97  98  99 100 
  2   2   1   4   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02857 0.33041 0.58278 0.97881 6.00000 
[1] "event indicator table: "

   0    1 
4553 3046 
[1] "treatment indicator table: "

   0    1 
2879 4720 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3828
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3771
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 393.121 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.115 0.0714
 2 mu         0.1   0.2 0.157 0.0621
 3 mu         0.1   0.3 0.246 0.0721
 4 mu         0.1   0.4 0.297 0.0837
 5 mu         0.1   0.5 0.345 0.0979
 6 mu         0.2   0.1 0.240 0.0506
 7 mu         0.2   0.2 0.315 0.0340
 8 mu         0.2   0.3 0.419 0.0355
 9 mu         0.2   0.4 0.483 0.0422
10 mu         0.2   0.5 0.547 0.0529
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.473       0.0191 0.00000000192     10.1 
 2 mu         0.2      0.887       0.723  0.00223            4.67
 3 mu         0.3      0.996       0.913  0.0615             2.62
 4 mu         0.4      0.996       0.993  0.487              1.55
 5 mu         0.5      0.996       0.986  0.641              1.43
 6 mu         0.6      0.997       0.969  0.639              1.48
 7 mu         0.7      0.989       0.980  0.609              1.31
 8 mu         0.8      1.01        1.02   0.576              1.53
 9 mu         0.9      0.924       0.878  0.0206             1.91
10 mu_1       0.1      0.511       0.0377 0.00000000622      6.78
11 mu_1       0.2      0.924       0.747  0.00365            5.07
12 mu_1       0.3      0.998       0.928  0.0591             2.53
13 mu_1       0.4      0.996       1.01   0.503              1.54
14 mu_1       0.5      0.997       0.984  0.646              1.43
15 mu_1       0.6      0.997       0.964  0.624              1.46
16 mu_1       0.7      0.989       0.983  0.616              1.32
17 mu_1       0.8      1.01        1.03   0.567              1.54
18 mu_1       0.9      0.920       0.873  0.0188             1.91
19 mu_0       0.1      0.469       0.0170 0.00000000145     10.5 
20 mu_0       0.2      0.877       0.704  0.00187            4.57
21 mu_0       0.3      0.994       0.910  0.0625             2.67
22 mu_0       0.4      0.997       0.991  0.477              1.58
23 mu_0       0.5      0.996       0.997  0.635              1.44
24 mu_0       0.6      0.997       0.973  0.660              1.52
25 mu_0       0.7      0.989       0.975  0.592              1.32
26 mu_0       0.8      1.01        1.03   0.582              1.52
27 mu_0       0.9      0.964       0.945  0.0369             1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.43      3.12e-27  1.25e-66    130.  
 2 mu         0.2      2.46      2.45e-14  1.47e-42    126.  
 3 mu         0.3      0.875     8.70e- 8  8.15e-29     21.0 
 4 mu         0.4      1.10      5.72e- 4  2.25e-19     28.0 
 5 mu         0.5      1.11      9.35e- 2  7.18e-13     11.2 
 6 mu         0.6      1.21      4.26e- 1  6.04e-13      7.80
 7 mu         0.7      1.39      3.45e- 1  2.49e-20     13.7 
 8 mu         0.8      1.46      1.86e- 2  3.88e-31     13.9 
 9 mu         0.9      1.71      9.28e- 9  8.80e-52     81.0 
10 mu_1       0.1      2.12      1.75e-26  1.09e-65    188.  
11 mu_1       0.2      2.14      7.71e-14  6.41e-42     91.1 
12 mu_1       0.3      0.873     1.90e- 7  2.37e-28     23.3 
13 mu_1       0.4      1.10      8.23e- 4  4.91e-19     29.8 
14 mu_1       0.5      1.12      1.23e- 1  1.35e-12      9.51
15 mu_1       0.6      1.22      4.50e- 1  1.46e-13      7.91
16 mu_1       0.7      1.40      3.36e- 1  5.15e-21     13.6 
17 mu_1       0.8      1.46      1.50e- 2  7.02e-32     13.5 
18 mu_1       0.9      1.77      6.44e- 9  2.10e-52     84.8 
19 mu_0       0.1      1.36      1.17e-27  1.77e-67    123.  
20 mu_0       0.2      2.54      1.14e-14  2.35e-43    135.  
21 mu_0       0.3      0.876     4.30e- 8  1.49e-29     20.0 
22 mu_0       0.4      1.10      3.72e- 4  4.79e-20     26.8 
23 mu_0       0.5      1.10      6.44e- 2  8.21e-14     12.8 
24 mu_0       0.6      1.20      3.40e- 1  1.29e-12      7.64
25 mu_0       0.7      1.37      3.31e- 1  7.11e-20     13.9 
26 mu_0       0.8      1.48      3.30e- 2  1.66e-30     15.7 
27 mu_0       0.9      1.23      3.48e- 8  6.90e-51     46.3 
[1] "Total run time was 396.727 seconds"
