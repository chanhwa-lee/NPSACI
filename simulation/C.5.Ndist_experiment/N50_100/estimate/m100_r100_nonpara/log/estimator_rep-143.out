
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7641"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  63  64  65  67  68  70  71  72 
  3   2   1   2   1   2   1   2   5   3   1   2   1   2   4   1   2   1   4   3 
 73  75  76  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92  93  94 
  2   3   1   1   1   3   1   3   2   1   3   1   4   4   1   3   2   1   4   1 
 95  96  97  98  99 100 
  3   2   4   1   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04724 0.36757 0.63901 1.00000 6.44647 
[1] "event indicator table: "

   0    1 
4518 3123 
[1] "treatment indicator table: "

   0    1 
2667 4974 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3783
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3858
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.848 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.510 0.128 
 2 mu         0.1   0.2 0.614 0.136 
 3 mu         0.1   0.3 0.648 0.128 
 4 mu         0.1   0.4 0.677 0.124 
 5 mu         0.1   0.5 0.720 0.135 
 6 mu         0.2   0.1 0.389 0.0707
 7 mu         0.2   0.2 0.475 0.0660
 8 mu         0.2   0.3 0.520 0.0567
 9 mu         0.2   0.4 0.552 0.0503
10 mu         0.2   0.5 0.581 0.0544
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.07         0.268 0.0000000299      8.17
 2 mu         0.2      0.988        0.906 0.0106            3.02
 3 mu         0.3      0.997        0.948 0.138             1.97
 4 mu         0.4      1.03         1.02  0.502             1.78
 5 mu         0.5      1.01         1.01  0.578             1.76
 6 mu         0.6      1.01         1.00  0.675             1.90
 7 mu         0.7      0.999        1.01  0.638             1.53
 8 mu         0.8      0.982        0.971 0.493             1.53
 9 mu         0.9      0.993        0.976 0.345             1.76
10 mu_1       0.1      1.12         0.390 0.0000000935      8.18
11 mu_1       0.2      0.982        0.895 0.0169            2.63
12 mu_1       0.3      1.00         0.958 0.157             1.98
13 mu_1       0.4      1.03         1.02  0.513             1.81
14 mu_1       0.5      1.01         1.00  0.580             1.83
15 mu_1       0.6      1.01         1.01  0.666             1.86
16 mu_1       0.7      0.999        1.01  0.635             1.53
17 mu_1       0.8      0.981        0.975 0.490             1.52
18 mu_1       0.9      0.994        0.974 0.338             1.77
19 mu_0       0.1      1.07         0.250 0.0000000228      8.22
20 mu_0       0.2      0.990        0.888 0.00907           3.12
21 mu_0       0.3      0.996        0.951 0.130             1.98
22 mu_0       0.4      1.03         1.02  0.494             1.77
23 mu_0       0.5      1.00         1.01  0.577             1.69
24 mu_0       0.6      1.01         0.996 0.689             1.96
25 mu_0       0.7      1.00         0.992 0.643             1.54
26 mu_0       0.8      0.986        0.989 0.505             1.56
27 mu_0       0.9      0.985        0.976 0.404             1.70
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      5.92      2.52e-28  3.74e-73    591.  
 2 mu         0.2      1.35      9.56e-15  3.17e-47     49.5 
 3 mu         0.3      1.06      1.41e- 7  2.29e-32     27.6 
 4 mu         0.4      0.883     4.87e- 4  4.14e-22     12.3 
 5 mu         0.5      1.34      2.69e- 2  1.88e-14     15.2 
 6 mu         0.6      1.44      1.99e- 1  2.30e-17     13.5 
 7 mu         0.7      0.898     1.73e- 1  3.92e-26      5.38
 8 mu         0.8      1.35      6.36e- 2  8.10e-39     15.3 
 9 mu         0.9      1.20      4.24e- 7  6.19e-61     17.3 
10 mu_1       0.1      6.35      1.67e-27  3.33e-72    634.  
11 mu_1       0.2      1.28      2.99e-14  1.41e-46     57.6 
12 mu_1       0.3      1.05      2.79e- 7  6.78e-32     21.4 
13 mu_1       0.4      0.882     7.98e- 4  9.21e-22     10.8 
14 mu_1       0.5      1.38      2.20e- 2  3.35e-14     16.6 
15 mu_1       0.6      1.42      2.05e- 1  4.10e-18     12.3 
16 mu_1       0.7      0.887     1.40e- 1  6.00e-27      5.38
17 mu_1       0.8      1.37      5.20e- 2  1.09e-39     15.8 
18 mu_1       0.9      1.19      3.07e- 7  7.37e-62     17.6 
19 mu_0       0.1      5.87      9.54e-29  4.62e-74    587.  
20 mu_0       0.2      1.37      4.47e-15  4.40e-48     49.2 
21 mu_0       0.3      1.07      6.97e- 8  3.63e-33     30.2 
22 mu_0       0.4      0.883     2.86e- 4  7.67e-23     13.3 
23 mu_0       0.5      1.30      2.32e- 2  4.18e-15     13.7 
24 mu_0       0.6      1.48      1.70e- 1  5.13e-17     15.3 
25 mu_0       0.7      0.926     1.61e- 1  1.17e-25      5.92
26 mu_0       0.8      1.26      9.86e- 2  3.62e-38     13.3 
27 mu_0       0.9      1.35      1.48e- 6  5.53e-60     14.4 
[1] "Total run time was 449.616 seconds"
