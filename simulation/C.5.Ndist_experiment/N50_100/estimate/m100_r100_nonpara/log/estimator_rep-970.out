
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7296"
[1] "cluster size dist'n: "

50 51 52 53 54 55 57 58 59 60 62 63 65 66 67 68 69 70 71 72 73 74 75 76 77 78 
 5  1  5  3  3  1  1  4  1  5  1  3  2  1  2  2  4  1  2  2  3  1  3  2  1  2 
79 80 81 83 84 85 86 87 89 91 93 94 95 96 97 98 99 
 3  2  4  2  1  3  1  4  1  4  2  1  1  2  6  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01871 0.30622 0.57638 0.97430 6.00000 
[1] "event indicator table: "

   0    1 
4275 3021 
[1] "treatment indicator table: "

   0    1 
2882 4414 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3616
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3680
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 463.945 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.490 0.0966
 2 mu         0.1   0.2 0.529 0.0696
 3 mu         0.1   0.3 0.599 0.0831
 4 mu         0.1   0.4 0.626 0.0774
 5 mu         0.1   0.5 0.652 0.0744
 6 mu         0.2   0.1 0.396 0.0589
 7 mu         0.2   0.2 0.467 0.0430
 8 mu         0.2   0.3 0.530 0.0464
 9 mu         0.2   0.4 0.572 0.0492
10 mu         0.2   0.5 0.617 0.0574
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.943        0.663 0.0000513      4.21
 2 mu         0.2      0.967        0.937 0.171          1.97
 3 mu         0.3      1.04         1.05  0.477          1.78
 4 mu         0.4      1.01         0.988 0.442          1.52
 5 mu         0.5      1.01         0.995 0.594          1.45
 6 mu         0.6      0.994        1.01  0.590          1.41
 7 mu         0.7      1.00         1.01  0.666          1.51
 8 mu         0.8      0.985        0.976 0.537          1.46
 9 mu         0.9      1.01         1.02  0.0688         2.02
10 mu_1       0.1      0.907        0.659 0.000136       3.53
11 mu_1       0.2      0.985        0.953 0.236          1.87
12 mu_1       0.3      1.04         1.06  0.454          1.75
13 mu_1       0.4      1.01         0.993 0.475          1.52
14 mu_1       0.5      1.01         0.996 0.587          1.44
15 mu_1       0.6      0.993        1.01  0.577          1.41
16 mu_1       0.7      1.00         1.01  0.683          1.51
17 mu_1       0.8      0.984        0.980 0.537          1.45
18 mu_1       0.9      1.01         1.02  0.0660         2.04
19 mu_0       0.1      0.947        0.643 0.0000419      4.32
20 mu_0       0.2      0.963        0.924 0.155          1.99
21 mu_0       0.3      1.04         1.05  0.487          1.79
22 mu_0       0.4      1.01         0.993 0.420          1.52
23 mu_0       0.5      1.01         0.993 0.602          1.48
24 mu_0       0.6      0.996        1.01  0.609          1.40
25 mu_0       0.7      1.00         1.00  0.627          1.52
26 mu_0       0.8      0.989        0.981 0.528          1.50
27 mu_0       0.9      0.996        1.04  0.0933         1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.280     6.82e-24  3.90e-88     16.1 
 2 mu         0.2      0.798     1.02e-11  1.08e-59     28.7 
 3 mu         0.3      0.358     7.24e- 6  3.89e-43      8.94
 4 mu         0.4      0.918     6.47e- 3  1.81e-31      7.52
 5 mu         0.5      1.05      4.12e- 1  1.69e-22      7.27
 6 mu         0.6      1.05      1.54e- 1  6.22e-16      5.57
 7 mu         0.7      0.815     1.25e- 1  8.46e-25      6.49
 8 mu         0.8      1.16      2.77e- 3  7.70e-38     13.1 
 9 mu         0.9      1.02      3.03e- 9  7.45e-61     15.9 
10 mu_1       0.1      0.418     3.87e-23  3.78e-87     22.2 
11 mu_1       0.2      0.692     2.90e-11  5.26e-59     25.2 
12 mu_1       0.3      0.392     1.41e- 5  1.26e-42     10.1 
13 mu_1       0.4      0.957     9.97e- 3  4.39e-31      7.85
14 mu_1       0.5      1.05      3.77e- 1  3.27e-22      7.19
15 mu_1       0.6      1.04      1.75e- 1  1.65e-16      5.72
16 mu_1       0.7      0.813     1.25e- 1  1.93e-25      6.77
17 mu_1       0.8      1.17      2.11e- 3  1.53e-38     13.3 
18 mu_1       0.9      1.00      2.08e- 9  1.32e-61     15.8 
19 mu_0       0.1      0.265     3.28e-24  1.33e-89     15.5 
20 mu_0       0.2      0.824     5.48e-12  4.15e-61     29.6 
21 mu_0       0.3      0.344     4.31e- 6  1.70e-44      8.42
22 mu_0       0.4      0.893     4.14e- 3  9.25e-33      7.85
23 mu_0       0.5      1.04      3.17e- 1  1.03e-23      7.62
24 mu_0       0.6      1.06      1.64e- 1  2.20e-16      5.34
25 mu_0       0.7      0.820     1.58e- 1  2.37e-24      5.98
26 mu_0       0.8      1.10      5.41e- 3  3.23e-37     12.0 
27 mu_0       0.9      1.17      1.16e- 8  6.26e-60     16.4 
[1] "Total run time was 467.98 seconds"
