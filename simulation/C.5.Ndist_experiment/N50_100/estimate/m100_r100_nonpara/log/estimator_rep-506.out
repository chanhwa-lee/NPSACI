
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7552"
[1] "cluster size dist'n: "

 50  51  53  55  56  57  58  59  60  61  63  64  65  66  67  69  70  71  72  73 
  2   2   4   3   2   2   2   3   3   2   1   1   2   1   1   1   3   3   3   3 
 74  75  76  77  78  79  80  81  82  83  84  85  87  89  90  91  92  94  96  97 
  1   5   4   3   2   4   3   3   1   1   1   1   1   3   1   2   3   1   4   3 
 98  99 100 
  2   5   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04247 0.36875 0.63080 1.00000 5.72877 
[1] "event indicator table: "

   0    1 
4538 3014 
[1] "treatment indicator table: "

   0    1 
2743 4809 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3838
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3714
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 448.628 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.454 0.127 
 2 mu         0.1   0.2 0.598 0.160 
 3 mu         0.1   0.3 0.685 0.187 
 4 mu         0.1   0.4 0.736 0.202 
 5 mu         0.1   0.5 0.777 0.221 
 6 mu         0.2   0.1 0.309 0.0759
 7 mu         0.2   0.2 0.435 0.0770
 8 mu         0.2   0.3 0.495 0.0898
 9 mu         0.2   0.4 0.524 0.0980
10 mu         0.2   0.5 0.550 0.111 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.40         0.495 0.0000000103      32.8 
 2 mu         0.2      1.06         0.819 0.00391            9.82
 3 mu         0.3      0.998        0.954 0.136              2.41
 4 mu         0.4      0.997        0.982 0.397              1.69
 5 mu         0.5      1.02         1.02  0.626              1.75
 6 mu         0.6      1.01         0.999 0.516              1.62
 7 mu         0.7      1.03         1.03  0.615              1.55
 8 mu         0.8      1.00         0.967 0.603              1.51
 9 mu         0.9      0.913        0.904 0.116              2.31
10 mu_1       0.1      1.34         0.556 0.0000000352      24.9 
11 mu_1       0.2      1.02         0.818 0.00675            7.56
12 mu_1       0.3      1.00         0.973 0.144              2.37
13 mu_1       0.4      0.997        0.974 0.428              1.63
14 mu_1       0.5      1.02         1.01  0.644              1.69
15 mu_1       0.6      1.01         1.00  0.508              1.65
16 mu_1       0.7      1.03         1.03  0.615              1.53
17 mu_1       0.8      1.00         0.966 0.599              1.53
18 mu_1       0.9      0.910        0.888 0.109              2.30
19 mu_0       0.1      1.41         0.488 0.00000000754     33.7 
20 mu_0       0.2      1.07         0.809 0.00320           10.4 
21 mu_0       0.3      0.996        0.942 0.132              2.43
22 mu_0       0.4      0.998        0.995 0.376              1.72
23 mu_0       0.5      1.02         1.01  0.609              1.82
24 mu_0       0.6      1.01         1.00  0.528              1.58
25 mu_0       0.7      1.03         1.03  0.615              1.62
26 mu_0       0.8      1.00         0.983 0.618              1.53
27 mu_0       0.9      0.939        0.959 0.183              2.36
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1  0.0000659     5.84e-27  1.58e-74   0.00640
 2 mu         0.2  0.160         3.63e-14  3.02e-49  10.3    
 3 mu         0.3  0.898         6.26e- 8  1.26e-34  36.2    
 4 mu         0.4  0.925         9.22e- 4  2.08e-24  23.2    
 5 mu         0.5  1.20          6.02e- 2  9.52e-17  10.2    
 6 mu         0.6  1.52          3.14e- 1  2.66e-11  18.7    
 7 mu         0.7  1.11          5.69e- 1  1.27e-14   7.54   
 8 mu         0.8  1.37          2.09e- 2  1.92e-25  21.9    
 9 mu         0.9  2.84          1.57e- 7  2.47e-45  87.0    
10 mu_1       0.1  0.000176      3.91e-26  1.48e-73   0.0171 
11 mu_1       0.2  0.220         1.26e-13  1.41e-48  13.7    
12 mu_1       0.3  0.907         1.31e- 7  3.92e-34  35.0    
13 mu_1       0.4  0.941         1.46e- 3  4.86e-24  22.7    
14 mu_1       0.5  1.24          8.06e- 2  1.88e-16  10.9    
15 mu_1       0.6  1.52          2.86e- 1  4.36e-11  19.1    
16 mu_1       0.7  1.10          5.90e- 1  5.26e-15   7.75   
17 mu_1       0.8  1.38          1.62e- 2  6.95e-26  22.4    
18 mu_1       0.9  2.89          1.17e- 7  7.97e-46  88.0    
19 mu_0       0.1  0.0000536     2.15e-27  1.16e-75   0.00521
20 mu_0       0.2  0.145         1.39e-14  2.49e-50   9.45   
21 mu_0       0.3  0.894         3.31e- 8  1.19e-35  36.7    
22 mu_0       0.4  0.915         5.65e- 4  2.29e-25  23.5    
23 mu_0       0.5  1.17          3.99e- 2  2.68e-18  10.4    
24 mu_0       0.6  1.53          3.16e- 1  9.35e-13  18.0    
25 mu_0       0.7  1.12          3.73e- 1  3.00e-14   7.04   
26 mu_0       0.8  1.29          3.76e- 2  6.81e-25  19.7    
27 mu_0       0.9  2.39          5.15e- 7  1.76e-44  77.9    
[1] "Total run time was 453.949 seconds"
