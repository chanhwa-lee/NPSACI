
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7920"
[1] "cluster size dist'n: "

 50  52  53  54  55  57  58  59  60  61  62  63  66  67  68  69  70  71  72  73 
  2   3   1   3   1   1   1   2   2   3   2   1   1   2   1   1   1   3   2   2 
 74  75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  1   4   2   2   3   2   1   2   2   2   3   2   5   1   2   1   1   1   3   4 
 95  96  97  98  99 100 
  2   3   2   7   4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02814 0.33677 0.59635 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4770 3150 
[1] "treatment indicator table: "

   0    1 
2900 5020 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3990
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3930
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.171 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.363 0.119 
 2 mu         0.1   0.2 0.432 0.140 
 3 mu         0.1   0.3 0.572 0.165 
 4 mu         0.1   0.4 0.644 0.177 
 5 mu         0.1   0.5 0.699 0.189 
 6 mu         0.2   0.1 0.267 0.0343
 7 mu         0.2   0.2 0.324 0.0441
 8 mu         0.2   0.3 0.432 0.0531
 9 mu         0.2   0.4 0.493 0.0622
10 mu         0.2   0.5 0.538 0.0681
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.06         0.300  1.10e-11     23.0 
 2 mu         0.2      0.908        0.770  3.24e- 4      7.25
 3 mu         0.3      0.902        0.893  1.92e- 1      3.53
 4 mu         0.4      0.980        0.956  3.86e- 1      1.71
 5 mu         0.5      1.01         1.01   2.43e- 1      1.84
 6 mu         0.6      1.01         1.01   5.42e- 1      1.73
 7 mu         0.7      1.00         0.981  4.46e- 1      1.77
 8 mu         0.8      1.02         0.977  5.85e- 1      2.28
 9 mu         0.9      0.922        0.877  1.48e- 1      2.38
10 mu_1       0.1      1.03         0.449  4.00e-11     13.7 
11 mu_1       0.2      0.901        0.823  5.95e- 4      6.56
12 mu_1       0.3      0.907        0.893  2.41e- 1      3.70
13 mu_1       0.4      0.986        0.959  4.05e- 1      1.63
14 mu_1       0.5      1.01         1.01   2.38e- 1      1.78
15 mu_1       0.6      1.02         1.00   5.63e- 1      1.74
16 mu_1       0.7      1.00         0.974  4.39e- 1      1.80
17 mu_1       0.8      1.01         0.976  5.72e- 1      2.29
18 mu_1       0.9      0.920        0.884  1.38e- 1      2.40
19 mu_0       0.1      1.06         0.283  7.72e-12     24.1 
20 mu_0       0.2      0.910        0.779  2.56e- 4      7.43
21 mu_0       0.3      0.900        0.879  1.70e- 1      3.45
22 mu_0       0.4      0.977        0.942  3.73e- 1      1.81
23 mu_0       0.5      1.01         1.01   2.48e- 1      1.89
24 mu_0       0.6      1.01         1.01   5.11e- 1      1.72
25 mu_0       0.7      1.00         1.00   4.62e- 1      1.70
26 mu_0       0.8      1.02         0.985  5.73e- 1      2.25
27 mu_0       0.9      0.938        0.882  2.40e- 1      2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0219     1.49e-29  1.17e-70      2.19
 2 mu         0.2     1.05       2.39e-15  6.93e-47     96.9 
 3 mu         0.3     1.73       8.30e- 8  5.69e-34     44.4 
 4 mu         0.4     1.57       7.18e- 4  7.36e-25     41.0 
 5 mu         0.5     1.25       6.11e- 2  7.58e-18     10.6 
 6 mu         0.6     1.24       1.57e- 1  3.51e-12     11.3 
 7 mu         0.7     0.881      1.21e- 1  1.91e-16      5.67
 8 mu         0.8     1.22       1.57e- 2  1.96e-26     23.5 
 9 mu         0.9     1.88       6.41e- 8  2.79e-44     56.1 
10 mu_1       0.1     0.0450     8.75e-29  1.04e-69      4.50
11 mu_1       0.2     1.12       7.86e-15  3.37e-46     99.4 
12 mu_1       0.3     1.85       1.66e- 7  1.85e-33     47.3 
13 mu_1       0.4     1.48       1.20e- 3  1.79e-24     38.0 
14 mu_1       0.5     1.26       7.32e- 2  1.48e-17     11.2 
15 mu_1       0.6     1.22       1.66e- 1  5.70e-12     11.3 
16 mu_1       0.7     0.882      1.20e- 1  5.60e-17      6.02
17 mu_1       0.8     1.25       1.21e- 2  5.02e-27     25.1 
18 mu_1       0.9     1.89       4.81e- 8  6.37e-45     57.7 
19 mu_0       0.1     0.0194     6.89e-30  1.38e-71      1.94
20 mu_0       0.2     1.03       1.04e-15  2.28e-48     96.3 
21 mu_0       0.3     1.68       4.37e- 8  2.14e-35     43.1 
22 mu_0       0.4     1.63       3.97e- 4  3.23e-26     43.0 
23 mu_0       0.5     1.24       4.45e- 2  3.99e-19     10.8 
24 mu_0       0.6     1.28       1.24e- 1  2.31e-13     12.2 
25 mu_0       0.7     0.881      7.00e- 2  5.06e-16      6.39
26 mu_0       0.8     1.13       3.08e- 2  7.78e-26     17.3 
27 mu_0       0.9     1.80       2.08e- 7  2.22e-43     42.5 
[1] "Total run time was 424.398 seconds"
