
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7240"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  59  60  61  62  63  64  65  66  67  69  70  72  73 
  5   3   1   3   1   3   3   3   2   2   3   2   5   3   3   2   1   4   4   4 
 74  75  76  77  78  79  81  82  83  85  86  88  89  90  92  93  94  95  96  97 
  2   1   2   2   1   1   5   2   4   2   1   1   2   1   1   5   1   2   1   2 
 99 100 
  1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02254 0.33142 0.59114 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4328 2912 
[1] "treatment indicator table: "

   0    1 
2656 4584 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3708
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3532
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 400.79 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.512 0.109 
 2 mu         0.1   0.2 0.589 0.113 
 3 mu         0.1   0.3 0.648 0.123 
 4 mu         0.1   0.4 0.706 0.133 
 5 mu         0.1   0.5 0.748 0.137 
 6 mu         0.2   0.1 0.379 0.0539
 7 mu         0.2   0.2 0.441 0.0348
 8 mu         0.2   0.3 0.488 0.0349
 9 mu         0.2   0.4 0.535 0.0447
10 mu         0.2   0.5 0.572 0.0390
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.14         0.435 0.0000000628     13.4 
 2 mu         0.2      0.924        0.886 0.00738           3.00
 3 mu         0.3      0.976        0.990 0.188             1.92
 4 mu         0.4      1.00         0.970 0.595             1.53
 5 mu         0.5      1.00         0.999 0.624             1.39
 6 mu         0.6      1.02         1.01  0.760             1.52
 7 mu         0.7      0.984        1.00  0.625             1.35
 8 mu         0.8      0.974        0.971 0.500             1.44
 9 mu         0.9      1.06         1.02  0.0471            2.70
10 mu_1       0.1      1.11         0.587 0.000000202      11.1 
11 mu_1       0.2      0.913        0.914 0.0120            2.61
12 mu_1       0.3      0.986        1.01  0.215             1.88
13 mu_1       0.4      1.00         0.968 0.608             1.52
14 mu_1       0.5      1.01         1.01  0.622             1.39
15 mu_1       0.6      1.02         1.01  0.754             1.53
16 mu_1       0.7      0.982        0.999 0.631             1.36
17 mu_1       0.8      0.975        0.984 0.485             1.45
18 mu_1       0.9      1.07         1.02  0.0437            2.76
19 mu_0       0.1      1.15         0.411 0.0000000473     14.3 
20 mu_0       0.2      0.927        0.870 0.00622           3.09
21 mu_0       0.3      0.972        0.978 0.177             1.94
22 mu_0       0.4      1.00         0.983 0.581             1.54
23 mu_0       0.5      1.00         0.991 0.625             1.42
24 mu_0       0.6      1.02         1.03  0.764             1.49
25 mu_0       0.7      0.987        1.00  0.610             1.33
26 mu_0       0.8      0.970        0.967 0.562             1.39
27 mu_0       0.9      1.04         0.971 0.0777            2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.85      1.29e-25  3.80e-85    284.  
 2 mu         0.2      1.67      1.43e-14  7.43e-58    121.  
 3 mu         0.3      0.643     3.96e- 8  6.02e-42     10.6 
 4 mu         0.4      0.808     4.49e- 4  1.03e-30      8.55
 5 mu         0.5      1.08      8.02e- 2  4.73e-22     10.7 
 6 mu         0.6      1.12      2.69e- 1  4.52e-15      5.75
 7 mu         0.7      0.944     2.18e- 1  2.49e-23      5.36
 8 mu         0.8      0.953     1.58e- 2  2.27e-35      9.23
 9 mu         0.9      1.16      9.50e- 8  1.75e-56     14.9 
10 mu_1       0.1      3.79      9.34e-25  3.72e-84    376.  
11 mu_1       0.2      1.32      4.91e-14  3.63e-57     79.9 
12 mu_1       0.3      0.653     8.68e- 8  1.96e-41     11.0 
13 mu_1       0.4      0.823     7.36e- 4  2.53e-30      9.30
14 mu_1       0.5      1.10      1.06e- 1  9.26e-22     11.1 
15 mu_1       0.6      1.12      2.40e- 1  9.99e-16      6.04
16 mu_1       0.7      0.934     1.80e- 1  4.71e-24      5.45
17 mu_1       0.8      0.959     1.31e- 2  3.76e-36      9.20
18 mu_1       0.9      1.17      6.92e- 8  2.58e-57     16.1 
19 mu_0       0.1      2.74      3.94e-26  9.07e-87    273.  
20 mu_0       0.2      1.75      5.66e-15  2.00e-59    131.  
21 mu_0       0.3      0.639     1.93e- 8  1.85e-43     11.8 
22 mu_0       0.4      0.799     3.35e- 4  3.71e-32      8.58
23 mu_0       0.5      1.06      6.08e- 2  2.04e-23     10.3 
24 mu_0       0.6      1.13      3.16e- 1  2.61e-16      5.32
25 mu_0       0.7      0.968     2.50e- 1  7.20e-23      5.52
26 mu_0       0.8      0.930     2.52e- 2  9.84e-35      9.33
27 mu_0       0.9      1.06      3.28e- 7  1.52e-55     13.4 
[1] "Total run time was 403.957 seconds"
