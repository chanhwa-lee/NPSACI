
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7755"
[1] "cluster size dist'n: "

 50  53  55  56  57  58  59  60  61  62  63  64  65  68  70  71  72  74  75  76 
  2   2   2   3   1   1   2   4   2   1   1   3   2   3   1   3   4   6   2   4 
 77  78  79  81  83  84  85  86  87  88  90  91  92  93  94  95  96  97  98  99 
  3   4   1   2   4   3   2   2   2   1   2   2   1   1   4   2   2   4   3   3 
100 
  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04316 0.37911 0.63587 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4535 3220 
[1] "treatment indicator table: "

   0    1 
3027 4728 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3818
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3937
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 410.568 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.421 0.101 
 2 mu         0.1   0.2 0.522 0.121 
 3 mu         0.1   0.3 0.603 0.106 
 4 mu         0.1   0.4 0.642 0.105 
 5 mu         0.1   0.5 0.671 0.104 
 6 mu         0.2   0.1 0.326 0.0379
 7 mu         0.2   0.2 0.405 0.0451
 8 mu         0.2   0.3 0.498 0.0470
 9 mu         0.2   0.4 0.551 0.0471
10 mu         0.2   0.5 0.601 0.0521
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.01         0.570 0.0000333      3.92
 2 mu         0.2      1.01         0.882 0.0589         2.65
 3 mu         0.3      1.01         1.05  0.259          1.85
 4 mu         0.4      0.986        0.955 0.430          1.67
 5 mu         0.5      0.987        0.985 0.504          1.49
 6 mu         0.6      0.974        0.972 0.644          1.52
 7 mu         0.7      1.00         0.984 0.581          1.58
 8 mu         0.8      1.01         0.983 0.614          1.67
 9 mu         0.9      1.05         1.02  0.125          2.61
10 mu_1       0.1      1.01         0.764 0.0000931      3.54
11 mu_1       0.2      1.01         0.941 0.0840         2.46
12 mu_1       0.3      1.02         1.03  0.268          1.85
13 mu_1       0.4      0.984        0.969 0.460          1.66
14 mu_1       0.5      0.986        0.983 0.509          1.47
15 mu_1       0.6      0.975        0.966 0.654          1.52
16 mu_1       0.7      1.00         0.986 0.584          1.61
17 mu_1       0.8      1.01         0.972 0.608          1.68
18 mu_1       0.9      1.05         1.01  0.122          2.62
19 mu_0       0.1      1.01         0.546 0.0000267      4.02
20 mu_0       0.2      1.01         0.873 0.0527         2.73
21 mu_0       0.3      1.01         1.04  0.255          1.85
22 mu_0       0.4      0.988        0.951 0.409          1.68
23 mu_0       0.5      0.987        0.987 0.499          1.51
24 mu_0       0.6      0.973        0.985 0.618          1.53
25 mu_0       0.7      1.00         0.983 0.575          1.53
26 mu_0       0.8      1.01         0.976 0.614          1.64
27 mu_0       0.9      1.06         1.06  0.151          2.52
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.345     5.19e-26  3.36e-85     34.2 
 2 mu         0.2      1.12      4.60e-13  7.38e-57     36.2 
 3 mu         0.3      1.39      8.22e- 7  2.03e-40     22.8 
 4 mu         0.4      1.94      3.44e- 3  6.94e-29     40.9 
 5 mu         0.5      1.29      8.77e- 2  4.49e-20      8.87
 6 mu         0.6      1.12      1.60e- 1  4.89e-13      9.60
 7 mu         0.7      0.932     1.00e- 1  2.64e-18      5.74
 8 mu         0.8      1.05      3.26e- 3  2.85e-29     14.7 
 9 mu         0.9      1.51      7.02e-10  8.06e-50     37.5 
10 mu_1       0.1      0.479     3.10e-25  3.19e-84     47.4 
11 mu_1       0.2      1.23      1.36e-12  3.51e-56     42.3 
12 mu_1       0.3      1.39      1.67e- 6  6.42e-40     25.5 
13 mu_1       0.4      1.94      5.24e- 3  1.65e-28     37.3 
14 mu_1       0.5      1.27      9.88e- 2  8.52e-20      9.12
15 mu_1       0.6      1.10      1.89e- 1  7.74e-13      9.02
16 mu_1       0.7      0.936     9.69e- 2  5.22e-19      6.15
17 mu_1       0.8      1.04      3.30e- 3  8.35e-30     14.8 
18 mu_1       0.9      1.55      4.75e-10  2.10e-50     39.4 
19 mu_0       0.1      0.330     2.32e-26  1.87e-86     32.8 
20 mu_0       0.2      1.09      2.35e-13  4.61e-58     34.6 
21 mu_0       0.3      1.39      4.60e- 7  1.45e-41     23.6 
22 mu_0       0.4      1.95      2.12e- 3  5.78e-30     43.3 
23 mu_0       0.5      1.32      6.09e- 2  4.49e-21      8.63
24 mu_0       0.6      1.14      1.32e- 1  6.11e-14     10.5 
25 mu_0       0.7      0.923     1.12e- 1  7.58e-18      5.43
26 mu_0       0.8      1.08      3.58e- 3  1.09e-28     14.1 
27 mu_0       0.9      1.17      2.76e- 9  6.18e-49     19.7 
[1] "Total run time was 414.033 seconds"
