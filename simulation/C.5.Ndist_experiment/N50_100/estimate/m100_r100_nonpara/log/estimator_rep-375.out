
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7594"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  64  65  66  68  69  71  72  73 
  1   2   2   1   2   1   2   3   3   2   1   3   2   2   4   1   4   4   2   3 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  93  94  95 
  2   2   5   1   2   2   3   2   1   1   2   3   1   2   2   2   1   3   5   2 
 96  97  98  99 100 
  3   1   2   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04642 0.38899 0.64626 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4503 3091 
[1] "treatment indicator table: "

   0    1 
2833 4761 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3771
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3823
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 1269.743 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.448 0.0872
 2 mu         0.1   0.2 0.570 0.112 
 3 mu         0.1   0.3 0.608 0.108 
 4 mu         0.1   0.4 0.627 0.0971
 5 mu         0.1   0.5 0.648 0.0886
 6 mu         0.2   0.1 0.448 0.0665
 7 mu         0.2   0.2 0.559 0.0813
 8 mu         0.2   0.3 0.609 0.0735
 9 mu         0.2   0.4 0.632 0.0572
10 mu         0.2   0.5 0.672 0.0585
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.915        0.635  0.000163      6.51
 2 mu         0.2      0.991        0.914  0.129         2.77
 3 mu         0.3      0.968        0.959  0.321         1.80
 4 mu         0.4      1.02         1.01   0.354         1.69
 5 mu         0.5      1.01         0.993  0.623         1.57
 6 mu         0.6      0.991        1.00   0.605         1.40
 7 mu         0.7      1.01         1.01   0.501         1.36
 8 mu         0.8      1.02         1.00   0.579         1.61
 9 mu         0.9      1.00         0.986  0.234         2.18
10 mu_1       0.1      0.982        0.732  0.000364      5.95
11 mu_1       0.2      0.979        0.899  0.112         2.29
12 mu_1       0.3      0.974        0.953  0.340         1.73
13 mu_1       0.4      1.02         1.01   0.351         1.65
14 mu_1       0.5      1.01         0.993  0.627         1.55
15 mu_1       0.6      0.991        0.995  0.596         1.41
16 mu_1       0.7      1.01         1.00   0.482         1.36
17 mu_1       0.8      1.02         0.996  0.582         1.61
18 mu_1       0.9      1.00         0.989  0.237         2.16
19 mu_0       0.1      0.907        0.620  0.000141      6.57
20 mu_0       0.2      0.994        0.915  0.121         2.89
21 mu_0       0.3      0.965        0.951  0.314         1.84
22 mu_0       0.4      1.02         1.01   0.356         1.72
23 mu_0       0.5      1.01         1.00   0.618         1.59
24 mu_0       0.6      0.992        1.02   0.618         1.40
25 mu_0       0.7      1.00         0.992  0.545         1.39
26 mu_0       0.8      1.01         1.00   0.568         1.61
27 mu_0       0.9      1.01         0.994  0.206         2.37
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.30      7.36e-28  3.05e-86    129.  
 2 mu         0.2      0.535     2.46e-15  1.55e-58     18.1 
 3 mu         0.3      0.499     1.68e- 8  1.88e-42     10.1 
 4 mu         0.4      0.873     3.00e- 4  4.31e-31     10.7 
 5 mu         0.5      1.09      3.36e- 2  2.46e-22     16.2 
 6 mu         0.6      1.01      2.40e- 1  3.04e-15      6.20
 7 mu         0.7      1.62      1.35e- 1  2.36e-18     11.7 
 8 mu         0.8      1.44      4.09e- 3  2.14e-27     13.4 
 9 mu         0.9      0.910     6.04e- 8  5.45e-46     27.0 
10 mu_1       0.1      1.35      5.20e-27  2.95e-85    134.  
11 mu_1       0.2      0.506     8.32e-15  7.57e-58     16.7 
12 mu_1       0.3      0.510     3.71e- 8  6.13e-42      7.91
13 mu_1       0.4      0.902     3.32e- 4  1.05e-30     11.9 
14 mu_1       0.5      1.10      3.64e- 2  4.82e-22     16.2 
15 mu_1       0.6      1.01      2.95e- 1  4.95e-15      6.24
16 mu_1       0.7      1.67      1.31e- 1  3.48e-19     12.0 
17 mu_1       0.8      1.40      4.62e- 3  4.73e-28     13.2 
18 mu_1       0.9      0.923     3.97e- 8  1.37e-46     27.8 
19 mu_0       0.1      1.29      2.40e-28  9.35e-88    129.  
20 mu_0       0.2      0.542     1.03e-15  4.11e-60     20.3 
21 mu_0       0.3      0.495     8.07e- 9  5.71e-44     11.0 
22 mu_0       0.4      0.855     1.68e- 4  1.53e-32     10.9 
23 mu_0       0.5      1.09      2.07e- 2  1.05e-23     16.2 
24 mu_0       0.6      1.01      1.66e- 1  1.62e-16      6.15
25 mu_0       0.7      1.52      1.99e- 1  7.04e-18     11.0 
26 mu_0       0.8      1.59      4.10e- 3  8.30e-27     14.2 
27 mu_0       0.9      0.786     2.47e- 7  4.22e-45     20.1 
[1] "Total run time was 1278.073 seconds"
