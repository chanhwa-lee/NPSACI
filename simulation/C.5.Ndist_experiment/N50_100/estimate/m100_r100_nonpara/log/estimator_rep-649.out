
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7511"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  1   2   1   3   1   4   2   2   2   2   2   1   2   1   4   1   1   4   1   3 
 71  72  73  74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91 
  1   2   3   2   1   3   1   1   2   2   3   6   1   3   4   2   4   3   2   1 
 92  93  94  95  96  98  99 100 
  3   1   2   3   1   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02773 0.32231 0.59823 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4463 3048 
[1] "treatment indicator table: "

   0    1 
2745 4766 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3902
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3609
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 458.116 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.379 0.0809
 2 mu         0.1   0.2 0.425 0.0669
 3 mu         0.1   0.3 0.482 0.0689
 4 mu         0.1   0.4 0.480 0.0636
 5 mu         0.1   0.5 0.539 0.0770
 6 mu         0.2   0.1 0.422 0.0553
 7 mu         0.2   0.2 0.493 0.0427
 8 mu         0.2   0.3 0.565 0.0438
 9 mu         0.2   0.4 0.579 0.0360
10 mu         0.2   0.5 0.632 0.0463
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.761        0.262 0.000000252      5.02
 2 mu         0.2      0.971        0.911 0.00842          2.38
 3 mu         0.3      0.998        1.01  0.238            2.07
 4 mu         0.4      0.992        0.984 0.488            1.77
 5 mu         0.5      0.982        0.959 0.533            1.61
 6 mu         0.6      1.01         1.01  0.541            1.80
 7 mu         0.7      1.03         1.02  0.671            1.53
 8 mu         0.8      0.994        0.984 0.573            1.53
 9 mu         0.9      0.981        0.938 0.139            2.02
10 mu_1       0.1      0.828        0.395 0.000000802      4.96
11 mu_1       0.2      0.983        0.945 0.0138           2.38
12 mu_1       0.3      0.997        0.993 0.265            1.99
13 mu_1       0.4      0.991        0.990 0.489            1.73
14 mu_1       0.5      0.984        0.968 0.546            1.64
15 mu_1       0.6      1.01         1.01  0.523            1.74
16 mu_1       0.7      1.02         1.02  0.672            1.51
17 mu_1       0.8      0.993        0.987 0.565            1.54
18 mu_1       0.9      0.982        0.940 0.131            2.03
19 mu_0       0.1      0.754        0.243 0.000000191      5.02
20 mu_0       0.2      0.969        0.890 0.00707          2.48
21 mu_0       0.3      0.999        1.00  0.226            2.11
22 mu_0       0.4      0.994        0.975 0.487            1.80
23 mu_0       0.5      0.981        0.966 0.521            1.64
24 mu_0       0.6      1.01         1.00  0.551            1.88
25 mu_0       0.7      1.03         1.03  0.669            1.56
26 mu_0       0.8      0.997        0.996 0.588            1.52
27 mu_0       0.9      0.970        0.901 0.208            1.95
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.269     1.32e-29  1.95e-66     24.3 
 2 mu         0.2      0.867     5.07e-16  4.09e-43     48.5 
 3 mu         0.3      1.07      3.94e- 9  1.00e-29     21.1 
 4 mu         0.4      0.972     6.07e- 5  1.86e-20     15.6 
 5 mu         0.5      0.771     1.35e- 2  4.12e-14      7.41
 6 mu         0.6      0.819     2.14e- 1  3.18e-10      4.48
 7 mu         0.7      1.05      2.11e- 1  3.55e-16      7.67
 8 mu         0.8      1.05      4.08e- 2  1.07e-25     19.2 
 9 mu         0.9      0.935     1.27e- 7  8.73e-45     16.9 
10 mu_1       0.1      0.437     8.38e-29  1.75e-65     38.6 
11 mu_1       0.2      0.823     1.73e-15  1.84e-42     38.5 
12 mu_1       0.3      1.11      8.74e- 9  3.00e-29     23.8 
13 mu_1       0.4      0.942     1.00e- 4  4.17e-20     13.2 
14 mu_1       0.5      0.766     1.85e- 2  7.77e-14      7.07
15 mu_1       0.6      0.823     2.42e- 1  8.41e-11      4.48
16 mu_1       0.7      1.06      2.16e- 1  8.04e-17      7.60
17 mu_1       0.8      1.04      3.39e- 2  3.81e-26     19.8 
18 mu_1       0.9      0.929     9.29e- 8  2.76e-45     16.7 
19 mu_0       0.1      0.250     5.50e-30  2.22e-67     22.7 
20 mu_0       0.2      0.877     2.00e-16  5.23e-44     51.0 
21 mu_0       0.3      1.05      1.67e- 9  1.47e-30     19.9 
22 mu_0       0.4      0.993     3.43e- 5  2.58e-21     17.2 
23 mu_0       0.5      0.775     9.92e- 3  4.64e-15      7.76
24 mu_0       0.6      0.812     2.16e- 1  4.80e-10      4.89
25 mu_0       0.7      1.03      2.74e- 1  9.95e-16      7.82
26 mu_0       0.8      1.06      4.37e- 2  3.83e-25     17.2 
27 mu_0       0.9      0.984     4.38e- 7  6.25e-44     19.0 
[1] "Total run time was 461.462 seconds"
