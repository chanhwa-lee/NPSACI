
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7236"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  59  60  61  62  63  64  65  66  67  68  69  70  71  72 
  2   3   6   3   1   2   2   1   1   6   3   2   2   4   4   3   5   2   2   4 
 73  74  77  78  79  81  82  84  85  87  88  89  90  91  92  94  95  96  97  98 
  1   2   3   2   3   2   3   2   3   1   2   2   1   3   1   2   1   1   3   2 
 99 100 
  1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01948 0.30858 0.57445 0.98246 5.65243 
[1] "event indicator table: "

   0    1 
4246 2990 
[1] "treatment indicator table: "

   0    1 
2881 4355 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3624
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3612
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 358.471 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.497 0.0954
 2 mu         0.1   0.2 0.573 0.0898
 3 mu         0.1   0.3 0.615 0.0922
 4 mu         0.1   0.4 0.661 0.0942
 5 mu         0.1   0.5 0.748 0.0933
 6 mu         0.2   0.1 0.372 0.0474
 7 mu         0.2   0.2 0.440 0.0449
 8 mu         0.2   0.3 0.475 0.0445
 9 mu         0.2   0.4 0.519 0.0423
10 mu         0.2   0.5 0.572 0.0425
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.869 0.0000308      4.54
 2 mu         0.2      0.933        0.941 0.107          2.24
 3 mu         0.3      0.978        0.932 0.371          1.83
 4 mu         0.4      1.02         1.00  0.570          1.76
 5 mu         0.5      0.978        0.957 0.655          1.49
 6 mu         0.6      0.988        0.999 0.655          1.46
 7 mu         0.7      1.01         0.988 0.710          1.48
 8 mu         0.8      1.03         1.02  0.643          1.57
 9 mu         0.9      1.01         1.00  0.0865         2.81
10 mu_1       0.1      1.01         0.884 0.0000809      3.56
11 mu_1       0.2      0.940        0.919 0.145          2.47
12 mu_1       0.3      0.980        0.940 0.406          1.70
13 mu_1       0.4      1.02         1.00  0.577          1.74
14 mu_1       0.5      0.975        0.959 0.666          1.50
15 mu_1       0.6      0.990        0.997 0.675          1.48
16 mu_1       0.7      1.01         0.991 0.707          1.48
17 mu_1       0.8      1.03         1.02  0.641          1.60
18 mu_1       0.9      1.01         1.00  0.0799         2.87
19 mu_0       0.1      1.06         0.844 0.0000252      4.64
20 mu_0       0.2      0.931        0.935 0.0975         2.19
21 mu_0       0.3      0.977        0.925 0.356          1.90
22 mu_0       0.4      1.02         1.01  0.566          1.77
23 mu_0       0.5      0.980        0.953 0.644          1.48
24 mu_0       0.6      0.986        0.986 0.624          1.44
25 mu_0       0.7      1.00         0.982 0.718          1.48
26 mu_0       0.8      1.03         1.01  0.650          1.58
27 mu_0       0.9      1.02         0.996 0.146          2.23
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.193     3.72e-24  5.13e-68     12.0 
 2 mu         0.2      1.42      1.25e-12  1.36e-45     41.2 
 3 mu         0.3      0.650     9.44e- 7  1.47e-32     10.7 
 4 mu         0.4      0.821     3.61e- 3  2.17e-23      7.76
 5 mu         0.5      1.14      1.67e- 1  2.33e-16      7.80
 6 mu         0.6      1.10      2.94e- 1  6.57e-18      5.52
 7 mu         0.7      1.07      1.64e- 1  1.59e-27      5.77
 8 mu         0.8      1.40      2.80e- 3  1.27e-41      9.60
 9 mu         0.9      1.96      2.09e- 9  1.92e-66     41.6 
10 mu_1       0.1      0.316     1.99e-23  4.94e-67     18.1 
11 mu_1       0.2      1.42      3.62e-12  6.55e-45     37.2 
12 mu_1       0.3      0.612     1.95e- 6  4.71e-32      9.06
13 mu_1       0.4      0.855     4.92e- 3  5.22e-23      8.59
14 mu_1       0.5      1.15      1.24e- 1  4.48e-16      7.48
15 mu_1       0.6      1.09      3.12e- 1  1.64e-18      5.72
16 mu_1       0.7      1.10      1.62e- 1  3.41e-28      6.07
17 mu_1       0.8      1.38      2.15e- 3  2.38e-42      9.46
18 mu_1       0.9      2.01      1.30e- 9  3.20e-67     42.9 
19 mu_0       0.1      0.179     1.92e-24  2.19e-69     11.4 
20 mu_0       0.2      1.42      6.36e-13  6.55e-47     42.2 
21 mu_0       0.3      0.667     5.11e- 7  8.07e-34     11.3 
22 mu_0       0.4      0.798     2.21e- 3  1.39e-24      7.62
23 mu_0       0.5      1.13      1.31e- 1  1.79e-17      8.12
24 mu_0       0.6      1.11      2.80e- 1  1.40e-17      5.21
25 mu_0       0.7      1.02      2.08e- 1  4.51e-27      5.10
26 mu_0       0.8      1.47      4.86e- 3  5.40e-41     10.4 
27 mu_0       0.9      1.50      8.19e- 9  1.63e-65     30.2 
[1] "Total run time was 362.317 seconds"
