
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7435"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  66  67  68  69  70  71 
  1   1   4   2   1   2   5   3   1   2   3   3   3   2   3   3   3   1   1   5 
 72  73  74  75  76  78  80  82  83  84  85  87  88  89  90  91  93  94  95  96 
  1   1   1   3   3   2   2   3   1   3   3   1   3   3   2   3   3   2   3   1 
 97  99 100 
  1   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03773 0.35471 0.62114 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4341 3094 
[1] "treatment indicator table: "

   0    1 
2933 4502 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3659
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3776
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 412.391 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.387 0.120 
 2 mu         0.1   0.2 0.462 0.146 
 3 mu         0.1   0.3 0.561 0.173 
 4 mu         0.1   0.4 0.591 0.187 
 5 mu         0.1   0.5 0.651 0.200 
 6 mu         0.2   0.1 0.341 0.0289
 7 mu         0.2   0.2 0.413 0.0376
 8 mu         0.2   0.3 0.512 0.0450
 9 mu         0.2   0.4 0.535 0.0446
10 mu         0.2   0.5 0.603 0.0564
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.05        0.0953 0.000000160     31.8 
 2 mu         0.2      1.05        0.973  0.0291           2.61
 3 mu         0.3      0.998       0.991  0.360            1.84
 4 mu         0.4      1.01        0.997  0.482            1.66
 5 mu         0.5      0.997       0.991  0.603            1.53
 6 mu         0.6      1.00        0.995  0.657            1.43
 7 mu         0.7      1.00        0.980  0.669            1.43
 8 mu         0.8      1.01        0.985  0.566            1.64
 9 mu         0.9      1.05        1.03   0.302            2.28
10 mu_1       0.1      0.927       0.180  0.000000472     10.3 
11 mu_1       0.2      1.05        0.936  0.0434           2.70
12 mu_1       0.3      1.00        1.01   0.380            1.80
13 mu_1       0.4      1.01        0.994  0.502            1.64
14 mu_1       0.5      0.997       0.990  0.611            1.51
15 mu_1       0.6      1.00        0.987  0.658            1.42
16 mu_1       0.7      1.00        0.984  0.669            1.43
17 mu_1       0.8      1.01        0.985  0.550            1.64
18 mu_1       0.9      1.05        1.02   0.288            2.30
19 mu_0       0.1      1.07        0.0860 0.000000126     34.1 
20 mu_0       0.2      1.06        0.982  0.0255           2.63
21 mu_0       0.3      0.996       0.968  0.338            1.86
22 mu_0       0.4      1.01        1.01   0.459            1.67
23 mu_0       0.5      0.997       0.993  0.594            1.55
24 mu_0       0.6      1.00        1.00   0.656            1.45
25 mu_0       0.7      1.00        0.984  0.667            1.42
26 mu_0       0.8      1.01        0.978  0.568            1.63
27 mu_0       0.9      1.04        0.999  0.309            2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.0115      3.86e-23  2.63e-70     1.10 
 2 mu         0.2    0.914       1.85e-11  4.96e-47    69.9  
 3 mu         0.3    1.24        1.31e- 5  1.58e-33    41.1  
 4 mu         0.4    1.36        1.75e- 2  4.75e-24    15.6  
 5 mu         0.5    1.23        2.88e- 1  8.29e-17     9.87 
 6 mu         0.6    1.05        2.29e- 1  5.10e-11     7.28 
 7 mu         0.7    0.948       2.26e- 1  2.69e-13    10.8  
 8 mu         0.8    1.22        2.57e- 3  9.25e-22    12.2  
 9 mu         0.9    0.730       8.74e-10  6.01e-37    23.5  
10 mu_1       0.1    0.0257      2.19e-22  2.50e-69     2.42 
11 mu_1       0.2    1.06        5.24e-11  2.36e-46    77.1  
12 mu_1       0.3    1.23        2.52e- 5  5.01e-33    41.4  
13 mu_1       0.4    1.37        2.63e- 2  1.13e-23    14.9  
14 mu_1       0.5    1.22        2.21e- 1  1.58e-16    10.2  
15 mu_1       0.6    1.04        2.17e- 1  8.08e-11     7.56 
16 mu_1       0.7    0.952       1.82e- 1  8.46e-14    11.6  
17 mu_1       0.8    1.21        2.02e- 3  2.55e-22    11.7  
18 mu_1       0.9    0.719       5.55e-10  1.47e-37    23.5  
19 mu_0       0.1    0.00998     1.90e-23  1.43e-71     0.950
20 mu_0       0.2    0.877       1.00e-11  3.03e-48    68.1  
21 mu_0       0.3    1.25        7.89e- 6  1.10e-34    40.9  
22 mu_0       0.4    1.36        1.11e- 2  3.86e-25    16.1  
23 mu_0       0.5    1.25        3.55e- 1  8.09e-18     9.57 
24 mu_0       0.6    1.06        2.73e- 1  6.21e-12     6.86 
25 mu_0       0.7    0.938       1.78e- 1  6.98e-13     9.03 
26 mu_0       0.8    1.24        3.39e- 3  3.60e-21    14.2  
27 mu_0       0.9    0.831       3.74e- 9  4.68e-36    24.1  
[1] "Total run time was 415.727 seconds"
