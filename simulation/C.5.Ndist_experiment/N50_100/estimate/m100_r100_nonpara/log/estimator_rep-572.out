
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7586"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  64  65  67  68  69  71  72  73 
  2   2   3   2   3   4   4   1   2   1   1   2   1   3   1   2   4   3   2   1 
 74  75  76  77  78  79  80  81  82  83  86  87  88  89  90  91  92  93  94  95 
  1   3   1   3   3   2   1   1   1   1   3   2   2   3   4   6   2   2   4   2 
 96  97  98  99 100 
  1   2   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04044 0.36559 0.63038 1.00000 5.04446 
[1] "event indicator table: "

   0    1 
4484 3102 
[1] "treatment indicator table: "

   0    1 
2717 4869 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3936
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3650
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 561.853 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.374 0.0670
 2 mu         0.1   0.2 0.430 0.0799
 3 mu         0.1   0.3 0.513 0.0881
 4 mu         0.1   0.4 0.539 0.0914
 5 mu         0.1   0.5 0.558 0.0971
 6 mu         0.2   0.1 0.336 0.0437
 7 mu         0.2   0.2 0.400 0.0570
 8 mu         0.2   0.3 0.491 0.0525
 9 mu         0.2   0.4 0.518 0.0556
10 mu         0.2   0.5 0.544 0.0603
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.914        0.119  3.24e-12     11.1 
 2 mu         0.2      0.971        0.823  1.59e- 5      8.58
 3 mu         0.3      0.881        0.832  1.13e- 2      2.37
 4 mu         0.4      0.974        0.950  2.06e- 1      1.92
 5 mu         0.5      0.999        0.982  4.94e- 1      1.71
 6 mu         0.6      0.992        0.971  6.49e- 1      1.41
 7 mu         0.7      0.990        1.01   5.27e- 1      1.29
 8 mu         0.8      1.00         0.999  2.95e- 1      1.68
 9 mu         0.9      0.998        0.983  1.15e- 1      1.97
10 mu_1       0.1      0.994        0.208  1.36e-11     11.3 
11 mu_1       0.2      0.938        0.787  3.35e- 5      6.80
12 mu_1       0.3      0.888        0.834  1.61e- 2      2.06
13 mu_1       0.4      0.980        0.964  2.40e- 1      1.91
14 mu_1       0.5      0.998        0.982  5.00e- 1      1.68
15 mu_1       0.6      0.992        0.976  6.38e- 1      1.42
16 mu_1       0.7      0.991        1.01   5.32e- 1      1.29
17 mu_1       0.8      1.00         0.996  2.95e- 1      1.70
18 mu_1       0.9      0.998        0.982  1.07e- 1      2.00
19 mu_0       0.1      0.905        0.110  2.09e-12     11.1 
20 mu_0       0.2      0.979        0.806  1.15e- 5      9.02
21 mu_0       0.3      0.878        0.833  9.18e- 3      2.50
22 mu_0       0.4      0.970        0.950  1.84e- 1      1.93
23 mu_0       0.5      1.00         0.975  4.88e- 1      1.74
24 mu_0       0.6      0.992        0.968  6.38e- 1      1.40
25 mu_0       0.7      0.989        1.00   5.16e- 1      1.30
26 mu_0       0.8      1.00         0.992  2.94e- 1      1.57
27 mu_0       0.9      0.999        0.975  1.89e- 1      1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.297     3.69e-29  1.65e-66     19.0 
 2 mu         0.2      1.96      3.41e-16  1.73e-45     74.8 
 3 mu         0.3      1.12      6.88e- 9  3.20e-33     29.2 
 4 mu         0.4      1.26      1.27e- 4  1.53e-24     15.7 
 5 mu         0.5      1.49      1.92e- 2  7.74e-18     26.7 
 6 mu         0.6      1.06      1.10e- 1  2.16e-12     12.3 
 7 mu         0.7      1.16      1.49e- 1  1.87e-17      9.68
 8 mu         0.8      1.70      1.58e- 1  3.78e-27     43.6 
 9 mu         0.9      1.22      1.24e- 6  2.69e-44     31.4 
10 mu_1       0.1      0.528     2.31e-28  1.62e-65     32.2 
11 mu_1       0.2      1.91      1.16e-15  8.51e-45     68.2 
12 mu_1       0.3      1.06      1.44e- 8  1.05e-32     21.6 
13 mu_1       0.4      1.31      2.21e- 4  3.77e-24     15.8 
14 mu_1       0.5      1.45      2.34e- 2  1.53e-17     25.8 
15 mu_1       0.6      1.07      1.28e- 1  3.55e-12     12.0 
16 mu_1       0.7      1.16      1.62e- 1  4.50e-18      9.38
17 mu_1       0.8      1.72      1.34e- 1  7.98e-28     44.0 
18 mu_1       0.9      1.19      9.09e- 7  5.06e-45     30.5 
19 mu_0       0.1      0.272     1.54e-29  2.57e-68     17.6 
20 mu_0       0.2      1.97      1.36e-16  3.04e-47     77.7 
21 mu_0       0.3      1.14      3.66e- 9  6.44e-35     32.5 
22 mu_0       0.4      1.23      6.47e- 5  3.59e-26     16.5 
23 mu_0       0.5      1.53      1.83e- 2  2.18e-19     27.5 
24 mu_0       0.6      1.06      8.62e- 2  7.61e-14     12.7 
25 mu_0       0.7      1.16      1.08e- 1  5.17e-17     10.4 
26 mu_0       0.8      1.63      1.05e- 1  1.57e-26     42.2 
27 mu_0       0.9      1.48      4.43e- 6  2.24e-43     39.7 
[1] "Total run time was 566.063 seconds"
