
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7440"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  67  68  69  70  71 
  1   3   3   3   4   3   1   1   1   3   1   2   5   3   1   2   1   2   1   3 
 72  73  74  75  77  78  79  80  81  84  85  86  87  88  89  90  91  92  93  94 
  2   3   1   3   2   2   2   4   2   3   2   2   3   1   1   3   2   2   4   3 
 95  96  98  99 100 
  4   1   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02839 0.32070 0.58139 0.99942 5.98583 
[1] "event indicator table: "

   0    1 
4430 3010 
[1] "treatment indicator table: "

   0    1 
2982 4458 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3642
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3798
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 370.324 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.485 0.0742
 2 mu         0.1   0.2 0.586 0.0885
 3 mu         0.1   0.3 0.687 0.106 
 4 mu         0.1   0.4 0.739 0.106 
 5 mu         0.1   0.5 0.805 0.120 
 6 mu         0.2   0.1 0.358 0.0483
 7 mu         0.2   0.2 0.438 0.0519
 8 mu         0.2   0.3 0.527 0.0588
 9 mu         0.2   0.4 0.572 0.0578
10 mu         0.2   0.5 0.632 0.0682
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.13         0.633 0.0000106       7.07
 2 mu         0.2      0.960        0.896 0.0370          2.42
 3 mu         0.3      1.01         0.990 0.428           1.97
 4 mu         0.4      1.00         0.989 0.543           1.46
 5 mu         0.5      1.01         1.01  0.649           1.50
 6 mu         0.6      1.01         0.998 0.666           1.39
 7 mu         0.7      1.02         1.01  0.600           1.54
 8 mu         0.8      0.968        0.960 0.511           1.50
 9 mu         0.9      0.966        0.917 0.140           2.33
10 mu_1       0.1      1.11         0.725 0.0000333       6.24
11 mu_1       0.2      0.961        0.912 0.0602          2.33
12 mu_1       0.3      1.01         0.995 0.428           1.95
13 mu_1       0.4      0.999        0.992 0.566           1.48
14 mu_1       0.5      1.01         1.02  0.654           1.49
15 mu_1       0.6      1.01         1.00  0.658           1.43
16 mu_1       0.7      1.02         0.999 0.597           1.55
17 mu_1       0.8      0.968        0.956 0.511           1.51
18 mu_1       0.9      0.967        0.914 0.132           2.34
19 mu_0       0.1      1.13         0.607 0.00000808      7.23
20 mu_0       0.2      0.959        0.881 0.0311          2.44
21 mu_0       0.3      1.01         0.997 0.412           1.98
22 mu_0       0.4      1.00         0.996 0.528           1.44
23 mu_0       0.5      1.01         1.01  0.639           1.50
24 mu_0       0.6      1.01         0.999 0.678           1.39
25 mu_0       0.7      1.02         1.01  0.607           1.51
26 mu_0       0.8      0.970        0.961 0.509           1.46
27 mu_0       0.9      0.961        0.990 0.207           2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0234     1.87e-24  1.08e-72      1.39
 2 mu         0.2     1.50       1.59e-12  1.62e-47     84.0 
 3 mu         0.3     0.708      1.95e- 6  5.18e-33      7.63
 4 mu         0.4     0.807      9.87e- 3  6.29e-23      6.55
 5 mu         0.5     1.01       1.01e- 1  2.53e-15      5.73
 6 mu         0.6     1.11       2.64e- 1  6.46e-13      7.07
 7 mu         0.7     0.939      1.31e- 1  2.90e-21      5.83
 8 mu         0.8     1.07       6.24e- 4  1.01e-33      8.78
 9 mu         0.9     1.46       3.37e-11  6.27e-56     32.3 
10 mu_1       0.1     0.0473     1.05e-23  9.84e-72      2.75
11 mu_1       0.2     1.54       5.21e-12  7.42e-47     83.1 
12 mu_1       0.3     0.702      3.67e- 6  1.58e-32      8.50
13 mu_1       0.4     0.824      9.76e- 3  1.44e-22      6.90
14 mu_1       0.5     1.02       9.51e- 2  4.62e-15      5.30
15 mu_1       0.6     1.09       2.34e- 1  2.13e-13      7.10
16 mu_1       0.7     0.945      1.14e- 1  8.19e-22      5.93
17 mu_1       0.8     1.08       4.45e- 4  2.50e-34      9.34
18 mu_1       0.9     1.46       2.18e-11  1.38e-56     32.8 
19 mu_0       0.1     0.0207     9.11e-25  1.03e-73      1.24
20 mu_0       0.2     1.48       6.86e-13  1.75e-48     84.2 
21 mu_0       0.3     0.711      1.20e- 6  6.36e-34      7.67
22 mu_0       0.4     0.795      8.53e- 3  9.01e-24      6.49
23 mu_0       0.5     0.997      8.49e- 2  4.34e-16      6.16
24 mu_0       0.6     1.13       2.83e- 1  1.29e-12      7.13
25 mu_0       0.7     0.924      1.35e- 1  7.74e-21      5.58
26 mu_0       0.8     1.04       1.34e- 3  4.05e-33      7.03
27 mu_0       0.9     1.46       1.41e-10  5.03e-55     27.8 
[1] "Total run time was 373.59 seconds"
