
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7252"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  60  61  62  63  64  65  66  67  68  69  70  71 
  2   5   3   2   2   4   1   1   2   3   2   4   2   2   2   3   2   1   1   3 
 72  73  74  75  77  78  79  80  81  82  85  87  88  89  90  91  92  93  95  96 
  2   2   2   4   3   1   6   4   2   6   1   1   2   1   3   2   1   3   1   1 
 97  98 100 
  2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02752 0.33881 0.59669 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4309 2943 
[1] "treatment indicator table: "

   0    1 
2656 4596 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3578
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3674
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 442.875 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.421 0.0941
 2 mu         0.1   0.2 0.528 0.119 
 3 mu         0.1   0.3 0.562 0.119 
 4 mu         0.1   0.4 0.566 0.107 
 5 mu         0.1   0.5 0.618 0.119 
 6 mu         0.2   0.1 0.417 0.0559
 7 mu         0.2   0.2 0.528 0.0779
 8 mu         0.2   0.3 0.591 0.0890
 9 mu         0.2   0.4 0.619 0.0775
10 mu         0.2   0.5 0.665 0.0861
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.878        0.322  2.31e-11     12.8 
 2 mu         0.2      1.07         0.950  5.48e- 4      6.68
 3 mu         0.3      0.954        0.979  1.73e- 1      1.96
 4 mu         0.4      0.964        0.929  3.86e- 1      1.64
 5 mu         0.5      0.988        0.989  6.10e- 1      1.53
 6 mu         0.6      1.02         1.02   5.99e- 1      1.37
 7 mu         0.7      0.994        0.967  7.05e- 1      1.38
 8 mu         0.8      1.03         1.05   5.80e- 1      1.42
 9 mu         0.9      0.973        0.987  1.01e- 2      2.43
10 mu_1       0.1      0.956        0.450  8.35e-11     11.4 
11 mu_1       0.2      1.04         0.933  9.90e- 4      5.48
12 mu_1       0.3      0.954        0.982  2.01e- 1      1.89
13 mu_1       0.4      0.964        0.918  3.99e- 1      1.67
14 mu_1       0.5      0.991        0.984  5.87e- 1      1.49
15 mu_1       0.6      1.02         1.01   6.02e- 1      1.38
16 mu_1       0.7      0.992        0.971  7.04e- 1      1.37
17 mu_1       0.8      1.03         1.06   5.72e- 1      1.43
18 mu_1       0.9      0.972        0.999  9.04e- 3      2.48
19 mu_0       0.1      0.869        0.302  1.64e-11     13.0 
20 mu_0       0.2      1.07         0.946  4.37e- 4      6.98
21 mu_0       0.3      0.955        0.963  1.61e- 1      1.99
22 mu_0       0.4      0.963        0.946  3.75e- 1      1.61
23 mu_0       0.5      0.985        0.982  6.31e- 1      1.58
24 mu_0       0.6      1.02         1.03   5.93e- 1      1.36
25 mu_0       0.7      0.997        0.987  7.07e- 1      1.40
26 mu_0       0.8      1.02         1.05   6.01e- 1      1.43
27 mu_0       0.9      0.986        0.955  1.92e- 2      1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     70.7       5.68e-27  7.76e-83   6415.  
 2 mu         0.2      0.899     1.70e-14  2.13e-55     31.7 
 3 mu         0.3      0.492     4.99e- 8  1.74e-39     17.8 
 4 mu         0.4      0.862     3.35e- 4  2.51e-28     14.6 
 5 mu         0.5      1.14      7.83e- 2  8.30e-20      9.25
 6 mu         0.6      1.12      3.10e- 1  3.95e-21     10.0 
 7 mu         0.7      1.05      2.89e- 1  5.67e-31      6.18
 8 mu         0.8      1.24      1.20e- 2  4.60e-45     12.3 
 9 mu         0.9      1.80      3.62e- 8  1.97e-70     37.6 
10 mu_1       0.1     50.6       3.58e-26  7.36e-82   4374.  
11 mu_1       0.2      0.654     5.35e-14  1.01e-54     35.6 
12 mu_1       0.3      0.527     1.14e- 7  5.49e-39     20.4 
13 mu_1       0.4      0.900     5.49e- 4  5.94e-28     12.6 
14 mu_1       0.5      1.14      1.03e- 1  1.57e-19      9.48
15 mu_1       0.6      1.12      2.37e- 1  4.49e-22      9.35
16 mu_1       0.7      1.06      2.78e- 1  5.53e-32      6.24
17 mu_1       0.8      1.24      1.01e- 2  3.92e-46     12.8 
18 mu_1       0.9      1.81      2.41e- 8  2.28e-71     38.8 
19 mu_0       0.1     73.0       2.34e-27  4.45e-84   6642.  
20 mu_0       0.2      0.960     7.89e-15  1.37e-56     30.7 
21 mu_0       0.3      0.477     2.26e- 8  1.28e-40     16.7 
22 mu_0       0.4      0.836     1.93e- 4  2.15e-29     16.0 
23 mu_0       0.5      1.14      5.32e- 2  8.55e-21      9.02
24 mu_0       0.6      1.13      3.17e- 1  9.21e-21     11.1 
25 mu_0       0.7      1.04      2.09e- 1  1.76e-30      6.06
26 mu_0       0.8      1.23      2.20e- 2  2.10e-44     10.1 
27 mu_0       0.9      1.70      1.46e- 7  1.77e-69     30.7 
[1] "Total run time was 446.457 seconds"
