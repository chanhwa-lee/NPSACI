
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7307"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71 
  2   1   1   3   1   3   4   5   5   2   2   3   1   2   1   3   4   4   2   3 
 73  74  75  76  79  80  81  82  84  85  86  87  88  89  90  91  92  94  95  96 
  2   1   2   1   3   4   5   2   2   4   1   1   3   1   1   3   4   1   1   1 
 97  98  99 100 
  1   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03728 0.35641 0.62007 1.00000 9.00000 
[1] "event indicator table: "

   0    1 
4260 3047 
[1] "treatment indicator table: "

   0    1 
2738 4569 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3638
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3669
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 363.191 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.297 0.0467
 2 mu         0.1   0.2 0.382 0.0533
 3 mu         0.1   0.3 0.429 0.0627
 4 mu         0.1   0.4 0.478 0.0695
 5 mu         0.1   0.5 0.517 0.0746
 6 mu         0.2   0.1 0.330 0.0315
 7 mu         0.2   0.2 0.415 0.0275
 8 mu         0.2   0.3 0.463 0.0307
 9 mu         0.2   0.4 0.526 0.0365
10 mu         0.2   0.5 0.576 0.0375
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.855        0.379  4.78e-13      8.64
 2 mu         0.2      0.996        0.890  2.22e- 5      3.30
 3 mu         0.3      1.02         0.982  3.36e- 2      1.94
 4 mu         0.4      0.982        0.984  4.32e- 1      1.57
 5 mu         0.5      0.981        0.979  6.48e- 1      1.46
 6 mu         0.6      0.996        0.985  7.06e- 1      1.34
 7 mu         0.7      1.02         1.02   6.89e- 1      1.56
 8 mu         0.8      1.00         1.02   5.94e- 1      1.47
 9 mu         0.9      0.962        0.921  2.65e- 1      1.76
10 mu_1       0.1      0.894        0.445  1.92e-12      8.57
11 mu_1       0.2      1.01         0.901  4.48e- 5      3.07
12 mu_1       0.3      1.02         1.02   4.65e- 2      1.83
13 mu_1       0.4      0.977        0.976  4.45e- 1      1.54
14 mu_1       0.5      0.983        0.988  6.48e- 1      1.45
15 mu_1       0.6      0.997        0.993  6.99e- 1      1.35
16 mu_1       0.7      1.02         1.02   6.88e- 1      1.56
17 mu_1       0.8      1.00         1.02   5.94e- 1      1.47
18 mu_1       0.9      0.962        0.914  2.55e- 1      1.77
19 mu_0       0.1      0.850        0.361  3.18e-13      8.65
20 mu_0       0.2      0.994        0.887  1.66e- 5      3.36
21 mu_0       0.3      1.02         0.969  2.80e- 2      1.99
22 mu_0       0.4      0.985        0.984  4.23e- 1      1.59
23 mu_0       0.5      0.979        0.970  6.42e- 1      1.47
24 mu_0       0.6      0.996        0.985  7.06e- 1      1.33
25 mu_0       0.7      1.02         1.01   6.89e- 1      1.58
26 mu_0       0.8      1.00         1.01   5.97e- 1      1.49
27 mu_0       0.9      0.964        0.934  3.59e- 1      1.72
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00781     3.07e-26  9.77e-64     0.488
 2 mu         0.2    0.696       2.62e-14  6.47e-41    27.2  
 3 mu         0.3    1.56        1.82e- 7  7.04e-29    33.3  
 4 mu         0.4    1.10        8.88e- 4  1.81e-20    10.4  
 5 mu         0.5    1.15        3.70e- 2  4.43e-14     8.71 
 6 mu         0.6    1.08        1.16e- 1  8.95e-11     5.76 
 7 mu         0.7    0.917       1.81e- 1  1.42e-17    11.9  
 8 mu         0.8    1.42        1.54e- 2  9.68e-28     7.12 
 9 mu         0.9    1.04        2.60e- 8  6.91e-46    15.7  
10 mu_1       0.1    0.0166      1.99e-25  8.18e-63     0.989
11 mu_1       0.2    0.829       7.91e-14  3.02e-40    30.7  
12 mu_1       0.3    1.57        3.74e- 7  2.19e-28    30.1  
13 mu_1       0.4    1.08        1.46e- 3  4.23e-20     9.33 
14 mu_1       0.5    1.15        4.30e- 2  8.27e-14     9.31 
15 mu_1       0.6    1.07        1.31e- 1  3.02e-11     5.72 
16 mu_1       0.7    0.917       1.82e- 1  4.10e-18    11.6  
17 mu_1       0.8    1.44        1.16e- 2  2.45e-28     7.02 
18 mu_1       0.9    1.03        1.87e- 8  1.55e-46    15.9  
19 mu_0       0.1    0.00683     1.01e-26  1.77e-64     0.433
20 mu_0       0.2    0.662       1.30e-14  5.39e-42    26.3  
21 mu_0       0.3    1.56        9.93e- 8  6.70e-30    34.6  
22 mu_0       0.4    1.11        5.06e- 4  2.01e-21    11.3  
23 mu_0       0.5    1.14        2.70e- 2  5.90e-15     8.10 
24 mu_0       0.6    1.10        1.15e- 1  1.78e-10     6.14 
25 mu_0       0.7    0.918       1.33e- 1  3.77e-17    12.6  
26 mu_0       0.8    1.32        2.68e- 2  3.86e-27     7.53 
27 mu_0       0.9    1.18        9.13e- 8  5.51e-45    16.8  
[1] "Total run time was 366.316 seconds"
