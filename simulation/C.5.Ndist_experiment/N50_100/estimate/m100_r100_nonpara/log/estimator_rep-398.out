
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7597"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 
 2  1  2  1  3  1  1  1  1  1  4  1  3  2  4  1  1  3  4  3  1  2  3  2  1  2 
77 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 2  4  1  1  4  2  1  4  2  3  1  2  3  1  3  2  2  2  2  1  5  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04836 0.39348 0.64304 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4580 3017 
[1] "treatment indicator table: "

   0    1 
2360 5237 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3861
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3736
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 434.089 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.438 0.115 
 2 mu         0.1   0.2 0.503 0.138 
 3 mu         0.1   0.3 0.594 0.160 
 4 mu         0.1   0.4 0.608 0.175 
 5 mu         0.1   0.5 0.691 0.200 
 6 mu         0.2   0.1 0.319 0.0268
 7 mu         0.2   0.2 0.458 0.0520
 8 mu         0.2   0.3 0.523 0.0531
 9 mu         0.2   0.4 0.548 0.0550
10 mu         0.2   0.5 0.595 0.0597
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.10         0.458  1.74e-21     32.1 
 2 mu         0.2      0.944        0.946  5.80e-10      3.45
 3 mu         0.3      0.935        0.917  1.28e- 4      2.93
 4 mu         0.4      1.00         0.949  4.94e- 2      2.34
 5 mu         0.5      1.02         1.02   4.75e- 1      1.52
 6 mu         0.6      1.00         0.981  5.65e- 1      1.39
 7 mu         0.7      0.996        0.982  6.21e- 1      1.47
 8 mu         0.8      0.984        0.994  5.75e- 1      1.58
 9 mu         0.9      0.992        1.00   2.05e- 1      1.66
10 mu_1       0.1      1.13         0.533  8.27e-21     32.7 
11 mu_1       0.2      0.948        0.913  1.38e- 9      3.60
12 mu_1       0.3      0.941        0.909  2.05e- 4      3.01
13 mu_1       0.4      1.00         0.954  6.07e- 2      2.20
14 mu_1       0.5      1.02         1.02   5.02e- 1      1.49
15 mu_1       0.6      1.00         0.992  5.44e- 1      1.41
16 mu_1       0.7      0.995        0.988  6.16e- 1      1.47
17 mu_1       0.8      0.984        0.997  5.68e- 1      1.59
18 mu_1       0.9      0.993        1.00   2.01e- 1      1.66
19 mu_0       0.1      1.10         0.440  1.01e-21     32.0 
20 mu_0       0.2      0.943        0.961  3.79e-10      3.41
21 mu_0       0.3      0.933        0.912  9.50e- 5      2.90
22 mu_0       0.4      0.998        0.938  4.19e- 2      2.43
23 mu_0       0.5      1.02         1.02   4.48e- 1      1.55
24 mu_0       0.6      1.01         0.978  5.98e- 1      1.36
25 mu_0       0.7      0.996        1.01   6.35e- 1      1.46
26 mu_0       0.8      0.984        0.994  5.62e- 1      1.52
27 mu_0       0.9      0.985        0.986  2.43e- 1      1.63
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     35.6       2.21e-33  1.77e-88   3553.  
 2 mu         0.2      0.834     2.04e-19  2.19e-61     66.1 
 3 mu         0.3      0.653     1.48e-11  1.54e-45     22.9 
 4 mu         0.4      0.843     2.33e- 6  2.71e-34     19.6 
 5 mu         0.5      1.28      2.67e- 3  1.43e-25     11.6 
 6 mu         0.6      1.17      9.17e- 2  1.56e-21     10.6 
 7 mu         0.7      1.24      9.62e- 2  5.19e-31     13.6 
 8 mu         0.8      1.41      1.81e- 1  1.63e-44      9.80
 9 mu         0.9      1.07      3.82e- 4  8.64e-68     13.4 
10 mu_1       0.1     17.5       1.54e-32  1.77e-87   1733.  
11 mu_1       0.2      0.793     7.42e-19  1.09e-60     61.4 
12 mu_1       0.3      0.655     3.48e-11  5.14e-45     21.4 
13 mu_1       0.4      0.877     4.21e- 6  6.76e-34     20.3 
14 mu_1       0.5      1.29      2.65e- 3  2.85e-25     12.6 
15 mu_1       0.6      1.16      9.43e- 2  1.27e-22     10.8 
16 mu_1       0.7      1.25      1.16e- 1  3.62e-32     13.6 
17 mu_1       0.8      1.42      1.64e- 1  9.94e-46     10.1 
18 mu_1       0.9      1.06      2.95e- 4  4.68e-69     13.6 
19 mu_0       0.1     37.6       6.17e-34  0          3756.  
20 mu_0       0.2      0.844     6.94e-20  0            67.3 
21 mu_0       0.3      0.652     6.19e-12  0            23.5 
22 mu_0       0.4      0.820     1.07e- 6  0            19.1 
23 mu_0       0.5      1.26      1.62e- 3  0            10.6 
24 mu_0       0.6      1.20      8.15e- 2  0            11.1 
25 mu_0       0.7      1.22      9.32e- 2  0            13.7 
26 mu_0       0.8      1.36      2.58e- 1  0             8.78
27 mu_0       0.9      1.15      6.34e- 4  0            11.7 
[1] "Total run time was 437.995 seconds"
