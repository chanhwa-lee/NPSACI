
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7672"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  61  62  63  64  65  66  67  68  69  71  72 
  4   3   2   2   3   3   2   2   1   2   3   2   1   2   2   1   2   1   1   2 
 73  75  76  77  78  80  82  84  85  86  87  88  89  90  91  92  93  94  95  96 
  3   1   1   4   1   2   1   3   1   1   5   1   2   3   3   3   5   3   1   3 
 97  98  99 100 
  3   4   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02226 0.32476 0.58976 0.99943 7.00000 
[1] "event indicator table: "

   0    1 
4593 3079 
[1] "treatment indicator table: "

   0    1 
2968 4704 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3732
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3940
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 447.024 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.513 0.0985
 2 mu         0.1   0.2 0.594 0.102 
 3 mu         0.1   0.3 0.639 0.103 
 4 mu         0.1   0.4 0.676 0.108 
 5 mu         0.1   0.5 0.702 0.104 
 6 mu         0.2   0.1 0.442 0.0722
 7 mu         0.2   0.2 0.512 0.0648
 8 mu         0.2   0.3 0.554 0.0578
 9 mu         0.2   0.4 0.586 0.0563
10 mu         0.2   0.5 0.612 0.0427
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.12         0.423 0.000000312     10.5 
 2 mu         0.2      1.02         0.917 0.0141           3.07
 3 mu         0.3      1.02         0.985 0.333            2.42
 4 mu         0.4      0.982        0.973 0.345            1.67
 5 mu         0.5      1.01         1.00  0.607            1.50
 6 mu         0.6      1.03         1.02  0.598            1.96
 7 mu         0.7      0.987        0.975 0.517            1.62
 8 mu         0.8      0.986        1.01  0.356            1.88
 9 mu         0.9      1.01         0.946 0.304            2.00
10 mu_1       0.1      1.14         0.616 0.000000993      9.89
11 mu_1       0.2      1.03         0.899 0.0226           2.91
12 mu_1       0.3      1.01         0.983 0.342            2.47
13 mu_1       0.4      0.983        0.967 0.323            1.67
14 mu_1       0.5      1.01         1.02  0.604            1.53
15 mu_1       0.6      1.03         1.01  0.598            1.96
16 mu_1       0.7      0.986        0.983 0.499            1.64
17 mu_1       0.8      0.986        1.02  0.348            1.88
18 mu_1       0.9      1.01         0.946 0.295            2.02
19 mu_0       0.1      1.11         0.400 0.000000237     10.5 
20 mu_0       0.2      1.01         0.929 0.0120           3.11
21 mu_0       0.3      1.02         0.984 0.317            2.40
22 mu_0       0.4      0.982        0.980 0.360            1.68
23 mu_0       0.5      1.01         1.00  0.610            1.49
24 mu_0       0.6      1.04         1.02  0.599            1.97
25 mu_0       0.7      0.990        0.976 0.559            1.59
26 mu_0       0.8      0.984        0.971 0.379            1.85
27 mu_0       0.9      0.993        0.917 0.310            1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00489     2.04e-27  1.17e-82     0.411
 2 mu         0.2    0.606       3.97e-14  1.80e-55    46.0  
 3 mu         0.3    1.49        1.87e- 7  1.12e-39    34.9  
 4 mu         0.4    1.64        1.32e- 3  1.41e-28    27.0  
 5 mu         0.5    0.920       1.22e- 1  4.49e-20     8.15 
 6 mu         0.6    1.31        2.99e- 1  2.95e-13    15.2  
 7 mu         0.7    1.40        2.17e- 1  2.26e-15    18.5  
 8 mu         0.8    1.31        1.18e- 2  3.13e-25    24.8  
 9 mu         0.9    1.12        3.95e- 9  4.03e-44    32.1  
10 mu_1       0.1    0.0110      1.31e-26  1.12e-81     0.908
11 mu_1       0.2    0.705       1.23e-13  8.64e-55    50.8  
12 mu_1       0.3    1.59        3.96e- 7  3.57e-39    39.8  
13 mu_1       0.4    1.57        2.02e- 3  3.38e-28    25.3  
14 mu_1       0.5    0.912       1.51e- 1  8.60e-20     7.82 
15 mu_1       0.6    1.34        3.21e- 1  4.71e-13    16.6  
16 mu_1       0.7    1.38        1.90e- 1  7.12e-16    17.3  
17 mu_1       0.8    1.33        9.50e- 3  1.06e-25    25.6  
18 mu_1       0.9    1.12        2.88e- 9  1.22e-44    31.9  
19 mu_0       0.1    0.00421     8.59e-28  5.46e-84     0.356
20 mu_0       0.2    0.581       1.67e-14  9.49e-57    44.8  
21 mu_0       0.3    1.44        9.68e- 8  6.72e-41    32.9  
22 mu_0       0.4    1.69        8.62e- 4  9.91e-30    29.3  
23 mu_0       0.5    0.928       8.65e- 2  3.78e-21     8.47 
24 mu_0       0.6    1.27        2.90e- 1  3.11e-14    13.8  
25 mu_0       0.7    1.45        2.28e- 1  5.86e-15    21.2  
26 mu_0       0.8    1.24        1.54e- 2  1.14e-24    21.5  
27 mu_0       0.9    1.14        1.42e- 8  2.93e-43    33.5  
[1] "Total run time was 450.682 seconds"
