
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7674"
[1] "cluster size dist'n: "

 50  53  54  55  56  57  58  59  60  61  62  63  64  65  67  69  70  71  72  74 
  1   1   1   1   6   1   3   2   2   3   1   4   4   2   1   2   2   3   2   3 
 75  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  1   2   2   2   3   2   4   4   3   2   2   3   2   1   1   2   2   1   4   6 
 97  98  99 100 
  1   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02741 0.32550 0.58970 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4568 3106 
[1] "treatment indicator table: "

   0    1 
2921 4753 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3735
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3939
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 385.589 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.419 0.0912
 2 mu         0.1   0.2 0.475 0.0880
 3 mu         0.1   0.3 0.508 0.0881
 4 mu         0.1   0.4 0.537 0.0903
 5 mu         0.1   0.5 0.563 0.0874
 6 mu         0.2   0.1 0.371 0.0622
 7 mu         0.2   0.2 0.434 0.0561
 8 mu         0.2   0.3 0.474 0.0552
 9 mu         0.2   0.4 0.504 0.0546
10 mu         0.2   0.5 0.530 0.0459
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.812        0.238 0.000000188      5.06
 2 mu         0.2      0.842        0.720 0.0244           2.17
 3 mu         0.3      0.945        0.892 0.283            1.82
 4 mu         0.4      1.02         0.994 0.547            1.70
 5 mu         0.5      1.01         1.01  0.639            1.62
 6 mu         0.6      0.984        0.990 0.635            1.43
 7 mu         0.7      0.979        0.964 0.695            1.34
 8 mu         0.8      0.989        0.983 0.360            1.53
 9 mu         0.9      1.05         0.966 0.225            2.29
10 mu_1       0.1      0.815        0.387 0.000000556      4.35
11 mu_1       0.2      0.850        0.748 0.0371           2.25
12 mu_1       0.3      0.954        0.923 0.275            1.83
13 mu_1       0.4      1.02         0.998 0.552            1.69
14 mu_1       0.5      1.01         1.01  0.650            1.62
15 mu_1       0.6      0.983        0.990 0.647            1.43
16 mu_1       0.7      0.980        0.968 0.682            1.35
17 mu_1       0.8      0.988        0.983 0.347            1.53
18 mu_1       0.9      1.05         0.970 0.215            2.32
19 mu_0       0.1      0.812        0.221 0.000000147      5.26
20 mu_0       0.2      0.840        0.725 0.0212           2.15
21 mu_0       0.3      0.941        0.898 0.287            1.81
22 mu_0       0.4      1.02         0.998 0.544            1.70
23 mu_0       0.5      1.01         0.997 0.616            1.61
24 mu_0       0.6      0.985        0.988 0.616            1.45
25 mu_0       0.7      0.977        0.976 0.667            1.32
26 mu_0       0.8      0.991        0.975 0.415            1.55
27 mu_0       0.9      1.04         1.00  0.267            2.02
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.552     2.78e-29  3.49e-68      28.2
 2 mu         0.2      1.36      1.76e-16  1.64e-45      49.4
 3 mu         0.3      1.04      7.95e- 9  2.33e-32      22.5
 4 mu         0.4      1.17      1.94e- 4  3.93e-23      24.4
 5 mu         0.5      1.00      3.05e- 2  4.39e-16      22.0
 6 mu         0.6      1.17      3.09e- 1  1.36e-14      14.3
 7 mu         0.7      1.40      6.07e- 1  1.56e-22      10.4
 8 mu         0.8      1.32      3.29e- 2  3.65e-34      39.7
 9 mu         0.9      1.19      9.96e- 8  1.27e-54      27.2
10 mu_1       0.1      0.844     1.82e-28  3.31e-67      41.2
11 mu_1       0.2      1.19      6.40e-16  7.81e-45      38.8
12 mu_1       0.3      1.11      1.63e- 8  7.37e-32      26.3
13 mu_1       0.4      1.16      2.39e- 4  9.34e-23      21.4
14 mu_1       0.5      0.987     3.76e- 2  8.35e-16      21.0
15 mu_1       0.6      1.20      3.49e- 1  3.33e-15      14.9
16 mu_1       0.7      1.38      5.57e- 1  3.26e-23      10.2
17 mu_1       0.8      1.33      2.71e- 2  6.67e-35      40.7
18 mu_1       0.9      1.18      7.48e- 8  2.06e-55      27.2
19 mu_0       0.1      0.520     1.07e-29  1.94e-69      26.7
20 mu_0       0.2      1.40      6.36e-17  1.03e-46      52.0
21 mu_0       0.3      1.01      4.36e- 9  1.66e-33      20.8
22 mu_0       0.4      1.19      1.13e- 4  3.28e-24      26.3
23 mu_0       0.5      1.01      2.89e- 2  4.39e-17      23.0
24 mu_0       0.6      1.12      2.48e- 1  2.91e-14      13.4
25 mu_0       0.7      1.45      7.21e- 1  4.43e-22      10.9
26 mu_0       0.8      1.28      4.57e- 2  1.56e-33      35.9
27 mu_0       0.9      1.21      3.23e- 7  1.08e-53      27.5
[1] "Total run time was 389.28 seconds"
