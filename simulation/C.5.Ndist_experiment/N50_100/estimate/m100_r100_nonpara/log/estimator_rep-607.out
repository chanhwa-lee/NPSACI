
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7615"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  71 
  2   3   3   1   2   1   1   2   3   1   3   1   3   5   1   2   2   1   1   1 
 72  73  74  75  76  77  78  80  81  82  83  84  85  86  87  88  89  90  93  94 
  2   1   1   2   1   3   3   3   1   4   3   1   5   1   1   4   2   2   4   6 
 95  96  97  98  99 100 
  2   2   2   3   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03379 0.33344 0.60219 1.00000 6.38292 
[1] "event indicator table: "

   0    1 
4578 3037 
[1] "treatment indicator table: "

   0    1 
2799 4816 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3697
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3918
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 407.817 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.345 0.0620
 2 mu         0.1   0.2 0.428 0.0687
 3 mu         0.1   0.3 0.437 0.0724
 4 mu         0.1   0.4 0.467 0.0836
 5 mu         0.1   0.5 0.512 0.0717
 6 mu         0.2   0.1 0.405 0.0537
 7 mu         0.2   0.2 0.509 0.0547
 8 mu         0.2   0.3 0.534 0.0548
 9 mu         0.2   0.4 0.577 0.0643
10 mu         0.2   0.5 0.628 0.0494
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.848        0.479 0.00000000292      5.54
 2 mu         0.2      1.08         0.950 0.00388            4.20
 3 mu         0.3      1.01         0.979 0.185              1.97
 4 mu         0.4      1.02         1.03  0.521              1.84
 5 mu         0.5      1.00         1.01  0.547              1.43
 6 mu         0.6      0.988        0.986 0.642              1.45
 7 mu         0.7      0.980        0.979 0.539              1.35
 8 mu         0.8      0.993        0.973 0.382              1.71
 9 mu         0.9      0.972        0.982 0.251              2.89
10 mu_1       0.1      0.937        0.644 0.00000000962      4.69
11 mu_1       0.2      1.07         0.999 0.00642            3.56
12 mu_1       0.3      1.01         0.994 0.175              1.99
13 mu_1       0.4      1.02         1.03  0.533              1.80
14 mu_1       0.5      1.00         1.01  0.522              1.44
15 mu_1       0.6      0.987        0.974 0.629              1.45
16 mu_1       0.7      0.980        0.974 0.526              1.36
17 mu_1       0.8      0.993        0.971 0.377              1.73
18 mu_1       0.9      0.972        0.989 0.243              2.91
19 mu_0       0.1      0.839        0.453 0.00000000217      5.64
20 mu_0       0.2      1.09         0.949 0.00324            4.36
21 mu_0       0.3      1.01         0.980 0.190              1.97
22 mu_0       0.4      1.02         1.03  0.511              1.86
23 mu_0       0.5      1.01         1.02  0.550              1.43
24 mu_0       0.6      0.989        0.991 0.619              1.46
25 mu_0       0.7      0.981        0.983 0.569              1.39
26 mu_0       0.8      0.991        0.968 0.402              1.62
27 mu_0       0.9      0.978        0.967 0.321              2.68
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.187     1.10e-26  1.07e-76     18.3 
 2 mu         0.2      0.482     1.12e-14  2.29e-52     32.5 
 3 mu         0.3      0.651     2.17e- 8  3.67e-38     12.1 
 4 mu         0.4      0.752     2.84e- 4  4.15e-28      8.67
 5 mu         0.5      0.900     1.47e- 2  2.45e-20      6.75
 6 mu         0.6      0.911     2.74e- 1  5.08e-14      7.49
 7 mu         0.7      1.27      1.35e- 1  8.91e-17     12.1 
 8 mu         0.8      1.06      3.26e- 2  1.05e-25     12.0 
 9 mu         0.9      0.846     7.37e- 7  8.80e-44     17.8 
10 mu_1       0.1      0.294     6.88e-26  1.05e-75     28.7 
11 mu_1       0.2      0.443     3.78e-14  1.13e-51     25.4 
12 mu_1       0.3      0.684     5.00e- 8  1.21e-37     13.2 
13 mu_1       0.4      0.755     4.65e- 4  1.03e-27      8.88
14 mu_1       0.5      0.915     1.82e- 2  4.84e-20      6.70
15 mu_1       0.6      0.909     2.97e- 1  8.36e-14      7.73
16 mu_1       0.7      1.29      1.05e- 1  1.99e-17     12.1 
17 mu_1       0.8      1.04      2.65e- 2  2.05e-26     11.5 
18 mu_1       0.9      0.857     5.61e- 7  2.96e-44     17.8 
19 mu_0       0.1      0.175     4.53e-27  1.44e-78     17.2 
20 mu_0       0.2      0.491     4.77e-15  3.49e-54     34.2 
21 mu_0       0.3      0.637     9.57e- 9  6.40e-40     11.7 
22 mu_0       0.4      0.750     1.63e- 4  8.44e-30      8.70
23 mu_0       0.5      0.885     9.67e- 3  5.97e-22      7.16
24 mu_0       0.6      0.916     2.17e- 1  1.55e-15      7.94
25 mu_0       0.7      1.23      1.59e- 1  2.51e-16     12.1 
26 mu_0       0.8      1.14      2.99e- 2  4.43e-25     14.0 
27 mu_0       0.9      0.750     2.32e- 6  6.13e-43     17.3 
[1] "Total run time was 411.296 seconds"
