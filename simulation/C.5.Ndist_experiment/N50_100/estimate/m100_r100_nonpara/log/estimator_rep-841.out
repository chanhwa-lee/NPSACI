
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7598"
[1] "cluster size dist'n: "

 51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  2   2   3   2   1   1   2   2   1   2   1   1   3   2   1   2   2   2   3   3 
 72  73  74  75  76  77  78  79  80  81  82  84  85  86  87  88  89  91  92  95 
  2   2   6   4   1   3   3   3   1   2   2   2   2   3   2   2   2   3   2   5 
 96  97  98  99 100 
  3   2   1   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04952 0.40863 0.64891 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4628 2970 
[1] "treatment indicator table: "

   0    1 
2500 5098 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3904
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3694
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 413.192 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.332 0.0718
 2 mu         0.1   0.2 0.452 0.0798
 3 mu         0.1   0.3 0.512 0.0896
 4 mu         0.1   0.4 0.565 0.0999
 5 mu         0.1   0.5 0.604 0.105 
 6 mu         0.2   0.1 0.303 0.0408
 7 mu         0.2   0.2 0.400 0.0448
 8 mu         0.2   0.3 0.455 0.0463
 9 mu         0.2   0.4 0.515 0.0563
10 mu         0.2   0.5 0.552 0.0562
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.13         0.204 0.0000000519      8.90
 2 mu         0.2      1.01         0.844 0.0110            5.02
 3 mu         0.3      0.991        0.943 0.103             2.48
 4 mu         0.4      1.01         0.978 0.366             1.98
 5 mu         0.5      0.998        0.968 0.492             1.53
 6 mu         0.6      0.991        0.974 0.559             1.38
 7 mu         0.7      0.985        0.982 0.633             1.45
 8 mu         0.8      1.04         1.03  0.579             1.93
 9 mu         0.9      1.03         0.980 0.305             2.03
10 mu_1       0.1      1.01         0.348 0.000000157       6.95
11 mu_1       0.2      1.01         0.805 0.0168            5.08
12 mu_1       0.3      0.992        0.971 0.0877            2.35
13 mu_1       0.4      1.01         0.986 0.433             2.01
14 mu_1       0.5      0.999        0.963 0.483             1.55
15 mu_1       0.6      0.990        0.981 0.562             1.40
16 mu_1       0.7      0.987        0.974 0.640             1.46
17 mu_1       0.8      1.05         1.02  0.583             1.93
18 mu_1       0.9      1.02         0.971 0.291             2.04
19 mu_0       0.1      1.14         0.187 0.0000000402      9.26
20 mu_0       0.2      1.01         0.852 0.00955           5.00
21 mu_0       0.3      0.991        0.934 0.108             2.53
22 mu_0       0.4      1.01         0.972 0.320             1.96
23 mu_0       0.5      0.998        0.975 0.502             1.54
24 mu_0       0.6      0.993        0.980 0.554             1.35
25 mu_0       0.7      0.981        0.977 0.617             1.41
26 mu_0       0.8      1.04         1.03  0.566             1.95
27 mu_0       0.9      1.06         1.05  0.432             1.90
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000209     1.58e-29  1.32e-82    0.0131
 2 mu         0.2   0.366        8.02e-17  3.63e-55   21.2   
 3 mu         0.3   1.26         7.21e-10  2.95e-39   45.5   
 4 mu         0.4   0.930        3.73e- 5  4.26e-28   20.0   
 5 mu         0.5   0.861        8.54e- 3  1.41e-19    8.98  
 6 mu         0.6   0.934        2.04e- 1  8.90e-13    6.30  
 7 mu         0.7   1.24         4.03e- 1  3.31e-14   10.2   
 8 mu         0.8   1.23         2.90e- 1  9.90e-24   10.0   
 9 mu         0.9   1.28         2.80e- 4  5.09e-41   21.1   
10 mu_1       0.1   0.000549     1.10e-28  1.25e-81    0.0350
11 mu_1       0.2   0.490        2.96e-16  1.72e-54   28.2   
12 mu_1       0.3   1.25         1.68e- 9  9.33e-39   40.4   
13 mu_1       0.4   0.922        6.40e- 5  1.01e-27   20.9   
14 mu_1       0.5   0.857        8.87e- 3  2.68e-19    8.03  
15 mu_1       0.6   0.944        1.66e- 1  1.41e-12    5.78  
16 mu_1       0.7   1.25         4.12e- 1  1.21e-14   10.0   
17 mu_1       0.8   1.22         2.88e- 1  3.17e-24    9.80  
18 mu_1       0.9   1.28         2.22e- 4  1.45e-41   21.5   
19 mu_0       0.1   0.000171     5.27e-30  7.56e-84    0.0107
20 mu_0       0.2   0.336        2.63e-17  2.34e-56   19.4   
21 mu_0       0.3   1.26         3.08e-10  2.17e-40   47.6   
22 mu_0       0.4   0.935        1.95e- 5  3.66e-29   19.5   
23 mu_0       0.5   0.866        6.47e- 3  1.45e-20   10.5   
24 mu_0       0.6   0.920        1.55e- 1  1.15e-13    7.16  
25 mu_0       0.7   1.20         3.01e- 1  8.20e-14   10.7   
26 mu_0       0.8   1.28         3.56e- 1  3.68e-23   10.8   
27 mu_0       0.9   1.24         8.02e- 4  3.79e-40   17.8   
[1] "Total run time was 416.664 seconds"
