
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7354"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  3   1   1   1   5   3   3   2   1   3   2   5   2   4   2   1   1   2   1   5 
 71  73  74  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93 
  1   1   3   1   1   2   5   3   1   3   1   4   2   1   1   3   2   3   4   1 
 94  95  96  97 100 
  1   1   4   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02314 0.31546 0.59201 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4412 2942 
[1] "treatment indicator table: "

   0    1 
2846 4508 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3683
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3671
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 405.423 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.453 0.0885
 2 mu         0.1   0.2 0.521 0.0808
 3 mu         0.1   0.3 0.599 0.0844
 4 mu         0.1   0.4 0.675 0.0986
 5 mu         0.1   0.5 0.701 0.0998
 6 mu         0.2   0.1 0.351 0.0433
 7 mu         0.2   0.2 0.395 0.0284
 8 mu         0.2   0.3 0.456 0.0276
 9 mu         0.2   0.4 0.510 0.0355
10 mu         0.2   0.5 0.528 0.0349
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.24         0.735  0.000292      7.98
 2 mu         0.2      0.979        0.957  0.135         2.89
 3 mu         0.3      1.02         1.01   0.395         1.78
 4 mu         0.4      1.03         0.950  0.531         2.36
 5 mu         0.5      1.03         1.02   0.493         1.86
 6 mu         0.6      0.991        0.983  0.485         1.66
 7 mu         0.7      0.994        0.952  0.481         1.50
 8 mu         0.8      1.00         1.02   0.387         1.60
 9 mu         0.9      1.01         0.994  0.233         2.37
10 mu_1       0.1      1.23         0.741  0.000759      7.01
11 mu_1       0.2      0.974        0.949  0.144         2.76
12 mu_1       0.3      1.03         1.03   0.380         1.71
13 mu_1       0.4      1.03         0.974  0.544         2.45
14 mu_1       0.5      1.03         1.02   0.495         1.82
15 mu_1       0.6      0.991        0.990  0.506         1.60
16 mu_1       0.7      0.994        0.949  0.475         1.48
17 mu_1       0.8      1.00         1.01   0.382         1.60
18 mu_1       0.9      1.01         0.993  0.221         2.41
19 mu_0       0.1      1.24         0.703  0.000240      8.09
20 mu_0       0.2      0.980        0.965  0.123         2.92
21 mu_0       0.3      1.02         1.01   0.377         1.81
22 mu_0       0.4      1.03         0.963  0.522         2.29
23 mu_0       0.5      1.04         1.02   0.491         1.89
24 mu_0       0.6      0.991        0.986  0.454         1.74
25 mu_0       0.7      0.994        0.961  0.495         1.54
26 mu_0       0.8      1.00         1.00   0.409         1.61
27 mu_0       0.9      1.01         0.958  0.340         1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.190     1.18e-26  9.97e-76     15.3 
 2 mu         0.2      0.902     2.67e-14  1.20e-49     46.3 
 3 mu         0.3      0.948     7.55e- 8  1.29e-34     22.5 
 4 mu         0.4      1.25      7.08e- 4  3.72e-24     21.8 
 5 mu         0.5      1.22      2.80e- 2  2.92e-16     14.8 
 6 mu         0.6      1.01      1.96e- 1  1.47e-12      6.89
 7 mu         0.7      1.10      1.23e- 1  7.20e-20      6.45
 8 mu         0.8      1.45      1.62e- 2  1.11e-30     16.1 
 9 mu         0.9      2.23      1.16e- 8  7.86e-50     77.4 
10 mu_1       0.1      0.285     6.95e-26  9.14e-75     21.8 
11 mu_1       0.2      0.930     8.59e-14  5.51e-49     53.0 
12 mu_1       0.3      0.957     1.66e- 7  3.96e-34     17.1 
13 mu_1       0.4      1.28      9.10e- 4  8.54e-24     22.1 
14 mu_1       0.5      1.21      2.14e- 2  5.36e-16     15.6 
15 mu_1       0.6      1.00      2.02e- 1  4.28e-13      6.99
16 mu_1       0.7      1.11      1.51e- 1  1.80e-20      6.88
17 mu_1       0.8      1.45      1.32e- 2  2.44e-31     15.9 
18 mu_1       0.9      2.26      7.80e- 9  1.53e-50     79.7 
19 mu_0       0.1      0.179     5.15e-27  9.23e-77     14.6 
20 mu_0       0.2      0.895     1.19e-14  1.25e-50     44.7 
21 mu_0       0.3      0.944     3.66e- 8  1.54e-35     24.8 
22 mu_0       0.4      1.23      3.93e- 4  5.17e-25     21.7 
23 mu_0       0.5      1.23      3.13e- 2  4.87e-17     14.1 
24 mu_0       0.6      1.02      1.58e- 1  3.02e-12      7.73
25 mu_0       0.7      1.07      1.21e- 1  1.98e-19      5.46
26 mu_0       0.8      1.42      2.63e- 2  4.60e-30     16.8 
27 mu_0       0.9      1.98      4.53e- 8  6.48e-49     56.3 
[1] "Total run time was 408.623 seconds"
