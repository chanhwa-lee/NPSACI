
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7802"
[1] "cluster size dist'n: "

 50  51  53  54  55  58  60  61  62  63  64  65  66  67  68  69  70  71  72  73 
  4   2   2   2   2   1   1   1   2   1   2   4   1   1   1   3   2   3   1   2 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  94 
  2   3   1   1   1   2   3   3   2   2   3   2   1   1   3   6   2   3   2   3 
 95  96  97  98  99 100 
  5   2   1   3   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0241  0.2997  0.5709  0.9579  7.0000 
[1] "event indicator table: "

   0    1 
4466 3336 
[1] "treatment indicator table: "

   0    1 
3120 4682 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3939
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3863
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 410.725 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.384 0.0749
 2 mu         0.1   0.2 0.479 0.0911
 3 mu         0.1   0.3 0.566 0.110 
 4 mu         0.1   0.4 0.630 0.124 
 5 mu         0.1   0.5 0.655 0.126 
 6 mu         0.2   0.1 0.378 0.0410
 7 mu         0.2   0.2 0.487 0.0470
 8 mu         0.2   0.3 0.578 0.0595
 9 mu         0.2   0.4 0.643 0.0687
10 mu         0.2   0.5 0.677 0.0659
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.887        0.134 0.000000278     11.0 
 2 mu         0.2      0.956        0.894 0.0218           2.69
 3 mu         0.3      0.938        0.929 0.334            2.14
 4 mu         0.4      1.00         0.999 0.478            1.66
 5 mu         0.5      1.02         1.01  0.627            1.45
 6 mu         0.6      1.01         0.982 0.701            1.49
 7 mu         0.7      0.983        1.01  0.550            1.38
 8 mu         0.8      0.979        0.934 0.485            1.97
 9 mu         0.9      1.04         0.899 0.0929           2.97
10 mu_1       0.1      0.914        0.237 0.000000833      9.71
11 mu_1       0.2      0.960        0.866 0.0340           2.52
12 mu_1       0.3      0.936        0.915 0.324            2.15
13 mu_1       0.4      1.01         0.989 0.525            1.69
14 mu_1       0.5      1.02         1.00  0.627            1.48
15 mu_1       0.6      1.01         0.980 0.675            1.47
16 mu_1       0.7      0.982        0.997 0.545            1.40
17 mu_1       0.8      0.980        0.927 0.481            2.00
18 mu_1       0.9      1.04         0.891 0.0855           3.03
19 mu_0       0.1      0.884        0.122 0.000000216     11.1 
20 mu_0       0.2      0.954        0.865 0.0187           2.80
21 mu_0       0.3      0.939        0.926 0.324            2.14
22 mu_0       0.4      0.998        0.999 0.447            1.63
23 mu_0       0.5      1.02         1.00  0.628            1.43
24 mu_0       0.6      1.01         0.982 0.694            1.53
25 mu_0       0.7      0.985        1.02  0.553            1.38
26 mu_0       0.8      0.977        0.959 0.500            1.89
27 mu_0       0.9      1.02         0.915 0.154            2.40
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.107      1.45e-23  1.47e-78      9.96
 2 mu         0.2     1.62       8.32e-12  1.42e-52    109.  
 3 mu         0.3     0.685      6.35e- 6  1.74e-37     21.0 
 4 mu         0.4     0.896      8.30e- 3  6.95e-27     10.8 
 5 mu         0.5     1.17       1.98e- 1  9.05e-19      9.08
 6 mu         0.6     1.05       2.78e- 1  2.87e-12      6.60
 7 mu         0.7     1.06       1.87e- 1  1.70e-19      8.76
 8 mu         0.8     1.11       1.64e- 3  1.34e-30     15.5 
 9 mu         0.9     1.69       3.02e-10  2.65e-50     51.5 
10 mu_1       0.1     0.198      8.23e-23  1.41e-77     18.0 
11 mu_1       0.2     1.60       2.34e-11  6.79e-52     98.1 
12 mu_1       0.3     0.638      1.26e- 5  5.54e-37     17.9 
13 mu_1       0.4     0.941      9.85e- 3  1.66e-26     10.8 
14 mu_1       0.5     1.16       2.36e- 1  1.73e-18      9.80
15 mu_1       0.6     1.05       2.51e- 1  1.59e-12      7.00
16 mu_1       0.7     1.05       1.57e- 1  4.39e-20      8.39
17 mu_1       0.8     1.12       1.25e- 3  3.02e-31     15.8 
18 mu_1       0.9     1.68       2.17e-10  5.33e-51     51.3 
19 mu_0       0.1     0.0974     6.95e-24  7.18e-80      9.07
20 mu_0       0.2     1.63       4.55e-12  7.80e-54    111.  
21 mu_0       0.3     0.705      3.69e- 6  1.09e-38     23.2 
22 mu_0       0.4     0.866      5.26e- 3  5.09e-28     10.8 
23 mu_0       0.5     1.17       1.42e- 1  7.96e-20      8.98
24 mu_0       0.6     1.04       3.47e- 1  3.15e-13      7.03
25 mu_0       0.7     1.07       1.33e- 1  4.64e-19      9.62
26 mu_0       0.8     1.08       2.85e- 3  5.48e-30     14.6 
27 mu_0       0.9     1.76       1.06e- 9  2.17e-49     52.6 
[1] "Total run time was 413.963 seconds"
