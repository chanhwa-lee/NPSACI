
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7541"
[1] "cluster size dist'n: "

 50  51  52  53  55  57  58  59  60  61  63  64  66  67  68  69  70  71  72  73 
  1   1   4   3   2   1   3   4   2   3   2   2   3   2   1   3   3   4   1   1 
 74  75  76  77  78  80  82  83  84  85  86  87  88  89  90  91  92  93  94  96 
  2   1   1   5   5   3   3   2   2   3   1   1   3   1   1   1   1   3   1   2 
 97  98  99 100 
  5   2   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02627 0.32940 0.59339 1.00000 6.51521 
[1] "event indicator table: "

   0    1 
4479 3062 
[1] "treatment indicator table: "

   0    1 
2959 4582 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3698
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3843
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 439.76 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.441 0.102 
 2 mu         0.1   0.2 0.535 0.116 
 3 mu         0.1   0.3 0.579 0.116 
 4 mu         0.1   0.4 0.582 0.105 
 5 mu         0.1   0.5 0.596 0.0995
 6 mu         0.2   0.1 0.386 0.0748
 7 mu         0.2   0.2 0.496 0.0769
 8 mu         0.2   0.3 0.554 0.0814
 9 mu         0.2   0.4 0.562 0.0682
10 mu         0.2   0.5 0.595 0.0635
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.864       0.0772 0.00000000877      5.66
 2 mu         0.2      0.987       0.899  0.00866            3.91
 3 mu         0.3      0.969       0.940  0.325              1.84
 4 mu         0.4      1.01        0.988  0.530              1.47
 5 mu         0.5      1.01        1.02   0.683              1.35
 6 mu         0.6      0.993       0.980  0.625              1.56
 7 mu         0.7      0.991       0.994  0.685              1.32
 8 mu         0.8      0.977       0.981  0.472              1.62
 9 mu         0.9      1.03        0.956  0.0628             2.71
10 mu_1       0.1      0.886       0.145  0.0000000281       6.65
11 mu_1       0.2      0.985       0.932  0.0139             3.96
12 mu_1       0.3      0.972       0.933  0.334              1.82
13 mu_1       0.4      1.01        0.990  0.556              1.47
14 mu_1       0.5      1.01        1.02   0.645              1.33
15 mu_1       0.6      0.992       0.981  0.641              1.56
16 mu_1       0.7      0.991       0.995  0.687              1.31
17 mu_1       0.8      0.976       0.975  0.457              1.62
18 mu_1       0.9      1.04        0.960  0.0574             2.84
19 mu_0       0.1      0.862       0.0701 0.00000000663      5.55
20 mu_0       0.2      0.987       0.885  0.00734            3.90
21 mu_0       0.3      0.968       0.931  0.322              1.88
22 mu_0       0.4      1.01        1.00   0.512              1.48
23 mu_0       0.5      1.01        1.01   0.671              1.38
24 mu_0       0.6      0.993       0.968  0.602              1.55
25 mu_0       0.7      0.990       0.977  0.678              1.33
26 mu_0       0.8      0.981       0.979  0.530              1.61
27 mu_0       0.9      0.999       0.974  0.112              2.33
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     20.4       1.13e-24  4.02e-75   2038.  
 2 mu         0.2      0.948     2.86e-12  1.53e-48     37.0 
 3 mu         0.3      0.774     3.13e- 6  2.84e-33     18.6 
 4 mu         0.4      0.895     5.81e- 3  1.07e-22     11.5 
 5 mu         0.5      1.45      2.81e- 1  9.10e-15     16.2 
 6 mu         0.6      1.52      4.21e- 1  4.71e-21     24.3 
 7 mu         0.7      0.980     1.56e- 1  2.54e-31      7.82
 8 mu         0.8      1.29      8.52e- 3  4.05e-46     12.7 
 9 mu         0.9      3.12      1.70e- 8  7.56e-72    107.  
10 mu_1       0.1     19.1       6.67e-24  3.62e-74   1910.  
11 mu_1       0.2      0.880     8.83e-12  6.90e-48     28.6 
12 mu_1       0.3      0.734     6.35e- 6  8.53e-33     15.8 
13 mu_1       0.4      0.933     9.16e- 3  2.40e-22     11.1 
14 mu_1       0.5      1.48      3.18e- 1  1.64e-14     15.2 
15 mu_1       0.6      1.50      3.45e- 1  7.35e-22     23.3 
16 mu_1       0.7      0.966     1.72e- 1  3.41e-32      7.38
17 mu_1       0.8      1.33      6.63e- 3  4.75e-47     13.6 
18 mu_1       0.9      3.12      1.16e- 8  7.87e-73    110.  
19 mu_0       0.1     20.5       5.16e-25  4.47e-76   2052.  
20 mu_0       0.2      0.966     1.37e-12  1.92e-49     41.9 
21 mu_0       0.3      0.791     1.75e- 6  4.06e-34     19.8 
22 mu_0       0.4      0.869     3.43e- 3  1.78e-23     12.2 
23 mu_0       0.5      1.41      2.09e- 1  1.82e-15     17.1 
24 mu_0       0.6      1.54      4.02e- 1  1.07e-20     25.9 
25 mu_0       0.7      1.01      1.74e- 1  7.68e-31      8.85
26 mu_0       0.8      1.15      1.61e- 2  1.84e-45      9.23
27 mu_0       0.9      3.18      6.52e- 8  6.85e-71     87.9 
[1] "Total run time was 443.479 seconds"
