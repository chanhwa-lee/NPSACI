
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7648"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  58  59  60  62  63  64  65  66  67  68  69  70  71  72 
  2   2   2   3   1   2   1   2   2   2   2   1   4   2   2   1   1   5   2   2 
 73  74  75  77  78  79  80  81  83  84  85  86  87  88  89  90  92  93  94  95 
  3   2   2   1   5   1   1   1   2   4   2   3   1   2   5   5   4   5   2   3 
 96  97  99 100 
  1   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03976 0.35646 0.61896 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4595 3053 
[1] "treatment indicator table: "

   0    1 
2890 4758 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3792
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3856
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 391.573 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.377 0.0781
 2 mu         0.1   0.2 0.439 0.0852
 3 mu         0.1   0.3 0.525 0.104 
 4 mu         0.1   0.4 0.611 0.122 
 5 mu         0.1   0.5 0.639 0.124 
 6 mu         0.2   0.1 0.292 0.0495
 7 mu         0.2   0.2 0.363 0.0466
 8 mu         0.2   0.3 0.431 0.0588
 9 mu         0.2   0.4 0.512 0.0635
10 mu         0.2   0.5 0.550 0.0583
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.979        0.162 0.00000167     12.8 
 2 mu         0.2      0.958        0.890 0.0360          3.00
 3 mu         0.3      1.04         1.02  0.321           2.19
 4 mu         0.4      1.02         1.01  0.502           1.80
 5 mu         0.5      0.996        0.993 0.519           1.47
 6 mu         0.6      0.995        0.986 0.550           1.45
 7 mu         0.7      0.998        0.990 0.649           1.69
 8 mu         0.8      0.991        0.954 0.515           1.69
 9 mu         0.9      1.07         1.05  0.178           2.22
10 mu_1       0.1      0.964        0.263 0.00000470      9.50
11 mu_1       0.2      0.971        0.905 0.0523          2.95
12 mu_1       0.3      1.04         1.01  0.374           2.23
13 mu_1       0.4      1.02         1.01  0.504           1.74
14 mu_1       0.5      0.995        0.994 0.506           1.44
15 mu_1       0.6      0.996        0.992 0.562           1.43
16 mu_1       0.7      0.997        0.992 0.634           1.70
17 mu_1       0.8      0.991        0.956 0.511           1.69
18 mu_1       0.9      1.08         1.06  0.166           2.24
19 mu_0       0.1      0.981        0.151 0.00000133     13.1 
20 mu_0       0.2      0.955        0.884 0.0320          3.01
21 mu_0       0.3      1.04         1.02  0.299           2.18
22 mu_0       0.4      1.02         1.00  0.501           1.84
23 mu_0       0.5      0.998        0.998 0.533           1.50
24 mu_0       0.6      0.992        0.982 0.533           1.48
25 mu_0       0.7      1.00         0.988 0.625           1.67
26 mu_0       0.8      0.989        0.956 0.531           1.65
27 mu_0       0.9      1.05         1.03  0.289           2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.826     8.48e-29  2.67e-64     82.5 
 2 mu         0.2      0.293     1.04e-14  1.24e-40     12.5 
 3 mu         0.3      0.891     8.25e- 8  3.51e-27     14.7 
 4 mu         0.4      1.08      7.87e- 4  6.88e-19     14.9 
 5 mu         0.5      0.998     5.27e- 2  8.96e-13     15.1 
 6 mu         0.6      1.12      1.43e- 1  4.16e-16     16.2 
 7 mu         0.7      0.929     1.89e- 1  3.99e-24      5.65
 8 mu         0.8      1.19      1.51e- 2  9.39e-36      7.80
 9 mu         0.9      1.11      4.09e- 8  4.59e-56     24.8 
10 mu_1       0.1      0.954     4.86e-28  2.28e-63     95.2 
11 mu_1       0.2      0.304     3.13e-14  5.29e-40      7.58
12 mu_1       0.3      0.942     1.76e- 7  9.97e-27     15.4 
13 mu_1       0.4      1.07      1.26e- 3  1.58e-18     16.8 
14 mu_1       0.5      0.992     6.17e- 2  1.65e-12     13.6 
15 mu_1       0.6      1.13      1.78e- 1  8.01e-17     16.5 
16 mu_1       0.7      0.920     1.91e- 1  6.58e-25      5.54
17 mu_1       0.8      1.20      1.19e- 2  1.35e-36      8.22
18 mu_1       0.9      1.11      2.78e- 8  5.89e-57     24.9 
19 mu_0       0.1      0.812     4.02e-29  4.37e-65     81.1 
20 mu_0       0.2      0.290     5.14e-15  2.29e-41     13.8 
21 mu_0       0.3      0.869     4.23e- 8  6.42e-28     15.0 
22 mu_0       0.4      1.08      4.64e- 4  9.30e-20     14.1 
23 mu_0       0.5      1.00      3.73e- 2  1.28e-13     16.7 
24 mu_0       0.6      1.10      1.06e- 1  9.21e-16     15.7 
25 mu_0       0.7      0.947     1.59e- 1  1.18e-23      5.92
26 mu_0       0.8      1.15      2.79e- 2  4.15e-35      7.61
27 mu_0       0.9      1.12      1.60e- 7  4.06e-55     23.8 
[1] "Total run time was 394.704 seconds"
