
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7565"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  62  64  65  67  69  70  71  73  74  75  76 
  4   5   3   3   2   1   2   2   2   1   5   2   2   4   2   2   1   1   1   3 
 77  79  80  81  82  83  84  85  86  87  88  89  90  92  93  94  95  98  99 100 
  1   2   3   5   1   1   6   2   1   1   2   2   1   4   5   2   5   2   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04572 0.38070 0.64377 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4471 3094 
[1] "treatment indicator table: "

   0    1 
2652 4913 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3916
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3649
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 411.064 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.570 0.123 
 2 mu         0.1   0.2 0.690 0.152 
 3 mu         0.1   0.3 0.759 0.174 
 4 mu         0.1   0.4 0.850 0.192 
 5 mu         0.1   0.5 0.903 0.210 
 6 mu         0.2   0.1 0.432 0.0793
 7 mu         0.2   0.2 0.515 0.0901
 8 mu         0.2   0.3 0.562 0.0985
 9 mu         0.2   0.4 0.637 0.107 
10 mu         0.2   0.5 0.672 0.116 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.38         0.315 0.00000136     25.7 
 2 mu         0.2      1.03         0.833 0.0349          4.53
 3 mu         0.3      0.951        0.861 0.321           2.38
 4 mu         0.4      1.05         1.00  0.513           1.94
 5 mu         0.5      0.995        0.952 0.648           1.75
 6 mu         0.6      0.988        0.990 0.626           1.36
 7 mu         0.7      0.985        0.985 0.607           1.61
 8 mu         0.8      0.975        0.942 0.451           1.49
 9 mu         0.9      0.891        0.887 0.246           1.66
10 mu_1       0.1      1.38         0.488 0.00000372     24.3 
11 mu_1       0.2      1.00         0.839 0.0531          3.88
12 mu_1       0.3      0.964        0.903 0.354           2.57
13 mu_1       0.4      1.05         1.01  0.535           1.98
14 mu_1       0.5      0.992        0.954 0.669           1.73
15 mu_1       0.6      0.988        0.992 0.630           1.35
16 mu_1       0.7      0.986        0.985 0.606           1.62
17 mu_1       0.8      0.973        0.941 0.445           1.50
18 mu_1       0.9      0.890        0.882 0.234           1.68
19 mu_0       0.1      1.38         0.296 0.00000110     25.9 
20 mu_0       0.2      1.04         0.833 0.0289          4.69
21 mu_0       0.3      0.946        0.852 0.307           2.31
22 mu_0       0.4      1.05         0.994 0.491           1.98
23 mu_0       0.5      0.997        0.946 0.617           1.79
24 mu_0       0.6      0.987        0.994 0.621           1.38
25 mu_0       0.7      0.982        0.980 0.578           1.59
26 mu_0       0.8      0.984        0.959 0.473           1.46
27 mu_0       0.9      0.902        0.914 0.354           1.63
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.590     6.34e-30  2.28e-87     59.0 
 2 mu         0.2      0.959     5.40e-16  1.79e-59     92.8 
 3 mu         0.3      0.359     1.01e- 8  3.26e-43      8.36
 4 mu         0.4      0.931     2.82e- 4  9.95e-32     19.0 
 5 mu         0.5      1.44      3.73e- 2  7.12e-23     17.6 
 6 mu         0.6      1.12      2.55e- 1  1.05e-15      7.36
 7 mu         0.7      1.20      2.91e- 1  9.55e-17     10.4 
 8 mu         0.8      1.33      4.89e- 2  7.50e-26     13.3 
 9 mu         0.9      0.900     2.69e- 6  6.76e-42     16.3 
10 mu_1       0.1      0.907     4.23e-29  2.24e-86     90.7 
11 mu_1       0.2      0.760     1.67e-15  8.75e-59     71.4 
12 mu_1       0.3      0.391     2.15e- 8  1.06e-42      8.59
13 mu_1       0.4      0.996     4.55e- 4  2.44e-31     21.2 
14 mu_1       0.5      1.44      3.60e- 2  1.39e-22     17.4 
15 mu_1       0.6      1.10      2.92e- 1  1.72e-15      7.50
16 mu_1       0.7      1.22      2.91e- 1  2.10e-17      9.99
17 mu_1       0.8      1.32      4.54e- 2  1.44e-26     14.0 
18 mu_1       0.9      0.895     2.05e- 6  1.16e-42     16.1 
19 mu_0       0.1      0.554     2.34e-30  5.34e-89     55.4 
20 mu_0       0.2      1.01      2.58e-16  4.70e-61     98.2 
21 mu_0       0.3      0.346     5.22e- 9  9.79e-45      8.50
22 mu_0       0.4      0.888     1.70e- 4  3.49e-33     17.5 
23 mu_0       0.5      1.45      3.87e- 2  3.00e-24     19.2 
24 mu_0       0.6      1.14      2.13e- 1  5.54e-17      7.16
25 mu_0       0.7      1.17      3.02e- 1  2.69e-16     11.4 
26 mu_0       0.8      1.37      8.68e- 2  3.17e-25     11.3 
27 mu_0       0.9      0.948     8.44e- 6  5.72e-41     18.1 
[1] "Total run time was 414.351 seconds"
