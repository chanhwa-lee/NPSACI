
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7672"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  58  59  63  64  65  66  67  68  69  70  71  73  74  75 
  3   3   1   4   2   1   1   6   2   4   2   4   1   1   3   2   1   1   3   2 
 76  77  78  79  80  81  82  85  86  87  88  89  90  91  92  93  94  95  96  97 
  3   1   2   2   1   2   3   2   1   1   3   3   1   1   4   4   2   4   4   3 
 98  99 100 
  1   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05813 0.42027 0.68412 1.00000 5.72369 
[1] "event indicator table: "

   0    1 
4588 3084 
[1] "treatment indicator table: "

   0    1 
2562 5110 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3838
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3834
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 408.174 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.395 0.107 
 2 mu         0.1   0.2 0.441 0.121 
 3 mu         0.1   0.3 0.474 0.133 
 4 mu         0.1   0.4 0.528 0.149 
 5 mu         0.1   0.5 0.573 0.157 
 6 mu         0.2   0.1 0.432 0.0584
 7 mu         0.2   0.2 0.498 0.0588
 8 mu         0.2   0.3 0.548 0.0592
 9 mu         0.2   0.4 0.611 0.0711
10 mu         0.2   0.5 0.669 0.0693
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.906       0.0252  4.36e-10     14.4 
 2 mu         0.2      1.17        0.918   1.33e- 3      8.41
 3 mu         0.3      1.14        1.11    2.10e- 1      2.79
 4 mu         0.4      1.05        1.00    5.43e- 1      1.80
 5 mu         0.5      0.983       0.986   4.80e- 1      1.61
 6 mu         0.6      0.976       0.956   6.02e- 1      1.47
 7 mu         0.7      0.992       0.987   6.34e- 1      1.36
 8 mu         0.8      0.995       0.981   6.22e- 1      1.59
 9 mu         0.9      1.00        0.943   2.12e- 1      2.16
10 mu_1       0.1      1.01        0.0492  1.46e- 9     15.6 
11 mu_1       0.2      1.18        0.963   2.31e- 3      7.28
12 mu_1       0.3      1.13        1.06    2.58e- 1      2.72
13 mu_1       0.4      1.05        0.996   5.50e- 1      1.86
14 mu_1       0.5      0.980       0.980   4.82e- 1      1.59
15 mu_1       0.6      0.977       0.964   5.91e- 1      1.46
16 mu_1       0.7      0.992       0.983   6.48e- 1      1.34
17 mu_1       0.8      0.996       0.978   6.27e- 1      1.59
18 mu_1       0.9      1.00        0.942   2.07e- 1      2.17
19 mu_0       0.1      0.895       0.0227  3.22e-10     14.7 
20 mu_0       0.2      1.17        0.906   1.08e- 3      8.69
21 mu_0       0.3      1.15        1.10    1.89e- 1      2.82
22 mu_0       0.4      1.06        1.01    5.38e- 1      1.75
23 mu_0       0.5      0.985       0.985   4.77e- 1      1.63
24 mu_0       0.6      0.975       0.960   6.17e- 1      1.49
25 mu_0       0.7      0.991       0.983   6.00e- 1      1.39
26 mu_0       0.8      0.992       0.981   6.01e- 1      1.58
27 mu_0       0.9      1.02        0.989   2.61e- 1      2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.61      2.04e-30  1.43e-85    161.  
 2 mu         0.2      1.24      2.21e-17  9.91e-58    122.  
 3 mu         0.3      0.660     4.64e-10  1.58e-41     26.9 
 4 mu         0.4      1.08      3.04e- 5  4.14e-30     35.0 
 5 mu         0.5      1.15      1.51e- 2  2.47e-21     17.0 
 6 mu         0.6      1.21      2.38e- 1  6.84e-15      9.60
 7 mu         0.7      1.51      2.43e- 1  3.29e-23     19.4 
 8 mu         0.8      1.15      1.60e- 1  2.29e-35      7.35
 9 mu         0.9      1.21      8.07e- 6  9.95e-57     20.8 
10 mu_1       0.1      2.27      1.48e-29  1.38e-84    227.  
11 mu_1       0.2      0.892     8.16e-17  4.80e-57     85.8 
12 mu_1       0.3      0.755     1.02e- 9  5.10e-41     31.8 
13 mu_1       0.4      1.06      5.19e- 5  1.00e-29     31.1 
14 mu_1       0.5      1.17      2.02e- 2  4.78e-21     17.5 
15 mu_1       0.6      1.22      2.14e- 1  1.61e-15     10.3 
16 mu_1       0.7      1.51      2.00e- 1  6.64e-24     19.5 
17 mu_1       0.8      1.15      1.57e- 1  4.03e-36      7.83
18 mu_1       0.9      1.21      6.16e- 6  1.56e-57     21.3 
19 mu_0       0.1      1.54      6.28e-31  4.95e-87    154.  
20 mu_0       0.2      1.32      7.43e-18  3.87e-59    130.  
21 mu_0       0.3      0.620     2.26e-10  7.05e-43     24.7 
22 mu_0       0.4      1.10      1.58e- 5  2.16e-31     37.6 
23 mu_0       0.5      1.12      1.07e- 2  1.54e-22     16.5 
24 mu_0       0.6      1.20      2.85e- 1  2.28e-15      8.62
25 mu_0       0.7      1.52      3.14e- 1  9.43e-23     18.9 
26 mu_0       0.8      1.14      1.70e- 1  9.82e-35      7.82
27 mu_0       0.9      1.23      2.53e- 5  8.54e-56     16.3 
[1] "Total run time was 412.135 seconds"
