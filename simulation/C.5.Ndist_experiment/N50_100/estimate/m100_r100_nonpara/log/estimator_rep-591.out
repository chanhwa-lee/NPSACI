
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7498"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  65  67  68  69  70  71 
  2   2   2   4   2   3   1   4   1   4   1   4   2   2   1   4   1   1   1   1 
 72  73  74  75  76  77  78  80  81  82  83  84  85  86  87  88  89  90  93  94 
  1   2   3   1   1   3   1   1   2   2   1   3   4   3   4   2   2   2   4   2 
 95  96  97  98  99 100 
  2   3   2   1   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03358 0.32551 0.58582 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4417 3081 
[1] "treatment indicator table: "

   0    1 
3047 4451 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3824
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3674
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 414.724 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.325 0.0641
 2 mu         0.1   0.2 0.436 0.0790
 3 mu         0.1   0.3 0.549 0.0943
 4 mu         0.1   0.4 0.545 0.0887
 5 mu         0.1   0.5 0.584 0.0943
 6 mu         0.2   0.1 0.337 0.0470
 7 mu         0.2   0.2 0.462 0.0576
 8 mu         0.2   0.3 0.583 0.0748
 9 mu         0.2   0.4 0.591 0.0639
10 mu         0.2   0.5 0.634 0.0678
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.898        0.175  5.46e-11      8.21
 2 mu         0.2      1.06         0.791  1.04e- 3      6.22
 3 mu         0.3      0.983        0.903  2.07e- 1      2.55
 4 mu         0.4      0.989        0.986  5.31e- 1      1.77
 5 mu         0.5      0.992        1.01   5.51e- 1      1.44
 6 mu         0.6      1.00         1.00   6.06e- 1      1.45
 7 mu         0.7      1.00         0.983  6.67e- 1      1.59
 8 mu         0.8      1.00         0.980  4.39e- 1      1.94
 9 mu         0.9      0.968        0.954  1.04e- 1      2.11
10 mu_1       0.1      1.03         0.287  1.92e-10     11.6 
11 mu_1       0.2      1.02         0.809  1.83e- 3      4.74
12 mu_1       0.3      0.988        0.925  2.50e- 1      2.33
13 mu_1       0.4      0.989        0.970  5.61e- 1      1.69
14 mu_1       0.5      0.993        1.00   5.40e- 1      1.41
15 mu_1       0.6      1.00         1.01   6.23e- 1      1.42
16 mu_1       0.7      1.00         0.983  6.65e- 1      1.60
17 mu_1       0.8      1.00         0.974  4.43e- 1      1.95
18 mu_1       0.9      0.966        0.951  9.81e- 2      2.17
19 mu_0       0.1      0.884        0.173  3.94e-11      7.84
20 mu_0       0.2      1.07         0.791  8.37e- 4      6.68
21 mu_0       0.3      0.981        0.895  1.82e- 1      2.65
22 mu_0       0.4      0.989        0.983  5.12e- 1      1.83
23 mu_0       0.5      0.990        1.02   5.62e- 1      1.47
24 mu_0       0.6      1.00         1.00   5.82e- 1      1.48
25 mu_0       0.7      1.00         0.971  6.52e- 1      1.59
26 mu_0       0.8      1.00         0.972  4.24e- 1      1.93
27 mu_0       0.9      0.983        0.991  1.59e- 1      2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1       1.44     3.90e-24  1.19e-71     96.2 
 2 mu         0.2       7.16     7.68e-13  2.83e-46    425.  
 3 mu         0.3       1.76     1.19e- 6  1.04e-31     35.8 
 4 mu         0.4       1.18     3.64e- 3  1.23e-21     13.7 
 5 mu         0.5       1.34     1.06e- 1  4.29e-14     20.3 
 6 mu         0.6       1.08     3.32e- 1  5.06e-11     10.0 
 7 mu         0.7       1.11     1.98e- 1  1.03e-17      9.57
 8 mu         0.8       1.11     6.11e- 3  1.39e-27     10.4 
 9 mu         0.9       1.15     3.30e- 9  4.94e-45     39.5 
10 mu_1       0.1       2.48     2.44e-23  1.06e-70    165.  
11 mu_1       0.2       6.51     2.58e-12  1.27e-45    365.  
12 mu_1       0.3       1.52     2.56e- 6  3.09e-31     28.8 
13 mu_1       0.4       1.19     4.76e- 3  2.76e-21     13.6 
14 mu_1       0.5       1.35     1.16e- 1  7.69e-14     21.1 
15 mu_1       0.6       1.07     3.33e- 1  1.41e-11     10.9 
16 mu_1       0.7       1.11     1.94e- 1  2.44e-18      8.88
17 mu_1       0.8       1.12     4.81e- 3  2.89e-28     10.2 
18 mu_1       0.9       1.12     2.27e- 9  9.15e-46     39.3 
19 mu_0       0.1       1.32     1.63e-24  1.37e-72     88.6 
20 mu_0       0.2       7.33     3.14e-13  3.68e-47    440.  
21 mu_0       0.3       1.87     6.00e- 7  1.54e-32     38.7 
22 mu_0       0.4       1.17     2.48e- 3  2.14e-22     13.8 
23 mu_0       0.5       1.33     8.77e- 2  8.94e-15     19.5 
24 mu_0       0.6       1.10     2.82e- 1  1.05e-10     11.3 
25 mu_0       0.7       1.10     1.47e- 1  2.85e-17     11.2 
26 mu_0       0.8       1.06     1.08e- 2  5.78e-27     11.4 
27 mu_0       0.9       1.40     1.26e- 8  4.12e-44     41.1 
[1] "Total run time was 417.99 seconds"
