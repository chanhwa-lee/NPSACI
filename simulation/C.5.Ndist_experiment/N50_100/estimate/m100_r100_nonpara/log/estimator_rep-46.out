
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7567"
[1] "cluster size dist'n: "

 50  51  55  56  57  58  59  60  62  63  64  66  67  68  69  70  71  73  74  75 
  2   4   5   2   1   2   2   1   3   2   2   1   1   2   5   1   1   5   3   2 
 76  77  79  80  81  82  83  84  85  86  87  88  89  90  92  93  94  95  96  97 
  3   3   4   2   1   1   3   3   4   4   4   3   1   4   1   2   2   1   1   1 
 98  99 100 
  1   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0330  0.3447  0.6082  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4542 3025 
[1] "treatment indicator table: "

   0    1 
2776 4791 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3765
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 52"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 460.118 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.245 0.0585
 2 mu         0.1   0.2 0.291 0.0683
 3 mu         0.1   0.3 0.382 0.124 
 4 mu         0.1   0.4 0.405 0.121 
 5 mu         0.1   0.5 0.454 0.121 
 6 mu         0.2   0.1 0.319 0.0400
 7 mu         0.2   0.2 0.382 0.0407
 8 mu         0.2   0.3 0.492 0.0928
 9 mu         0.2   0.4 0.527 0.0876
10 mu         0.2   0.5 0.578 0.0885
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.684        0.184 0.00000233      5.32
 2 mu         0.2      0.914        0.843 0.0331          2.64
 3 mu         0.3      0.982        0.957 0.360           1.94
 4 mu         0.4      0.972        0.984 0.548           1.58
 5 mu         0.5      0.983        0.984 0.494           1.87
 6 mu         0.6      0.994        0.976 0.629           1.48
 7 mu         0.7      0.989        1.00  0.567           1.43
 8 mu         0.8      0.990        0.991 0.461           1.60
 9 mu         0.9      1.09         1.05  0.294           2.28
10 mu_1       0.1      0.734        0.288 0.00000657      4.31
11 mu_1       0.2      0.928        0.851 0.0479          2.59
12 mu_1       0.3      0.982        0.966 0.360           1.87
13 mu_1       0.4      0.973        0.966 0.562           1.60
14 mu_1       0.5      0.984        0.972 0.517           1.86
15 mu_1       0.6      0.994        0.973 0.636           1.50
16 mu_1       0.7      0.989        1.01  0.572           1.44
17 mu_1       0.8      0.991        0.996 0.459           1.60
18 mu_1       0.9      1.09         1.05  0.300           2.29
19 mu_0       0.1      0.678        0.172 0.00000186      5.63
20 mu_0       0.2      0.911        0.835 0.0294          2.65
21 mu_0       0.3      0.983        0.953 0.360           1.97
22 mu_0       0.4      0.972        0.984 0.538           1.58
23 mu_0       0.5      0.982        0.995 0.471           1.88
24 mu_0       0.6      0.993        0.978 0.617           1.47
25 mu_0       0.7      0.989        0.997 0.556           1.43
26 mu_0       0.8      0.984        0.995 0.469           1.57
27 mu_0       0.9      1.09         1.08  0.235           2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00303     4.50e-30  1.60e-77     0.201
 2 mu         0.2    0.473       2.44e-17  1.22e-52    16.5  
 3 mu         0.3    0.778       7.71e-10  3.86e-38    22.3  
 4 mu         0.4    0.714       3.59e- 5  6.65e-28    20.4  
 5 mu         0.5    0.892       9.32e- 3  5.10e-20     9.46 
 6 mu         0.6    1.20        1.18e- 1  1.22e-13    10.3  
 7 mu         0.7    1.42        2.79e- 1  1.13e-16    12.2  
 8 mu         0.8    1.29        8.45e- 2  5.87e-27    12.1  
 9 mu         0.9    1.06        3.80e- 6  1.68e-45    16.1  
10 mu_1       0.1    0.00672     3.42e-29  1.56e-76     0.437
11 mu_1       0.2    0.565       8.99e-17  5.97e-52    18.8  
12 mu_1       0.3    0.769       1.79e- 9  1.26e-37    20.6  
13 mu_1       0.4    0.714       6.06e- 5  1.62e-27    18.9  
14 mu_1       0.5    0.909       1.12e- 2  9.97e-20     8.96 
15 mu_1       0.6    1.22        1.44e- 1  1.98e-13    10.5  
16 mu_1       0.7    1.43        3.10e- 1  3.81e-17    12.1  
17 mu_1       0.8    1.28        7.06e- 2  1.73e-27    11.5  
18 mu_1       0.9    1.05        2.87e- 6  4.39e-46    16.2  
19 mu_0       0.1    0.00262     1.24e-30  4.18e-79     0.175
20 mu_0       0.2    0.450       7.99e-18  3.59e-54    15.9  
21 mu_0       0.3    0.782       3.36e-10  1.30e-39    23.1  
22 mu_0       0.4    0.714       2.02e- 5  2.61e-29    21.5  
23 mu_0       0.5    0.874       7.52e- 3  2.40e-21     9.97 
24 mu_0       0.6    1.18        1.27e- 1  7.17e-15     9.91 
25 mu_0       0.7    1.39        2.40e- 1  2.89e-16    12.7  
26 mu_0       0.8    1.33        1.00e- 1  2.24e-26    14.7  
27 mu_0       0.9    1.10        1.21e- 5  1.28e-44    18.4  
[1] "Total run time was 463.557 seconds"
