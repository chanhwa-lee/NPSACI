
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7470"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  70 
  4   1   2   1   2   5   1   2   6   1   2   2   2   2   1   1   1   3   1   2 
 71  72  73  74  77  78  80  81  82  84  85  86  87  88  89  92  93  94  95  97 
  1   4   2   4   3   1   4   1   3   1   4   4   1   2   1   4   1   2   1   2 
 98  99 100 
  3   3   6 
[1] "observed time summary: "
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
 0.00000  0.03845  0.34520  0.60786  1.00000 10.00000 
[1] "event indicator table: "

   0    1 
4430 3040 
[1] "treatment indicator table: "

   0    1 
2880 4590 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3690
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3780
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 346.735 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.293 0.0437
 2 mu         0.1   0.2 0.378 0.0580
 3 mu         0.1   0.3 0.457 0.0504
 4 mu         0.1   0.4 0.496 0.0602
 5 mu         0.1   0.5 0.582 0.0672
 6 mu         0.2   0.1 0.311 0.0314
 7 mu         0.2   0.2 0.439 0.0422
 8 mu         0.2   0.3 0.517 0.0557
 9 mu         0.2   0.4 0.568 0.0733
10 mu         0.2   0.5 0.598 0.0654
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.923  0.000463      4.28
 2 mu         0.2      1.05         1.04   0.175         2.57
 3 mu         0.3      1.02         0.997  0.445         1.86
 4 mu         0.4      0.980        0.945  0.576         1.90
 5 mu         0.5      1.04         1.02   0.623         1.56
 6 mu         0.6      1.04         1.05   0.628         2.01
 7 mu         0.7      1.00         0.978  0.443         1.64
 8 mu         0.8      0.989        0.992  0.496         1.86
 9 mu         0.9      1.01         0.987  0.216         2.01
10 mu_1       0.1      1.06         0.915  0.00108       3.62
11 mu_1       0.2      1.05         1.03   0.173         2.37
12 mu_1       0.3      1.01         0.999  0.438         1.82
13 mu_1       0.4      0.983        0.958  0.570         1.88
14 mu_1       0.5      1.04         1.02   0.628         1.53
15 mu_1       0.6      1.04         1.04   0.620         2.01
16 mu_1       0.7      1.00         0.986  0.441         1.65
17 mu_1       0.8      0.990        0.993  0.497         1.89
18 mu_1       0.9      1.01         0.989  0.201         2.00
19 mu_0       0.1      1.05         0.923  0.000395      4.35
20 mu_0       0.2      1.05         1.04   0.175         2.62
21 mu_0       0.3      1.02         0.996  0.442         1.88
22 mu_0       0.4      0.978        0.963  0.579         1.91
23 mu_0       0.5      1.03         1.02   0.599         1.59
24 mu_0       0.6      1.04         1.06   0.639         2.00
25 mu_0       0.7      1.01         0.989  0.446         1.63
26 mu_0       0.8      0.982        0.976  0.492         1.72
27 mu_0       0.9      1.02         0.955  0.273         2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.769     3.40e-26  1.31e-70     76.7 
 2 mu         0.2      0.498     6.27e-13  7.79e-48     28.8 
 3 mu         0.3      1.12      1.10e- 6  1.44e-34     18.2 
 4 mu         0.4      1.23      4.57e- 3  3.31e-25     13.6 
 5 mu         0.5      1.03      3.61e- 2  5.33e-18     10.2 
 6 mu         0.6      0.946     9.04e- 2  9.07e-18     11.7 
 7 mu         0.7      0.913     1.02e- 1  9.74e-26      8.81
 8 mu         0.8      1.12      4.94e- 3  3.45e-37      9.97
 9 mu         0.9      1.24      3.36e- 8  4.74e-57     30.2 
10 mu_1       0.1      0.635     1.83e-25  1.27e-69     63.1 
11 mu_1       0.2      0.587     1.92e-12  3.80e-47     31.3 
12 mu_1       0.3      1.17      2.24e- 6  4.68e-34     17.2 
13 mu_1       0.4      1.20      6.90e- 3  8.07e-25     12.9 
14 mu_1       0.5      1.04      2.31e- 2  1.04e-17     10.3 
15 mu_1       0.6      0.921     1.06e- 1  1.24e-18     11.9 
16 mu_1       0.7      0.928     8.66e- 2  1.14e-26      9.44
17 mu_1       0.8      1.13      3.77e- 3  3.55e-38     10.6 
18 mu_1       0.9      1.24      2.31e- 8  4.33e-58     30.7 
19 mu_0       0.1      0.784     1.75e-26  3.72e-72     78.2 
20 mu_0       0.2      0.475     3.05e-13  2.50e-49     28.2 
21 mu_0       0.3      1.10      6.11e- 7  5.28e-36     18.7 
22 mu_0       0.4      1.25      3.02e- 3  1.42e-26     14.0 
23 mu_0       0.5      1.02      4.36e- 2  2.73e-19     10.3 
24 mu_0       0.6      0.984     5.86e- 2  2.08e-17     11.4 
25 mu_0       0.7      0.880     1.04e- 1  2.98e-25      7.78
26 mu_0       0.8      1.10      5.31e- 3  1.58e-36      9.75
27 mu_0       0.9      1.24      1.29e- 7  4.35e-56     25.1 
[1] "Total run time was 349.787 seconds"
