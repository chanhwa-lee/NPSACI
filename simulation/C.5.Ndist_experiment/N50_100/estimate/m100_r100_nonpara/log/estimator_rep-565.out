
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7634"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  59  60  61  62  64  65  66  67  68  70  71  72  73 
  1   3   3   2   2   1   1   4   2   2   1   2   6   2   2   1   1   3   3   3 
 74  75  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93  94  95 
  3   1   4   3   2   3   1   1   2   1   1   2   1   2   5   3   1   2   2   5 
 97  98  99 100 
  1   3   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02765 0.33682 0.61290 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4555 3079 
[1] "treatment indicator table: "

   0    1 
2804 4830 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3732
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3902
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 336.983 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.440 0.0924
 2 mu         0.1   0.2 0.518 0.121 
 3 mu         0.1   0.3 0.672 0.141 
 4 mu         0.1   0.4 0.713 0.131 
 5 mu         0.1   0.5 0.749 0.143 
 6 mu         0.2   0.1 0.341 0.0485
 7 mu         0.2   0.2 0.393 0.0674
 8 mu         0.2   0.3 0.475 0.0713
 9 mu         0.2   0.4 0.522 0.0599
10 mu         0.2   0.5 0.554 0.0671
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.16         0.538 0.00000783     10.8 
 2 mu         0.2      0.971        0.916 0.0631          2.39
 3 mu         0.3      0.910        0.889 0.253           1.72
 4 mu         0.4      0.949        0.919 0.530           1.55
 5 mu         0.5      1.04         1.01  0.645           1.69
 6 mu         0.6      0.997        0.992 0.648           1.52
 7 mu         0.7      1.01         1.00  0.731           1.45
 8 mu         0.8      0.984        0.987 0.579           1.50
 9 mu         0.9      1.08         1.03  0.294           2.23
10 mu_1       0.1      1.16         0.643 0.0000217       9.39
11 mu_1       0.2      0.954        0.910 0.0916          2.40
12 mu_1       0.3      0.911        0.880 0.268           1.68
13 mu_1       0.4      0.957        0.925 0.530           1.59
14 mu_1       0.5      1.04         1.01  0.645           1.68
15 mu_1       0.6      0.998        0.990 0.649           1.52
16 mu_1       0.7      1.01         1.01  0.733           1.44
17 mu_1       0.8      0.984        0.989 0.572           1.50
18 mu_1       0.9      1.08         1.03  0.288           2.24
19 mu_0       0.1      1.16         0.514 0.00000630     10.9 
20 mu_0       0.2      0.975        0.893 0.0560          2.39
21 mu_0       0.3      0.910        0.882 0.246           1.78
22 mu_0       0.4      0.944        0.906 0.529           1.51
23 mu_0       0.5      1.03         1.01  0.646           1.73
24 mu_0       0.6      0.997        0.986 0.647           1.52
25 mu_0       0.7      1.01         0.996 0.710           1.46
26 mu_0       0.8      0.984        0.979 0.536           1.51
27 mu_0       0.9      1.07         1.04  0.349           2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.211     1.48e-28  2.04e-81     12.5 
 2 mu         0.2      1.72      7.71e-15  4.99e-54     72.1 
 3 mu         0.3      1.57      1.50e- 7  2.86e-38     42.1 
 4 mu         0.4      0.778     1.61e- 3  6.57e-28     10.8 
 5 mu         0.5      1.16      1.11e- 1  6.31e-20      8.10
 6 mu         0.6      1.41      4.84e- 1  1.81e-13      7.96
 7 mu         0.7      1.32      1.86e- 1  6.33e-15     15.1 
 8 mu         0.8      1.42      1.16e- 2  1.44e-25     18.2 
 9 mu         0.9      1.57      1.46e- 7  5.22e-45     23.7 
10 mu_1       0.1      0.365     9.15e-28  1.92e-80     22.1 
11 mu_1       0.2      1.84      2.34e-14  2.34e-53     79.0 
12 mu_1       0.3      1.43      3.13e- 7  9.32e-38     38.4 
13 mu_1       0.4      0.784     2.51e- 3  1.61e-27     10.2 
14 mu_1       0.5      1.19      9.65e- 2  1.23e-19      8.41
15 mu_1       0.6      1.41      4.15e- 1  2.94e-13      9.03
16 mu_1       0.7      1.31      1.66e- 1  2.47e-15     14.6 
17 mu_1       0.8      1.42      1.05e- 2  4.93e-26     19.3 
18 mu_1       0.9      1.59      1.07e- 7  1.59e-45     24.7 
19 mu_0       0.1      0.194     6.33e-29  1.39e-82     11.5 
20 mu_0       0.2      1.69      4.03e-15  3.82e-55     70.4 
21 mu_0       0.3      1.63      8.09e- 8  9.51e-40     43.7 
22 mu_0       0.4      0.773     9.67e- 4  2.55e-29     11.1 
23 mu_0       0.5      1.14      7.72e- 2  2.93e-21      7.80
24 mu_0       0.6      1.41      3.82e- 1  1.05e-14      7.32
25 mu_0       0.7      1.32      2.27e- 1  1.53e-14     16.1 
26 mu_0       0.8      1.43      7.74e- 3  5.23e-25     16.6 
27 mu_0       0.9      1.38      4.94e- 7  3.79e-44     17.7 
[1] "Total run time was 340.136 seconds"
