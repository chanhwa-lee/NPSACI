
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7578"
[1] "cluster size dist'n: "

50 51 52 53 54 55 57 58 59 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 
 2  2  1  3  3  2  2  2  1  2  2  3  1  3  4  4  1  1  1  4  2  1  1  3  1  1 
79 80 81 82 83 84 85 86 87 88 90 91 92 93 94 95 97 98 99 
 2  3  2  4  2  3  2  2  2  3  2  1  1  3  2  3  3  2  5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0270  0.3232  0.5916  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4442 3136 
[1] "treatment indicator table: "

   0    1 
2909 4669 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3780
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3798
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 488.375 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.372 0.0388
 2 mu         0.1   0.2 0.453 0.0505
 3 mu         0.1   0.3 0.511 0.0540
 4 mu         0.1   0.4 0.596 0.0725
 5 mu         0.1   0.5 0.610 0.0685
 6 mu         0.2   0.1 0.382 0.0330
 7 mu         0.2   0.2 0.464 0.0301
 8 mu         0.2   0.3 0.535 0.0311
 9 mu         0.2   0.4 0.593 0.0321
10 mu         0.2   0.5 0.621 0.0316
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.910        0.652 0.00000150      8.08
 2 mu         0.2      1.02         0.970 0.0496          2.95
 3 mu         0.3      1.03         1.00  0.496           2.29
 4 mu         0.4      1.01         0.983 0.556           1.82
 5 mu         0.5      0.987        0.964 0.578           1.73
 6 mu         0.6      1.01         1.00  0.593           1.58
 7 mu         0.7      1.01         0.992 0.633           1.93
 8 mu         0.8      0.978        0.954 0.505           1.45
 9 mu         0.9      1.01         1.00  0.300           1.77
10 mu_1       0.1      0.931        0.752 0.00000443      7.19
11 mu_1       0.2      1.02         0.979 0.0548          3.06
12 mu_1       0.3      1.04         1.01  0.502           2.23
13 mu_1       0.4      1.00         0.982 0.573           1.73
14 mu_1       0.5      0.987        0.970 0.581           1.71
15 mu_1       0.6      1.02         1.01  0.584           1.59
16 mu_1       0.7      1.01         0.992 0.620           1.94
17 mu_1       0.8      0.978        0.957 0.496           1.45
18 mu_1       0.9      1.01         0.998 0.287           1.79
19 mu_0       0.1      0.908        0.648 0.00000118      8.17
20 mu_0       0.2      1.02         0.957 0.0434          2.93
21 mu_0       0.3      1.03         0.993 0.494           2.32
22 mu_0       0.4      1.01         0.980 0.545           1.88
23 mu_0       0.5      0.986        0.970 0.575           1.74
24 mu_0       0.6      1.01         0.997 0.607           1.59
25 mu_0       0.7      1.01         0.995 0.640           1.91
26 mu_0       0.8      0.977        0.957 0.542           1.46
27 mu_0       0.9      1.00         1.02  0.413           1.67
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.469     7.56e-27  8.13e-78     33.0 
 2 mu         0.2      2.08      1.66e-14  1.24e-51     71.9 
 3 mu         0.3      0.608     1.37e- 7  1.74e-36     10.2 
 4 mu         0.4      0.478     7.77e- 4  6.83e-26      6.95
 5 mu         0.5      0.946     1.21e- 2  7.72e-18      8.42
 6 mu         0.6      1.27      1.95e- 1  7.68e-15      8.62
 7 mu         0.7      1.59      1.91e- 1  1.07e-23     18.0 
 8 mu         0.8      1.51      2.93e- 2  8.45e-37     12.1 
 9 mu         0.9      1.40      1.20e- 7  5.18e-60     23.5 
10 mu_1       0.1      0.703     5.26e-26  7.61e-77     46.3 
11 mu_1       0.2      1.94      5.01e-14  5.81e-51     63.0 
12 mu_1       0.3      0.564     2.92e- 7  5.44e-36     10.2 
13 mu_1       0.4      0.492     7.38e- 4  1.60e-25      7.26
14 mu_1       0.5      0.985     9.65e- 3  1.45e-17      8.51
15 mu_1       0.6      1.27      2.27e- 1  2.24e-15      8.82
16 mu_1       0.7      1.61      1.88e- 1  2.67e-24     18.1 
17 mu_1       0.8      1.50      2.88e- 2  1.85e-37     12.4 
18 mu_1       0.9      1.40      8.81e- 8  1.01e-60     23.0 
19 mu_0       0.1      0.443     2.66e-27  5.76e-79     31.6 
20 mu_0       0.2      2.11      8.21e-15  9.90e-53     74.1 
21 mu_0       0.3      0.626     7.02e- 8  1.59e-37     10.1 
22 mu_0       0.4      0.469     4.83e- 4  7.27e-27      6.74
23 mu_0       0.5      0.906     7.90e- 3  9.86e-19      8.33
24 mu_0       0.6      1.26      1.68e- 1  1.58e-14      8.34
25 mu_0       0.7      1.54      2.15e- 1  2.93e-23     17.8 
26 mu_0       0.8      1.55      2.61e- 2  3.48e-36     10.8 
27 mu_0       0.9      1.43      4.06e- 7  4.27e-59     28.8 
[1] "Total run time was 492.576 seconds"
