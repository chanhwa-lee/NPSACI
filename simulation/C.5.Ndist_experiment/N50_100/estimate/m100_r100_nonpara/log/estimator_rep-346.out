
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7682"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  68  70  72  73 
  1   1   1   2   3   5   1   2   2   2   1   1   1   3   2   2   2   5   1   4 
 75  76  77  78  80  81  82  84  85  86  87  89  90  91  92  93  94  96  97  98 
  2   2   2   4   2   3   3   1   4   2   4   4   3   2   4   1   2   1   3   1 
 99 100 
  5   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01554 0.28324 0.56294 0.95391 7.26359 
[1] "event indicator table: "

   0    1 
4578 3104 
[1] "treatment indicator table: "

   0    1 
3010 4672 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3836
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3846
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 427.427 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.425 0.0662
 2 mu         0.1   0.2 0.548 0.0665
 3 mu         0.1   0.3 0.620 0.0762
 4 mu         0.1   0.4 0.670 0.0850
 5 mu         0.1   0.5 0.718 0.0958
 6 mu         0.2   0.1 0.411 0.0397
 7 mu         0.2   0.2 0.490 0.0348
 8 mu         0.2   0.3 0.572 0.0458
 9 mu         0.2   0.4 0.623 0.0491
10 mu         0.2   0.5 0.663 0.0496
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.12         0.546 0.000000461      7.01
 2 mu         0.2      1.06         1.07  0.0320           4.28
 3 mu         0.3      0.984        0.996 0.376            1.53
 4 mu         0.4      1.01         1.01  0.519            1.44
 5 mu         0.5      1.01         1.00  0.670            1.57
 6 mu         0.6      1.01         0.996 0.678            1.31
 7 mu         0.7      0.997        0.986 0.642            1.51
 8 mu         0.8      1.00         0.989 0.536            1.71
 9 mu         0.9      0.966        0.965 0.377            1.82
10 mu_1       0.1      1.16         0.746 0.00000130       6.41
11 mu_1       0.2      1.03         1.04  0.0457           4.03
12 mu_1       0.3      0.987        0.988 0.358            1.53
13 mu_1       0.4      1.01         0.998 0.504            1.44
14 mu_1       0.5      1.01         1.00  0.685            1.60
15 mu_1       0.6      1.01         0.993 0.669            1.30
16 mu_1       0.7      0.996        0.986 0.638            1.51
17 mu_1       0.8      1.00         0.988 0.537            1.71
18 mu_1       0.9      0.965        0.958 0.370            1.84
19 mu_0       0.1      1.11         0.524 0.000000368      7.14
20 mu_0       0.2      1.06         1.08  0.0286           4.34
21 mu_0       0.3      0.983        0.993 0.383            1.55
22 mu_0       0.4      1.01         1.01  0.529            1.45
23 mu_0       0.5      1.01         1.00  0.648            1.55
24 mu_0       0.6      1.01         0.987 0.692            1.32
25 mu_0       0.7      0.998        0.976 0.643            1.50
26 mu_0       0.8      1.00         0.984 0.533            1.70
27 mu_0       0.9      0.980        0.925 0.435            1.95
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00638     2.96e-25  5.13e-66     0.520
 2 mu         0.2    0.574       1.36e-13  1.69e-41    14.7  
 3 mu         0.3    1.31        5.41e- 7  1.15e-27    25.8  
 4 mu         0.4    1.16        4.21e- 3  4.42e-19    17.8  
 5 mu         0.5    1.05        7.63e- 2  8.87e-13     9.40 
 6 mu         0.6    1.34        8.83e- 2  2.61e- 9    11.0  
 7 mu         0.7    1.13        1.29e- 1  5.87e-16     8.67 
 8 mu         0.8    1.48        1.06e- 2  3.97e-26    13.5  
 9 mu         0.9    1.08        1.00e- 8  1.43e-44    16.4  
10 mu_1       0.1    0.0137      1.67e-24  4.35e-65     1.07 
11 mu_1       0.2    0.712       4.26e-13  7.19e-41    15.2  
12 mu_1       0.3    1.30        1.05e- 6  3.45e-27    26.1  
13 mu_1       0.4    1.13        6.20e- 3  9.96e-19    17.1  
14 mu_1       0.5    1.08        9.25e- 2  1.69e-12    10.1  
15 mu_1       0.6    1.33        1.07e- 1  1.10e- 9    10.9  
16 mu_1       0.7    1.13        1.28e- 1  2.12e-16     8.44 
17 mu_1       0.8    1.47        8.43e- 3  1.25e-26    13.7  
18 mu_1       0.9    1.09        6.68e- 9  4.03e-45    17.1  
19 mu_0       0.1    0.00557     1.42e-25  8.63e-67     0.458
20 mu_0       0.2    0.539       6.59e-14  3.21e-42    14.6  
21 mu_0       0.3    1.32        3.22e- 7  1.62e-28    25.7  
22 mu_0       0.4    1.18        2.88e- 3  7.28e-20    18.3  
23 mu_0       0.5    1.01        6.82e- 2  8.59e-14     8.74 
24 mu_0       0.6    1.35        9.65e- 2  2.58e- 9    11.2  
25 mu_0       0.7    1.11        1.62e- 1  1.46e-15     9.23 
26 mu_0       0.8    1.50        1.20e- 2  1.48e-25    15.0  
27 mu_0       0.9    0.977       3.99e- 8  1.07e-43    13.3  
[1] "Total run time was 430.711 seconds"
