
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7416"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  62  64  65  66  67  68  69  70  71 
  1   3   2   1   3   3   1   2   2   2   4   1   5   2   1   3   3   3   2   3 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92 
  1   2   3   3   1   2   1   3   2   1   3   1   2   2   2   3   1   1   1   3 
 93  94  95  97  98 100 
  2   3   2   2   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03985 0.36006 0.62420 1.00000 8.04876 
[1] "event indicator table: "

   0    1 
4354 3062 
[1] "treatment indicator table: "

   0    1 
2656 4760 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3707
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3709
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 467.368 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.257 0.0650
 2 mu         0.1   0.2 0.373 0.0828
 3 mu         0.1   0.3 0.420 0.0868
 4 mu         0.1   0.4 0.472 0.108 
 5 mu         0.1   0.5 0.499 0.107 
 6 mu         0.2   0.1 0.396 0.0509
 7 mu         0.2   0.2 0.539 0.0676
 8 mu         0.2   0.3 0.615 0.0729
 9 mu         0.2   0.4 0.691 0.0821
10 mu         0.2   0.5 0.742 0.0882
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.705       0.101   1.02e-10      7.65
 2 mu         0.2      1.21        0.704   1.01e- 4     11.2 
 3 mu         0.3      0.981       0.939   2.67e- 2      3.99
 4 mu         0.4      1.03        1.02    2.99e- 1      2.19
 5 mu         0.5      0.995       0.997   6.18e- 1      1.45
 6 mu         0.6      1.01        0.996   7.02e- 1      1.66
 7 mu         0.7      0.994       0.989   6.32e- 1      1.38
 8 mu         0.8      1.00        0.966   3.57e- 1      1.79
 9 mu         0.9      1.02        0.983   7.66e- 3      2.88
10 mu_1       0.1      0.703       0.175   4.24e-10      7.05
11 mu_1       0.2      1.21        0.836   2.11e- 4     12.4 
12 mu_1       0.3      0.977       0.930   3.78e- 2      3.31
13 mu_1       0.4      1.03        1.02    3.45e- 1      2.18
14 mu_1       0.5      0.993       0.982   6.13e- 1      1.43
15 mu_1       0.6      1.01        0.996   6.92e- 1      1.66
16 mu_1       0.7      0.993       0.994   6.42e- 1      1.37
17 mu_1       0.8      1.01        0.968   3.46e- 1      1.82
18 mu_1       0.9      1.01        0.981   6.92e- 3      2.92
19 mu_0       0.1      0.706       0.0933  6.63e-11      8.37
20 mu_0       0.2      1.21        0.706   7.36e- 5     10.9 
21 mu_0       0.3      0.983       0.948   2.19e- 2      4.29
22 mu_0       0.4      1.03        1.02    2.68e- 1      2.19
23 mu_0       0.5      0.997       1.00    6.04e- 1      1.47
24 mu_0       0.6      1.01        0.995   7.17e- 1      1.66
25 mu_0       0.7      0.997       0.983   6.10e- 1      1.38
26 mu_0       0.8      0.998       0.977   3.97e- 1      1.69
27 mu_0       0.9      1.04        0.954   1.43e- 2      2.61
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1 0.00000760     2.49e-30  7.63e-75  0.000319
 2 mu         0.2 0.0762         1.56e-16  2.69e-50  2.88    
 3 mu         0.3 1.11           1.95e- 9  4.96e-36 30.7     
 4 mu         0.4 1.08           3.63e- 5  5.49e-26  9.21    
 5 mu         0.5 0.859          1.71e- 2  2.81e-18 10.4     
 6 mu         0.6 0.914          1.07e- 1  4.47e-12 10.3     
 7 mu         0.7 0.965          3.60e- 1  3.20e-13  6.64    
 8 mu         0.8 1.23           4.54e- 2  1.86e-23 12.6     
 9 mu         0.9 1.71           2.41e- 6  2.16e-42 48.8     
10 mu_1       0.1 0.0000228      1.45e-29  6.99e-74  0.000918
11 mu_1       0.2 0.116          5.27e-16  1.30e-49  4.40    
12 mu_1       0.3 1.19           4.33e- 9  1.59e-35 31.4     
13 mu_1       0.4 1.07           6.37e- 5  1.32e-25 10.4     
14 mu_1       0.5 0.837          2.36e- 2  5.42e-18 10.3     
15 mu_1       0.6 0.920          9.36e- 2  7.19e-12 10.3     
16 mu_1       0.7 0.981          3.93e- 1  1.40e-13  6.87    
17 mu_1       0.8 1.23           3.77e- 2  7.13e-24 12.9     
18 mu_1       0.9 1.72           1.81e- 6  7.35e-43 50.0     
19 mu_0       0.1 0.00000592     1.16e-30  3.11e-76  0.000253
20 mu_0       0.2 0.0662         6.48e-17  1.19e-51  2.50    
21 mu_0       0.3 1.08           9.23e-10  2.50e-37 30.5     
22 mu_0       0.4 1.09           1.81e- 5  3.23e-27  8.99    
23 mu_0       0.5 0.880          1.16e- 2  1.98e-19 10.6     
24 mu_0       0.6 0.906          8.43e- 2  3.95e-13 10.2     
25 mu_0       0.7 0.928          2.90e- 1  7.39e-13  6.11    
26 mu_0       0.8 1.21           6.31e- 2  6.46e-23 11.4     
27 mu_0       0.9 1.62           7.77e- 6  1.50e-41 37.5     
[1] "Total run time was 471.187 seconds"
