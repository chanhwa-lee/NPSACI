
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7432"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70  71 
  1   4   2   3   4   2   2   3   1   3   2   1   1   1   3   2   3   6   2   5 
 72  73  76  77  78  83  85  86  87  88  89  90  91  92  93  94  95  96  97  98 
  3   1   3   2   5   1   3   3   2   1   2   1   3   2   3   2   1   2   2   1 
 99 100 
  4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02752 0.33043 0.59907 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4366 3066 
[1] "treatment indicator table: "

   0    1 
2926 4506 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3650
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3782
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 404.443 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.413 0.0628
 2 mu         0.1   0.2 0.472 0.0656
 3 mu         0.1   0.3 0.510 0.0520
 4 mu         0.1   0.4 0.565 0.0569
 5 mu         0.1   0.5 0.585 0.0536
 6 mu         0.2   0.1 0.367 0.0432
 7 mu         0.2   0.2 0.436 0.0441
 8 mu         0.2   0.3 0.479 0.0341
 9 mu         0.2   0.4 0.527 0.0358
10 mu         0.2   0.5 0.562 0.0334
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.905        0.808 0.0000276      2.90
 2 mu         0.2      0.947        0.956 0.248          2.06
 3 mu         0.3      0.974        0.952 0.352          2.08
 4 mu         0.4      0.967        0.960 0.452          1.71
 5 mu         0.5      0.998        0.966 0.637          1.72
 6 mu         0.6      1.04         1.05  0.548          1.47
 7 mu         0.7      1.02         1.03  0.642          1.35
 8 mu         0.8      0.963        0.957 0.324          1.48
 9 mu         0.9      0.975        0.936 0.420          1.73
10 mu_1       0.1      0.872        0.832 0.0000721      2.64
11 mu_1       0.2      0.961        0.976 0.321          2.08
12 mu_1       0.3      0.973        0.933 0.366          2.02
13 mu_1       0.4      0.968        0.974 0.461          1.71
14 mu_1       0.5      1.00         0.977 0.634          1.69
15 mu_1       0.6      1.04         1.06  0.544          1.46
16 mu_1       0.7      1.02         1.03  0.633          1.35
17 mu_1       0.8      0.962        0.952 0.308          1.47
18 mu_1       0.9      0.976        0.934 0.414          1.73
19 mu_0       0.1      0.909        0.803 0.0000227      3.04
20 mu_0       0.2      0.943        0.946 0.230          2.05
21 mu_0       0.3      0.975        0.956 0.346          2.10
22 mu_0       0.4      0.967        0.951 0.436          1.71
23 mu_0       0.5      0.995        0.949 0.630          1.74
24 mu_0       0.6      1.04         1.04  0.554          1.48
25 mu_0       0.7      1.02         1.03  0.640          1.35
26 mu_0       0.8      0.969        0.971 0.388          1.49
27 mu_0       0.9      0.967        0.935 0.317          1.87
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.175     6.73e-26  8.48e-78     11.1 
 2 mu         0.2      0.841     3.11e-14  1.21e-51     31.8 
 3 mu         0.3      1.39      7.74e- 8  8.66e-37     23.5 
 4 mu         0.4      1.01      5.42e- 4  2.23e-26      8.66
 5 mu         0.5      0.941     2.93e- 2  1.93e-18     12.2 
 6 mu         0.6      0.995     6.90e- 2  3.09e-13      7.87
 7 mu         0.7      1.09      1.24e- 1  1.49e-20     10.7 
 8 mu         0.8      1.09      8.34e- 3  2.64e-31     13.3 
 9 mu         0.9      1.31      1.50e- 8  2.94e-50     18.1 
10 mu_1       0.1      0.289     4.93e-25  7.86e-77     17.2 
11 mu_1       0.2      0.858     9.64e-14  5.73e-51     28.9 
12 mu_1       0.3      1.39      1.67e- 7  2.73e-36     23.1 
13 mu_1       0.4      0.997     6.94e- 4  5.26e-26      9.40
14 mu_1       0.5      0.937     3.37e- 2  3.65e-18     13.0 
15 mu_1       0.6      1.00      6.83e- 2  8.02e-14      7.02
16 mu_1       0.7      1.09      1.24e- 1  3.31e-21     10.5 
17 mu_1       0.8      1.10      8.02e- 3  5.15e-32     13.5 
18 mu_1       0.9      1.32      1.12e- 8  5.10e-51     18.0 
19 mu_0       0.1      0.162     1.99e-26  6.87e-79     10.4 
20 mu_0       0.2      0.836     1.48e-14  8.33e-53     32.5 
21 mu_0       0.3      1.39      3.90e- 8  6.80e-38     23.7 
22 mu_0       0.4      1.01      5.89e- 4  2.04e-27      8.16
23 mu_0       0.5      0.945     2.40e- 2  2.12e-19     11.3 
24 mu_0       0.6      0.984     5.08e- 2  5.61e-13      9.15
25 mu_0       0.7      1.09      7.74e- 2  4.18e-20     11.0 
26 mu_0       0.8      1.08      1.19e- 2  1.12e-30     12.4 
27 mu_0       0.9      1.23      4.90e- 8  2.48e-49     19.2 
[1] "Total run time was 408.159 seconds"
