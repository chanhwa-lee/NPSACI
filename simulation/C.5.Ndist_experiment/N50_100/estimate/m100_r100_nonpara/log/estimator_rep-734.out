
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7342"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  68  69  70  71 
  2   2   2   5   4   1   1   4   3   1   3   2   3   2   3   1   2   2   1   2 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  87  89  90  91  92  93 
  1   3   3   1   2   2   1   2   1   3   3   3   3   3   4   2   1   4   1   2 
 94  95  96  97  98  99 100 
  1   2   1   1   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03362 0.33967 0.60043 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4386 2956 
[1] "treatment indicator table: "

   0    1 
2801 4541 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3569
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3773
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 389.691 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.460 0.0667
 2 mu         0.1   0.2 0.529 0.0611
 3 mu         0.1   0.3 0.564 0.0600
 4 mu         0.1   0.4 0.582 0.0594
 5 mu         0.1   0.5 0.655 0.0756
 6 mu         0.2   0.1 0.362 0.0319
 7 mu         0.2   0.2 0.449 0.0324
 8 mu         0.2   0.3 0.496 0.0341
 9 mu         0.2   0.4 0.523 0.0274
10 mu         0.2   0.5 0.571 0.0364
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.10         0.728 0.0000185      7.07
 2 mu         0.2      1.05         0.943 0.130          2.69
 3 mu         0.3      0.979        0.938 0.335          2.46
 4 mu         0.4      0.968        0.961 0.544          1.54
 5 mu         0.5      1.01         0.997 0.464          1.54
 6 mu         0.6      0.999        0.971 0.592          1.49
 7 mu         0.7      1.00         0.998 0.584          1.49
 8 mu         0.8      1.02         0.987 0.619          1.71
 9 mu         0.9      1.05         0.985 0.183          2.59
10 mu_1       0.1      1.08         0.910 0.0000507      5.66
11 mu_1       0.2      1.04         0.962 0.180          2.58
12 mu_1       0.3      0.976        0.916 0.348          2.41
13 mu_1       0.4      0.969        0.966 0.547          1.49
14 mu_1       0.5      1.01         0.995 0.444          1.51
15 mu_1       0.6      0.998        0.977 0.604          1.50
16 mu_1       0.7      1.00         0.997 0.590          1.49
17 mu_1       0.8      1.02         0.993 0.604          1.73
18 mu_1       0.9      1.05         0.997 0.182          2.62
19 mu_0       0.1      1.10         0.714 0.0000149      7.23
20 mu_0       0.2      1.05         0.959 0.117          2.72
21 mu_0       0.3      0.981        0.949 0.330          2.48
22 mu_0       0.4      0.967        0.956 0.541          1.57
23 mu_0       0.5      1.01         0.995 0.484          1.56
24 mu_0       0.6      1.00         0.970 0.573          1.47
25 mu_0       0.7      1.00         1.00  0.571          1.49
26 mu_0       0.8      1.01         1.00  0.620          1.62
27 mu_0       0.9      1.06         1.02  0.192          2.31
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.32      4.99e-26  4.20e-71    120.  
 2 mu         0.2      1.25      5.36e-14  8.90e-47     85.0 
 3 mu         0.3      0.797     5.11e- 7  9.61e-33     11.9 
 4 mu         0.4      1.05      1.33e- 3  5.74e-23     15.7 
 5 mu         0.5      1.05      4.52e- 2  2.82e-16      8.28
 6 mu         0.6      1.14      1.64e- 1  1.58e-13      9.26
 7 mu         0.7      1.03      1.93e- 1  1.24e-19      9.85
 8 mu         0.8      1.24      5.99e- 3  2.21e-28      7.86
 9 mu         0.9      1.22      1.16e- 8  1.58e-43     37.3 
10 mu_1       0.1      2.48      3.58e-25  3.87e-70    165.  
11 mu_1       0.2      1.03      1.59e-13  4.10e-46     58.6 
12 mu_1       0.3      0.796     1.03e- 6  2.95e-32     11.7 
13 mu_1       0.4      1.07      2.10e- 3  1.32e-22     15.5 
14 mu_1       0.5      1.05      3.75e- 2  5.65e-16      8.62
15 mu_1       0.6      1.13      1.52e- 1  1.91e-14      9.26
16 mu_1       0.7      1.03      1.85e- 1  1.29e-20     10.1 
17 mu_1       0.8      1.25      4.62e- 3  2.01e-29      8.24
18 mu_1       0.9      1.20      7.43e- 9  1.27e-44     37.7 
19 mu_0       0.1      2.30      1.57e-26  0           115.  
20 mu_0       0.2      1.31      2.72e-14  0            91.6 
21 mu_0       0.3      0.797     2.89e- 7  0            11.9 
22 mu_0       0.4      1.04      8.13e- 4  0            15.9 
23 mu_0       0.5      1.05      4.76e- 2  0             8.35
24 mu_0       0.6      1.14      1.58e- 1  0             9.26
25 mu_0       0.7      1.03      1.82e- 1  0             9.27
26 mu_0       0.8      1.19      1.05e- 2  0             8.71
27 mu_0       0.9      1.34      3.28e- 8  0            34.3 
[1] "Total run time was 392.883 seconds"
