
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7418"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  68  69  70  71 
  5   1   2   2   4   1   2   2   1   1   3   2   1   5   5   3   3   1   1   1 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  89  90  91  92  93  94 
  3   3   3   1   2   1   2   3   1   5   1   1   2   1   1   2   1   4   2   3 
 95  96  97  98 100 
  4   2   1   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0238  0.3175  0.5900  1.0000  5.2366 
[1] "event indicator table: "

   0    1 
4415 3003 
[1] "treatment indicator table: "

   0    1 
2923 4495 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3752
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3666
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 368.758 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.406 0.0643
 2 mu         0.1   0.2 0.495 0.0868
 3 mu         0.1   0.3 0.526 0.0794
 4 mu         0.1   0.4 0.568 0.0794
 5 mu         0.1   0.5 0.594 0.0838
 6 mu         0.2   0.1 0.395 0.0345
 7 mu         0.2   0.2 0.485 0.0471
 8 mu         0.2   0.3 0.540 0.0399
 9 mu         0.2   0.4 0.574 0.0374
10 mu         0.2   0.5 0.621 0.0426
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.930        0.385 0.00000996      7.70
 2 mu         0.2      0.991        0.884 0.129           2.96
 3 mu         0.3      1.02         0.977 0.368           1.82
 4 mu         0.4      1.02         1.00  0.378           1.64
 5 mu         0.5      1.02         1.01  0.585           1.54
 6 mu         0.6      0.995        0.977 0.634           1.62
 7 mu         0.7      0.983        0.984 0.529           1.43
 8 mu         0.8      0.978        0.954 0.404           1.51
 9 mu         0.9      0.970        0.924 0.308           2.62
10 mu_1       0.1      0.919        0.572 0.0000267       5.67
11 mu_1       0.2      0.990        0.906 0.176           2.61
12 mu_1       0.3      1.02         0.985 0.402           1.78
13 mu_1       0.4      1.02         1.00  0.388           1.64
14 mu_1       0.5      1.01         1.00  0.576           1.55
15 mu_1       0.6      0.995        0.982 0.648           1.62
16 mu_1       0.7      0.982        0.983 0.536           1.43
17 mu_1       0.8      0.979        0.955 0.396           1.53
18 mu_1       0.9      0.970        0.924 0.302           2.65
19 mu_0       0.1      0.931        0.366 0.00000810      7.92
20 mu_0       0.2      0.992        0.879 0.117           3.04
21 mu_0       0.3      1.02         0.991 0.353           1.84
22 mu_0       0.4      1.01         1.00  0.372           1.65
23 mu_0       0.5      1.02         1.01  0.594           1.52
24 mu_0       0.6      0.996        0.984 0.609           1.62
25 mu_0       0.7      0.986        0.982 0.513           1.44
26 mu_0       0.8      0.973        0.957 0.437           1.45
27 mu_0       0.9      0.975        0.939 0.364           2.35
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.63      2.81e-25  1.39e-67    129.  
 2 mu         0.2      1.80      1.05e-12  3.28e-43     45.7 
 3 mu         0.3      1.21      2.94e- 6  2.73e-29     22.0 
 4 mu         0.4      0.736     5.46e- 3  1.00e-19      8.47
 5 mu         0.5      0.963     5.13e- 2  8.83e-13      6.61
 6 mu         0.6      1.11      2.76e- 1  1.04e-13      6.59
 7 mu         0.7      1.07      1.73e- 1  2.81e-21     16.4 
 8 mu         0.8      1.41      6.73e- 3  2.22e-32     13.0 
 9 mu         0.9      0.930     7.77e- 9  6.20e-52     19.9 
10 mu_1       0.1      2.13      1.64e-24  1.22e-66    158.  
11 mu_1       0.2      1.60      2.99e-12  1.43e-42     37.2 
12 mu_1       0.3      1.17      5.90e- 6  7.94e-29     21.8 
13 mu_1       0.4      0.729     8.13e- 3  2.19e-19      9.02
14 mu_1       0.5      0.984     4.53e- 2  1.64e-12      6.79
15 mu_1       0.6      1.11      2.03e- 1  2.63e-14      6.94
16 mu_1       0.7      1.08      1.73e- 1  6.11e-22     16.5 
17 mu_1       0.8      1.42      5.27e- 3  4.22e-33     13.2 
18 mu_1       0.9      0.921     5.33e- 9  1.05e-52     20.6 
19 mu_0       0.1      1.58      1.31e-25  1.96e-68    126.  
20 mu_0       0.2      1.85      5.59e-13  5.18e-44     50.1 
21 mu_0       0.3      1.22      1.66e- 6  4.92e-30     22.1 
22 mu_0       0.4      0.740     4.42e- 3  2.12e-20      8.10
23 mu_0       0.5      0.942     4.29e- 2  1.24e-13      6.43
24 mu_0       0.6      1.12      2.44e- 1  2.20e-13      6.07
25 mu_0       0.7      1.07      1.77e- 1  7.96e-21     16.2 
26 mu_0       0.8      1.39      8.31e- 3  9.43e-32     12.2 
27 mu_0       0.9      1.02      2.97e- 8  5.25e-51     17.0 
[1] "Total run time was 372.004 seconds"
