
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7537"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70  72 
  2   2   3   5   1   1   1   1   1   1   2   1   2   5   3   5   1   1   1   6 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94 
  2   2   3   1   5   1   1   5   1   1   2   1   2   2   5   2   3   1   1   3 
 95  96  97  98  99 100 
  2   2   2   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02931 0.34679 0.60352 1.00000 7.20170 
[1] "event indicator table: "

   0    1 
4584 2953 
[1] "treatment indicator table: "

   0    1 
2566 4971 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3786
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3751
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 359.457 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.361 0.0649
 2 mu         0.1   0.2 0.460 0.0782
 3 mu         0.1   0.3 0.547 0.102 
 4 mu         0.1   0.4 0.573 0.0977
 5 mu         0.1   0.5 0.593 0.104 
 6 mu         0.2   0.1 0.373 0.0523
 7 mu         0.2   0.2 0.492 0.0629
 8 mu         0.2   0.3 0.595 0.0904
 9 mu         0.2   0.4 0.624 0.0811
10 mu         0.2   0.5 0.653 0.0862
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.870        0.213 0.00000000558      5.75
 2 mu         0.2      1.05         0.816 0.00194            3.67
 3 mu         0.3      0.944        0.894 0.0540             1.90
 4 mu         0.4      1.00         1.00  0.443              1.63
 5 mu         0.5      0.998        1.00  0.503              1.48
 6 mu         0.6      0.998        0.990 0.512              1.49
 7 mu         0.7      1.02         1.05  0.585              1.38
 8 mu         0.8      1.02         1.01  0.606              1.32
 9 mu         0.9      0.925        0.916 0.206              2.06
10 mu_1       0.1      0.843        0.334 0.0000000202       4.64
11 mu_1       0.2      1.04         0.841 0.00357            3.20
12 mu_1       0.3      0.945        0.883 0.0630             2.01
13 mu_1       0.4      1.01         0.996 0.474              1.61
14 mu_1       0.5      0.998        1.01  0.504              1.46
15 mu_1       0.6      0.998        0.998 0.517              1.48
16 mu_1       0.7      1.02         1.04  0.578              1.38
17 mu_1       0.8      1.02         1.01  0.591              1.32
18 mu_1       0.9      0.923        0.914 0.201              2.08
19 mu_0       0.1      0.874        0.199 0.00000000396      6.05
20 mu_0       0.2      1.05         0.818 0.00154            3.78
21 mu_0       0.3      0.943        0.900 0.0501             1.85
22 mu_0       0.4      1.00         0.988 0.416              1.70
23 mu_0       0.5      0.997        0.998 0.495              1.50
24 mu_0       0.6      0.998        0.994 0.505              1.50
25 mu_0       0.7      1.02         1.05  0.602              1.41
26 mu_0       0.8      1.02         1.02  0.663              1.36
27 mu_0       0.9      0.945        0.903 0.252              1.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0258     1.43e-30  5.58e-75     1.06 
 2 mu         0.2     0.679      8.81e-17  3.37e-50    34.3  
 3 mu         0.3     0.782      1.54e- 9  8.15e-36    21.1  
 4 mu         0.4     0.880      2.26e- 5  4.40e-26    22.5  
 5 mu         0.5     0.792      1.32e- 2  7.08e-19    12.5  
 6 mu         0.6     1.22       1.46e- 1  6.66e-15    13.3  
 7 mu         0.7     1.20       3.83e- 1  1.08e-23     9.30 
 8 mu         0.8     1.44       7.92e- 2  9.77e-37     7.91 
 9 mu         0.9     1.11       2.44e- 5  6.73e-60    14.7  
10 mu_1       0.1     0.0514     9.37e-30  5.32e-74     2.30 
11 mu_1       0.2     0.706      2.81e-16  1.61e-49    37.2  
12 mu_1       0.3     0.807      3.30e- 9  2.59e-35    21.6  
13 mu_1       0.4     0.858      4.01e- 5  1.07e-25    21.4  
14 mu_1       0.5     0.814      1.56e- 2  1.38e-18    12.0  
15 mu_1       0.6     1.24       1.31e- 1  2.04e-15    13.3  
16 mu_1       0.7     1.20       3.88e- 1  2.83e-24     9.41 
17 mu_1       0.8     1.44       6.58e- 2  2.24e-37     7.96 
18 mu_1       0.9     1.12       1.89e- 5  1.37e-60    15.3  
19 mu_0       0.1     0.0229     5.86e-31  2.85e-76     0.925
20 mu_0       0.2     0.672      3.98e-17  1.94e-51    33.6  
21 mu_0       0.3     0.771      7.79e-10  5.35e-37    20.8  
22 mu_0       0.4     0.895      1.10e- 5  1.88e-27    23.2  
23 mu_0       0.5     0.769      7.71e- 3  3.63e-20    13.0  
24 mu_0       0.6     1.20       1.01e- 1  1.36e-14    13.3  
25 mu_0       0.7     1.19       3.17e- 1  2.94e-23     9.04 
26 mu_0       0.8     1.42       1.15e- 1  3.99e-36     8.49 
27 mu_0       0.9     1.02       7.40e- 5  5.50e-59     9.83 
[1] "Total run time was 363.768 seconds"
