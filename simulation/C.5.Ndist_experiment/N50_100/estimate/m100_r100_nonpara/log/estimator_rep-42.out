
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7561"
[1] "cluster size dist'n: "

 51  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  2   3   2   3   2   1   2   3   4   2   2   1   3   2   1   3   2   4   1   2 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92  93  94 
  2   2   1   3   2   2   3   2   1   2   3   1   1   2   2   3   2   4   2   2 
 95  97  98  99 100 
  3   3   3   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05848 0.41601 0.67551 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4511 3050 
[1] "treatment indicator table: "

   0    1 
2596 4965 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3837
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3724
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 463.019 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.436 0.0801
 2 mu         0.1   0.2 0.558 0.103 
 3 mu         0.1   0.3 0.627 0.122 
 4 mu         0.1   0.4 0.638 0.111 
 5 mu         0.1   0.5 0.643 0.112 
 6 mu         0.2   0.1 0.418 0.0553
 7 mu         0.2   0.2 0.537 0.0708
 8 mu         0.2   0.3 0.602 0.0845
 9 mu         0.2   0.4 0.620 0.0667
10 mu         0.2   0.5 0.629 0.0588
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.05         0.391 0.000000626     11.5 
 2 mu         0.2      1.08         0.968 0.0111           4.61
 3 mu         0.3      1.01         0.908 0.292            3.27
 4 mu         0.4      0.978        0.991 0.158            1.88
 5 mu         0.5      1.01         1.01  0.489            1.79
 6 mu         0.6      0.997        1.00  0.593            1.60
 7 mu         0.7      1.02         1.03  0.563            1.48
 8 mu         0.8      0.994        0.981 0.520            1.64
 9 mu         0.9      0.967        0.961 0.306            1.83
10 mu_1       0.1      1.11         0.581 0.00000181       9.26
11 mu_1       0.2      1.06         0.939 0.0165           3.92
12 mu_1       0.3      1.01         0.913 0.347            3.42
13 mu_1       0.4      0.982        1.01  0.158            1.76
14 mu_1       0.5      1.01         0.984 0.488            1.77
15 mu_1       0.6      0.998        1.00  0.591            1.59
16 mu_1       0.7      1.02         1.02  0.565            1.49
17 mu_1       0.8      0.994        0.977 0.510            1.65
18 mu_1       0.9      0.967        0.955 0.303            1.82
19 mu_0       0.1      1.05         0.376 0.000000494     11.9 
20 mu_0       0.2      1.08         0.965 0.00981          4.78
21 mu_0       0.3      1.02         0.913 0.269            3.21
22 mu_0       0.4      0.976        0.991 0.158            1.96
23 mu_0       0.5      1.01         1.01  0.489            1.82
24 mu_0       0.6      0.995        0.988 0.595            1.62
25 mu_0       0.7      1.02         1.01  0.547            1.48
26 mu_0       0.8      0.993        0.992 0.559            1.61
27 mu_0       0.9      0.968        0.967 0.341            1.94
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0654     3.22e-31  1.86e-75      5.67
 2 mu         0.2     0.907      1.07e-17  3.55e-49     40.7 
 3 mu         0.3     0.965      3.77e-10  2.25e-34     14.3 
 4 mu         0.4     1.15       3.51e- 5  3.19e-24     19.6 
 5 mu         0.5     1.28       2.61e- 2  4.01e-17     52.6 
 6 mu         0.6     1.88       1.02e- 1  1.29e-11     78.1 
 7 mu         0.7     1.27       2.84e- 1  1.41e-13     13.1 
 8 mu         0.8     1.30       5.54e- 2  2.15e-21     11.6 
 9 mu         0.9     1.29       4.77e- 7  3.12e-38     19.7 
10 mu_1       0.1     0.125      2.29e-30  1.67e-74     10.6 
11 mu_1       0.2     0.960      3.70e-17  1.60e-48     42.7 
12 mu_1       0.3     0.977      9.10e-10  6.93e-34     13.4 
13 mu_1       0.4     1.13       5.62e- 5  7.36e-24     21.5 
14 mu_1       0.5     1.34       1.84e- 2  7.81e-17     59.2 
15 mu_1       0.6     1.84       1.11e- 1  2.09e-11     73.2 
16 mu_1       0.7     1.28       3.28e- 1  3.74e-14     13.0 
17 mu_1       0.8     1.30       4.88e- 2  5.02e-22     11.0 
18 mu_1       0.9     1.29       3.59e- 7  1.20e-38     20.3 
19 mu_0       0.1     0.0588     9.24e-32  2.09e-76      5.12
20 mu_0       0.2     0.894      4.13e-18  4.48e-50     41.4 
21 mu_0       0.3     0.960      1.57e-10  2.45e-35     16.0 
22 mu_0       0.4     1.16       2.11e- 5  2.74e-25     18.3 
23 mu_0       0.5     1.21       1.99e- 2  2.17e-18     46.1 
24 mu_0       0.6     1.93       7.03e- 2  8.71e-13     85.4 
25 mu_0       0.7     1.26       2.02e- 1  3.81e-13     13.2 
26 mu_0       0.8     1.31       5.30e- 2  8.76e-21     13.8 
27 mu_0       0.9     1.28       1.56e- 6  2.04e-37     14.3 
[1] "Total run time was 466.432 seconds"
