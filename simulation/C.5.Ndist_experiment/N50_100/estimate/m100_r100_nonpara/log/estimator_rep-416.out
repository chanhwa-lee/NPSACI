
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7287"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 77 78 
 5  5  3  3  1  1  2  2  1  1  4  3  1  3  2  3  3  2  2  1  1  1  1  3  3  2 
79 80 81 82 83 84 85 86 87 88 89 90 91 93 94 95 97 98 99 
 1  4  2  1  2  3  1  2  2  3  2  3  2  2  2  5  1  1  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02632 0.32577 0.59388 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4351 2936 
[1] "treatment indicator table: "

   0    1 
2788 4499 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3691
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3596
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.172 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.300 0.0427
 2 mu         0.1   0.2 0.378 0.0606
 3 mu         0.1   0.3 0.410 0.0656
 4 mu         0.1   0.4 0.438 0.0681
 5 mu         0.1   0.5 0.457 0.0671
 6 mu         0.2   0.1 0.344 0.0234
 7 mu         0.2   0.2 0.444 0.0373
 8 mu         0.2   0.3 0.487 0.0458
 9 mu         0.2   0.4 0.523 0.0443
10 mu         0.2   0.5 0.576 0.0388
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.768        0.370 0.000000837      5.83
 2 mu         0.2      0.991        0.910 0.0355           3.11
 3 mu         0.3      1.04         1.03  0.333            1.94
 4 mu         0.4      1.07         1.04  0.553            1.73
 5 mu         0.5      0.997        0.988 0.517            1.58
 6 mu         0.6      0.978        0.975 0.663            1.42
 7 mu         0.7      0.998        0.998 0.660            1.35
 8 mu         0.8      1.02         1.02  0.570            1.58
 9 mu         0.9      1.02         0.981 0.379            1.67
10 mu_1       0.1      0.834        0.536 0.00000241       4.86
11 mu_1       0.2      0.993        0.888 0.0517           3.09
12 mu_1       0.3      1.04         1.05  0.331            1.87
13 mu_1       0.4      1.06         1.04  0.569            1.76
14 mu_1       0.5      0.995        0.990 0.516            1.53
15 mu_1       0.6      0.978        0.983 0.660            1.43
16 mu_1       0.7      0.998        0.998 0.655            1.35
17 mu_1       0.8      1.02         1.02  0.556            1.59
18 mu_1       0.9      1.02         0.979 0.382            1.70
19 mu_0       0.1      0.761        0.348 0.000000662      5.94
20 mu_0       0.2      0.991        0.893 0.0314           3.11
21 mu_0       0.3      1.03         1.02  0.323            1.97
22 mu_0       0.4      1.07         1.07  0.523            1.70
23 mu_0       0.5      1.00         0.989 0.517            1.64
24 mu_0       0.6      0.976        0.966 0.635            1.41
25 mu_0       0.7      0.997        0.988 0.657            1.34
26 mu_0       0.8      1.02         0.999 0.624            1.56
27 mu_0       0.9      1.02         0.983 0.358            1.55
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.426     8.69e-27  4.08e-89     29.3 
 2 mu         0.2      2.44      1.33e-14  1.28e-60    105.  
 3 mu         0.3      1.36      2.32e- 8  5.24e-44     18.9 
 4 mu         0.4      0.705     3.68e- 4  2.85e-32     13.7 
 5 mu         0.5      1.05      1.14e- 2  3.18e-23     15.7 
 6 mu         0.6      1.32      1.16e- 1  6.78e-16     10.7 
 7 mu         0.7      1.29      4.40e- 1  1.80e-23      9.29
 8 mu         0.8      1.11      9.36e- 2  1.87e-35      9.08
 9 mu         0.9      0.830     2.55e- 6  1.63e-56     11.8 
10 mu_1       0.1      0.656     5.55e-26  4.00e-88     41.9 
11 mu_1       0.2      2.46      4.52e-14  6.26e-60    107.  
12 mu_1       0.3      1.24      5.21e- 8  1.71e-43     17.6 
13 mu_1       0.4      0.705     5.85e- 4  6.97e-32     13.6 
14 mu_1       0.5      1.08      1.14e- 2  6.23e-23     15.9 
15 mu_1       0.6      1.32      1.38e- 1  6.68e-16     10.2 
16 mu_1       0.7      1.29      3.76e- 1  3.68e-24      9.50
17 mu_1       0.8      1.11      7.68e- 2  3.35e-36      9.03
18 mu_1       0.9      0.816     1.87e- 6  2.59e-57     11.6 
19 mu_0       0.1      0.400     3.49e-27  9.36e-91     27.9 
20 mu_0       0.2      2.43      5.30e-15  3.29e-62    105.  
21 mu_0       0.3      1.41      1.11e- 8  1.54e-45     19.5 
22 mu_0       0.4      0.705     2.76e- 4  9.79e-34     13.7 
23 mu_0       0.5      1.01      8.27e- 3  1.31e-24     15.5 
24 mu_0       0.6      1.32      8.33e- 2  3.49e-17     11.4 
25 mu_0       0.7      1.28      4.22e- 1  5.15e-23      8.85
26 mu_0       0.8      1.14      1.41e- 1  8.04e-35      9.25
27 mu_0       0.9      0.962     8.62e- 6  1.40e-55     13.2 
[1] "Total run time was 421.446 seconds"
