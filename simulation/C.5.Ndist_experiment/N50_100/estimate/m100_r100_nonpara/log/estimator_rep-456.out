
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7363"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  61  62  63  64  65  67  68  69  71  72 
  3   2   2   7   1   1   1   2   2   2   5   1   6   3   1   1   2   2   2   4 
 73  74  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92  94  95  96 
  3   2   1   2   2   2   2   1   2   3   6   1   2   2   2   2   2   1   1   3 
 97  98  99 100 
  1   2   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04532 0.36855 0.63965 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4281 3082 
[1] "treatment indicator table: "

   0    1 
2846 4517 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3622
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3741
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 481.001 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.480 0.0794
 2 mu         0.1   0.2 0.512 0.0692
 3 mu         0.1   0.3 0.606 0.0746
 4 mu         0.1   0.4 0.665 0.0812
 5 mu         0.1   0.5 0.705 0.0814
 6 mu         0.2   0.1 0.408 0.0409
 7 mu         0.2   0.2 0.454 0.0401
 8 mu         0.2   0.3 0.532 0.0378
 9 mu         0.2   0.4 0.580 0.0383
10 mu         0.2   0.5 0.618 0.0373
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.14         0.851  0.000665      4.52
 2 mu         0.2      1.05         0.986  0.272         2.75
 3 mu         0.3      1.01         0.984  0.517         1.87
 4 mu         0.4      0.986        0.983  0.567         1.53
 5 mu         0.5      0.961        0.967  0.552         1.30
 6 mu         0.6      1.00         1.02   0.586         1.45
 7 mu         0.7      1.00         0.987  0.649         1.38
 8 mu         0.8      0.991        0.969  0.457         1.61
 9 mu         0.9      1.07         1.05   0.302         2.14
10 mu_1       0.1      1.16         0.962  0.00157       4.44
11 mu_1       0.2      1.04         1.01   0.361         2.77
12 mu_1       0.3      1.01         0.962  0.496         1.79
13 mu_1       0.4      0.982        0.980  0.559         1.51
14 mu_1       0.5      0.962        0.972  0.546         1.32
15 mu_1       0.6      1.01         1.01   0.600         1.45
16 mu_1       0.7      1.00         0.983  0.644         1.39
17 mu_1       0.8      0.991        0.970  0.450         1.64
18 mu_1       0.9      1.07         1.05   0.299         2.17
19 mu_0       0.1      1.14         0.811  0.000565      4.53
20 mu_0       0.2      1.05         0.971  0.249         2.78
21 mu_0       0.3      1.01         0.986  0.526         1.91
22 mu_0       0.4      0.989        0.982  0.572         1.55
23 mu_0       0.5      0.959        0.973  0.559         1.32
24 mu_0       0.6      1.00         1.01   0.564         1.44
25 mu_0       0.7      1.00         0.982  0.660         1.36
26 mu_0       0.8      0.990        0.984  0.484         1.55
27 mu_0       0.9      1.06         1.04   0.267         2.04
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.106      2.59e-25  1.03e-74      6.72
 2 mu         0.2     1.19       5.43e-13  1.97e-48     43.7 
 3 mu         0.3     1.03       6.61e- 7  2.43e-33     27.1 
 4 mu         0.4     0.894      2.73e- 3  4.23e-23      9.24
 5 mu         0.5     0.964      4.36e- 2  4.73e-16      9.07
 6 mu         0.6     0.971      9.20e- 2  9.33e-15      7.97
 7 mu         0.7     0.947      1.68e- 1  1.73e-23      8.54
 8 mu         0.8     1.39       1.24e- 2  2.05e-36     11.8 
 9 mu         0.9     1.61       1.24e- 8  2.52e-59     25.1 
10 mu_1       0.1     0.190      1.50e-24  9.29e-74     12.1 
11 mu_1       0.2     1.22       1.64e-12  8.85e-48     38.7 
12 mu_1       0.3     1.00       1.36e- 6  7.30e-33     27.4 
13 mu_1       0.4     0.901      4.28e- 3  1.01e-22      9.37
14 mu_1       0.5     0.962      5.17e- 2  8.99e-16      8.86
15 mu_1       0.6     0.973      8.65e- 2  2.76e-15      7.87
16 mu_1       0.7     0.955      1.52e- 1  4.38e-24      8.91
17 mu_1       0.8     1.39       9.98e- 3  4.55e-37     12.0 
18 mu_1       0.9     1.61       8.41e- 9  4.95e-60     25.0 
19 mu_0       0.1     0.0963     1.21e-25  1.16e-75      6.12
20 mu_0       0.2     1.19       2.70e-13  2.49e-49     44.9 
21 mu_0       0.3     1.03       3.62e- 7  3.51e-34     27.0 
22 mu_0       0.4     0.889      1.69e- 3  3.53e-24      9.16
23 mu_0       0.5     0.965      3.74e- 2  4.73e-17      9.29
24 mu_0       0.6     0.969      5.86e- 2  1.92e-14      8.12
25 mu_0       0.7     0.928      1.96e- 1  4.75e-23      7.69
26 mu_0       0.8     1.37       2.06e- 2  8.45e-36     11.2 
27 mu_0       0.9     1.65       4.87e- 8  2.07e-58     27.8 
[1] "Total run time was 484.926 seconds"
