
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7553"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71 
  1   2   1   2   2   3   1   5   1   4   1   1   1   2   3   7   3   1   2   4 
 74  75  76  77  78  79  80  81  82  83  84  85  86  88  89  90  91  92  93  94 
  3   2   1   2   1   1   3   2   3   1   1   1   3   2   3   2   2   2   4   2 
 95  96  97  98  99 100 
  2   1   3   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04396 0.36321 0.62147 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4519 3034 
[1] "treatment indicator table: "

   0    1 
2519 5034 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3766
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3787
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 678.827 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.426 0.0780
 2 mu         0.1   0.2 0.495 0.0753
 3 mu         0.1   0.3 0.515 0.0742
 4 mu         0.1   0.4 0.591 0.0823
 5 mu         0.1   0.5 0.671 0.108 
 6 mu         0.2   0.1 0.369 0.0561
 7 mu         0.2   0.2 0.426 0.0440
 8 mu         0.2   0.3 0.465 0.0376
 9 mu         0.2   0.4 0.507 0.0367
10 mu         0.2   0.5 0.592 0.0656
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.596  3.23e-12     11.9 
 2 mu         0.2      0.957        0.867  1.67e- 4      4.06
 3 mu         0.3      0.948        0.947  1.24e- 1      1.77
 4 mu         0.4      1.03         1.01   3.55e- 1      2.35
 5 mu         0.5      0.987        0.984  5.25e- 1      1.60
 6 mu         0.6      1.01         0.993  6.45e- 1      1.96
 7 mu         0.7      0.991        1.01   5.53e- 1      1.70
 8 mu         0.8      0.974        0.963  6.16e- 1      1.50
 9 mu         0.9      0.999        0.999  3.57e- 1      1.70
10 mu_1       0.1      0.999        0.579  1.18e-11      8.03
11 mu_1       0.2      0.954        0.912  3.08e- 4      3.91
12 mu_1       0.3      0.958        0.954  1.56e- 1      1.77
13 mu_1       0.4      1.03         1.02   3.50e- 1      2.34
14 mu_1       0.5      0.985        0.981  5.25e- 1      1.62
15 mu_1       0.6      1.01         0.989  6.53e- 1      1.99
16 mu_1       0.7      0.990        1.01   5.50e- 1      1.67
17 mu_1       0.8      0.973        0.962  6.03e- 1      1.51
18 mu_1       0.9      0.999        0.995  3.49e- 1      1.72
19 mu_0       0.1      1.06         0.561  2.28e-12     12.3 
20 mu_0       0.2      0.958        0.865  1.32e- 4      4.09
21 mu_0       0.3      0.943        0.945  1.10e- 1      1.83
22 mu_0       0.4      1.03         1.01   3.58e- 1      2.36
23 mu_0       0.5      0.989        0.985  5.20e- 1      1.58
24 mu_0       0.6      1.01         0.995  6.28e- 1      1.91
25 mu_0       0.7      0.992        1.01   5.60e- 1      1.77
26 mu_0       0.8      0.976        0.976  6.30e- 1      1.48
27 mu_0       0.9      0.999        0.976  4.23e- 1      1.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00639     2.94e-27  1.32e-90     0.639
 2 mu         0.2    0.234       1.18e-14  8.29e-62    20.3  
 3 mu         0.3    0.516       2.24e- 8  5.09e-45    13.1  
 4 mu         0.4    0.805       2.57e- 4  3.69e-33    15.6  
 5 mu         0.5    1.61        2.26e- 2  5.16e-24    42.8  
 6 mu         0.6    1.45        1.67e- 1  1.32e-16    14.5  
 7 mu         0.7    0.857       1.13e- 1  4.58e-15     6.84 
 8 mu         0.8    0.955       1.86e- 2  6.92e-26     7.17 
 9 mu         0.9    1.95        9.73e- 7  8.92e-46    30.0  
10 mu_1       0.1    0.0133      1.82e-26  1.30e-89     1.33 
11 mu_1       0.2    0.259       3.70e-14  4.06e-61    21.3  
12 mu_1       0.3    0.536       5.24e- 8  1.66e-44    12.6  
13 mu_1       0.4    0.853       4.24e- 4  9.04e-33    18.6  
14 mu_1       0.5    1.64        2.71e- 2  1.01e-23    40.6  
15 mu_1       0.6    1.42        1.32e- 1  2.15e-16    13.7  
16 mu_1       0.7    0.848       1.18e- 1  1.90e-15     7.08 
17 mu_1       0.8    0.970       1.78e- 2  2.51e-26     7.44 
18 mu_1       0.9    1.97        6.90e- 7  2.88e-46    29.6  
19 mu_0       0.1    0.00561     1.25e-27  3.00e-92     0.561
20 mu_0       0.2    0.227       5.47e-15  2.11e-63    20.1  
21 mu_0       0.3    0.507       9.52e- 9  1.49e-46    13.2  
22 mu_0       0.4    0.772       1.53e- 4  1.26e-34    13.7  
23 mu_0       0.5    1.58        2.13e- 2  2.10e-25    45.0  
24 mu_0       0.6    1.50        1.37e- 1  6.72e-18    15.7  
25 mu_0       0.7    0.876       9.28e- 2  1.08e-14     7.32 
26 mu_0       0.8    0.895       2.41e- 2  2.46e-25     6.58 
27 mu_0       0.9    1.83        3.52e- 6  6.34e-45    32.9  
[1] "Total run time was 683.649 seconds"
