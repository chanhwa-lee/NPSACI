
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7626"
[1] "cluster size dist'n: "

 50  51  54  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71  72 
  1   5   1   1   2   3   1   3   1   3   2   2   5   2   1   3   3   1   3   3 
 73  75  76  77  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  1   1   2   2   2   4   3   2   3   2   2   3   3   3   3   3   2   2   2   1 
 97  98  99 100 
  1   3   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04072 0.37208 0.63813 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4589 3037 
[1] "treatment indicator table: "

   0    1 
2638 4988 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3668
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3958
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 407.481 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.326 0.0658
 2 mu         0.1   0.2 0.364 0.0748
 3 mu         0.1   0.3 0.409 0.0863
 4 mu         0.1   0.4 0.424 0.0936
 5 mu         0.1   0.5 0.435 0.104 
 6 mu         0.2   0.1 0.342 0.0411
 7 mu         0.2   0.2 0.400 0.0357
 8 mu         0.2   0.3 0.457 0.0403
 9 mu         0.2   0.4 0.483 0.0429
10 mu         0.2   0.5 0.504 0.0514
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.860        0.410  5.09e-15     16.6 
 2 mu         0.2      1.01         0.795  4.99e- 6      5.43
 3 mu         0.3      1.04         0.915  3.69e- 2      3.41
 4 mu         0.4      0.987        0.954  2.34e- 1      2.03
 5 mu         0.5      0.997        1.01   2.31e- 1      1.43
 6 mu         0.6      0.982        0.970  5.68e- 1      1.76
 7 mu         0.7      1.02         0.997  6.02e- 1      1.95
 8 mu         0.8      0.983        0.997  5.53e- 1      1.47
 9 mu         0.9      1.07         0.986  4.16e- 1      3.32
10 mu_1       0.1      0.918        0.436  2.16e-14     19.5 
11 mu_1       0.2      1.03         0.811  1.07e- 5      4.63
12 mu_1       0.3      1.02         0.929  5.31e- 2      3.08
13 mu_1       0.4      0.991        0.966  2.08e- 1      1.91
14 mu_1       0.5      0.995        1.00   2.57e- 1      1.43
15 mu_1       0.6      0.983        0.972  5.76e- 1      1.77
16 mu_1       0.7      1.02         0.997  5.90e- 1      1.97
17 mu_1       0.8      0.982        0.997  5.61e- 1      1.46
18 mu_1       0.9      1.07         1.00   4.12e- 1      3.32
19 mu_0       0.1      0.854        0.405  3.26e-15     16.3 
20 mu_0       0.2      1.01         0.795  3.57e- 6      5.67
21 mu_0       0.3      1.05         0.921  3.00e- 2      3.66
22 mu_0       0.4      0.984        0.950  2.51e- 1      2.11
23 mu_0       0.5      0.998        1.02   2.05e- 1      1.46
24 mu_0       0.6      0.981        0.963  5.57e- 1      1.74
25 mu_0       0.7      1.02         0.994  6.29e- 1      1.89
26 mu_0       0.8      0.986        0.980  5.10e- 1      1.56
27 mu_0       0.9      1.03         0.968  4.54e- 1      3.26
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      15.4      2.00e-30  2.28e-80    1534. 
 2 mu         0.2       1.79     4.11e-17  1.39e-53     102. 
 3 mu         0.3       2.77     9.99e-10  4.40e-38     154. 
 4 mu         0.4       1.27     5.03e- 5  3.06e-27      17.2
 5 mu         0.5       1.26     6.81e- 3  5.41e-19      14.1
 6 mu         0.6       1.24     1.62e- 1  2.65e-17      34.0
 7 mu         0.7       1.46     9.44e- 2  3.39e-26      26.6
 8 mu         0.8       1.19     7.67e- 2  4.67e-39      11.5
 9 mu         0.9       1.66     1.51e- 6  1.78e-61      27.3
10 mu_1       0.1      16.3      1.50e-29  2.13e-79    1624. 
11 mu_1       0.2       1.50     1.24e-16  6.52e-53      53.8
12 mu_1       0.3       2.73     2.33e- 9  1.37e-37     148. 
13 mu_1       0.4       1.23     8.31e- 5  7.18e-27      12.5
14 mu_1       0.5       1.25     9.90e- 3  1.01e-18      16.3
15 mu_1       0.6       1.23     1.53e- 1  4.68e-18      32.8
16 mu_1       0.7       1.48     1.02e- 1  5.13e-27      27.4
17 mu_1       0.8       1.18     6.24e- 2  6.18e-40      11.5
18 mu_1       0.9       1.66     1.17e- 6  2.10e-62      28.2
19 mu_0       0.1      15.3      5.47e-31  1.58e-81    1524. 
20 mu_0       0.2       1.87     1.78e-17  1.09e-54     114. 
21 mu_0       0.3       2.79     4.29e-10  3.93e-39     156. 
22 mu_0       0.4       1.30     3.01e- 5  3.19e-28      20.4
23 mu_0       0.5       1.26     4.93e- 3  6.76e-20      13.9
24 mu_0       0.6       1.25     2.14e- 1  5.92e-17      35.8
25 mu_0       0.7       1.41     1.01e- 1  1.01e-25      24.6
26 mu_0       0.8       1.23     5.66e- 2  2.09e-38      11.6
27 mu_0       0.9       1.63     4.58e- 6  1.60e-60      26.0
[1] "Total run time was 411.328 seconds"
