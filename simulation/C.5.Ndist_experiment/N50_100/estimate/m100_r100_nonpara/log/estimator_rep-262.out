
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7499"
[1] "cluster size dist'n: "

 50  51  52  53  54  57  59  60  61  62  63  64  65  66  67  68  69  71  73  74 
  2   2   2   1   2   3   2   4   3   2   2   1   5   1   4   2   2   1   4   4 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  91  92  94  96  97 
  4   2   1   3   2   1   1   3   2   1   6   3   1   1   3   3   1   2   4   2 
 98  99 100 
  2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0316  0.3467  0.6094  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4470 3029 
[1] "treatment indicator table: "

   0    1 
2759 4740 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3860
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3639
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 425.716 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.309 0.101 
 2 mu         0.1   0.2 0.379 0.106 
 3 mu         0.1   0.3 0.416 0.125 
 4 mu         0.1   0.4 0.482 0.131 
 5 mu         0.1   0.5 0.484 0.138 
 6 mu         0.2   0.1 0.356 0.0564
 7 mu         0.2   0.2 0.448 0.0392
 8 mu         0.2   0.3 0.496 0.0485
 9 mu         0.2   0.4 0.570 0.0487
10 mu         0.2   0.5 0.584 0.0529
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.930       0.0495  6.66e-11     13.3 
 2 mu         0.2      1.16        0.961   2.16e- 4      4.67
 3 mu         0.3      1.08        1.07    7.93e- 2      2.51
 4 mu         0.4      1.01        0.990   4.40e- 1      1.66
 5 mu         0.5      0.972       0.980   5.05e- 1      1.50
 6 mu         0.6      0.993       0.977   7.27e- 1      1.36
 7 mu         0.7      1.01        0.995   6.83e- 1      1.35
 8 mu         0.8      1.04        1.01    5.41e- 1      1.84
 9 mu         0.9      1.01        0.971   1.68e- 1      2.66
10 mu_1       0.1      1.04        0.0964  2.50e-10     15.1 
11 mu_1       0.2      1.15        1.01    4.09e- 4      3.25
12 mu_1       0.3      1.07        1.05    1.04e- 1      2.44
13 mu_1       0.4      1.00        0.995   4.26e- 1      1.64
14 mu_1       0.5      0.973       0.984   5.34e- 1      1.49
15 mu_1       0.6      0.994       0.981   7.25e- 1      1.34
16 mu_1       0.7      1.01        0.995   6.74e- 1      1.35
17 mu_1       0.8      1.04        1.01    5.40e- 1      1.86
18 mu_1       0.9      1.01        0.972   1.60e- 1      2.71
19 mu_0       0.1      0.918       0.0439  4.62e-11     13.1 
20 mu_0       0.2      1.16        0.946   1.68e- 4      5.02
21 mu_0       0.3      1.08        1.08    6.87e- 2      2.54
22 mu_0       0.4      1.01        0.986   4.50e- 1      1.68
23 mu_0       0.5      0.972       0.982   4.76e- 1      1.51
24 mu_0       0.6      0.991       0.981   6.98e- 1      1.39
25 mu_0       0.7      1.01        0.990   6.96e- 1      1.39
26 mu_0       0.8      1.04        1.01    5.45e- 1      1.77
27 mu_0       0.9      1.01        0.966   2.42e- 1      2.32
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.144     6.41e-29  2.43e-66      7.70
 2 mu         0.2      2.27      5.86e-16  4.51e-42    121.  
 3 mu         0.3      0.770     4.95e- 9  2.87e-28     21.3 
 4 mu         0.4      1.27      1.40e- 4  9.38e-20     24.0 
 5 mu         0.5      1.27      5.85e- 2  1.91e-13     15.8 
 6 mu         0.6      1.17      3.08e- 1  8.71e-10     10.9 
 7 mu         0.7      1.52      5.01e- 1  3.20e-16     18.4 
 8 mu         0.8      1.44      5.74e- 2  8.48e-26     16.4 
 9 mu         0.9      1.70      5.48e- 7  7.65e-43     42.9 
10 mu_1       0.1      0.276     3.90e-28  2.08e-65     14.8 
11 mu_1       0.2      2.19      2.07e-15  1.93e-41    116.  
12 mu_1       0.3      0.770     1.05e- 8  8.19e-28     23.1 
13 mu_1       0.4      1.30      2.24e- 4  2.16e-19     24.7 
14 mu_1       0.5      1.27      5.25e- 2  3.52e-13     17.1 
15 mu_1       0.6      1.16      3.47e- 1  2.78e-10      9.76
16 mu_1       0.7      1.55      4.46e- 1  8.78e-17     19.7 
17 mu_1       0.8      1.43      4.82e- 2  2.03e-26     15.4 
18 mu_1       0.9      1.72      4.09e- 7  1.63e-43     43.8 
19 mu_0       0.1      0.129     2.76e-29  3.89e-67      6.92
20 mu_0       0.2      2.30      2.16e-16  8.14e-43    122.  
21 mu_0       0.3      0.770     2.32e- 9  4.79e-29     20.6 
22 mu_0       0.4      1.26      8.47e- 5  1.23e-20     23.6 
23 mu_0       0.5      1.27      3.92e- 2  3.02e-14     14.6 
24 mu_0       0.6      1.18      2.17e- 1  1.76e- 9     12.6 
25 mu_0       0.7      1.45      5.47e- 1  8.63e-16     15.4 
26 mu_0       0.8      1.49      6.31e- 2  3.43e-25     20.5 
27 mu_0       0.9      1.48      1.84e- 6  6.18e-42     35.2 
[1] "Total run time was 429.281 seconds"
