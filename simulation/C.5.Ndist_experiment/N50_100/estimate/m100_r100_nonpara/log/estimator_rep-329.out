
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7640"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  63  64  66  67  68  69  70  72  73 
  1   1   3   3   2   2   1   2   1   3   2   1   3   4   4   1   1   2   4   4 
 74  75  76  77  78  79  81  82  83  84  86  88  89  90  91  93  94  95  96  97 
  3   3   4   3   1   1   1   2   3   1   1   1   3   3   1   2   1   5   5   4 
 98  99 100 
  4   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03814 0.35639 0.60478 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4476 3164 
[1] "treatment indicator table: "

   0    1 
2900 4740 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3749
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3891
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 458.461 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.151 0.0380
 2 mu         0.1   0.2 0.162 0.0487
 3 mu         0.1   0.3 0.198 0.0535
 4 mu         0.1   0.4 0.204 0.0684
 5 mu         0.1   0.5 0.250 0.0604
 6 mu         0.2   0.1 0.331 0.0332
 7 mu         0.2   0.2 0.402 0.0441
 8 mu         0.2   0.3 0.473 0.0450
 9 mu         0.2   0.4 0.494 0.0620
10 mu         0.2   0.5 0.560 0.0515
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.501       0.0315 0.00000000692      6.79
 2 mu         0.2      1.09        0.864  0.00187            5.22
 3 mu         0.3      1.02        0.978  0.161              2.76
 4 mu         0.4      1.02        1.02   0.442              1.57
 5 mu         0.5      1.00        0.984  0.661              1.48
 6 mu         0.6      0.997       0.977  0.667              1.46
 7 mu         0.7      0.996       0.975  0.663              1.43
 8 mu         0.8      1.02        1.01   0.596              1.51
 9 mu         0.9      1.07        0.965  0.137              3.34
10 mu_1       0.1      0.620       0.0622 0.0000000214       6.39
11 mu_1       0.2      1.08        0.853  0.00334            4.41
12 mu_1       0.3      1.02        0.990  0.189              2.56
13 mu_1       0.4      1.01        1.02   0.423              1.52
14 mu_1       0.5      1.00        0.984  0.667              1.46
15 mu_1       0.6      0.997       0.976  0.677              1.46
16 mu_1       0.7      0.996       0.967  0.664              1.44
17 mu_1       0.8      1.02        1.00   0.594              1.50
18 mu_1       0.9      1.07        0.964  0.131              3.36
19 mu_0       0.1      0.487       0.0281 0.00000000531      7.05
20 mu_0       0.2      1.09        0.866  0.00150            5.43
21 mu_0       0.3      1.02        0.973  0.149              2.85
22 mu_0       0.4      1.02        1.02   0.454              1.60
23 mu_0       0.5      1.00        0.995  0.655              1.51
24 mu_0       0.6      0.998       0.982  0.653              1.45
25 mu_0       0.7      0.997       0.994  0.653              1.42
26 mu_0       0.8      1.02        1.01   0.562              1.58
27 mu_0       0.9      1.07        0.988  0.199              3.17
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00275     4.93e-27  8.10e-74     0.258
 2 mu         0.2    0.372       3.35e-14  7.72e-48    19.0  
 3 mu         0.3    1.24        1.01e- 7  6.37e-33    20.8  
 4 mu         0.4    0.844       7.68e- 4  1.35e-22    19.2  
 5 mu         0.5    0.858       6.12e- 2  7.33e-15     9.55 
 6 mu         0.6    1.18        5.04e- 1  7.31e- 9    11.4  
 7 mu         0.7    1.24        3.61e- 1  7.20e-15     5.89 
 8 mu         0.8    1.22        1.52e- 2  4.85e-25    25.1  
 9 mu         0.9    1.23        3.65e- 8  1.25e-43    35.7  
10 mu_1       0.1    0.00678     3.16e-26  7.28e-73     0.633
11 mu_1       0.2    0.489       1.10e-13  3.47e-47    23.3  
12 mu_1       0.3    1.24        2.29e- 7  1.91e-32    19.9  
13 mu_1       0.4    0.828       1.25e- 3  3.02e-22    20.7  
14 mu_1       0.5    0.868       8.42e- 2  1.32e-14     8.24 
15 mu_1       0.6    1.21        4.76e- 1  1.09e- 8    11.8  
16 mu_1       0.7    1.22        3.55e- 1  2.83e-15     5.93 
17 mu_1       0.8    1.24        1.20e- 2  1.66e-25    25.2  
18 mu_1       0.9    1.21        2.72e- 8  3.81e-44    36.2  
19 mu_0       0.1    0.00230     1.96e-27  9.19e-75     0.216
20 mu_0       0.2    0.342       1.44e-14  9.85e-49    17.9  
21 mu_0       0.3    1.25        4.35e- 8  9.28e-34    21.1  
22 mu_0       0.4    0.855       4.83e- 4  2.29e-23    18.2  
23 mu_0       0.5    0.848       4.81e- 2  1.50e-15    10.9  
24 mu_0       0.6    1.15        4.27e- 1  1.87e- 9    11.3  
25 mu_0       0.7    1.27        4.61e- 1  1.74e-14     6.22 
26 mu_0       0.8    1.16        2.79e- 2  1.76e-24    24.5  
27 mu_0       0.9    1.40        1.29e- 7  9.05e-43    31.3  
[1] "Total run time was 462.2 seconds"
