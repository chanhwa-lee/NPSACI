
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7566"
[1] "cluster size dist'n: "

 50  52  54  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71  73  74 
  3   1   2   3   2   2   1   4   4   1   3   3   2   1   4   1   3   1   4   2 
 75  77  78  79  80  81  82  84  86  87  88  89  90  91  92  93  94  95  96  97 
  4   3   4   5   2   1   1   2   2   1   1   3   4   2   3   3   2   2   2   2 
 98 100 
  2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0249  0.3401  0.6084  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4414 3152 
[1] "treatment indicator table: "

   0    1 
2959 4607 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3735
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3831
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 484.928 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.588 0.170 
 2 mu         0.1   0.2 0.648 0.195 
 3 mu         0.1   0.3 0.714 0.216 
 4 mu         0.1   0.4 0.744 0.234 
 5 mu         0.1   0.5 0.821 0.248 
 6 mu         0.2   0.1 0.442 0.102 
 7 mu         0.2   0.2 0.484 0.0992
 8 mu         0.2   0.3 0.538 0.103 
 9 mu         0.2   0.4 0.562 0.104 
10 mu         0.2   0.5 0.614 0.103 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.31         0.224  5.67e-10     35.3 
 2 mu         0.2      0.995        0.812  2.62e- 3      3.23
 3 mu         0.3      1.02         1.03   3.10e- 1      1.88
 4 mu         0.4      0.988        0.964  5.96e- 1      1.68
 5 mu         0.5      1.01         1.00   6.85e- 1      1.40
 6 mu         0.6      1.00         0.990  7.34e- 1      1.43
 7 mu         0.7      1.02         1.01   7.12e- 1      1.38
 8 mu         0.8      0.992        1.02   6.04e- 1      1.39
 9 mu         0.9      1.03         0.985  3.86e- 1      2.19
10 mu_1       0.1      1.23         0.383  1.93e- 9     22.3 
11 mu_1       0.2      0.985        0.839  4.46e- 3      3.08
12 mu_1       0.3      1.03         0.997  3.21e- 1      1.89
13 mu_1       0.4      0.986        0.953  6.19e- 1      1.65
14 mu_1       0.5      1.01         0.991  6.78e- 1      1.42
15 mu_1       0.6      1.00         0.992  7.16e- 1      1.42
16 mu_1       0.7      1.02         1.01   7.00e- 1      1.38
17 mu_1       0.8      0.991        1.02   5.96e- 1      1.42
18 mu_1       0.9      1.03         0.984  3.81e- 1      2.19
19 mu_0       0.1      1.32         0.204  4.16e-10     36.8 
20 mu_0       0.2      0.997        0.797  2.16e- 3      3.30
21 mu_0       0.3      1.02         1.03   3.05e- 1      1.88
22 mu_0       0.4      0.989        0.976  5.80e- 1      1.70
23 mu_0       0.5      1.01         1.00   6.77e- 1      1.37
24 mu_0       0.6      1.00         0.989  7.36e- 1      1.45
25 mu_0       0.7      1.02         1.01   6.85e- 1      1.37
26 mu_0       0.8      0.994        1.02   6.37e- 1      1.36
27 mu_0       0.9      1.02         0.976  2.48e- 1      2.36
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.95      9.39e-27  4.13e-69    139.  
 2 mu         0.2      3.05      2.92e-14  2.18e-44    164.  
 3 mu         0.3      0.977     1.22e- 7  3.11e-30     15.7 
 4 mu         0.4      0.737     9.61e- 4  1.78e-20      7.05
 5 mu         0.5      0.882     7.33e- 2  3.32e-13     10.8 
 6 mu         0.6      1.09      3.90e- 1  3.24e-16      6.09
 7 mu         0.7      0.940     2.42e- 1  2.13e-25      5.59
 8 mu         0.8      1.15      1.04e- 2  7.53e-39      8.29
 9 mu         0.9      1.22      7.01e- 9  1.62e-62     22.6 
10 mu_1       0.1      2.88      6.19e-26  3.65e-68    205.  
11 mu_1       0.2      2.50      1.01e-13  9.66e-44    121.  
12 mu_1       0.3      0.975     2.41e- 7  9.17e-30     16.2 
13 mu_1       0.4      0.729     9.51e- 4  3.94e-20      6.00
14 mu_1       0.5      0.892     7.43e- 2  5.87e-13     10.5 
15 mu_1       0.6      1.10      3.38e- 1  7.97e-17      6.40
16 mu_1       0.7      0.932     2.11e- 1  4.48e-26      5.51
17 mu_1       0.8      1.16      8.10e- 3  1.39e-39      8.57
18 mu_1       0.9      1.21      5.00e- 9  2.65e-63     23.8 
19 mu_0       0.1      1.84      3.09e-27  5.31e-70    132.  
20 mu_0       0.2      3.19      1.14e-14  3.16e-45    175.  
21 mu_0       0.3      0.979     7.20e- 8  5.15e-31     15.4 
22 mu_0       0.4      0.743     6.14e- 4  3.44e-21      7.74
23 mu_0       0.5      0.871     5.17e- 2  7.69e-14     11.0 
24 mu_0       0.6      1.08      3.57e- 1  6.92e-16      5.64
25 mu_0       0.7      0.958     2.14e- 1  6.05e-25      5.79
26 mu_0       0.8      1.11      1.96e- 2  3.21e-38      8.67
27 mu_0       0.9      1.31      2.51e- 8  1.38e-61     21.8 
[1] "Total run time was 488.41 seconds"
