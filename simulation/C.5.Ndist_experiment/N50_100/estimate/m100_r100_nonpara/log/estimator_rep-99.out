
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7741"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  58  59  60  61  63  64  65  66  67  69  70  71  72  73 
  3   1   1   1   2   2   1   1   3   3   1   2   2   2   2   3   3   3   2   4 
 74  75  76  77  79  81  83  84  86  87  88  89  90  91  93  95  96  97  98  99 
  3   1   2   7   2   1   2   3   1   2   4   6   3   2   3   4   2   3   3   2 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0269  0.3324  0.6014  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4655 3086 
[1] "treatment indicator table: "

   0    1 
2826 4915 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3675
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 4066
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.361 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.331 0.0576
 2 mu         0.1   0.2 0.409 0.0556
 3 mu         0.1   0.3 0.443 0.0623
 4 mu         0.1   0.4 0.496 0.0691
 5 mu         0.1   0.5 0.515 0.0634
 6 mu         0.2   0.1 0.384 0.0403
 7 mu         0.2   0.2 0.482 0.0347
 8 mu         0.2   0.3 0.557 0.0558
 9 mu         0.2   0.4 0.602 0.0533
10 mu         0.2   0.5 0.643 0.0477
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.815        0.411 0.000000712      5.38
 2 mu         0.2      1.06         0.969 0.0131           2.88
 3 mu         0.3      1.06         1.02  0.423            2.61
 4 mu         0.4      0.965        0.923 0.555            1.46
 5 mu         0.5      0.965        0.939 0.459            1.39
 6 mu         0.6      1.02         0.998 0.591            1.55
 7 mu         0.7      1.03         1.01  0.560            1.50
 8 mu         0.8      1.01         0.986 0.575            1.56
 9 mu         0.9      1.03         1.03  0.269            1.88
10 mu_1       0.1      0.891        0.549 0.00000222       4.66
11 mu_1       0.2      1.06         0.969 0.0213           2.88
12 mu_1       0.3      1.05         1.02  0.433            2.56
13 mu_1       0.4      0.960        0.935 0.539            1.44
14 mu_1       0.5      0.969        0.943 0.470            1.39
15 mu_1       0.6      1.02         1.01  0.589            1.57
16 mu_1       0.7      1.03         1.00  0.555            1.49
17 mu_1       0.8      1.01         0.988 0.564            1.56
18 mu_1       0.9      1.03         1.03  0.265            1.88
19 mu_0       0.1      0.806        0.389 0.000000545      5.53
20 mu_0       0.2      1.06         0.964 0.0110           2.88
21 mu_0       0.3      1.06         1.03  0.391            2.63
22 mu_0       0.4      0.967        0.921 0.561            1.49
23 mu_0       0.5      0.961        0.939 0.448            1.39
24 mu_0       0.6      1.01         1.00  0.594            1.53
25 mu_0       0.7      1.03         1.02  0.573            1.51
26 mu_0       0.8      1.02         1.02  0.605            1.58
27 mu_0       0.9      1.02         1.02  0.312            1.87
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00140     7.08e-28  1.51e-83    0.0926
 2 mu         0.2    0.383       1.46e-14  7.37e-57   16.1   
 3 mu         0.3    1.03        5.38e- 8  2.65e-41   19.0   
 4 mu         0.4    0.841       9.27e- 4  2.57e-30   13.3   
 5 mu         0.5    1.27        2.69e- 2  7.51e-22   20.7   
 6 mu         0.6    1.12        9.42e- 2  5.36e-15    8.96  
 7 mu         0.7    0.978       9.93e- 2  3.80e-18    9.88  
 8 mu         0.8    1.34        7.29e- 3  5.09e-29   15.5   
 9 mu         0.9    1.56        1.96e- 8  1.62e-48   29.1   
10 mu_1       0.1    0.00326     4.71e-27  1.47e-82    0.202 
11 mu_1       0.2    0.469       4.83e-14  3.60e-56   17.6   
12 mu_1       0.3    1.04        1.13e- 7  8.65e-41   20.5   
13 mu_1       0.4    0.861       1.46e- 3  6.27e-30   15.4   
14 mu_1       0.5    1.28        2.43e- 2  1.47e-21   19.1   
15 mu_1       0.6    1.11        9.64e- 2  8.74e-15    9.22  
16 mu_1       0.7    0.980       1.07e- 1  1.18e-18   10.2   
17 mu_1       0.8    1.34        5.60e- 3  1.39e-29   15.3   
18 mu_1       0.9    1.57        1.35e- 8  3.92e-49   29.8   
19 mu_0       0.1    0.00120     2.63e-28  3.68e-85    0.0804
20 mu_0       0.2    0.362       6.22e-15  2.02e-58   15.8   
21 mu_0       0.3    1.02        2.84e- 8  8.33e-43   18.4   
22 mu_0       0.4    0.827       5.72e- 4  9.40e-32   12.0   
23 mu_0       0.5    1.27        2.70e- 2  3.30e-23   22.3   
24 mu_0       0.6    1.13        1.01e- 1  2.95e-16    8.57  
25 mu_0       0.7    0.971       8.88e- 2  9.89e-18    9.08  
26 mu_0       0.8    1.34        1.18e- 2  1.99e-28   15.9   
27 mu_0       0.9    1.38        7.42e- 8  1.26e-47   23.6   
[1] "Total run time was 444.882 seconds"
