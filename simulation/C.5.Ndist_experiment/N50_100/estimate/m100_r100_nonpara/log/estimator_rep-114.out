
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7369"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  69  70  71 
  1   3   3   1   2   2   4   2   3   1   2   1   2   3   1   6   4   2   3   5 
 72  73  75  76  78  79  80  81  82  83  86  89  90  91  92  93  94  95  96  97 
  4   2   2   1   2   3   2   1   2   2   3   2   3   1   4   1   1   4   1   2 
 99 100 
  3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03773 0.36060 0.61569 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4363 3006 
[1] "treatment indicator table: "

   0    1 
2660 4709 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3642
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3727
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 374.833 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.371 0.0486
 2 mu         0.1   0.2 0.481 0.0603
 3 mu         0.1   0.3 0.593 0.0688
 4 mu         0.1   0.4 0.601 0.0998
 5 mu         0.1   0.5 0.632 0.114 
 6 mu         0.2   0.1 0.284 0.0410
 7 mu         0.2   0.2 0.395 0.0608
 8 mu         0.2   0.3 0.488 0.0720
 9 mu         0.2   0.4 0.479 0.0960
10 mu         0.2   0.5 0.497 0.106 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.20         0.988 0.0000985      4.77
 2 mu         0.2      0.995        0.953 0.154          2.21
 3 mu         0.3      0.976        0.951 0.444          2.21
 4 mu         0.4      1.01         0.997 0.612          1.68
 5 mu         0.5      1.01         1.01  0.660          1.42
 6 mu         0.6      1.01         0.983 0.606          1.38
 7 mu         0.7      1.01         0.985 0.649          1.68
 8 mu         0.8      0.976        0.955 0.595          1.47
 9 mu         0.9      0.995        0.945 0.393          1.85
10 mu_1       0.1      1.16         0.995 0.000246       3.45
11 mu_1       0.2      0.984        0.951 0.195          1.99
12 mu_1       0.3      0.978        0.944 0.443          2.16
13 mu_1       0.4      1.02         1.00  0.614          1.69
14 mu_1       0.5      1.01         1.01  0.668          1.40
15 mu_1       0.6      1.01         0.979 0.615          1.41
16 mu_1       0.7      1.01         0.985 0.644          1.70
17 mu_1       0.8      0.977        0.952 0.584          1.48
18 mu_1       0.9      0.995        0.947 0.387          1.84
19 mu_0       0.1      1.20         0.998 0.0000822      4.98
20 mu_0       0.2      0.998        0.957 0.143          2.30
21 mu_0       0.3      0.975        0.959 0.417          2.23
22 mu_0       0.4      1.01         0.998 0.609          1.68
23 mu_0       0.5      1.01         1.01  0.652          1.43
24 mu_0       0.6      1.01         0.986 0.593          1.34
25 mu_0       0.7      1.01         0.989 0.659          1.65
26 mu_0       0.8      0.975        0.946 0.575          1.45
27 mu_0       0.9      0.992        0.949 0.414          1.93
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.02      8.20e-29  9.74e-78     97.5 
 2 mu         0.2      0.880     5.25e-16  2.01e-51     33.6 
 3 mu         0.3      0.595     2.14e- 9  1.43e-37     17.4 
 4 mu         0.4      0.835     4.52e- 5  9.09e-28     13.4 
 5 mu         0.5      1.09      1.69e- 2  3.43e-20     11.0 
 6 mu         0.6      1.09      4.18e- 1  4.43e-14      7.49
 7 mu         0.7      1.56      2.45e- 1  6.85e-18     11.9 
 8 mu         0.8      1.11      6.55e- 2  1.47e-26     11.3 
 9 mu         0.9      1.23      2.90e- 6  8.38e-46     17.8 
10 mu_1       0.1      2.22      5.36e-28  8.86e-77     90.2 
11 mu_1       0.2      0.691     1.86e-15  9.90e-51     23.0 
12 mu_1       0.3      0.610     4.96e- 9  4.71e-37     16.3 
13 mu_1       0.4      0.859     6.34e- 5  2.24e-27     14.7 
14 mu_1       0.5      1.10      2.04e- 2  6.78e-20     10.2 
15 mu_1       0.6      1.09      4.18e- 1  7.28e-14      7.36
16 mu_1       0.7      1.58      1.95e- 1  9.05e-19     12.5 
17 mu_1       0.8      1.09      5.36e- 2  3.63e-27     11.8 
18 mu_1       0.9      1.23      2.07e- 6  2.43e-46     17.9 
19 mu_0       0.1      2.00      3.15e-29  9.74e-79     98.3 
20 mu_0       0.2      0.927     1.91e-16  3.13e-53     36.2 
21 mu_0       0.3      0.589     9.32e-10  2.55e-39     17.8 
22 mu_0       0.4      0.819     2.31e- 5  1.89e-29     12.5 
23 mu_0       0.5      1.08      1.10e- 2  8.58e-22     11.8 
24 mu_0       0.6      1.09      3.06e- 1  1.42e-15      7.69
25 mu_0       0.7      1.51      3.60e- 1  2.07e-17     10.6 
26 mu_0       0.8      1.18      9.01e- 2  5.41e-26     10.3 
27 mu_0       0.9      1.22      1.04e- 5  6.20e-45     17.3 
[1] "Total run time was 378.07 seconds"
