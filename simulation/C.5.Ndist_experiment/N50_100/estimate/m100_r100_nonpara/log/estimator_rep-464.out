
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7743"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  64  65  66  67  68  69  71 
  2   1   1   1   2   1   2   1   1   2   3   5   1   1   2   3   1   3   3   1 
 72  73  75  76  77  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  4   2   1   2   3   4   3   1   3   1   1   1   3   4   1   2   5   2   4   4 
 95  96  97  98  99 100 
  3   3   1   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03711 0.34469 0.61338 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4651 3092 
[1] "treatment indicator table: "

   0    1 
2954 4789 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3835
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3908
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 392.011 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.796 0.377 
 2 mu         0.1   0.2 1.02  0.502 
 3 mu         0.1   0.3 1.21  0.599 
 4 mu         0.1   0.4 1.34  0.661 
 5 mu         0.1   0.5 1.42  0.707 
 6 mu         0.2   0.1 0.298 0.0435
 7 mu         0.2   0.2 0.390 0.0561
 8 mu         0.2   0.3 0.471 0.0688
 9 mu         0.2   0.4 0.510 0.0722
10 mu         0.2   0.5 0.549 0.0734
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.57        0.0229  1.05e-12    124.  
 2 mu         0.2      1.01        0.792   6.81e- 5     10.6 
 3 mu         0.3      0.941       0.886   5.41e- 2      3.25
 4 mu         0.4      0.975       0.951   3.98e- 1      1.75
 5 mu         0.5      1.01        1.00    7.03e- 1      1.46
 6 mu         0.6      1.02        1.01    6.53e- 1      1.30
 7 mu         0.7      0.994       0.999   7.00e- 1      1.27
 8 mu         0.8      0.982       0.955   5.50e- 1      1.84
 9 mu         0.9      1.01        1.00    3.06e- 1      1.83
10 mu_1       0.1      2.45        0.0476  3.95e-12    103.  
11 mu_1       0.2      0.951       0.824   1.29e- 4      9.59
12 mu_1       0.3      0.945       0.886   7.41e- 2      3.14
13 mu_1       0.4      0.978       0.950   3.77e- 1      1.78
14 mu_1       0.5      1.01        1.01    7.20e- 1      1.44
15 mu_1       0.6      1.02        1.01    6.49e- 1      1.30
16 mu_1       0.7      0.994       1.00    6.90e- 1      1.26
17 mu_1       0.8      0.981       0.950   5.55e- 1      1.87
18 mu_1       0.9      1.01        0.978   3.07e- 1      1.88
19 mu_0       0.1      2.58        0.0200  7.31e-13    126.  
20 mu_0       0.2      1.02        0.772   5.29e- 5     10.9 
21 mu_0       0.3      0.939       0.887   4.56e- 2      3.30
22 mu_0       0.4      0.974       0.951   4.12e- 1      1.74
23 mu_0       0.5      1.00        0.991   6.68e- 1      1.47
24 mu_0       0.6      1.02        1.02    6.59e- 1      1.29
25 mu_0       0.7      0.995       0.996   7.07e- 1      1.27
26 mu_0       0.8      0.983       0.971   5.31e- 1      1.74
27 mu_0       0.9      0.991       0.954   2.96e- 1      1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta  mean_value median_value min_value   max_value
   <fct>    <dbl>       <dbl>        <dbl>     <dbl>       <dbl>
 1 mu         0.1 0.000000151     1.30e-28  7.11e-71  0.0000117 
 2 mu         0.2 0.0132          1.07e-15  8.48e-47  0.607     
 3 mu         0.3 0.701           2.88e- 8  6.98e-33 17.3       
 4 mu         0.4 2.22            6.03e- 4  3.65e-23 32.3       
 5 mu         0.5 1.38            1.29e- 1  8.65e-16 13.6       
 6 mu         0.6 1.11            3.29e- 1  5.87e-10  8.28      
 7 mu         0.7 1.14            4.60e- 1  9.81e-13  7.06      
 8 mu         0.8 1.04            1.29e- 2  1.29e-22 11.2       
 9 mu         0.9 1.67            4.71e- 8  5.97e-41 40.1       
10 mu_1       0.1 0.000000507     8.62e-28  6.62e-70  0.0000396 
11 mu_1       0.2 0.0217          3.33e-15  3.95e-46  0.949     
12 mu_1       0.3 0.832           5.95e- 8  2.17e-32 18.5       
13 mu_1       0.4 2.24            9.85e- 4  8.49e-23 29.9       
14 mu_1       0.5 1.33            1.65e- 1  1.61e-15 12.9       
15 mu_1       0.6 1.12            3.18e- 1  9.12e-10  7.60      
16 mu_1       0.7 1.13            4.40e- 1  4.38e-13  7.29      
17 mu_1       0.8 1.04            1.13e- 2  5.03e-23 11.3       
18 mu_1       0.9 1.70            3.46e- 8  2.07e-41 42.4       
19 mu_0       0.1 0.000000111     4.88e-29  0         0.00000860
20 mu_0       0.2 0.0111          5.12e-16  0         0.522     
21 mu_0       0.3 0.645           1.56e- 8  0        17.0       
22 mu_0       0.4 2.20            3.48e- 4  0        33.9       
23 mu_0       0.5 1.43            9.24e- 2  0        14.3       
24 mu_0       0.6 1.09            3.41e- 1  0         9.30      
25 mu_0       0.7 1.16            5.82e- 1  0         6.52      
26 mu_0       0.8 1.05            2.01e- 2  0        10.9       
27 mu_0       0.9 1.35            9.82e- 8  0        31.3       
[1] "Total run time was 395.165 seconds"
