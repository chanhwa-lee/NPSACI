
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7571"
[1] "cluster size dist'n: "

 52  53  54  55  57  58  59  60  61  62  63  64  66  67  68  69  70  71  72  74 
  2   2   4   2   3   2   5   1   4   1   1   2   2   1   3   5   2   1   5   2 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  93  95  96 
  1   2   1   1   2   1   2   3   2   2   1   2   3   1   3   4   1   2   4   3 
 97  98  99 100 
  2   1   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03767 0.36336 0.62620 1.00000 6.11291 
[1] "event indicator table: "

   0    1 
4498 3073 
[1] "treatment indicator table: "

   0    1 
2800 4771 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3843
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3728
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 440.031 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.558 0.116 
 2 mu         0.1   0.2 0.636 0.126 
 3 mu         0.1   0.3 0.684 0.131 
 4 mu         0.1   0.4 0.753 0.135 
 5 mu         0.1   0.5 0.772 0.132 
 6 mu         0.2   0.1 0.439 0.0815
 7 mu         0.2   0.2 0.506 0.0775
 8 mu         0.2   0.3 0.548 0.0686
 9 mu         0.2   0.4 0.610 0.0670
10 mu         0.2   0.5 0.628 0.0483
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.14         0.562 0.0000000388     13.3 
 2 mu         0.2      1.01         1.02  0.00550           2.44
 3 mu         0.3      0.979        0.993 0.363             1.84
 4 mu         0.4      0.994        0.964 0.607             1.54
 5 mu         0.5      1.02         1.01  0.600             1.59
 6 mu         0.6      1.01         0.997 0.546             1.47
 7 mu         0.7      1.01         1.00  0.472             1.62
 8 mu         0.8      0.991        0.979 0.502             1.76
 9 mu         0.9      0.945        0.908 0.211             1.83
10 mu_1       0.1      0.971        0.561 0.000000126      11.1 
11 mu_1       0.2      1.03         1.07  0.00921           2.67
12 mu_1       0.3      0.970        0.979 0.364             1.76
13 mu_1       0.4      0.999        0.974 0.591             1.52
14 mu_1       0.5      1.02         1.01  0.595             1.59
15 mu_1       0.6      1.01         0.990 0.550             1.47
16 mu_1       0.7      1.02         1.01  0.483             1.63
17 mu_1       0.8      0.989        0.984 0.488             1.77
18 mu_1       0.9      0.945        0.912 0.200             1.84
19 mu_0       0.1      1.16         0.565 0.0000000291     13.5 
20 mu_0       0.2      1.01         1.02  0.00458           2.38
21 mu_0       0.3      0.983        0.982 0.363             1.88
22 mu_0       0.4      0.991        0.956 0.614             1.56
23 mu_0       0.5      1.02         1.02  0.604             1.59
24 mu_0       0.6      1.01         0.995 0.541             1.46
25 mu_0       0.7      1.01         1.01  0.446             1.61
26 mu_0       0.8      0.999        0.974 0.556             1.69
27 mu_0       0.9      0.947        0.944 0.257             1.72
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.841     9.95e-30  1.55e-96     41.9 
 2 mu         0.2      1.69      6.69e-16  1.97e-66     65.1 
 3 mu         0.3      0.886     1.21e- 8  8.00e-49     20.7 
 4 mu         0.4      0.986     4.12e- 4  2.50e-36     22.5 
 5 mu         0.5      0.873     1.65e- 2  1.23e-26     10.0 
 6 mu         0.6      1.08      1.33e- 1  1.01e-18      8.57
 7 mu         0.7      1.30      4.89e- 1  6.52e-19      8.99
 8 mu         0.8      1.28      1.77e- 2  5.14e-29     12.6 
 9 mu         0.9      1.29      4.58e- 7  8.14e-47     18.2 
10 mu_1       0.1      1.29      6.92e-29  1.55e-95     64.1 
11 mu_1       0.2      1.47      2.23e-15  9.84e-66     49.7 
12 mu_1       0.3      0.885     2.53e- 8  2.67e-48     20.7 
13 mu_1       0.4      0.985     6.59e- 4  6.24e-36     22.1 
14 mu_1       0.5      0.877     2.29e- 2  2.45e-26     10.9 
15 mu_1       0.6      1.10      1.21e- 1  1.69e-18      7.81
16 mu_1       0.7      1.30      5.29e- 1  1.42e-19      8.99
17 mu_1       0.8      1.29      1.66e- 2  9.81e-30     13.2 
18 mu_1       0.9      1.29      3.31e- 7  1.38e-47     18.4 
19 mu_0       0.1      0.792     3.37e-30  0            39.5 
20 mu_0       0.2      1.75      2.80e-16  0            69.0 
21 mu_0       0.3      0.887     6.42e- 9  0            20.7 
22 mu_0       0.4      0.987     2.37e- 4  0            22.8 
23 mu_0       0.5      0.870     1.19e- 2  0             9.16
24 mu_0       0.6      1.05      1.33e- 1  0             9.72
25 mu_0       0.7      1.30      3.87e- 1  0             8.99
26 mu_0       0.8      1.26      2.37e- 2  0            10.2 
27 mu_0       0.9      1.26      6.79e- 7  0            16.9 
[1] "Total run time was 443.585 seconds"
