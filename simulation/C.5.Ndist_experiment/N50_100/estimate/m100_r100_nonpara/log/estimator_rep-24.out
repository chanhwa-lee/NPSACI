
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7657"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  58  59  61  62  63  64  65  67  69  70  71  72  75  76 
  2   4   2   1   5   2   3   1   1   2   1   2   6   4   2   3   1   2   1   1 
 77  79  81  82  84  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 
  2   1   4   2   5   2   4   6   1   3   2   3   3   2   3   4   1   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03313 0.34424 0.60445 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4475 3182 
[1] "treatment indicator table: "

   0    1 
3051 4606 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3741
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3916
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 670.549 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.336 0.0844
 2 mu         0.1   0.2 0.429 0.100 
 3 mu         0.1   0.3 0.547 0.123 
 4 mu         0.1   0.4 0.611 0.147 
 5 mu         0.1   0.5 0.611 0.145 
 6 mu         0.2   0.1 0.395 0.0507
 7 mu         0.2   0.2 0.495 0.0576
 8 mu         0.2   0.3 0.606 0.0781
 9 mu         0.2   0.4 0.679 0.0986
10 mu         0.2   0.5 0.696 0.0939
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.873        0.233 0.000000341     15.0 
 2 mu         0.2      1.14         0.949 0.0377           4.51
 3 mu         0.3      1.02         1.04  0.288            2.35
 4 mu         0.4      1.04         1.02  0.600            2.09
 5 mu         0.5      0.998        0.985 0.673            1.49
 6 mu         0.6      1.01         0.997 0.644            1.42
 7 mu         0.7      0.987        0.985 0.641            1.37
 8 mu         0.8      0.989        0.988 0.469            1.67
 9 mu         0.9      0.946        0.925 0.129            2.09
10 mu_1       0.1      0.978        0.410 0.00000107      10.0 
11 mu_1       0.2      1.11         0.975 0.0557           3.96
12 mu_1       0.3      1.03         1.03  0.312            2.60
13 mu_1       0.4      1.04         1.01  0.571            1.93
14 mu_1       0.5      0.996        0.974 0.672            1.49
15 mu_1       0.6      1.01         0.997 0.632            1.43
16 mu_1       0.7      0.986        0.982 0.635            1.37
17 mu_1       0.8      0.989        0.986 0.463            1.67
18 mu_1       0.9      0.945        0.912 0.122            2.10
19 mu_0       0.1      0.862        0.218 0.000000260     15.6 
20 mu_0       0.2      1.14         0.955 0.0332           4.72
21 mu_0       0.3      1.02         1.04  0.278            2.24
22 mu_0       0.4      1.04         1.01  0.619            2.19
23 mu_0       0.5      0.999        0.990 0.675            1.49
24 mu_0       0.6      1.01         0.989 0.661            1.40
25 mu_0       0.7      0.990        0.985 0.653            1.38
26 mu_0       0.8      0.988        0.997 0.493            1.65
27 mu_0       0.9      0.956        0.919 0.192            2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.47      2.64e-27  2.18e-61    121.  
 2 mu         0.2      2.00      3.24e-15  2.25e-38     84.5 
 3 mu         0.3      0.729     3.76e- 8  2.48e-25     18.5 
 4 mu         0.4      1.22      6.91e- 4  1.82e-16     21.0 
 5 mu         0.5      1.31      3.24e- 2  5.35e-10     10.6 
 6 mu         0.6      0.780     1.91e- 1  4.52e-14      7.02
 7 mu         0.7      0.947     1.05e- 1  3.95e-22      6.58
 8 mu         0.8      1.32      3.02e- 3  5.37e-34     10.1 
 9 mu         0.9      1.02      1.22e- 9  5.92e-55     16.7 
10 mu_1       0.1      2.11      1.66e-26  1.83e-60    167.  
11 mu_1       0.2      1.62      1.08e-14  9.47e-38     58.5 
12 mu_1       0.3      0.755     7.80e- 8  6.94e-25     19.7 
13 mu_1       0.4      1.24      9.81e- 4  3.82e-16     20.4 
14 mu_1       0.5      1.28      3.57e- 2  8.99e-10     10.6 
15 mu_1       0.6      0.770     1.65e- 1  1.23e-14      7.26
16 mu_1       0.7      0.962     1.20e- 1  9.19e-23      6.67
17 mu_1       0.8      1.34      2.35e- 3  1.09e-34     10.7 
18 mu_1       0.9      0.996     7.91e-10  1.07e-55     16.7 
19 mu_0       0.1      1.39      1.09e-27  3.87e-62    116.  
20 mu_0       0.2      2.10      1.60e-15  4.50e-39     91.0 
21 mu_0       0.3      0.717     2.04e- 8  5.65e-26     18.1 
22 mu_0       0.4      1.20      5.20e- 4  4.84e-17     21.4 
23 mu_0       0.5      1.34      2.37e- 2  1.71e-10     10.6 
24 mu_0       0.6      0.794     2.19e- 1  9.46e-14      7.01
25 mu_0       0.7      0.912     7.42e- 2  1.10e-21      6.36
26 mu_0       0.8      1.23      5.71e- 3  2.25e-33      9.64
27 mu_0       0.9      1.25      5.08e- 9  4.95e-54     16.4 
[1] "Total run time was 676.001 seconds"
