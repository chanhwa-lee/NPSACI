
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7675"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  59  60  61  62  63  64  65  66  67  68  69  71  72 
  3   1   1   2   1   4   2   1   1   5   3   2   1   3   1   1   2   2   1   3 
 73  74  75  76  77  78  79  81  82  83  84  85  86  87  89  90  91  92  93  94 
  2   2   2   5   2   4   1   1   1   1   2   2   1   3   2   1   2   5   4   2 
 95  96  97  98  99 100 
  3   1   2   3   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0262  0.3111  0.5825  0.9963  6.0000 
[1] "event indicator table: "

   0    1 
4385 3290 
[1] "treatment indicator table: "

   0    1 
3043 4632 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3849
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3826
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 569.715 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.465 0.0621
 2 mu         0.1   0.2 0.547 0.0653
 3 mu         0.1   0.3 0.613 0.0726
 4 mu         0.1   0.4 0.652 0.0735
 5 mu         0.1   0.5 0.695 0.0772
 6 mu         0.2   0.1 0.422 0.0484
 7 mu         0.2   0.2 0.506 0.0440
 8 mu         0.2   0.3 0.559 0.0403
 9 mu         0.2   0.4 0.605 0.0405
10 mu         0.2   0.5 0.652 0.0447
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.616 0.0000534      5.45
 2 mu         0.2      1.01         0.928 0.0656         2.65
 3 mu         0.3      0.957        0.940 0.181          1.53
 4 mu         0.4      0.984        0.948 0.443          1.85
 5 mu         0.5      1.02         1.01  0.559          1.88
 6 mu         0.6      1.03         1.00  0.704          1.43
 7 mu         0.7      0.996        0.969 0.635          1.34
 8 mu         0.8      0.987        0.991 0.539          1.50
 9 mu         0.9      0.997        0.936 0.309          2.01
10 mu_1       0.1      1.10         0.791 0.000136       5.72
11 mu_1       0.2      0.995        0.947 0.0930         2.43
12 mu_1       0.3      0.957        0.937 0.224          1.52
13 mu_1       0.4      0.987        0.975 0.465          1.86
14 mu_1       0.5      1.02         1.01  0.570          1.88
15 mu_1       0.6      1.03         1.01  0.706          1.42
16 mu_1       0.7      0.994        0.968 0.640          1.34
17 mu_1       0.8      0.987        0.990 0.528          1.51
18 mu_1       0.9      0.996        0.934 0.292          2.00
19 mu_0       0.1      1.04         0.593 0.0000442      5.42
20 mu_0       0.2      1.01         0.948 0.0588         2.71
21 mu_0       0.3      0.957        0.934 0.162          1.54
22 mu_0       0.4      0.982        0.946 0.427          1.84
23 mu_0       0.5      1.02         1.01  0.548          1.89
24 mu_0       0.6      1.03         0.991 0.690          1.46
25 mu_0       0.7      1.00         0.981 0.625          1.36
26 mu_0       0.8      0.985        0.984 0.575          1.46
27 mu_0       0.9      1.01         0.986 0.389          2.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0823     1.39e-26  1.27e-73      5.50
 2 mu         0.2     0.944      2.93e-14  1.08e-49     19.5 
 3 mu         0.3     1.39       1.95e- 7  8.82e-36     30.9 
 4 mu         0.4     0.986      1.03e- 3  5.49e-26     14.4 
 5 mu         0.5     0.791      4.51e- 2  1.80e-18      9.63
 6 mu         0.6     1.00       1.82e- 1  5.52e-16      8.83
 7 mu         0.7     1.30       1.96e- 1  5.76e-25      9.84
 8 mu         0.8     1.29       1.03e- 2  3.04e-38      8.89
 9 mu         0.9     0.894      1.96e- 8  9.31e-62     21.9 
10 mu_1       0.1     0.144      9.11e-26  1.22e-72      9.31
11 mu_1       0.2     1.04       9.10e-14  5.19e-49     22.3 
12 mu_1       0.3     1.38       3.93e- 7  2.83e-35     27.5 
13 mu_1       0.4     0.928      1.07e- 3  1.32e-25     14.7 
14 mu_1       0.5     0.809      5.41e- 2  3.47e-18      9.75
15 mu_1       0.6     1.01       2.05e- 1  1.60e-16      9.37
16 mu_1       0.7     1.32       1.64e- 1  1.43e-25      9.93
17 mu_1       0.8     1.28       8.01e- 3  6.59e-39      8.58
18 mu_1       0.9     0.880      1.40e- 8  1.79e-62     21.5 
19 mu_0       0.1     0.0755     5.34e-27  5.09e-75      5.08
20 mu_0       0.2     0.921      1.38e-14  4.86e-51     20.2 
21 mu_0       0.3     1.40       1.10e- 7  4.55e-37     32.4 
22 mu_0       0.4     1.02       6.37e- 4  3.31e-27     14.2 
23 mu_0       0.5     0.773      4.75e- 2  1.30e-19      9.51
24 mu_0       0.6     0.987      1.26e- 1  1.14e-15      8.03
25 mu_0       0.7     1.25       2.30e- 1  1.59e-24      9.63
26 mu_0       0.8     1.36       1.93e- 2  1.26e-37     10.3 
27 mu_0       0.9     1.03       7.03e- 8  7.69e-61     25.8 
[1] "Total run time was 574.528 seconds"
