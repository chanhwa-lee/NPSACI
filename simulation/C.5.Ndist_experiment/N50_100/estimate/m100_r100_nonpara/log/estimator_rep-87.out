
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7667"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  69  70  71  75 
  2   1   2   3   3   2   2   6   2   2   1   1   4   1   2   1   1   2   2   1 
 76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  3   5   1   1   3   1   3   3   2   2   4   1   2   2   3   3   5   3   1   2 
 97  98  99 100 
  2   4   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02566 0.32775 0.58745 0.99478 6.00000 
[1] "event indicator table: "

   0    1 
4572 3095 
[1] "treatment indicator table: "

   0    1 
2943 4724 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3723
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3944
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.011 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.472 0.0918
 2 mu         0.1   0.2 0.568 0.0824
 3 mu         0.1   0.3 0.582 0.0755
 4 mu         0.1   0.4 0.650 0.0865
 5 mu         0.1   0.5 0.693 0.0928
 6 mu         0.2   0.1 0.422 0.0632
 7 mu         0.2   0.2 0.527 0.0471
 8 mu         0.2   0.3 0.553 0.0456
 9 mu         0.2   0.4 0.616 0.0435
10 mu         0.2   0.5 0.656 0.0502
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.12         0.499 0.000000126       7.96
 2 mu         0.2      1.12         1.04  0.0126            3.55
 3 mu         0.3      0.988        0.955 0.273             2.28
 4 mu         0.4      0.998        0.985 0.529             1.79
 5 mu         0.5      0.999        0.984 0.589             1.51
 6 mu         0.6      1.00         0.995 0.592             1.52
 7 mu         0.7      0.984        0.972 0.645             1.40
 8 mu         0.8      0.982        0.973 0.433             2.08
 9 mu         0.9      0.999        0.944 0.218             2.22
10 mu_1       0.1      1.13         0.602 0.000000395       7.05
11 mu_1       0.2      1.11         1.09  0.0201            3.48
12 mu_1       0.3      0.984        0.963 0.279             2.31
13 mu_1       0.4      1.00         0.988 0.523             1.77
14 mu_1       0.5      0.999        0.996 0.603             1.51
15 mu_1       0.6      1.00         0.997 0.613             1.50
16 mu_1       0.7      0.984        0.969 0.650             1.39
17 mu_1       0.8      0.981        0.978 0.426             2.10
18 mu_1       0.9      0.999        0.943 0.206             2.27
19 mu_0       0.1      1.11         0.476 0.0000000957      8.15
20 mu_0       0.2      1.12         1.01  0.0107            3.62
21 mu_0       0.3      0.990        0.956 0.270             2.27
22 mu_0       0.4      0.997        0.984 0.533             1.81
23 mu_0       0.5      0.998        0.978 0.574             1.52
24 mu_0       0.6      1.00         1.00  0.561             1.55
25 mu_0       0.7      0.984        0.989 0.636             1.42
26 mu_0       0.8      0.983        0.981 0.461             2.03
27 mu_0       0.9      1.00         0.959 0.324             2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.437     7.70e-28  2.98e-72     34.1 
 2 mu         0.2      1.41      2.67e-15  7.12e-49     64.3 
 3 mu         0.3      0.912     6.11e- 8  2.96e-35     10.5 
 4 mu         0.4      0.814     5.74e- 4  1.21e-25     13.5 
 5 mu         0.5      1.02      5.54e- 2  3.04e-18     10.5 
 6 mu         0.6      1.21      2.67e- 1  2.04e-15      7.62
 7 mu         0.7      1.51      2.82e- 1  4.22e-24     17.2 
 8 mu         0.8      1.62      1.19e- 2  7.56e-37     30.1 
 9 mu         0.9      1.91      8.89e- 9  2.60e-59     70.7 
10 mu_1       0.1      0.689     5.50e-27  2.91e-71     52.5 
11 mu_1       0.2      1.26      8.42e-15  3.47e-48     49.5 
12 mu_1       0.3      0.930     1.31e- 7  9.63e-35     11.8 
13 mu_1       0.4      0.803     9.43e- 4  2.95e-25     12.0 
14 mu_1       0.5      1.04      5.38e- 2  5.94e-18     11.2 
15 mu_1       0.6      1.22      2.62e- 1  5.22e-16      7.65
16 mu_1       0.7      1.53      2.32e- 1  9.28e-25     18.8 
17 mu_1       0.8      1.61      9.21e- 3  1.45e-37     28.7 
18 mu_1       0.9      1.92      6.18e- 9  4.45e-60     71.5 
19 mu_0       0.1      0.409     2.45e-28  8.28e-74     32.1 
20 mu_0       0.2      1.45      1.25e-15  2.22e-50     68.0 
21 mu_0       0.3      0.904     3.10e- 8  1.06e-36     10.6 
22 mu_0       0.4      0.822     3.51e- 4  5.04e-27     14.4 
23 mu_0       0.5      0.997     3.81e- 2  1.52e-19      9.81
24 mu_0       0.6      1.20      1.87e- 1  4.31e-15      7.58
25 mu_0       0.7      1.45      1.82e- 1  1.19e-23     13.6 
26 mu_0       0.8      1.65      1.74e- 2  3.20e-36     35.6 
27 mu_0       0.9      1.81      3.38e- 8  2.20e-58     64.3 
[1] "Total run time was 424.034 seconds"
