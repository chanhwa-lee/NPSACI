
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7491"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  64  66  67  69  70  71  73 
  1   5   4   1   2   2   2   1   1   1   4   2   2   2   2   3   5   4   1   2 
 74  75  76  77  78  80  81  82  83  84  85  86  87  88  89  90  91  94  96  97 
  4   2   1   2   1   4   2   3   1   3   2   1   2   3   1   2   2   3   2   1 
 98  99 100 
  4   4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02579 0.31496 0.58576 0.99991 6.00000 
[1] "event indicator table: "

   0    1 
4310 3181 
[1] "treatment indicator table: "

   0    1 
3026 4465 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3725
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3766
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 469.059 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.406 0.0978
 2 mu         0.1   0.2 0.486 0.123 
 3 mu         0.1   0.3 0.521 0.141 
 4 mu         0.1   0.4 0.562 0.154 
 5 mu         0.1   0.5 0.583 0.169 
 6 mu         0.2   0.1 0.319 0.0418
 7 mu         0.2   0.2 0.383 0.0550
 8 mu         0.2   0.3 0.415 0.0688
 9 mu         0.2   0.4 0.465 0.0800
10 mu         0.2   0.5 0.485 0.0927
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.15         0.761 0.00000146     25.4 
 2 mu         0.2      1.01         0.908 0.0134          3.98
 3 mu         0.3      1.01         0.938 0.291           2.49
 4 mu         0.4      0.993        0.963 0.409           1.78
 5 mu         0.5      0.990        0.958 0.609           1.68
 6 mu         0.6      0.967        0.947 0.553           1.50
 7 mu         0.7      0.985        0.964 0.561           1.46
 8 mu         0.8      1.00         0.977 0.556           1.68
 9 mu         0.9      1.10         1.03  0.0427          2.97
10 mu_1       0.1      1.16         0.782 0.00000474     18.2 
11 mu_1       0.2      1.00         0.889 0.0222          3.54
12 mu_1       0.3      1.00         0.945 0.345           2.25
13 mu_1       0.4      0.994        0.964 0.417           1.80
14 mu_1       0.5      0.988        0.957 0.616           1.66
15 mu_1       0.6      0.967        0.950 0.539           1.53
16 mu_1       0.7      0.987        0.959 0.572           1.45
17 mu_1       0.8      1.00         0.977 0.556           1.70
18 mu_1       0.9      1.10         1.04  0.0386          2.97
19 mu_0       0.1      1.15         0.757 0.00000109     26.2 
20 mu_0       0.2      1.01         0.917 0.0112          4.10
21 mu_0       0.3      1.01         0.942 0.267           2.59
22 mu_0       0.4      0.992        0.958 0.404           1.81
23 mu_0       0.5      0.992        0.946 0.602           1.70
24 mu_0       0.6      0.967        0.945 0.575           1.46
25 mu_0       0.7      0.981        0.965 0.534           1.48
26 mu_0       0.8      1.00         0.980 0.554           1.60
27 mu_0       0.9      1.09         1.02  0.0795          2.92
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     11.3       2.21e-23  1.24e-77    729.  
 2 mu         0.2      0.959     4.07e-11  3.37e-51     36.4 
 3 mu         0.3      0.874     1.37e- 5  6.21e-36     19.5 
 4 mu         0.4      1.07      1.01e- 2  2.78e-25     22.4 
 5 mu         0.5      1.48      5.98e- 2  3.27e-17     21.4 
 6 mu         0.6      1.14      3.90e- 1  2.95e-19     10.2 
 7 mu         0.7      0.948     7.15e- 2  4.23e-28      9.13
 8 mu         0.8      1.29      1.26e- 3  8.78e-41     24.1 
 9 mu         0.9      1.76      2.71e-10  4.18e-63     24.6 
10 mu_1       0.1      9.30      1.34e-22  1.15e-76    547.  
11 mu_1       0.2      0.770     1.16e-10  1.56e-50     30.7 
12 mu_1       0.3      0.884     2.87e- 5  1.92e-35     17.9 
13 mu_1       0.4      1.09      1.46e- 2  6.45e-25     20.6 
14 mu_1       0.5      1.49      6.94e- 2  6.07e-17     20.3 
15 mu_1       0.6      1.11      3.76e- 1  3.69e-20     10.3 
16 mu_1       0.7      0.955     6.69e- 2  4.53e-29      9.50
17 mu_1       0.8      1.30      9.67e- 4  8.23e-42     24.5 
18 mu_1       0.9      1.77      1.76e-10  5.74e-64     24.3 
19 mu_0       0.1     11.5       1.01e-23  1.00e-78    749.  
20 mu_0       0.2      1.01      2.18e-11  3.07e-52     41.3 
21 mu_0       0.3      0.870     7.57e- 6  6.47e-37     20.3 
22 mu_0       0.4      1.06      6.59e- 3  3.38e-26     23.6 
23 mu_0       0.5      1.47      4.54e- 2  4.77e-18     22.6 
24 mu_0       0.6      1.17      3.68e- 1  6.82e-19     10.1 
25 mu_0       0.7      0.932     6.26e- 2  1.30e-27      8.26
26 mu_0       0.8      1.27      1.97e- 3  4.06e-40     22.6 
27 mu_0       0.9      1.66      1.13e- 9  3.66e-62     28.0 
[1] "Total run time was 472.71 seconds"
