
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7405"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  59  60  61  62  63  64  65  66  68  69  70  71  72 
  3   2   1   7   1   2   1   3   2   2   3   3   3   4   3   2   2   3   3   1 
 73  74  75  76  77  78  82  83  84  86  87  88  89  90  92  93  94  95  96  97 
  1   1   2   4   2   1   1   2   3   2   4   2   1   4   1   4   3   1   2   5 
 98  99 100 
  1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0294  0.3449  0.6170  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4403 3002 
[1] "treatment indicator table: "

   0    1 
2690 4715 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3713
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3692
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 404.411 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.413 0.0799
 2 mu         0.1   0.2 0.515 0.105 
 3 mu         0.1   0.3 0.599 0.124 
 4 mu         0.1   0.4 0.631 0.131 
 5 mu         0.1   0.5 0.673 0.140 
 6 mu         0.2   0.1 0.432 0.0427
 7 mu         0.2   0.2 0.531 0.0535
 8 mu         0.2   0.3 0.617 0.0639
 9 mu         0.2   0.4 0.653 0.0636
10 mu         0.2   0.5 0.696 0.0698
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.946        0.189 0.000000289     12.6 
 2 mu         0.2      1.07         0.852 0.0140           6.47
 3 mu         0.3      1.02         0.965 0.203            2.40
 4 mu         0.4      0.945        0.896 0.426            1.86
 5 mu         0.5      1.02         0.975 0.585            1.87
 6 mu         0.6      1.01         0.996 0.522            1.82
 7 mu         0.7      0.979        0.956 0.574            1.47
 8 mu         0.8      0.988        1.01  0.537            1.64
 9 mu         0.9      1.00         0.977 0.0482           2.77
10 mu_1       0.1      0.970        0.292 0.000000873     11.9 
11 mu_1       0.2      1.07         0.884 0.0234           6.36
12 mu_1       0.3      1.01         0.982 0.247            2.55
13 mu_1       0.4      0.947        0.895 0.422            1.81
14 mu_1       0.5      1.02         0.979 0.581            1.97
15 mu_1       0.6      1.00         1.00  0.493            1.82
16 mu_1       0.7      0.979        0.955 0.574            1.48
17 mu_1       0.8      0.989        1.00  0.532            1.65
18 mu_1       0.9      1.00         0.968 0.0456           2.81
19 mu_0       0.1      0.943        0.178 0.000000224     13.3 
20 mu_0       0.2      1.07         0.845 0.0117           6.50
21 mu_0       0.3      1.03         0.957 0.184            2.33
22 mu_0       0.4      0.944        0.900 0.428            1.91
23 mu_0       0.5      1.01         0.976 0.589            1.77
24 mu_0       0.6      1.01         1.01  0.566            1.81
25 mu_0       0.7      0.981        0.958 0.573            1.47
26 mu_0       0.8      0.984        0.996 0.546            1.63
27 mu_0       0.9      0.999        0.985 0.0714           2.43
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0115     7.17e-31  5.42e-66      1.13
 2 mu         0.2     0.629      1.95e-17  1.17e-42     30.2 
 3 mu         0.3     0.980      6.46e-10  1.91e-29     32.0 
 4 mu         0.4     0.635      5.49e- 5  1.99e-20      8.02
 5 mu         0.5     0.685      2.20e- 2  6.34e-14     14.4 
 6 mu         0.6     1.24       1.29e- 1  3.87e-14     29.8 
 7 mu         0.7     1.04       3.91e- 1  1.12e-22      5.33
 8 mu         0.8     1.60       2.22e- 2  2.27e-35     24.6 
 9 mu         0.9     1.86       5.15e- 8  6.26e-58     26.4 
10 mu_1       0.1     0.0219     4.45e-30  4.72e-65      2.11
11 mu_1       0.2     0.712      6.46e-17  5.24e-42     28.3 
12 mu_1       0.3     0.978      1.45e- 9  5.70e-29     28.2 
13 mu_1       0.4     0.610      8.86e- 5  4.60e-20      7.62
14 mu_1       0.5     0.712      2.11e- 2  1.17e-13     14.0 
15 mu_1       0.6     1.26       1.52e- 1  1.21e-14     29.1 
16 mu_1       0.7     1.04       4.13e- 1  2.99e-23      5.22
17 mu_1       0.8     1.64       1.76e- 2  5.32e-36     25.3 
18 mu_1       0.9     1.83       3.58e- 8  1.30e-58     25.6 
19 mu_0       0.1     0.0104     3.02e-31  7.77e-67      1.02
20 mu_0       0.2     0.608      8.16e-18  1.51e-43     30.7 
21 mu_0       0.3     0.981      3.28e-10  2.82e-30     33.6 
22 mu_0       0.4     0.652      3.23e- 5  2.55e-21      8.28
23 mu_0       0.5     0.659      1.77e- 2  9.75e-15     14.9 
24 mu_0       0.6     1.22       1.04e- 1  7.86e-14     30.9 
25 mu_0       0.7     1.07       3.67e- 1  3.02e-22      5.89
26 mu_0       0.8     1.45       3.63e- 2  9.23e-35     21.4 
27 mu_0       0.9     2.07       1.93e- 7  5.09e-57     34.1 
[1] "Total run time was 408.018 seconds"
