
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7631"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  60  61  62  63  64  65  66  67  68  70  71  72  73 
  1   3   2   2   4   2   5   2   3   1   2   2   1   2   2   2   1   1   2   3 
 74  75  76  77  78  80  81  82  83  84  85  86  88  89  90  92  93  94  95  96 
  1   1   3   4   4   2   1   1   1   1   2   3   5   1   1   2   4   4   7   1 
 97  98  99 100 
  2   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03389 0.37616 0.63750 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4550 3081 
[1] "treatment indicator table: "

   0    1 
2837 4794 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3707
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3924
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.422 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.271 0.0569
 2 mu         0.1   0.2 0.349 0.0493
 3 mu         0.1   0.3 0.430 0.0452
 4 mu         0.1   0.4 0.465 0.0512
 5 mu         0.1   0.5 0.503 0.0645
 6 mu         0.2   0.1 0.265 0.0412
 7 mu         0.2   0.2 0.342 0.0358
 8 mu         0.2   0.3 0.422 0.0348
 9 mu         0.2   0.4 0.464 0.0407
10 mu         0.2   0.5 0.496 0.0503
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.888        0.666 0.000000349      4.81
 2 mu         0.2      0.932        0.850 0.0287           3.77
 3 mu         0.3      0.924        0.936 0.0890           2.34
 4 mu         0.4      0.941        0.955 0.329            1.76
 5 mu         0.5      0.979        0.981 0.444            1.55
 6 mu         0.6      1.00         1.00  0.503            1.92
 7 mu         0.7      1.03         1.00  0.531            1.92
 8 mu         0.8      1.02         1.00  0.526            1.76
 9 mu         0.9      0.969        0.958 0.433            1.74
10 mu_1       0.1      0.913        0.753 0.00000104       4.78
11 mu_1       0.2      0.925        0.817 0.0498           3.26
12 mu_1       0.3      0.928        0.960 0.0884           2.18
13 mu_1       0.4      0.943        0.947 0.330            1.78
14 mu_1       0.5      0.981        0.976 0.450            1.53
15 mu_1       0.6      1.00         1.01  0.515            1.91
16 mu_1       0.7      1.03         0.999 0.533            1.95
17 mu_1       0.8      1.02         0.999 0.522            1.75
18 mu_1       0.9      0.969        0.947 0.425            1.75
19 mu_0       0.1      0.885        0.642 0.000000272      4.82
20 mu_0       0.2      0.933        0.843 0.0235           3.90
21 mu_0       0.3      0.922        0.928 0.0893           2.42
22 mu_0       0.4      0.940        0.955 0.329            1.77
23 mu_0       0.5      0.976        0.981 0.420            1.64
24 mu_0       0.6      1.00         1.01  0.484            1.92
25 mu_0       0.7      1.03         1.00  0.526            1.84
26 mu_0       0.8      1.02         1.01  0.542            1.80
27 mu_0       0.9      0.971        0.970 0.352            1.63
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.260     5.50e-27  1.70e-89     19.1 
 2 mu         0.2      3.83      7.04e-14  5.31e-61    259.  
 3 mu         0.3      1.62      4.59e- 7  2.18e-44     44.3 
 4 mu         0.4      0.875     3.54e- 3  1.18e-32     14.7 
 5 mu         0.5      1.54      2.04e- 2  1.32e-23     43.6 
 6 mu         0.6      1.62      6.13e- 2  2.82e-16     18.6 
 7 mu         0.7      1.03      1.28e- 1  5.94e-22     13.3 
 8 mu         0.8      1.35      9.22e- 3  1.81e-34      9.83
 9 mu         0.9      1.16      1.67e- 7  1.00e-56     24.7 
10 mu_1       0.1      0.471     3.15e-26  1.66e-88     34.7 
11 mu_1       0.2      3.64      2.19e-13  2.60e-60    236.  
12 mu_1       0.3      1.60      9.98e- 7  7.11e-44     47.7 
13 mu_1       0.4      0.845     3.88e- 3  2.90e-32     11.9 
14 mu_1       0.5      1.61      2.81e- 2  2.59e-23     45.1 
15 mu_1       0.6      1.59      4.89e- 2  4.60e-16     17.7 
16 mu_1       0.7      1.02      1.32e- 1  1.61e-22     13.1 
17 mu_1       0.8      1.36      8.22e- 3  4.30e-35      9.83
18 mu_1       0.9      1.15      1.20e- 7  2.11e-57     24.6 
19 mu_0       0.1      0.236     2.61e-27  3.89e-91     17.3 
20 mu_0       0.2      3.88      3.33e-14  1.37e-62    265.  
21 mu_0       0.3      1.63      2.29e- 7  6.41e-46     42.8 
22 mu_0       0.4      0.895     2.51e- 3  4.07e-34     16.6 
23 mu_0       0.5      1.47      1.69e- 2  5.45e-25     42.0 
24 mu_0       0.6      1.66      7.61e- 2  1.45e-17     20.0 
25 mu_0       0.7      1.06      1.42e- 1  1.60e-21     13.6 
26 mu_0       0.8      1.31      1.71e- 2  7.35e-34      9.83
27 mu_0       0.9      1.25      5.88e- 7  8.11e-56     26.0 
[1] "Total run time was 401.599 seconds"
