
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7709"
[1] "cluster size dist'n: "

 50  51  53  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70  71  72 
  2   1   2   1   4   1   1   1   3   2   3   2   3   1   1   3   2   1   2   3 
 73  74  75  76  77  78  79  81  82  83  84  85  87  88  89  90  91  92  93  94 
  3   2   1   2   5   4   2   1   3   1   6   2   2   1   1   2   2   1   1   2 
 95  96  97  98 100 
  4   2   3   3   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02854 0.32247 0.59605 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4563 3146 
[1] "treatment indicator table: "

   0    1 
2965 4744 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3962
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3747
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 449.54 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.416 0.0656
 2 mu         0.1   0.2 0.479 0.0689
 3 mu         0.1   0.3 0.553 0.0821
 4 mu         0.1   0.4 0.586 0.0862
 5 mu         0.1   0.5 0.617 0.0873
 6 mu         0.2   0.1 0.369 0.0348
 7 mu         0.2   0.2 0.435 0.0344
 8 mu         0.2   0.3 0.500 0.0442
 9 mu         0.2   0.4 0.544 0.0445
10 mu         0.2   0.5 0.580 0.0402
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.998        0.451 0.0000598      7.17
 2 mu         0.2      0.986        0.824 0.0880         3.51
 3 mu         0.3      1.01         0.969 0.475          1.81
 4 mu         0.4      0.998        0.982 0.589          1.52
 5 mu         0.5      1.00         0.984 0.652          1.37
 6 mu         0.6      1.01         0.976 0.653          1.43
 7 mu         0.7      0.999        0.976 0.616          1.53
 8 mu         0.8      1.00         0.975 0.392          1.68
 9 mu         0.9      0.967        0.903 0.211          2.19
10 mu_1       0.1      0.989        0.557 0.000152       6.09
11 mu_1       0.2      0.991        0.869 0.118          3.18
12 mu_1       0.3      1.01         0.981 0.474          1.78
13 mu_1       0.4      1.00         0.982 0.575          1.49
14 mu_1       0.5      1.00         0.986 0.648          1.38
15 mu_1       0.6      1.01         0.973 0.675          1.41
16 mu_1       0.7      1.00         0.979 0.616          1.54
17 mu_1       0.8      0.999        0.979 0.392          1.70
18 mu_1       0.9      0.966        0.901 0.203          2.20
19 mu_0       0.1      0.999        0.430 0.0000496      7.29
20 mu_0       0.2      0.985        0.810 0.0805         3.59
21 mu_0       0.3      1.01         0.970 0.460          1.84
22 mu_0       0.4      0.997        0.969 0.598          1.54
23 mu_0       0.5      1.00         0.991 0.640          1.38
24 mu_0       0.6      1.01         0.983 0.621          1.46
25 mu_0       0.7      0.998        0.966 0.618          1.51
26 mu_0       0.8      1.00         0.983 0.394          1.63
27 mu_0       0.9      0.976        0.917 0.279          2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0365     5.99e-25  6.74e-77      1.94
 2 mu         0.2     1.04       1.63e-13  9.14e-51     37.4 
 3 mu         0.3     0.579      1.91e- 7  1.12e-35      9.84
 4 mu         0.4     0.813      2.06e- 3  3.78e-25      9.27
 5 mu         0.5     1.25       6.82e- 2  3.55e-17     15.2 
 6 mu         0.6     0.976      3.54e- 1  5.90e-11      6.75
 7 mu         0.7     1.14       7.29e- 2  1.07e-17      8.19
 8 mu         0.8     0.838      9.06e- 3  8.06e-28     11.3 
 9 mu         0.9     1.63       1.66e- 8  6.49e-48     21.6 
10 mu_1       0.1     0.0743     4.08e-24  6.24e-76      4.02
11 mu_1       0.2     1.10       4.86e-13  4.23e-50     38.4 
12 mu_1       0.3     0.528      4.19e- 7  3.47e-35      8.30
13 mu_1       0.4     0.868      3.12e- 3  8.74e-25      8.91
14 mu_1       0.5     1.24       9.12e- 2  6.59e-17     15.4 
15 mu_1       0.6     0.983      3.31e- 1  1.92e-11      6.95
16 mu_1       0.7     1.13       6.99e- 2  2.97e-18      8.29
17 mu_1       0.8     0.840      6.94e- 3  2.33e-28     11.4 
18 mu_1       0.9     1.62       1.15e- 8  1.88e-48     21.7 
19 mu_0       0.1     0.0323     2.13e-25  5.51e-78      1.71
20 mu_0       0.2     1.03       8.17e-14  8.42e-52     37.2 
21 mu_0       0.3     0.601      9.74e- 8  1.18e-36     11.1 
22 mu_0       0.4     0.775      1.33e- 3  4.64e-26      9.50
23 mu_0       0.5     1.25       4.94e- 2  5.24e-18     15.0 
24 mu_0       0.6     0.966      3.53e- 1  1.28e-11      6.44
25 mu_0       0.7     1.16       8.90e- 2  2.87e-17      7.96
26 mu_0       0.8     0.831      1.75e- 2  2.98e-27     10.7 
27 mu_0       0.9     1.69       6.25e- 8  4.80e-47     20.6 
[1] "Total run time was 452.825 seconds"
