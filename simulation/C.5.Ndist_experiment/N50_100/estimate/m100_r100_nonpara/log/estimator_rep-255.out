
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7411"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  2   2   1   2   3   4   1   2   1   4   3   1   3   2   5   3   3   1   3   1 
 72  73  74  75  76  77  78  79  80  81  83  84  85  86  88  90  91  92  94  95 
  1   2   2   3   4   2   1   1   1   4   3   2   1   1   1   1   3   4   2   4 
 96  97  98  99 100 
  2   1   2   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0389  0.3334  0.5955  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4324 3087 
[1] "treatment indicator table: "

   0    1 
2816 4595 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3679
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3732
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 461.582 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.589 0.318 
 2 mu         0.1   0.2 0.726 0.410 
 3 mu         0.1   0.3 0.840 0.485 
 4 mu         0.1   0.4 0.888 0.520 
 5 mu         0.1   0.5 0.964 0.557 
 6 mu         0.2   0.1 0.428 0.0773
 7 mu         0.2   0.2 0.525 0.0842
 8 mu         0.2   0.3 0.590 0.0932
 9 mu         0.2   0.4 0.620 0.100 
10 mu         0.2   0.5 0.683 0.111 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.54        0.0318 0.00000000353     89.0 
 2 mu         0.2      1.18        0.752  0.000471          19.7 
 3 mu         0.3      0.974       0.914  0.0687             2.54
 4 mu         0.4      0.974       0.971  0.418              1.89
 5 mu         0.5      0.973       0.970  0.607              1.57
 6 mu         0.6      0.994       0.980  0.703              1.34
 7 mu         0.7      0.991       0.976  0.598              1.39
 8 mu         0.8      0.987       0.993  0.328              1.56
 9 mu         0.9      0.935       0.865  0.00182            2.48
10 mu_1       0.1      1.75        0.0670 0.0000000144      93.6 
11 mu_1       0.2      1.13        0.720  0.000972          14.4 
12 mu_1       0.3      0.973       0.942  0.0960             2.52
13 mu_1       0.4      0.973       0.966  0.453              1.87
14 mu_1       0.5      0.974       0.966  0.607              1.58
15 mu_1       0.6      0.996       0.977  0.700              1.34
16 mu_1       0.7      0.991       0.973  0.604              1.41
17 mu_1       0.8      0.987       1.00   0.313              1.54
18 mu_1       0.9      0.933       0.860  0.00158            2.53
19 mu_0       0.1      1.52        0.0279 0.00000000233     88.4 
20 mu_0       0.2      1.19        0.760  0.000346          21.0 
21 mu_0       0.3      0.974       0.912  0.0569             2.55
22 mu_0       0.4      0.974       0.959  0.394              1.90
23 mu_0       0.5      0.972       0.971  0.602              1.56
24 mu_0       0.6      0.991       0.970  0.708              1.34
25 mu_0       0.7      0.993       0.992  0.583              1.41
26 mu_0       0.8      0.988       0.999  0.387              1.60
27 mu_0       0.9      0.954       0.890  0.00406            2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00953     6.55e-28  4.34e-68     0.684
 2 mu         0.2    1.88        7.25e-15  2.05e-45   149.   
 3 mu         0.3    1.52        7.81e- 8  2.90e-32    33.0  
 4 mu         0.4    1.03        9.97e- 4  4.89e-23    19.2  
 5 mu         0.5    0.918       6.01e- 2  5.47e-16     7.76 
 6 mu         0.6    1.11        2.06e- 1  2.86e-13    11.0  
 7 mu         0.7    1.15        3.20e- 1  1.50e-21    12.0  
 8 mu         0.8    1.07        1.19e- 2  5.97e-34     7.24 
 9 mu         0.9    1.02        1.97e- 8  4.16e-56    22.0  
10 mu_1       0.1    0.0212      4.22e-27  4.12e-67     1.49 
11 mu_1       0.2    2.10        2.29e-14  9.72e-45   162.   
12 mu_1       0.3    1.47        1.64e- 7  9.17e-32    34.9  
13 mu_1       0.4    1.00        1.54e- 3  1.16e-22    17.8  
14 mu_1       0.5    0.917       5.84e- 2  1.04e-15     7.80 
15 mu_1       0.6    1.11        1.99e- 1  9.83e-14    11.5  
16 mu_1       0.7    1.16        3.00e- 1  4.41e-22    12.4  
17 mu_1       0.8    1.06        9.65e- 3  1.54e-34     7.26 
18 mu_1       0.9    1.02        1.33e- 8  9.54e-57    23.2  
19 mu_0       0.1    0.00823     2.60e-28  2.41e-69     0.595
20 mu_0       0.2    1.83        3.35e-15  1.28e-46   146.   
21 mu_0       0.3    1.54        4.13e- 8  2.07e-33    36.9  
22 mu_0       0.4    1.04        6.34e- 4  4.08e-24    20.1  
23 mu_0       0.5    0.920       5.30e- 2  5.47e-17     8.47 
24 mu_0       0.6    1.11        2.05e- 1  5.67e-13    10.2  
25 mu_0       0.7    1.14        2.94e- 1  3.96e-21    10.9  
26 mu_0       0.8    1.08        1.67e- 2  2.37e-33     7.84 
27 mu_0       0.9    0.985       7.77e- 8  3.30e-55    19.0  
[1] "Total run time was 466.359 seconds"
