
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7524"
[1] "cluster size dist'n: "

 50  51  52  55  56  57  58  59  60  61  62  63  65  66  67  68  69  70  71  72 
  5   2   4   2   2   1   2   2   1   2   1   1   4   2   2   4   1   1   2   3 
 74  76  77  78  79  80  81  82  83  84  85  86  89  90  91  92  93  94  95  96 
  3   1   5   2   3   1   3   1   2   2   3   4   3   1   3   3   4   1   4   2 
 97  98  99 100 
  2   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02729 0.32557 0.57728 0.99814 6.00000 
[1] "event indicator table: "

   0    1 
4456 3068 
[1] "treatment indicator table: "

   0    1 
2826 4698 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3723
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3801
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 396.892 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.282 0.0703
 2 mu         0.1   0.2 0.304 0.103 
 3 mu         0.1   0.3 0.347 0.117 
 4 mu         0.1   0.4 0.370 0.136 
 5 mu         0.1   0.5 0.420 0.139 
 6 mu         0.2   0.1 0.271 0.0470
 7 mu         0.2   0.2 0.309 0.0672
 8 mu         0.2   0.3 0.345 0.0923
 9 mu         0.2   0.4 0.378 0.103 
10 mu         0.2   0.5 0.429 0.0919
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.945        0.211 0.00000144      8.26
 2 mu         0.2      0.960        0.940 0.0472          3.14
 3 mu         0.3      1.01         0.988 0.257           2.09
 4 mu         0.4      1.02         0.975 0.484           1.82
 5 mu         0.5      0.985        0.984 0.624           1.53
 6 mu         0.6      1.00         0.995 0.647           1.47
 7 mu         0.7      0.992        0.982 0.491           1.43
 8 mu         0.8      0.998        0.984 0.513           1.43
 9 mu         0.9      1.02         0.976 0.226           2.44
10 mu_1       0.1      0.962        0.324 0.00000425      7.44
11 mu_1       0.2      0.973        0.958 0.0704          2.96
12 mu_1       0.3      1.01         1.00  0.238           2.02
13 mu_1       0.4      1.02         0.979 0.527           1.78
14 mu_1       0.5      0.984        0.977 0.637           1.55
15 mu_1       0.6      1.00         1.00  0.647           1.45
16 mu_1       0.7      0.992        0.986 0.493           1.41
17 mu_1       0.8      0.998        0.983 0.503           1.44
18 mu_1       0.9      1.02         0.969 0.216           2.44
19 mu_0       0.1      0.943        0.193 0.00000113      8.55
20 mu_0       0.2      0.957        0.942 0.0414          3.19
21 mu_0       0.3      1.01         0.996 0.266           2.11
22 mu_0       0.4      1.02         0.966 0.455           1.84
23 mu_0       0.5      0.986        0.980 0.601           1.53
24 mu_0       0.6      1.00         1.00  0.644           1.51
25 mu_0       0.7      0.994        0.978 0.486           1.47
26 mu_0       0.8      0.999        0.979 0.556           1.38
27 mu_0       0.9      1.03         0.982 0.309           2.43
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.176     6.58e-27  1.05e-91     17.6 
 2 mu         0.2      0.664     2.54e-14  1.48e-62     61.4 
 3 mu         0.3      0.775     4.42e- 8  1.56e-45     14.8 
 4 mu         0.4      1.24      4.11e- 4  1.76e-33     11.7 
 5 mu         0.5      1.07      5.26e- 2  3.68e-24      8.54
 6 mu         0.6      0.946     2.60e- 1  1.41e-16      8.65
 7 mu         0.7      1.20      1.07e- 1  5.74e-18      8.75
 8 mu         0.8      1.34      2.28e- 2  7.75e-28     12.1 
 9 mu         0.9      0.846     2.49e- 7  2.76e-45     24.9 
10 mu_1       0.1      0.293     4.37e-26  1.04e-90     29.3 
11 mu_1       0.2      0.587     9.00e-14  7.33e-62     51.2 
12 mu_1       0.3      0.856     9.57e- 8  5.15e-45     14.5 
13 mu_1       0.4      1.23      6.55e- 4  4.35e-33     12.0 
14 mu_1       0.5      1.06      5.58e- 2  7.29e-24      8.45
15 mu_1       0.6      0.950     2.51e- 1  2.33e-16      8.98
16 mu_1       0.7      1.21      1.17e- 1  1.37e-18      8.39
17 mu_1       0.8      1.34      1.78e- 2  1.61e-28     12.6 
18 mu_1       0.9      0.856     1.80e- 7  5.12e-46     27.1 
19 mu_0       0.1      0.163     2.46e-27  1.19e-93     16.3 
20 mu_0       0.2      0.683     9.28e-15  1.89e-64     64.0 
21 mu_0       0.3      0.740     2.21e- 8  2.27e-47     14.9 
22 mu_0       0.4      1.24      2.47e- 4  2.99e-35     11.7 
23 mu_0       0.5      1.08      4.30e- 2  7.52e-26      8.92
24 mu_0       0.6      0.940     2.26e- 1  3.60e-18      8.15
25 mu_0       0.7      1.18      9.54e- 2  1.59e-17      9.61
26 mu_0       0.8      1.32      2.19e- 2  3.23e-27     10.6 
27 mu_0       0.9      0.753     8.97e- 7  2.30e-44     13.2 
[1] "Total run time was 400.227 seconds"
