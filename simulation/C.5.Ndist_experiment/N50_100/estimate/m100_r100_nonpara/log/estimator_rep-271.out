
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7228"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  63  64  65  66  68  69  70  71  72 
  2   3   3   3   4   4   4   2   2   5   3   2   2   4   1   1   1   3   1   3 
 73  74  75  76  78  79  80  81  82  83  86  87  88  89  91  92  93  95  96  97 
  1   2   2   3   4   2   2   3   2   1   1   1   3   3   1   1   1   1   4   3 
 98 100 
  2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03698 0.36731 0.61306 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4322 2906 
[1] "treatment indicator table: "

   0    1 
2556 4672 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3640
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3588
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 378.747 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.570 0.128 
 2 mu         0.1   0.2 0.634 0.113 
 3 mu         0.1   0.3 0.696 0.128 
 4 mu         0.1   0.4 0.786 0.133 
 5 mu         0.1   0.5 0.834 0.133 
 6 mu         0.2   0.1 0.333 0.106 
 7 mu         0.2   0.2 0.409 0.0944
 8 mu         0.2   0.3 0.448 0.121 
 9 mu         0.2   0.4 0.494 0.118 
10 mu         0.2   0.5 0.565 0.0910
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.18         0.740 0.00000100       6.50
 2 mu         0.2      0.945        0.873 0.0156           2.68
 3 mu         0.3      1.00         0.967 0.371            2.45
 4 mu         0.4      1.01         1.01  0.552            1.82
 5 mu         0.5      1.03         1.01  0.555            1.58
 6 mu         0.6      1.00         0.983 0.555            1.57
 7 mu         0.7      0.994        0.993 0.642            1.60
 8 mu         0.8      0.988        0.981 0.418            1.58
 9 mu         0.9      1.01         1.01  0.247            1.94
10 mu_1       0.1      1.16         0.814 0.00000330       6.10
11 mu_1       0.2      0.947        0.886 0.0261           2.36
12 mu_1       0.3      1.01         0.990 0.337            2.36
13 mu_1       0.4      1.01         1.01  0.513            1.78
14 mu_1       0.5      1.02         0.993 0.542            1.61
15 mu_1       0.6      0.999        0.988 0.562            1.61
16 mu_1       0.7      0.993        0.996 0.642            1.59
17 mu_1       0.8      0.990        0.981 0.406            1.61
18 mu_1       0.9      1.01         1.00  0.244            1.96
19 mu_0       0.1      1.19         0.730 0.000000747      6.62
20 mu_0       0.2      0.944        0.872 0.0130           2.81
21 mu_0       0.3      1.00         0.963 0.359            2.49
22 mu_0       0.4      1.01         1.00  0.557            1.85
23 mu_0       0.5      1.03         1.02  0.569            1.56
24 mu_0       0.6      1.00         0.984 0.544            1.60
25 mu_0       0.7      0.997        0.999 0.643            1.60
26 mu_0       0.8      0.981        0.971 0.464            1.57
27 mu_0       0.9      1.03         1.03  0.277            2.09
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.575     6.18e-28  8.29e-84     39.8 
 2 mu         0.2      3.63      1.79e-15  2.56e-56    311.  
 3 mu         0.3      1.01      1.08e- 8  2.38e-40     40.2 
 4 mu         0.4      0.811     2.77e- 4  4.02e-29     13.5 
 5 mu         0.5      0.892     1.78e- 2  1.60e-20      6.74
 6 mu         0.6      1.18      1.41e- 1  1.26e-13      8.73
 7 mu         0.7      1.18      3.54e- 1  5.42e-19      9.31
 8 mu         0.8      1.68      3.54e- 2  9.57e-31     20.8 
 9 mu         0.9      1.67      1.68e- 7  9.50e-52     43.3 
10 mu_1       0.1      0.754     3.78e-27  7.95e-83     45.9 
11 mu_1       0.2      3.66      5.99e-15  1.23e-55    321.  
12 mu_1       0.3      0.924     2.52e- 8  7.61e-40     27.7 
13 mu_1       0.4      0.813     3.40e- 4  9.62e-29     12.9 
14 mu_1       0.5      0.916     1.78e- 2  3.06e-20      7.02
15 mu_1       0.6      1.18      1.67e- 1  2.01e-13      8.18
16 mu_1       0.7      1.19      3.89e- 1  1.60e-19      9.78
17 mu_1       0.8      1.68      2.77e- 2  2.47e-31     21.8 
18 mu_1       0.9      1.68      1.19e- 7  2.18e-52     42.6 
19 mu_0       0.1      0.555     2.66e-28  3.84e-85     39.1 
20 mu_0       0.2      3.62      7.39e-16  1.34e-57    308.  
21 mu_0       0.3      1.05      4.56e- 9  1.42e-41     45.6 
22 mu_0       0.4      0.811     1.73e- 4  2.79e-30     13.9 
23 mu_0       0.5      0.869     1.35e- 2  1.33e-21      6.47
24 mu_0       0.6      1.18      1.06e- 1  1.31e-14      9.57
25 mu_0       0.7      1.15      3.56e- 1  1.43e-18      8.33
26 mu_0       0.8      1.67      2.75e- 2  3.80e-30     16.9 
27 mu_0       0.9      1.57      6.32e- 7  7.54e-51     49.3 
[1] "Total run time was 383 seconds"
