
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7358"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  70  71 
  3   2   3   2   1   3   2   2   1   3   3   4   1   2   2   1   4   3   2   2 
 72  73  74  75  76  77  78  79  80  81  83  84  85  86  88  89  90  91  92  93 
  1   6   1   1   3   1   1   2   3   2   4   4   1   4   1   1   2   3   1   2 
 94  96  97  98  99 100 
  1   1   2   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03329 0.33713 0.60129 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4434 2924 
[1] "treatment indicator table: "

   0    1 
2618 4740 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3662
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3696
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 881.803 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.359 0.130 
 2 mu         0.1   0.2 0.395 0.131 
 3 mu         0.1   0.3 0.415 0.144 
 4 mu         0.1   0.4 0.474 0.163 
 5 mu         0.1   0.5 0.471 0.168 
 6 mu         0.2   0.1 0.412 0.0893
 7 mu         0.2   0.2 0.464 0.0609
 8 mu         0.2   0.3 0.504 0.0602
 9 mu         0.2   0.4 0.583 0.0824
10 mu         0.2   0.5 0.596 0.0767
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.689      0.00823  3.66e-15     19.6 
 2 mu         0.2      0.968      0.676    3.22e- 6      4.78
 3 mu         0.3      1.00       0.975    2.13e- 2      2.12
 4 mu         0.4      1.00       0.947    2.47e- 1      2.11
 5 mu         0.5      0.991      0.973    6.09e- 1      1.66
 6 mu         0.6      1.01       0.982    6.53e- 1      1.48
 7 mu         0.7      1.01       1.02     7.05e- 1      1.37
 8 mu         0.8      0.999      0.975    6.08e- 1      1.51
 9 mu         0.9      0.946      0.914    1.20e- 1      1.84
10 mu_1       0.1      0.757      0.0190   1.55e-14     16.8 
11 mu_1       0.2      0.983      0.760    6.85e- 6      4.20
12 mu_1       0.3      0.996      1.01     3.05e- 2      2.03
13 mu_1       0.4      1.00       0.950    2.58e- 1      2.07
14 mu_1       0.5      0.991      0.971    6.13e- 1      1.62
15 mu_1       0.6      1.01       0.988    6.53e- 1      1.48
16 mu_1       0.7      1.01       1.02     6.97e- 1      1.36
17 mu_1       0.8      0.999      0.974    6.21e- 1      1.50
18 mu_1       0.9      0.944      0.919    1.11e- 1      1.85
19 mu_0       0.1      0.682      0.00703  2.35e-15     19.9 
20 mu_0       0.2      0.964      0.651    2.31e- 6      4.92
21 mu_0       0.3      1.00       0.979    1.74e- 2      2.20
22 mu_0       0.4      1.00       0.940    2.39e- 1      2.14
23 mu_0       0.5      0.991      0.973    6.06e- 1      1.70
24 mu_0       0.6      1.01       0.994    6.53e- 1      1.49
25 mu_0       0.7      1.02       1.02     7.13e- 1      1.41
26 mu_0       0.8      1.00       0.967    5.58e- 1      1.53
27 mu_0       0.9      0.958      0.927    2.08e- 1      1.88
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0490     1.11e-27  1.08e-73      4.90
 2 mu         0.2     0.983      1.15e-15  1.03e-48     96.1 
 3 mu         0.3     0.792      6.07e- 9  2.86e-34     27.1 
 4 mu         0.4     1.07       1.48e- 4  3.54e-24     17.0 
 5 mu         0.5     1.10       6.71e- 2  1.64e-16     10.4 
 6 mu         0.6     1.13       5.03e- 1  1.49e-10      7.76
 7 mu         0.7     1.23       4.10e- 1  2.03e-17      9.34
 8 mu         0.8     0.852      5.11e- 2  1.21e-27      8.76
 9 mu         0.9     2.90       4.93e- 7  7.69e-46     54.0 
10 mu_1       0.1     0.0941     7.76e-27  1.01e-72      9.41
11 mu_1       0.2     0.960      4.09e-15  4.80e-48     92.4 
12 mu_1       0.3     0.847      1.32e- 8  8.90e-34     28.3 
13 mu_1       0.4     1.08       2.36e- 4  8.27e-24     14.6 
14 mu_1       0.5     1.11       8.62e- 2  3.06e-16     11.2 
15 mu_1       0.6     1.13       4.83e- 1  4.79e-11      7.95
16 mu_1       0.7     1.23       3.56e- 1  5.58e-18      9.31
17 mu_1       0.8     0.850      4.58e- 2  2.92e-28      9.18
18 mu_1       0.9     2.96       3.54e- 7  1.64e-46     55.6 
19 mu_0       0.1     0.0439     3.88e-28  7.99e-75      4.39
20 mu_0       0.2     0.988      4.21e-16  8.58e-50     97.0 
21 mu_0       0.3     0.769      3.00e- 9  2.72e-35     26.6 
22 mu_0       0.4     1.06       8.90e- 5  3.94e-25     18.7 
23 mu_0       0.5     1.10       4.46e- 2  2.19e-17      9.66
24 mu_0       0.6     1.12       4.65e- 1  3.21e-11      8.47
25 mu_0       0.7     1.24       3.95e- 1  5.47e-17      9.41
26 mu_0       0.8     0.862      3.31e- 2  4.90e-27      9.20
27 mu_0       0.9     2.36       1.75e- 6  6.21e-45     39.8 
[1] "Total run time was 893.213 seconds"
