
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7449"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  58  59  60  61  63  64  65  66  68  71  72  73  74  75 
  1   4   2   3   2   2   7   1   4   2   2   2   2   2   4   1   6   2   2   1 
 77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  95  96  97  98  99 
  3   1   2   2   4   2   3   1   2   3   2   3   2   2   2   6   2   2   1   2 
100 
  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03378 0.34874 0.62492 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4492 2957 
[1] "treatment indicator table: "

   0    1 
2714 4735 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3803
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3646
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 394.231 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.464 0.0925
 2 mu         0.1   0.2 0.574 0.109 
 3 mu         0.1   0.3 0.667 0.129 
 4 mu         0.1   0.4 0.696 0.134 
 5 mu         0.1   0.5 0.731 0.141 
 6 mu         0.2   0.1 0.373 0.0439
 7 mu         0.2   0.2 0.484 0.0479
 8 mu         0.2   0.3 0.565 0.0603
 9 mu         0.2   0.4 0.595 0.0578
10 mu         0.2   0.5 0.620 0.0542
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.18         0.138 0.00000105      13.8 
 2 mu         0.2      1.02         0.909 0.0388           3.60
 3 mu         0.3      0.960        0.950 0.134            1.98
 4 mu         0.4      0.953        0.935 0.182            1.90
 5 mu         0.5      0.980        0.995 0.505            1.95
 6 mu         0.6      1.00         0.988 0.537            1.51
 7 mu         0.7      1.01         1.00  0.635            1.52
 8 mu         0.8      1.01         0.987 0.289            1.74
 9 mu         0.9      1.04         0.981 0.256            2.05
10 mu_1       0.1      1.17         0.264 0.00000300      15.1 
11 mu_1       0.2      1.00         0.916 0.0540           3.67
12 mu_1       0.3      0.958        0.946 0.132            2.00
13 mu_1       0.4      0.954        0.911 0.204            1.98
14 mu_1       0.5      0.983        0.983 0.505            1.92
15 mu_1       0.6      1.00         0.995 0.545            1.51
16 mu_1       0.7      1.01         0.998 0.636            1.52
17 mu_1       0.8      1.01         0.982 0.276            1.74
18 mu_1       0.9      1.04         0.970 0.250            2.08
19 mu_0       0.1      1.19         0.126 0.000000838     13.7 
20 mu_0       0.2      1.02         0.914 0.0350           3.58
21 mu_0       0.3      0.962        0.944 0.135            1.97
22 mu_0       0.4      0.952        0.939 0.167            1.85
23 mu_0       0.5      0.978        0.981 0.504            1.98
24 mu_0       0.6      1.00         0.982 0.524            1.51
25 mu_0       0.7      1.01         0.997 0.632            1.53
26 mu_0       0.8      1.01         0.980 0.341            1.73
27 mu_0       0.9      1.02         1.01  0.207            1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00780     5.87e-27  5.88e-67     0.419
 2 mu         0.2    0.708       2.33e-14  1.49e-42    20.7  
 3 mu         0.3    1.78        2.95e- 7  4.53e-29    56.5  
 4 mu         0.4    1.44        2.27e- 3  2.71e-20    31.8  
 5 mu         0.5    1.63        2.05e- 1  1.12e-13    41.6  
 6 mu         0.6    2.21        4.39e- 1  6.09e- 9    83.7  
 7 mu         0.7    0.854       1.11e- 1  5.42e-15     6.36 
 8 mu         0.8    1.36        7.13e- 3  4.22e-24    18.9  
 9 mu         0.9    1.33        5.67e- 9  1.93e-40    19.1  
10 mu_1       0.1    0.0173      4.04e-26  5.04e-66     0.917
11 mu_1       0.2    0.842       6.89e-14  6.42e-42    24.5  
12 mu_1       0.3    1.83        5.75e- 7  1.38e-28    60.1  
13 mu_1       0.4    1.41        3.66e- 3  6.18e-20    33.1  
14 mu_1       0.5    1.70        2.63e- 1  2.05e-13    47.7  
15 mu_1       0.6    2.16        3.37e- 1  2.22e- 9    80.0  
16 mu_1       0.7    0.827       1.15e- 1  1.70e-15     5.21 
17 mu_1       0.8    1.38        5.48e- 3  1.15e-24    18.8  
18 mu_1       0.9    1.32        4.02e- 9  4.69e-41    19.2  
19 mu_0       0.1    0.00675     2.03e-27  9.34e-68     0.364
20 mu_0       0.2    0.675       1.19e-14  2.52e-43    19.9  
21 mu_0       0.3    1.76        1.57e- 7  5.59e-30    54.9  
22 mu_0       0.4    1.46        1.34e- 3  3.90e-21    31.0  
23 mu_0       0.5    1.57        1.40e- 1  1.94e-14    35.5  
24 mu_0       0.6    2.28        4.16e- 1  3.67e- 9    89.3  
25 mu_0       0.7    0.916       1.39e- 1  1.41e-14     9.05 
26 mu_0       0.8    1.26        1.37e- 2  1.65e-23    19.4  
27 mu_0       0.9    1.44        2.05e- 8  1.50e-39    18.3  
[1] "Total run time was 397.393 seconds"
