
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7562"
[1] "cluster size dist'n: "

50 52 54 55 56 57 58 59 60 61 62 64 65 66 67 68 69 71 72 73 74 75 76 77 78 79 
 3  2  1  4  5  2  1  1  2  1  1  2  2  3  3  3  2  2  2  2  2  5  1  3  2  4 
80 82 84 85 86 88 89 90 91 93 94 95 96 97 98 99 
 1  3  3  2  3  3  3  1  3  1  2  1  4  1  2  6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03093 0.34640 0.59973 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4583 2979 
[1] "treatment indicator table: "

   0    1 
2666 4896 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3901
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3661
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 816.672 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.355 0.109 
 2 mu         0.1   0.2 0.389 0.0958
 3 mu         0.1   0.3 0.399 0.0889
 4 mu         0.1   0.4 0.392 0.0725
 5 mu         0.1   0.5 0.420 0.0801
 6 mu         0.2   0.1 0.471 0.0901
 7 mu         0.2   0.2 0.552 0.0930
 8 mu         0.2   0.3 0.594 0.0947
 9 mu         0.2   0.4 0.621 0.0903
10 mu         0.2   0.5 0.665 0.0961
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.557       0.0461  4.00e-13      3.22
 2 mu         0.2      1.07        0.732   1.72e- 5     13.6 
 3 mu         0.3      1.01        0.960   2.34e- 2      2.25
 4 mu         0.4      0.975       0.974   3.01e- 1      1.80
 5 mu         0.5      0.992       0.978   5.40e- 1      1.80
 6 mu         0.6      0.988       0.997   5.63e- 1      1.36
 7 mu         0.7      0.992       0.959   3.82e- 1      1.71
 8 mu         0.8      1.01        0.976   4.79e- 1      1.46
 9 mu         0.9      0.958       0.900   4.06e- 1      2.02
10 mu_1       0.1      0.576       0.0909  1.59e-12      3.75
11 mu_1       0.2      1.09        0.749   3.43e- 5     13.0 
12 mu_1       0.3      1.01        0.970   3.21e- 2      2.11
13 mu_1       0.4      0.977       0.964   3.13e- 1      1.79
14 mu_1       0.5      0.993       0.978   5.21e- 1      1.74
15 mu_1       0.6      0.986       0.996   5.66e- 1      1.36
16 mu_1       0.7      0.993       0.974   3.84e- 1      1.70
17 mu_1       0.8      1.01        0.978   4.79e- 1      1.46
18 mu_1       0.9      0.958       0.901   4.11e- 1      2.06
19 mu_0       0.1      0.555       0.0417  2.69e-13      3.24
20 mu_0       0.2      1.06        0.698   1.29e- 5     13.8 
21 mu_0       0.3      1.01        0.961   1.97e- 2      2.32
22 mu_0       0.4      0.974       0.967   2.93e- 1      1.81
23 mu_0       0.5      0.991       0.994   5.59e- 1      1.86
24 mu_0       0.6      0.990       0.997   5.60e- 1      1.36
25 mu_0       0.7      0.988       0.961   3.78e- 1      1.71
26 mu_0       0.8      1.01        0.987   4.77e- 1      1.50
27 mu_0       0.9      0.959       0.923   3.61e- 1      1.63
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0689     4.07e-28  1.24e-86      6.84
 2 mu         0.2     1.74       6.97e-15  3.08e-58    123.  
 3 mu         0.3     2.51       2.43e- 8  9.66e-42    118.  
 4 mu         0.4     1.56       2.96e- 4  3.86e-30     21.5 
 5 mu         0.5     1.77       4.52e- 2  2.99e-21     20.1 
 6 mu         0.6     1.49       1.16e- 1  4.08e-14     17.7 
 7 mu         0.7     0.976      1.45e- 1  1.03e-13      8.34
 8 mu         0.8     1.03       2.84e- 2  4.06e-22      9.05
 9 mu         0.9     1.67       1.75e- 6  2.82e-39     25.7 
10 mu_1       0.1     0.138      2.86e-27  1.19e-85     13.7 
11 mu_1       0.2     1.92       2.33e-14  1.48e-57    123.  
12 mu_1       0.3     2.44       5.43e- 8  3.09e-41    118.  
13 mu_1       0.4     1.56       4.96e- 4  9.26e-30     16.0 
14 mu_1       0.5     1.76       4.93e- 2  5.74e-21     19.6 
15 mu_1       0.6     1.47       1.41e- 1  6.53e-14     17.5 
16 mu_1       0.7     0.966      1.64e- 1  2.93e-14      8.03
17 mu_1       0.8     1.04       2.27e- 2  1.01e-22      9.12
18 mu_1       0.9     1.69       1.32e- 6  1.03e-39     26.3 
19 mu_0       0.1     0.0612     1.34e-28  5.59e-88      6.08
20 mu_0       0.2     1.69       2.89e-15  1.55e-59    123.  
21 mu_0       0.3     2.54       1.15e- 8  5.58e-43    119.  
22 mu_0       0.4     1.56       1.63e- 4  2.60e-31     25.1 
23 mu_0       0.5     1.78       4.63e- 2  2.42e-22     20.6 
24 mu_0       0.6     1.53       9.15e- 2  4.12e-15     18.1 
25 mu_0       0.7     0.999      1.29e- 1  2.73e-13      9.06
26 mu_0       0.8     0.994      5.12e- 2  1.62e-21      8.74
27 mu_0       0.9     1.47       5.64e- 6  1.89e-38     20.7 
[1] "Total run time was 823.514 seconds"
