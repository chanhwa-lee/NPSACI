
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7429"
[1] "cluster size dist'n: "

50 51 52 53 54 55 57 59 60 61 63 64 65 66 67 68 69 70 71 72 73 74 75 77 78 82 
 2  1  3  4  5  3  3  2  4  1  2  1  3  3  1  1  3  1  1  4  2  1  3  2  2  3 
83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 2  4  3  4  3  1  1  3  2  2  1  1  2  2  2  2  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0390  0.3733  0.6323  1.0000  6.4185 
[1] "event indicator table: "

   0    1 
4414 3015 
[1] "treatment indicator table: "

   0    1 
2731 4698 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3593
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3836
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 378.89 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.335 0.0526
 2 mu         0.1   0.2 0.406 0.0700
 3 mu         0.1   0.3 0.481 0.0761
 4 mu         0.1   0.4 0.535 0.0862
 5 mu         0.1   0.5 0.569 0.0931
 6 mu         0.2   0.1 0.274 0.0209
 7 mu         0.2   0.2 0.336 0.0337
 8 mu         0.2   0.3 0.411 0.0347
 9 mu         0.2   0.4 0.463 0.0416
10 mu         0.2   0.5 0.493 0.0431
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.05         0.401 0.000000426     10.5 
 2 mu         0.2      0.907        0.849 0.0414           2.91
 3 mu         0.3      0.984        0.964 0.305            1.82
 4 mu         0.4      0.985        0.970 0.551            1.52
 5 mu         0.5      1.00         0.988 0.630            1.47
 6 mu         0.6      1.00         1.01  0.596            1.57
 7 mu         0.7      1.00         1.02  0.623            1.43
 8 mu         0.8      1.03         1.02  0.579            1.52
 9 mu         0.9      0.984        0.941 0.306            1.71
10 mu_1       0.1      1.04         0.569 0.00000121       9.97
11 mu_1       0.2      0.904        0.821 0.0612           2.69
12 mu_1       0.3      0.991        0.967 0.312            1.80
13 mu_1       0.4      0.983        0.969 0.575            1.46
14 mu_1       0.5      1.01         0.995 0.608            1.49
15 mu_1       0.6      1.00         1.01  0.601            1.57
16 mu_1       0.7      1.00         1.02  0.627            1.43
17 mu_1       0.8      1.03         1.02  0.580            1.52
18 mu_1       0.9      0.984        0.939 0.297            1.72
19 mu_0       0.1      1.05         0.379 0.000000338     10.6 
20 mu_0       0.2      0.908        0.865 0.0365           2.98
21 mu_0       0.3      0.981        0.963 0.303            1.83
22 mu_0       0.4      0.986        0.973 0.536            1.57
23 mu_0       0.5      1.00         0.994 0.652            1.46
24 mu_0       0.6      1.00         1.02  0.590            1.56
25 mu_0       0.7      0.998        1.01  0.614            1.43
26 mu_0       0.8      1.03         1.02  0.571            1.51
27 mu_0       0.9      0.987        0.932 0.385            1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00805     6.51e-29  2.69e-68     0.521
 2 mu         0.2    0.620       2.33e-16  1.27e-43    20.2  
 3 mu         0.3    0.965       5.01e- 9  1.58e-29    12.2  
 4 mu         0.4    0.686       2.25e- 4  7.76e-20    11.5  
 5 mu         0.5    0.708       1.34e- 2  2.10e-13     7.35 
 6 mu         0.6    1.15        9.31e- 2  4.41e-12     9.47 
 7 mu         0.7    1.30        4.95e- 1  1.45e-19     9.11 
 8 mu         0.8    1.26        8.09e- 2  9.94e-31     9.96 
 9 mu         0.9    1.43        1.44e- 6  1.25e-50    20.9  
10 mu_1       0.1    0.0173      4.77e-28  2.36e-67     1.03 
11 mu_1       0.2    0.730       7.86e-16  5.54e-43    19.9  
12 mu_1       0.3    0.945       1.07e- 8  4.61e-29    12.0  
13 mu_1       0.4    0.667       3.58e- 4  1.70e-19    10.4  
14 mu_1       0.5    0.728       1.65e- 2  3.95e-13     8.21 
15 mu_1       0.6    1.17        8.78e- 2  1.45e-12     8.81 
16 mu_1       0.7    1.30        5.43e- 1  4.10e-20     9.56 
17 mu_1       0.8    1.26        7.16e- 2  2.46e-31     9.81 
18 mu_1       0.9    1.42        1.04e- 6  2.74e-51    21.4  
19 mu_0       0.1    0.00703     1.93e-29  3.74e-69     0.464
20 mu_0       0.2    0.593       9.53e-17  1.98e-44    20.2  
21 mu_0       0.3    0.974       2.56e- 9  2.82e-30    12.4  
22 mu_0       0.4    0.698       1.36e- 4  1.62e-20    12.3  
23 mu_0       0.5    0.688       9.23e- 3  2.47e-14     6.49 
24 mu_0       0.6    1.12        8.37e- 2  8.85e-12    10.5  
25 mu_0       0.7    1.28        5.39e- 1  3.88e-19     8.46 
26 mu_0       0.8    1.30        1.40e- 1  3.99e-30    10.6  
27 mu_0       0.9    1.51        5.02e- 6  1.00e-49    24.0  
[1] "Total run time was 382.294 seconds"
