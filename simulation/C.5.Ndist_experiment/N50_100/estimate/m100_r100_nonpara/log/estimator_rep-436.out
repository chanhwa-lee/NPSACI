
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7596"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  59  60  62  63  64  65  66  67  68  69  70  71  72 
  3   3   4   1   3   1   1   1   2   4   3   3   2   1   1   2   2   1   3   2 
 73  74  75  76  77  78  80  81  82  85  86  87  88  89  90  91  92  93  94  95 
  1   2   1   2   2   6   3   2   1   2   4   1   2   3   2   3   2   3   1   1 
 97  98  99 100 
  2   2   7   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04573 0.38820 0.64948 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4560 3036 
[1] "treatment indicator table: "

   0    1 
2646 4950 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3839
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.588 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.415 0.0991
 2 mu         0.1   0.2 0.527 0.118 
 3 mu         0.1   0.3 0.627 0.138 
 4 mu         0.1   0.4 0.703 0.155 
 5 mu         0.1   0.5 0.758 0.169 
 6 mu         0.2   0.1 0.304 0.0378
 7 mu         0.2   0.2 0.401 0.0300
 8 mu         0.2   0.3 0.481 0.0366
 9 mu         0.2   0.4 0.544 0.0495
10 mu         0.2   0.5 0.591 0.0537
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.24         0.197 0.00000126      18.6 
 2 mu         0.2      1.06         0.926 0.0364           3.03
 3 mu         0.3      1.04         1.05  0.249            2.21
 4 mu         0.4      0.999        1.00  0.447            1.84
 5 mu         0.5      0.987        0.957 0.620            1.61
 6 mu         0.6      1.02         0.992 0.603            1.62
 7 mu         0.7      1.01         1.01  0.734            1.40
 8 mu         0.8      0.989        0.995 0.569            1.48
 9 mu         0.9      0.964        0.956 0.253            2.29
10 mu_1       0.1      1.25         0.313 0.00000373      17.8 
11 mu_1       0.2      1.06         0.954 0.0559           2.91
12 mu_1       0.3      1.04         1.01  0.263            2.27
13 mu_1       0.4      0.994        1.01  0.457            1.84
14 mu_1       0.5      0.989        0.952 0.601            1.63
15 mu_1       0.6      1.02         0.992 0.608            1.62
16 mu_1       0.7      1.01         1.01  0.721            1.39
17 mu_1       0.8      0.989        0.993 0.554            1.46
18 mu_1       0.9      0.964        0.950 0.235            2.32
19 mu_0       0.1      1.24         0.181 0.000000986     18.7 
20 mu_0       0.2      1.06         0.929 0.0315           3.06
21 mu_0       0.3      1.05         1.05  0.243            2.18
22 mu_0       0.4      1.00         0.995 0.440            1.84
23 mu_0       0.5      0.984        0.971 0.638            1.59
24 mu_0       0.6      1.02         0.997 0.596            1.63
25 mu_0       0.7      1.02         1.00  0.753            1.41
26 mu_0       0.8      0.993        1.00  0.587            1.53
27 mu_0       0.9      0.966        0.965 0.236            2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000517     1.58e-29  1.37e-69    0.0515
 2 mu         0.2   0.152        1.01e-16  2.29e-44    9.60  
 3 mu         0.3   1.01         1.29e- 9  5.61e-30   18.7   
 4 mu         0.4   0.758        2.74e- 5  1.71e-20   15.7   
 5 mu         0.5   0.913        1.62e- 2  9.65e-14    6.82  
 6 mu         0.6   1.12         3.10e- 1  1.27e- 8    9.74  
 7 mu         0.7   1.07         2.78e- 1  3.66e-13    7.80  
 8 mu         0.8   1.08         3.82e- 2  6.79e-23    9.58  
 9 mu         0.9   1.52         1.81e- 7  4.98e-41   25.4   
10 mu_1       0.1   0.00139      1.22e-28  1.19e-68    0.139 
11 mu_1       0.2   0.214        3.64e-16  9.93e-44   12.9   
12 mu_1       0.3   1.06         2.92e- 9  1.62e-29   19.8   
13 mu_1       0.4   0.738        4.67e- 5  3.85e-20   13.8   
14 mu_1       0.5   0.935        2.18e- 2  1.78e-13    7.70  
15 mu_1       0.6   1.12         3.53e- 1  1.96e- 8    9.58  
16 mu_1       0.7   1.07         2.39e- 1  1.50e-13    7.67  
17 mu_1       0.8   1.07         3.09e- 2  2.56e-23    9.55  
18 mu_1       0.9   1.53         1.34e- 7  1.67e-41   25.4   
19 mu_0       0.1   0.000420     4.66e-30  1.99e-70    0.0418
20 mu_0       0.2   0.136        3.53e-17  3.75e-45    8.77  
21 mu_0       0.3   0.996        5.91e-10  1.00e-30   18.6   
22 mu_0       0.4   0.772        1.45e- 5  2.89e-21   16.9   
23 mu_0       0.5   0.890        1.28e- 2  1.48e-14    5.94  
24 mu_0       0.6   1.13         2.23e- 1  2.44e- 9   10.6   
25 mu_0       0.7   1.07         2.28e- 1  8.68e-13    8.09  
26 mu_0       0.8   1.08         4.41e- 2  2.37e-22    9.67  
27 mu_0       0.9   1.36         6.14e- 7  3.48e-40   25.7   
[1] "Total run time was 422.185 seconds"
