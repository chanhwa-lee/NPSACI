
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7373"
[1] "cluster size dist'n: "

50 51 52 53 55 56 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 
 3  3  1  1  1  2  1  2  3  2  3  3  3  2  2  4  1  1  7  4  1  2  1  3  4  2 
79 80 81 82 83 85 86 87 88 89 90 92 93 94 95 96 97 98 
 3  7  1  1  1  2  5  3  3  3  1  1  1  1  1  2  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04789 0.35220 0.61121 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4439 2934 
[1] "treatment indicator table: "

   0    1 
2582 4791 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3606
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3767
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.254 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est    se
   <chr>    <dbl> <dbl> <dbl> <dbl>
 1 mu         0.1   0.1 0.351 0.128
 2 mu         0.1   0.2 0.418 0.143
 3 mu         0.1   0.3 0.489 0.168
 4 mu         0.1   0.4 0.535 0.173
 5 mu         0.1   0.5 0.531 0.176
 6 mu         0.2   0.1 0.381 0.109
 7 mu         0.2   0.2 0.458 0.113
 8 mu         0.2   0.3 0.533 0.132
 9 mu         0.2   0.4 0.584 0.128
10 mu         0.2   0.5 0.585 0.122
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.836      0.00546  7.29e-10     15.8 
 2 mu         0.2      0.956      0.620    4.65e- 4      5.02
 3 mu         0.3      1.01       0.956    8.44e- 2      2.65
 4 mu         0.4      0.997      0.964    4.87e- 1      1.71
 5 mu         0.5      0.974      0.965    5.59e- 1      1.36
 6 mu         0.6      0.979      0.983    6.37e- 1      1.32
 7 mu         0.7      1.03       1.02     6.46e- 1      1.46
 8 mu         0.8      1.02       0.999    6.88e- 1      1.53
 9 mu         0.9      0.987      0.944    2.26e- 1      2.18
10 mu_1       0.1      0.962      0.0124   2.70e- 9     14.8 
11 mu_1       0.2      0.934      0.682    8.67e- 4      4.36
12 mu_1       0.3      1.02       0.975    1.10e- 1      2.62
13 mu_1       0.4      0.992      0.962    4.73e- 1      1.69
14 mu_1       0.5      0.975      0.969    5.79e- 1      1.37
15 mu_1       0.6      0.980      0.992    6.44e- 1      1.35
16 mu_1       0.7      1.04       1.02     6.50e- 1      1.47
17 mu_1       0.8      1.02       0.997    6.75e- 1      1.53
18 mu_1       0.9      0.986      0.948    2.10e- 1      2.21
19 mu_0       0.1      0.822      0.00470  5.11e-10     15.9 
20 mu_0       0.2      0.962      0.590    3.64e- 4      5.19
21 mu_0       0.3      1.01       0.965    7.34e- 2      2.67
22 mu_0       0.4      1.00       0.971    4.97e- 1      1.72
23 mu_0       0.5      0.974      0.960    5.40e- 1      1.36
24 mu_0       0.6      0.977      0.974    5.98e- 1      1.32
25 mu_0       0.7      1.03       1.02     6.37e- 1      1.46
26 mu_0       0.8      1.03       1.00     6.78e- 1      1.52
27 mu_0       0.9      0.989      0.975    3.73e- 1      1.90
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00967     1.65e-28  1.29e-63     0.836
 2 mu         0.2    0.949       4.40e-15  6.19e-41    65.6  
 3 mu         0.3    0.558       1.55e- 8  3.91e-29    16.3  
 4 mu         0.4    0.630       1.31e- 4  7.71e-21    11.8  
 5 mu         0.5    1.19        3.81e- 2  1.74e-14     9.64 
 6 mu         0.6    0.999       5.64e- 1  9.18e-10     9.13 
 7 mu         0.7    1.11        3.88e- 1  1.70e-16     6.80 
 8 mu         0.8    1.17        8.94e- 2  1.32e-26     7.63 
 9 mu         0.9    1.38        1.57e- 6  2.26e-45    42.5  
10 mu_1       0.1    0.0211      1.04e-27  1.09e-62     1.78 
11 mu_1       0.2    1.06        1.39e-14  2.96e-40    69.7  
12 mu_1       0.3    0.496       3.45e- 8  1.25e-28    14.1  
13 mu_1       0.4    0.684       2.27e- 4  1.85e-20    10.4  
14 mu_1       0.5    1.20        4.58e- 2  3.32e-14     8.86 
15 mu_1       0.6    0.992       5.54e- 1  3.25e-10     8.84 
16 mu_1       0.7    1.12        4.01e- 1  5.16e-17     6.59 
17 mu_1       0.8    1.17        8.94e- 2  3.52e-27     7.83 
18 mu_1       0.9    1.40        1.20e- 6  6.07e-46    41.7  
19 mu_0       0.1    0.00840     6.76e-29  2.24e-64     0.731
20 mu_0       0.2    0.921       1.78e-15  3.27e-42    64.6  
21 mu_0       0.3    0.585       6.48e- 9  2.36e-30    17.2  
22 mu_0       0.4    0.594       6.72e- 5  5.43e-22    12.8  
23 mu_0       0.5    1.19        2.40e- 2  1.47e-15    10.4  
24 mu_0       0.6    1.01        5.30e- 1  2.27e-10     9.58 
25 mu_0       0.7    1.10        4.14e- 1  4.46e-16     7.27 
26 mu_0       0.8    1.17        7.06e- 2  5.22e-26     6.86 
27 mu_0       0.9    1.22        4.93e- 6  1.72e-44    49.4  
[1] "Total run time was 444.534 seconds"
