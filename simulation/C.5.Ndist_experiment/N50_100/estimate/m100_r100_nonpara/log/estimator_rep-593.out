
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7899"
[1] "cluster size dist'n: "

52 54 55 56 57 58 60 61 62 64 65 66 67 68 70 71 72 73 74 75 76 77 78 79 80 81 
 1  2  2  2  2  3  1  1  1  1  2  5  1  5  2  1  2  1  1  1  2  1  1  4  1  6 
82 83 84 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 3  5  1  3  4  4  2  1  3  2  1  5  3  2  3  4  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03166 0.33383 0.59582 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4743 3156 
[1] "treatment indicator table: "

   0    1 
2903 4996 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3956
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3943
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 567.197 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.613 0.151 
 2 mu         0.1   0.2 0.707 0.152 
 3 mu         0.1   0.3 0.795 0.138 
 4 mu         0.1   0.4 0.849 0.133 
 5 mu         0.1   0.5 0.898 0.130 
 6 mu         0.2   0.1 0.378 0.0714
 7 mu         0.2   0.2 0.461 0.0702
 8 mu         0.2   0.3 0.538 0.0602
 9 mu         0.2   0.4 0.577 0.0552
10 mu         0.2   0.5 0.611 0.0529
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.32         0.554 0.0000000494     12.1 
 2 mu         0.2      1.03         0.958 0.0317            4.03
 3 mu         0.3      1.06         1.01  0.339             1.98
 4 mu         0.4      1.01         0.986 0.394             1.66
 5 mu         0.5      1.01         0.999 0.555             1.62
 6 mu         0.6      1.01         1.01  0.626             1.45
 7 mu         0.7      1.00         0.985 0.636             1.53
 8 mu         0.8      0.995        0.977 0.577             1.86
 9 mu         0.9      0.994        0.974 0.196             2.28
10 mu_1       0.1      1.31         0.681 0.000000156      10.7 
11 mu_1       0.2      1.01         0.924 0.0469            3.22
12 mu_1       0.3      1.06         1.03  0.338             1.98
13 mu_1       0.4      1.00         0.978 0.398             1.65
14 mu_1       0.5      1.01         0.990 0.571             1.57
15 mu_1       0.6      1.01         1.01  0.636             1.44
16 mu_1       0.7      0.999        0.984 0.631             1.51
17 mu_1       0.8      0.996        0.980 0.582             1.89
18 mu_1       0.9      0.992        0.971 0.188             2.26
19 mu_0       0.1      1.32         0.531 0.0000000375     12.3 
20 mu_0       0.2      1.03         0.979 0.0279            4.23
21 mu_0       0.3      1.06         1.01  0.337             2.01
22 mu_0       0.4      1.01         0.994 0.391             1.67
23 mu_0       0.5      1.01         1.00  0.540             1.67
24 mu_0       0.6      1.01         1.01  0.611             1.47
25 mu_0       0.7      1.00         0.992 0.647             1.57
26 mu_0       0.8      0.989        0.966 0.556             1.74
27 mu_0       0.9      1.01         0.974 0.270             2.42
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.180     9.76e-30  1.34e-83      17.8
 2 mu         0.2      1.94      1.03e-15  7.34e-56      97.1
 3 mu         0.3      0.978     1.70e- 8  8.96e-40      27.3
 4 mu         0.4      1.15      7.64e- 4  1.73e-28      26.2
 5 mu         0.5      1.19      6.90e- 2  7.14e-20      11.6
 6 mu         0.6      1.57      1.54e- 1  5.41e-13      44.1
 7 mu         0.7      1.24      9.17e- 2  4.35e-20      12.6
 8 mu         0.8      1.27      1.54e- 2  2.99e-31      12.6
 9 mu         0.9      1.30      5.02e- 8  3.55e-52      21.1
10 mu_1       0.1      0.309     6.66e-29  1.27e-82      30.4
11 mu_1       0.2      1.95      3.45e-15  3.49e-55      92.5
12 mu_1       0.3      0.951     3.57e- 8  2.84e-39      20.6
13 mu_1       0.4      1.16      1.22e- 3  4.10e-28      24.6
14 mu_1       0.5      1.19      5.93e- 2  1.36e-19      12.3
15 mu_1       0.6      1.56      1.51e- 1  4.48e-13      44.2
16 mu_1       0.7      1.25      8.23e- 2  1.06e-20      13.2
17 mu_1       0.8      1.27      1.23e- 2  6.39e-32      12.7
18 mu_1       0.9      1.29      3.66e- 8  8.95e-53      20.7
19 mu_0       0.1      0.166     3.81e-30  7.58e-85      16.4
20 mu_0       0.2      1.93      3.93e-16  4.68e-57     101. 
21 mu_0       0.3      0.990     9.01e- 9  6.53e-41      30.2
22 mu_0       0.4      1.14      4.58e- 4  1.47e-29      27.3
23 mu_0       0.5      1.19      4.59e- 2  7.29e-21      11.4
24 mu_0       0.6      1.57      1.41e- 1  6.90e-14      43.9
25 mu_0       0.7      1.23      1.12e- 1  1.20e-19      11.1
26 mu_0       0.8      1.29      2.62e- 2  1.24e-30      12.5
27 mu_0       0.9      1.37      1.73e- 7  2.75e-51      24.7
[1] "Total run time was 570.679 seconds"
