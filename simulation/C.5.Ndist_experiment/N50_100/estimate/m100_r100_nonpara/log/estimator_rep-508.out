
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7295"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  60  61  62  63  64  66  68  69  70  71  72  73 
  1   3   2   3   1   1   1   6   5   4   3   2   2   5   2   5   4   5   1   3 
 74  75  76  78  79  80  81  82  83  84  86  87  89  90  91  92  93  94  95  96 
  1   4   1   2   2   1   1   1   1   2   1   2   1   5   1   1   2   3   1   3 
 97  98  99 100 
  1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02934 0.32628 0.58986 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4345 2950 
[1] "treatment indicator table: "

   0    1 
2809 4486 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3661
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3634
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 383.748 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.333 0.0458
 2 mu         0.1   0.2 0.361 0.0618
 3 mu         0.1   0.3 0.405 0.0566
 4 mu         0.1   0.4 0.452 0.0593
 5 mu         0.1   0.5 0.491 0.0607
 6 mu         0.2   0.1 0.312 0.0418
 7 mu         0.2   0.2 0.373 0.0559
 8 mu         0.2   0.3 0.449 0.0450
 9 mu         0.2   0.4 0.491 0.0472
10 mu         0.2   0.5 0.547 0.0356
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.852        0.445 0.0000802      4.88
 2 mu         0.2      0.994        0.840 0.148          2.89
 3 mu         0.3      1.04         1.04  0.165          2.48
 4 mu         0.4      1.03         1.02  0.521          1.63
 5 mu         0.5      1.02         0.997 0.484          1.73
 6 mu         0.6      0.968        0.967 0.569          1.54
 7 mu         0.7      0.952        0.910 0.679          1.52
 8 mu         0.8      0.982        0.953 0.555          1.54
 9 mu         0.9      1.02         0.985 0.222          2.08
10 mu_1       0.1      0.864        0.514 0.000220       4.73
11 mu_1       0.2      1.01         0.868 0.177          2.54
12 mu_1       0.3      1.04         1.02  0.187          2.46
13 mu_1       0.4      1.03         1.01  0.543          1.64
14 mu_1       0.5      1.01         0.994 0.509          1.72
15 mu_1       0.6      0.966        0.968 0.576          1.54
16 mu_1       0.7      0.952        0.906 0.670          1.53
17 mu_1       0.8      0.984        0.956 0.548          1.56
18 mu_1       0.9      1.03         0.977 0.213          2.11
19 mu_0       0.1      0.851        0.423 0.0000648      4.89
20 mu_0       0.2      0.991        0.834 0.133          3.00
21 mu_0       0.3      1.04         1.05  0.156          2.49
22 mu_0       0.4      1.03         1.01  0.506          1.69
23 mu_0       0.5      1.02         1.01  0.459          1.74
24 mu_0       0.6      0.971        0.968 0.558          1.55
25 mu_0       0.7      0.951        0.908 0.664          1.51
26 mu_0       0.8      0.974        0.943 0.535          1.57
27 mu_0       0.9      1.01         1.00  0.286          1.94
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.02      5.94e-26  4.25e-63     195. 
 2 mu         0.2      1.22      5.29e-14  7.91e-42      45.4
 3 mu         0.3      0.980     1.67e- 7  3.80e-30      14.9
 4 mu         0.4      0.917     9.67e- 4  6.57e-22      16.3
 5 mu         0.5      1.63      5.16e- 2  1.42e-15      18.5
 6 mu         0.6      1.53      2.30e- 1  4.16e-19      20.2
 7 mu         0.7      1.39      2.59e- 1  9.67e-29      11.1
 8 mu         0.8      1.37      1.55e- 2  1.02e-42      18.9
 9 mu         0.9      1.36      1.15e- 7  3.85e-67      29.4
10 mu_1       0.1      2.39      3.26e-25  3.69e-62     228. 
11 mu_1       0.2      1.23      1.61e-13  3.84e-41      50.4
12 mu_1       0.3      0.950     3.55e- 7  1.23e-29      15.4
13 mu_1       0.4      0.945     1.50e- 3  1.59e-21      15.2
14 mu_1       0.5      1.66      7.08e- 2  2.76e-15      18.2
15 mu_1       0.6      1.51      2.22e- 1  8.11e-20      19.1
16 mu_1       0.7      1.40      2.58e- 1  1.62e-29      10.8
17 mu_1       0.8      1.37      1.46e- 2  1.49e-43      19.7
18 mu_1       0.9      1.36      8.05e- 8  5.00e-68      29.4
19 mu_0       0.1      1.98      2.83e-26  6.30e-64     191. 
20 mu_0       0.2      1.21      2.59e-14  2.87e-43      44.1
21 mu_0       0.3      0.993     8.71e- 8  1.58e-31      14.7
22 mu_0       0.4      0.899     7.82e- 4  3.17e-23      17.1
23 mu_0       0.5      1.59      4.36e- 2  8.22e-17      18.7
24 mu_0       0.6      1.55      2.43e- 1  9.18e-19      21.7
25 mu_0       0.7      1.38      2.40e- 1  2.85e-28      11.7
26 mu_0       0.8      1.38      1.59e- 2  4.49e-42      16.7
27 mu_0       0.9      1.36      4.25e- 7  3.40e-66      29.4
[1] "Total run time was 387.072 seconds"
