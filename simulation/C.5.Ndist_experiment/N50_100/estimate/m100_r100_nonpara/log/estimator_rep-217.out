
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7397"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  61  62  63  64  65  67  68  69  70  72  74 
  3   2   2   3   3   1   3   4   2   2   4   2   6   2   1   3   2   1   1   4 
 76  77  78  79  80  81  82  83  84  85  86  88  89  90  91  92  93  94  96  97 
  2   4   2   2   2   2   2   2   2   1   2   2   4   1   2   2   4   1   2   2 
 98  99 100 
  2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03456 0.35841 0.61501 1.00000 6.95832 
[1] "event indicator table: "

   0    1 
4443 2954 
[1] "treatment indicator table: "

   0    1 
2529 4868 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3678
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 368.758 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.394 0.0862
 2 mu         0.1   0.2 0.516 0.112 
 3 mu         0.1   0.3 0.610 0.130 
 4 mu         0.1   0.4 0.658 0.143 
 5 mu         0.1   0.5 0.698 0.150 
 6 mu         0.2   0.1 0.318 0.0244
 7 mu         0.2   0.2 0.428 0.0464
 8 mu         0.2   0.3 0.514 0.0658
 9 mu         0.2   0.4 0.563 0.0769
10 mu         0.2   0.5 0.603 0.0752
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.12         0.317 0.00000000268     12.3 
 2 mu         0.2      1.06         0.892 0.00258            3.65
 3 mu         0.3      1.03         1.01  0.262              2.04
 4 mu         0.4      0.984        0.984 0.418              1.67
 5 mu         0.5      0.999        1.01  0.614              1.47
 6 mu         0.6      0.987        0.967 0.603              1.58
 7 mu         0.7      0.975        0.974 0.642              1.39
 8 mu         0.8      0.964        0.961 0.517              1.62
 9 mu         0.9      0.924        0.877 0.169              1.91
10 mu_1       0.1      1.13         0.466 0.00000000869     11.6 
11 mu_1       0.2      1.06         0.926 0.00430            3.40
12 mu_1       0.3      1.03         0.994 0.262              1.96
13 mu_1       0.4      0.985        0.992 0.409              1.66
14 mu_1       0.5      0.999        1.02  0.618              1.48
15 mu_1       0.6      0.986        0.967 0.611              1.61
16 mu_1       0.7      0.975        0.967 0.642              1.41
17 mu_1       0.8      0.963        0.953 0.509              1.63
18 mu_1       0.9      0.924        0.871 0.159              1.93
19 mu_0       0.1      1.12         0.301 0.00000000201     12.4 
20 mu_0       0.2      1.06         0.872 0.00215            3.71
21 mu_0       0.3      1.04         1.01  0.259              2.08
22 mu_0       0.4      0.984        0.979 0.423              1.67
23 mu_0       0.5      1.00         1.01  0.593              1.45
24 mu_0       0.6      0.987        0.968 0.593              1.53
25 mu_0       0.7      0.976        0.978 0.641              1.40
26 mu_0       0.8      0.965        0.979 0.550              1.60
27 mu_0       0.9      0.931        0.910 0.245              1.79
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000235     3.14e-30  2.21e-72    0.0234
 2 mu         0.2   0.176        4.65e-17  2.96e-48   17.2   
 3 mu         0.3   0.738        5.49e-10  2.78e-34   47.7   
 4 mu         0.4   1.39         2.11e- 5  1.63e-24   21.8   
 5 mu         0.5   1.38         2.62e- 2  1.68e-17    9.98  
 6 mu         0.6   0.958        1.24e- 1  7.76e-12    8.95  
 7 mu         0.7   1.12         1.44e- 1  5.53e- 9   11.7   
 8 mu         0.8   1.31         6.99e- 2  9.56e-16   10.0   
 9 mu         0.9   1.84         4.24e- 6  6.69e-30   43.4   
10 mu_1       0.1   0.000654     2.24e-29  2.08e-71    0.0652
11 mu_1       0.2   0.247        1.59e-16  1.39e-47   24.0   
12 mu_1       0.3   0.778        1.34e- 9  8.74e-34   44.3   
13 mu_1       0.4   1.42         3.73e- 5  3.96e-24   21.8   
14 mu_1       0.5   1.35         3.53e- 2  3.26e-17   10.4   
15 mu_1       0.6   0.956        1.42e- 1  1.26e-11    9.82  
16 mu_1       0.7   1.13         1.40e- 1  2.20e- 9   11.0   
17 mu_1       0.8   1.32         6.86e- 2  3.33e-16   10.2   
18 mu_1       0.9   1.85         3.13e- 6  3.12e-30   44.0   
19 mu_0       0.1   0.000188     9.92e-31  1.43e-73    0.0188
20 mu_0       0.2   0.158        1.59e-17  2.15e-49   15.5   
21 mu_0       0.3   0.720        2.30e-10  2.31e-35   49.1   
22 mu_0       0.4   1.36         1.03e- 5  7.14e-26   21.8   
23 mu_0       0.5   1.41         1.71e- 2  8.82e-19    9.86  
24 mu_0       0.6   0.960        8.47e- 2  5.11e-13    8.69  
25 mu_0       0.7   1.10         1.39e- 1  1.33e- 8   13.3   
26 mu_0       0.8   1.28         6.98e- 2  3.45e-15    9.99  
27 mu_0       0.9   1.75         1.43e- 5  3.88e-29   38.0   
[1] "Total run time was 371.987 seconds"
