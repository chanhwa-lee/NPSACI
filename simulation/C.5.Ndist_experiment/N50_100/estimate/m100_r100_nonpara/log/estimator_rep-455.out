
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7403"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  63  65  66  67  68  69  70  71  72 
  1   6   2   3   5   2   1   2   1   3   1   4   3   1   1   2   2   1   2   3 
 73  74  75  76  77  78  79  80  81  82  83  85  86  87  88  89  91  93  94  95 
  3   2   3   4   1   1   1   1   3   1   2   1   3   4   5   3   1   2   2   3 
 97  98  99 100 
  3   1   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02669 0.32869 0.59128 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4360 3043 
[1] "treatment indicator table: "

   0    1 
2875 4528 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3765
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3638
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 473.279 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.321 0.0885
 2 mu         0.1   0.2 0.431 0.111 
 3 mu         0.1   0.3 0.465 0.123 
 4 mu         0.1   0.4 0.469 0.120 
 5 mu         0.1   0.5 0.506 0.129 
 6 mu         0.2   0.1 0.325 0.0402
 7 mu         0.2   0.2 0.448 0.0570
 8 mu         0.2   0.3 0.501 0.0679
 9 mu         0.2   0.4 0.530 0.0616
10 mu         0.2   0.5 0.582 0.0731
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.638       0.0809 0.00000000205     15.4 
 2 mu         0.2      0.886       0.842  0.00387            4.13
 3 mu         0.3      1.03        1.01   0.204              2.30
 4 mu         0.4      1.02        1.02   0.500              1.78
 5 mu         0.5      0.995       0.979  0.553              1.38
 6 mu         0.6      1.00        0.990  0.603              1.40
 7 mu         0.7      0.995       0.986  0.646              1.42
 8 mu         0.8      0.965       0.956  0.360              1.56
 9 mu         0.9      1.02        0.966  0.0177             3.47
10 mu_1       0.1      0.639       0.137  0.00000000699     11.9 
11 mu_1       0.2      0.919       0.903  0.00660            4.06
12 mu_1       0.3      1.04        1.03   0.218              2.24
13 mu_1       0.4      1.02        1.01   0.495              1.79
14 mu_1       0.5      0.995       0.976  0.566              1.41
15 mu_1       0.6      1.00        0.995  0.611              1.39
16 mu_1       0.7      0.994       0.984  0.643              1.42
17 mu_1       0.8      0.966       0.956  0.348              1.55
18 mu_1       0.9      1.02        0.969  0.0161             3.57
19 mu_0       0.1      0.638       0.0727 0.00000000150     15.8 
20 mu_0       0.2      0.878       0.837  0.00318            4.17
21 mu_0       0.3      1.03        1.01   0.198              2.33
22 mu_0       0.4      1.02        1.01   0.503              1.77
23 mu_0       0.5      0.995       0.970  0.540              1.38
24 mu_0       0.6      0.999       0.992  0.591              1.41
25 mu_0       0.7      0.999       0.996  0.653              1.42
26 mu_0       0.8      0.964       0.961  0.409              1.58
27 mu_0       0.9      1.02        0.991  0.0317             2.61
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0573     7.27e-25  9.47e-69      3.42
 2 mu         0.2     1.96       6.29e-13  4.72e-44    140.  
 3 mu         0.3     1.20       1.63e- 6  1.32e-30     23.4 
 4 mu         0.4     1.15       4.58e- 3  2.86e-21     20.8 
 5 mu         0.5     1.11       1.77e- 1  3.01e-14      7.86
 6 mu         0.6     1.10       3.72e- 1  4.89e-10      9.00
 7 mu         0.7     0.660      1.44e- 1  5.09e-17      3.42
 8 mu         0.8     1.18       1.93e- 3  1.76e-27     13.9 
 9 mu         0.9     1.48       6.84e-10  3.54e-46     41.0 
10 mu_1       0.1     0.117      4.41e-24  8.14e-68      6.84
11 mu_1       0.2     2.07       1.93e-12  2.14e-43    145.  
12 mu_1       0.3     1.14       3.29e- 6  4.00e-30     20.8 
13 mu_1       0.4     1.16       6.92e- 3  6.48e-21     19.8 
14 mu_1       0.5     1.10       1.99e- 1  5.46e-14      7.20
15 mu_1       0.6     1.08       2.80e- 1  1.69e-10      8.94
16 mu_1       0.7     0.650      1.44e- 1  1.51e-17      3.45
17 mu_1       0.8     1.21       1.51e- 3  4.57e-28     14.5 
18 mu_1       0.9     1.47       4.59e-10  8.16e-47     40.5 
19 mu_0       0.1     0.0507     3.18e-25  1.47e-69      3.04
20 mu_0       0.2     1.93       3.07e-13  5.42e-45    139.  
21 mu_0       0.3     1.23       9.19e- 7  1.74e-31     26.5 
22 mu_0       0.4     1.14       3.02e- 3  4.38e-22     21.6 
23 mu_0       0.5     1.11       1.65e- 1  5.53e-15      8.51
24 mu_0       0.6     1.12       4.80e- 1  6.07e-10      9.09
25 mu_0       0.7     0.685      1.59e- 1  1.35e-16      3.52
26 mu_0       0.8     1.05       3.60e- 3  6.99e-27     11.5 
27 mu_0       0.9     1.59       2.63e- 9  2.81e-45     46.1 
[1] "Total run time was 477.359 seconds"
