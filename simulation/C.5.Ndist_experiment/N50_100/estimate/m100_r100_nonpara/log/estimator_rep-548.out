
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7275"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  2   2   2   3   2   6   1   2   2   2   5   2   2   2   2   3   3   3   2   1 
 73  74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  90  94  95  98 
  3   1   2   2   4   2   2   1   5   2   2   3   4   2   2   3   1   4   1   2 
 99 100 
  1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03374 0.34700 0.61400 1.00000 6.95700 
[1] "event indicator table: "

   0    1 
4319 2956 
[1] "treatment indicator table: "

   0    1 
2713 4562 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3738
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3537
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 404.287 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.281 0.0624
 2 mu         0.1   0.2 0.398 0.0908
 3 mu         0.1   0.3 0.410 0.0897
 4 mu         0.1   0.4 0.474 0.101 
 5 mu         0.1   0.5 0.528 0.103 
 6 mu         0.2   0.1 0.290 0.0376
 7 mu         0.2   0.2 0.412 0.0655
 8 mu         0.2   0.3 0.431 0.0561
 9 mu         0.2   0.4 0.501 0.0661
10 mu         0.2   0.5 0.562 0.0653
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.804       0.0634  5.14e-12      9.95
 2 mu         0.2      0.919       0.766   9.91e- 5      6.31
 3 mu         0.3      0.944       0.907   7.97e- 2      2.09
 4 mu         0.4      0.987       0.933   4.97e- 1      1.94
 5 mu         0.5      1.03        0.994   5.35e- 1      2.56
 6 mu         0.6      1.02        1.01    5.75e- 1      1.74
 7 mu         0.7      1.01        1.01    6.07e- 1      1.73
 8 mu         0.8      1.02        0.992   4.18e- 1      1.55
 9 mu         0.9      1.03        0.944   2.30e- 2      3.73
10 mu_1       0.1      0.847       0.122   1.98e-11     10.7 
11 mu_1       0.2      0.915       0.778   1.92e- 4      4.86
12 mu_1       0.3      0.946       0.915   1.06e- 1      1.86
13 mu_1       0.4      0.994       0.971   5.06e- 1      1.94
14 mu_1       0.5      1.03        0.986   5.33e- 1      2.50
15 mu_1       0.6      1.02        1.02    5.69e- 1      1.74
16 mu_1       0.7      1.01        1.01    6.05e- 1      1.73
17 mu_1       0.8      1.02        0.989   4.25e- 1      1.57
18 mu_1       0.9      1.03        0.941   2.09e- 2      3.81
19 mu_0       0.1      0.799       0.0572  3.51e-12      9.87
20 mu_0       0.2      0.920       0.766   7.58e- 5      6.68
21 mu_0       0.3      0.943       0.891   6.86e- 2      2.18
22 mu_0       0.4      0.983       0.926   4.61e- 1      1.95
23 mu_0       0.5      1.03        0.993   5.37e- 1      2.62
24 mu_0       0.6      1.02        1.00    5.61e- 1      1.74
25 mu_0       0.7      1.01        1.00    6.13e- 1      1.73
26 mu_0       0.8      1.02        0.981   3.88e- 1      1.50
27 mu_0       0.9      1.05        0.977   4.21e- 2      3.02
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.00      9.80e-27  3.82e-79    100.  
 2 mu         0.2      7.81      3.83e-14  1.17e-53    768.  
 3 mu         0.3      1.24      1.24e- 7  8.29e-39     28.6 
 4 mu         0.4      1.09      1.38e- 3  2.54e-28     16.7 
 5 mu         0.5      1.55      8.70e- 2  3.04e-20     31.5 
 6 mu         0.6      1.50      3.01e- 1  1.05e-13     43.2 
 7 mu         0.7      1.18      1.02e- 1  6.35e-20     11.7 
 8 mu         0.8      1.10      5.01e- 3  1.48e-31     13.3 
 9 mu         0.9      1.81      5.77e- 9  3.67e-52     60.4 
10 mu_1       0.1      1.75      6.60e-26  3.73e-78    175.  
11 mu_1       0.2      6.89      1.19e-13  5.70e-53    670.  
12 mu_1       0.3      1.19      2.45e- 7  2.70e-38     30.3 
13 mu_1       0.4      1.11      2.14e- 3  6.20e-28     16.3 
14 mu_1       0.5      1.57      1.05e- 1  5.95e-20     35.5 
15 mu_1       0.6      1.48      3.08e- 1  1.71e-13     40.5 
16 mu_1       0.7      1.18      8.94e- 2  1.58e-20     12.5 
17 mu_1       0.8      1.09      3.94e- 3  3.23e-32     13.2 
18 mu_1       0.9      1.84      3.98e- 9  7.11e-53     61.8 
19 mu_0       0.1      0.921     3.56e-27  0            92.1 
20 mu_0       0.2      8.04      1.80e-14  0           793.  
21 mu_0       0.3      1.26      7.20e- 8  0            30.3 
22 mu_0       0.4      1.08      8.81e- 4  0            17.0 
23 mu_0       0.5      1.53      7.98e- 2  0            27.6 
24 mu_0       0.6      1.54      2.31e- 1  0            47.3 
25 mu_0       0.7      1.17      1.48e- 1  0             9.72
26 mu_0       0.8      1.14      1.03e- 2  0            13.7 
27 mu_0       0.9      1.54      1.51e- 8  0            47.5 
[1] "Total run time was 409.28 seconds"
