
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7546"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  68  69  70  71 
  1   3   2   1   2   1   1   1   1   2   3   2   4   2   1   5   1   1   2   4 
 72  73  74  75  76  77  78  79  80  81  83  84  85  88  89  90  91  93  96  97 
  2   4   5   4   1   1   2   2   5   1   4   2   1   3   1   3   2   4   1   6 
 98  99 100 
  3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04722 0.36579 0.64038 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4510 3036 
[1] "treatment indicator table: "

   0    1 
2695 4851 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3789
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 392.347 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.454 0.178 
 2 mu         0.1   0.2 0.565 0.209 
 3 mu         0.1   0.3 0.685 0.250 
 4 mu         0.1   0.4 0.759 0.270 
 5 mu         0.1   0.5 0.788 0.292 
 6 mu         0.2   0.1 0.330 0.0364
 7 mu         0.2   0.2 0.412 0.0416
 8 mu         0.2   0.3 0.504 0.0515
 9 mu         0.2   0.4 0.559 0.0614
10 mu         0.2   0.5 0.583 0.0589
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.17        0.0525  9.98e-12     33.4 
 2 mu         0.2      0.972       0.848   4.91e- 5      6.64
 3 mu         0.3      0.998       0.934   3.17e- 2      3.70
 4 mu         0.4      0.987       0.990   3.24e- 1      1.80
 5 mu         0.5      0.998       1.02    5.54e- 1      1.44
 6 mu         0.6      1.00        0.977   6.75e- 1      1.65
 7 mu         0.7      1.02        1.02    7.34e- 1      1.53
 8 mu         0.8      0.972       0.973   5.86e- 1      1.58
 9 mu         0.9      0.993       0.963   1.44e- 1      2.76
10 mu_1       0.1      1.17        0.0970  4.15e-11     32.3 
11 mu_1       0.2      0.980       0.903   1.02e- 4      6.44
12 mu_1       0.3      0.994       0.939   4.45e- 2      3.55
13 mu_1       0.4      0.988       1.00    3.24e- 1      1.86
14 mu_1       0.5      0.997       1.02    5.58e- 1      1.42
15 mu_1       0.6      1.00        0.985   6.88e- 1      1.64
16 mu_1       0.7      1.02        1.01    7.35e- 1      1.51
17 mu_1       0.8      0.971       0.973   5.87e- 1      1.58
18 mu_1       0.9      0.994       0.969   1.37e- 1      2.80
19 mu_0       0.1      1.17        0.0481  6.48e-12     33.5 
20 mu_0       0.2      0.970       0.842   3.57e- 5      6.70
21 mu_0       0.3      1.00        0.937   2.62e- 2      3.76
22 mu_0       0.4      0.986       0.971   3.25e- 1      1.76
23 mu_0       0.5      0.999       1.02    5.17e- 1      1.49
24 mu_0       0.6      0.998       0.974   6.56e- 1      1.68
25 mu_0       0.7      1.02        1.01    7.21e- 1      1.58
26 mu_0       0.8      0.977       0.974   5.84e- 1      1.58
27 mu_0       0.9      0.988       0.963   2.06e- 1      2.43
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00408     8.32e-31  2.23e-72     0.397
 2 mu         0.2    0.619       6.13e-17  3.00e-49    39.9  
 3 mu         0.3    1.59        1.37e- 9  9.50e-36    30.7  
 4 mu         0.4    1.50        1.15e- 4  3.40e-26    34.0  
 5 mu         0.5    0.741       1.68e- 2  8.20e-19     6.40 
 6 mu         0.6    1.05        1.38e- 1  8.20e-13     7.54 
 7 mu         0.7    1.17        4.56e- 1  4.62e-15    11.9  
 8 mu         0.8    1.28        4.45e- 2  8.01e-26    10.1  
 9 mu         0.9    1.27        1.20e- 6  1.63e-45    30.8  
10 mu_1       0.1    0.00924     5.51e-30  2.20e-71     0.894
11 mu_1       0.2    0.757       2.07e-16  1.48e-48    45.0  
12 mu_1       0.3    1.63        2.92e- 9  3.13e-35    28.5  
13 mu_1       0.4    1.42        1.87e- 4  8.38e-26    32.4  
14 mu_1       0.5    0.746       1.75e- 2  1.62e-18     6.78 
15 mu_1       0.6    1.05        1.70e- 1  1.35e-12     7.60 
16 mu_1       0.7    1.19        4.59e- 1  1.84e-15    12.5  
17 mu_1       0.8    1.28        3.56e- 2  2.79e-26    10.2  
18 mu_1       0.9    1.29        8.96e- 7  5.05e-46    31.7  
19 mu_0       0.1    0.00350     3.12e-31  3.18e-74     0.341
20 mu_0       0.2    0.585       2.47e-17  4.80e-51    38.7  
21 mu_0       0.3    1.57        7.00e-10  1.74e-37    31.7  
22 mu_0       0.4    1.55        6.60e- 5  7.26e-28    35.1  
23 mu_0       0.5    0.736       1.54e- 2  2.10e-20     6.01 
24 mu_0       0.6    1.04        9.72e- 2  2.63e-14     7.45 
25 mu_0       0.7    1.14        4.86e- 1  1.11e-14    10.4  
26 mu_0       0.8    1.30        6.48e- 2  2.89e-25     9.34 
27 mu_0       0.9    1.08        3.98e- 6  1.18e-44    23.1  
[1] "Total run time was 395.511 seconds"
