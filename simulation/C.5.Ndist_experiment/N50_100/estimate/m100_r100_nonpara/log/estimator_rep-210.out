
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7616"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  62  63  64  66  67  69  70  71  72  73 
  2   1   1   5   1   4   2   2   3   1   1   2   3   2   2   2   3   1   1   1 
 74  75  76  77  78  79  80  81  82  83  84  85  86  88  89  90  91  93  94  95 
  2   4   3   5   2   2   3   1   1   1   2   1   4   2   5   1   1   2   1   2 
 96  97  98  99 100 
  4   4   1   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02928 0.33210 0.59914 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4505 3111 
[1] "treatment indicator table: "

   0    1 
2967 4649 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3921
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3695
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 650.996 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.522 0.0806
 2 mu         0.1   0.2 0.599 0.0861
 3 mu         0.1   0.3 0.666 0.0933
 4 mu         0.1   0.4 0.716 0.0972
 5 mu         0.1   0.5 0.758 0.102 
 6 mu         0.2   0.1 0.442 0.0634
 7 mu         0.2   0.2 0.507 0.0597
 8 mu         0.2   0.3 0.576 0.0619
 9 mu         0.2   0.4 0.623 0.0590
10 mu         0.2   0.5 0.656 0.0546
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.13         0.672 0.0000000327     10.8 
 2 mu         0.2      1.02         0.977 0.00960           3.32
 3 mu         0.3      0.995        0.977 0.420             1.65
 4 mu         0.4      1.03         1.03  0.522             1.45
 5 mu         0.5      1.00         1.01  0.646             1.44
 6 mu         0.6      0.980        0.988 0.542             1.44
 7 mu         0.7      0.987        0.974 0.567             1.50
 8 mu         0.8      0.988        0.964 0.503             1.43
 9 mu         0.9      0.953        0.919 0.386             1.75
10 mu_1       0.1      1.18         0.827 0.000000101       9.39
11 mu_1       0.2      1.02         0.991 0.0151            2.69
12 mu_1       0.3      0.992        0.967 0.431             1.63
13 mu_1       0.4      1.03         1.04  0.533             1.43
14 mu_1       0.5      0.998        1.00  0.637             1.45
15 mu_1       0.6      0.981        0.993 0.535             1.46
16 mu_1       0.7      0.986        0.978 0.562             1.49
17 mu_1       0.8      0.989        0.967 0.496             1.44
18 mu_1       0.9      0.951        0.917 0.376             1.76
19 mu_0       0.1      1.12         0.645 0.0000000251     11.0 
20 mu_0       0.2      1.02         0.968 0.00822           3.48
21 mu_0       0.3      0.996        0.968 0.415             1.66
22 mu_0       0.4      1.02         1.03  0.515             1.48
23 mu_0       0.5      1.01         1.01  0.652             1.43
24 mu_0       0.6      0.978        0.991 0.553             1.44
25 mu_0       0.7      0.989        0.975 0.579             1.52
26 mu_0       0.8      0.986        0.954 0.530             1.39
27 mu_0       0.9      0.972        0.940 0.460             1.74
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.852     1.37e-26  6.03e-71     42.9 
 2 mu         0.2      1.95      5.64e-14  1.28e-46    101.  
 3 mu         0.3      1.12      1.32e- 7  1.38e-32     21.0 
 4 mu         0.4      0.599     6.50e- 4  8.26e-23      5.72
 5 mu         0.5      0.968     5.53e- 2  2.04e-15     14.2 
 6 mu         0.6      1.15      1.64e- 1  6.00e-16      6.78
 7 mu         0.7      1.13      2.10e- 1  4.60e-25     11.3 
 8 mu         0.8      1.15      1.16e- 2  1.86e-38      8.71
 9 mu         0.9      1.34      3.97e- 8  4.50e-62     22.3 
10 mu_1       0.1      1.27      8.96e-26  5.56e-70     67.1 
11 mu_1       0.2      1.78      1.64e-13  5.89e-46     79.0 
12 mu_1       0.3      1.05      2.96e- 7  4.24e-32     19.7 
13 mu_1       0.4      0.606     9.56e- 4  1.90e-22      5.56
14 mu_1       0.5      0.984     6.37e- 2  3.75e-15     13.9 
15 mu_1       0.6      1.17      1.47e- 1  1.56e-16      7.53
16 mu_1       0.7      1.12      2.02e- 1  1.03e-25     10.8 
17 mu_1       0.8      1.17      8.95e- 3  3.63e-39      9.02
18 mu_1       0.9      1.33      2.80e- 8  7.81e-63     22.8 
19 mu_0       0.1      0.806     5.27e-27  5.27e-72     40.3 
20 mu_0       0.2      1.99      2.94e-14  1.26e-47    107.  
21 mu_0       0.3      1.15      6.21e- 8  1.55e-33     21.6 
22 mu_0       0.4      0.594     3.97e- 4  1.08e-23      5.83
23 mu_0       0.5      0.951     4.62e- 2  3.21e-16     14.4 
24 mu_0       0.6      1.13      1.91e- 1  1.27e-15      6.51
25 mu_0       0.7      1.16      1.55e- 1  1.29e-24     12.6 
26 mu_0       0.8      1.08      2.21e- 2  7.84e-38      8.20
27 mu_0       0.9      1.48      1.45e- 7  3.79e-61     19.3 
[1] "Total run time was 654.534 seconds"
