
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7373"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  70  71 
  2   1   6   1   4   2   2   1   4   1   2   2   1   1   3   4   2   2   3   3 
 72  73  74  75  76  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92 
  1   2   2   1   3   1   3   4   2   3   1   2   1   1   1   3   2   4   3   3 
 93  94  96  98  99 100 
  1   1   3   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02931 0.33056 0.59138 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4329 3044 
[1] "treatment indicator table: "

   0    1 
2941 4432 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3582
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3791
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 456.058 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.394 0.0710
 2 mu         0.1   0.2 0.477 0.102 
 3 mu         0.1   0.3 0.522 0.0822
 4 mu         0.1   0.4 0.527 0.0876
 5 mu         0.1   0.5 0.561 0.0784
 6 mu         0.2   0.1 0.410 0.0691
 7 mu         0.2   0.2 0.512 0.0989
 8 mu         0.2   0.3 0.560 0.0897
 9 mu         0.2   0.4 0.579 0.0855
10 mu         0.2   0.5 0.598 0.0766
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.970        0.562 0.000000413      4.73
 2 mu         0.2      0.991        0.890 0.0755           4.07
 3 mu         0.3      0.957        0.907 0.468            2.13
 4 mu         0.4      0.976        0.958 0.491            1.51
 5 mu         0.5      1.02         0.981 0.630            1.55
 6 mu         0.6      0.984        0.977 0.552            1.42
 7 mu         0.7      0.979        0.966 0.543            1.43
 8 mu         0.8      1.01         1.01  0.608            1.87
 9 mu         0.9      0.993        0.931 0.217            2.21
10 mu_1       0.1      0.983        0.705 0.00000125       4.63
11 mu_1       0.2      0.974        0.849 0.108            3.54
12 mu_1       0.3      0.959        0.899 0.472            2.26
13 mu_1       0.4      0.981        0.967 0.501            1.55
14 mu_1       0.5      1.02         0.979 0.643            1.56
15 mu_1       0.6      0.981        0.980 0.541            1.40
16 mu_1       0.7      0.981        0.964 0.547            1.42
17 mu_1       0.8      1.01         1.01  0.612            1.91
18 mu_1       0.9      0.993        0.926 0.224            2.26
19 mu_0       0.1      0.968        0.535 0.000000320      4.91
20 mu_0       0.2      0.995        0.884 0.0674           4.20
21 mu_0       0.3      0.956        0.911 0.466            2.07
22 mu_0       0.4      0.973        0.957 0.485            1.52
23 mu_0       0.5      1.02         0.992 0.616            1.55
24 mu_0       0.6      0.988        0.982 0.568            1.45
25 mu_0       0.7      0.973        0.954 0.533            1.46
26 mu_0       0.8      1.01         0.992 0.595            1.70
27 mu_0       0.9      0.999        0.956 0.149            2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.785     1.42e-24  8.51e-82     78.3 
 2 mu         0.2      0.667     2.33e-12  5.85e-56     21.9 
 3 mu         0.3      0.804     1.86e- 6  7.13e-41     22.5 
 4 mu         0.4      1.19      3.62e- 3  3.40e-30     21.9 
 5 mu         0.5      1.19      1.54e- 1  6.11e-22      8.51
 6 mu         0.6      1.04      3.51e- 1  3.15e-15      7.02
 7 mu         0.7      1.15      1.28e- 1  9.98e-18     12.7 
 8 mu         0.8      0.764     2.98e- 3  1.77e-26      8.23
 9 mu         0.9      1.31      2.10e- 9  4.82e-43     30.8 
10 mu_1       0.1      0.934     7.76e-24  8.42e-81     92.9 
11 mu_1       0.2      0.662     7.08e-12  2.89e-55     20.1 
12 mu_1       0.3      0.825     3.70e- 6  2.35e-40     24.7 
13 mu_1       0.4      1.22      5.56e- 3  8.40e-30     21.8 
14 mu_1       0.5      1.18      1.55e- 1  1.21e-21      7.94
15 mu_1       0.6      1.05      2.95e- 1  5.20e-15      6.68
16 mu_1       0.7      1.15      1.40e- 1  1.69e-18     12.4 
17 mu_1       0.8      0.755     2.36e- 3  2.63e-27      8.12
18 mu_1       0.9      1.33      1.42e- 9  1.22e-43     31.1 
19 mu_0       0.1      0.769     7.27e-25  1.09e-83     76.6 
20 mu_0       0.2      0.668     1.14e-12  8.41e-58     24.1 
21 mu_0       0.3      0.796     1.06e- 6  1.17e-42     21.6 
22 mu_0       0.4      1.17      2.32e- 3  6.51e-32     22.0 
23 mu_0       0.5      1.21      1.11e- 1  1.41e-23      9.08
24 mu_0       0.6      1.03      3.19e- 1  9.06e-17      7.52
25 mu_0       0.7      1.17      1.52e- 1  2.93e-17     13.5 
26 mu_0       0.8      0.801     4.69e- 3  7.80e-26      8.69
27 mu_0       0.9      1.12      8.16e- 9  3.72e-42     28.0 
[1] "Total run time was 459.235 seconds"
