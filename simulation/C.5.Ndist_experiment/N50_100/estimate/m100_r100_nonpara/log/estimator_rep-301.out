
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7450"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  62  63  64  66  67  68  69  70  71  72 
  2   1   3   2   2   7   1   1   2   2   2   1   3   1   3   3   2   3   4   5 
 74  75  76  77  78  79  80  81  83  84  85  87  89  91  92  93  94  95  96  97 
  2   1   2   4   3   2   1   1   2   4   4   1   4   2   3   1   1   2   2   3 
 98  99 100 
  3   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03067 0.33261 0.60733 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4428 3022 
[1] "treatment indicator table: "

   0    1 
2884 4566 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3703
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3747
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 436.175 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.369 0.0949
 2 mu         0.1   0.2 0.412 0.109 
 3 mu         0.1   0.3 0.442 0.111 
 4 mu         0.1   0.4 0.455 0.121 
 5 mu         0.1   0.5 0.508 0.126 
 6 mu         0.2   0.1 0.412 0.0557
 7 mu         0.2   0.2 0.472 0.0625
 8 mu         0.2   0.3 0.515 0.0581
 9 mu         0.2   0.4 0.539 0.0628
10 mu         0.2   0.5 0.591 0.0590
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.829       0.0884  6.11e-10     17.8 
 2 mu         0.2      0.988       0.790   2.20e- 3      4.77
 3 mu         0.3      1.00        0.968   2.22e- 1      2.68
 4 mu         0.4      0.991       0.995   3.83e- 1      1.58
 5 mu         0.5      0.995       0.992   5.97e- 1      1.48
 6 mu         0.6      0.980       0.957   6.40e- 1      1.27
 7 mu         0.7      0.988       0.978   6.75e- 1      1.32
 8 mu         0.8      1.04        1.03    5.73e- 1      1.50
 9 mu         0.9      1.05        1.02    4.26e- 2      2.96
10 mu_1       0.1      0.850       0.153   2.09e- 9     12.7 
11 mu_1       0.2      0.988       0.874   3.80e- 3      3.74
12 mu_1       0.3      1.00        0.955   2.80e- 1      2.48
13 mu_1       0.4      0.990       1.01    4.07e- 1      1.52
14 mu_1       0.5      0.994       0.984   6.17e- 1      1.47
15 mu_1       0.6      0.979       0.953   6.50e- 1      1.29
16 mu_1       0.7      0.990       0.974   6.80e- 1      1.34
17 mu_1       0.8      1.03        1.02    5.64e- 1      1.51
18 mu_1       0.9      1.05        1.02    3.97e- 2      3.00
19 mu_0       0.1      0.826       0.0812  4.47e-10     18.4 
20 mu_0       0.2      0.988       0.772   1.79e- 3      5.03
21 mu_0       0.3      1.00        0.967   1.97e- 1      2.77
22 mu_0       0.4      0.991       0.995   3.68e- 1      1.62
23 mu_0       0.5      0.995       0.992   5.77e- 1      1.49
24 mu_0       0.6      0.981       0.965   6.26e- 1      1.25
25 mu_0       0.7      0.982       0.987   6.62e- 1      1.33
26 mu_0       0.8      1.04        1.02    6.07e- 1      1.47
27 mu_0       0.9      1.05        1.08    6.85e- 2      2.62
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.134     1.04e-25  6.25e-72     12.1 
 2 mu         0.2      2.93      2.52e-14  2.65e-46    171.  
 3 mu         0.3      1.36      1.71e- 7  1.27e-31     26.0 
 4 mu         0.4      0.682     5.94e- 4  1.73e-21     12.1 
 5 mu         0.5      0.921     8.10e- 2  6.28e-14      7.19
 6 mu         0.6      1.34      8.68e- 1  2.76e-14      6.93
 7 mu         0.7      1.34      4.49e- 1  7.96e-23      6.24
 8 mu         0.8      1.32      1.18e- 2  1.62e-35     12.3 
 9 mu         0.9      1.25      6.69e- 9  4.47e-58     37.3 
10 mu_1       0.1      0.262     5.83e-25  5.55e-71     23.4 
11 mu_1       0.2      3.04      7.91e-14  1.18e-45    166.  
12 mu_1       0.3      1.19      3.89e- 7  3.77e-31     22.9 
13 mu_1       0.4      0.680     9.51e- 4  3.84e-21     11.9 
14 mu_1       0.5      0.949     1.09e- 1  1.12e-13      7.40
15 mu_1       0.6      1.35      8.55e- 1  8.63e-15      7.43
16 mu_1       0.7      1.34      3.68e- 1  2.13e-23      5.99
17 mu_1       0.8      1.32      9.16e- 3  3.80e-36     12.5 
18 mu_1       0.9      1.23      4.64e- 9  9.31e-59     37.9 
19 mu_0       0.1      0.120     5.08e-26  7.79e-73     10.8 
20 mu_0       0.2      2.90      1.34e-14  3.71e-47    172.  
21 mu_0       0.3      1.42      7.77e- 8  2.04e-32     28.3 
22 mu_0       0.4      0.682     3.42e- 4  3.24e-22     12.2 
23 mu_0       0.5      0.893     5.47e- 2  1.41e-14      6.99
24 mu_0       0.6      1.32      8.45e- 1  5.61e-14      6.19
25 mu_0       0.7      1.37      3.88e- 1  2.16e-22      7.01
26 mu_0       0.8      1.31      2.24e- 2  6.58e-35     11.6 
27 mu_0       0.9      1.40      2.50e- 8  3.63e-57     32.5 
[1] "Total run time was 440.412 seconds"
