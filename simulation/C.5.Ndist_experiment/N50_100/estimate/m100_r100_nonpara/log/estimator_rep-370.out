
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7446"
[1] "cluster size dist'n: "

50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 70 71 73 74 76 77 78 79 
 2  2  2  5  2  3  2  1  4  1  3  3  4  1  3  3  2  1  1  1  2  3  1  2  3  1 
80 81 82 84 86 87 88 89 90 91 93 94 95 96 97 98 99 
 3  1  2  3  2  2  2  2  4  2  3  2  2  5  3  1  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04719 0.39681 0.64636 1.00000 6.10714 
[1] "event indicator table: "

   0    1 
4423 3023 
[1] "treatment indicator table: "

   0    1 
2675 4771 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3554
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3892
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 501.233 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.411 0.0744
 2 mu         0.1   0.2 0.442 0.0625
 3 mu         0.1   0.3 0.469 0.0598
 4 mu         0.1   0.4 0.497 0.0549
 5 mu         0.1   0.5 0.515 0.0529
 6 mu         0.2   0.1 0.401 0.0734
 7 mu         0.2   0.2 0.454 0.0569
 8 mu         0.2   0.3 0.491 0.0502
 9 mu         0.2   0.4 0.524 0.0391
10 mu         0.2   0.5 0.540 0.0326
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.858        0.545 0.00000230      4.81
 2 mu         0.2      0.954        0.877 0.0439          3.40
 3 mu         0.3      0.989        0.955 0.319           2.20
 4 mu         0.4      0.970        0.975 0.521           1.67
 5 mu         0.5      1.01         1.00  0.591           1.69
 6 mu         0.6      0.989        0.994 0.583           1.54
 7 mu         0.7      0.986        0.967 0.588           1.93
 8 mu         0.8      0.970        0.943 0.481           1.45
 9 mu         0.9      1.02         1.00  0.377           2.31
10 mu_1       0.1      0.889        0.666 0.00000626      4.63
11 mu_1       0.2      0.956        0.893 0.0567          3.31
12 mu_1       0.3      0.988        0.955 0.305           2.19
13 mu_1       0.4      0.970        0.967 0.514           1.68
14 mu_1       0.5      1.01         1.00  0.588           1.68
15 mu_1       0.6      0.989        0.988 0.579           1.52
16 mu_1       0.7      0.986        0.962 0.583           1.93
17 mu_1       0.8      0.971        0.948 0.479           1.47
18 mu_1       0.9      1.02         1.01  0.373           2.32
19 mu_0       0.1      0.854        0.529 0.00000186      4.83
20 mu_0       0.2      0.953        0.879 0.0407          3.42
21 mu_0       0.3      0.990        0.949 0.324           2.21
22 mu_0       0.4      0.970        0.962 0.526           1.67
23 mu_0       0.5      1.01         0.996 0.594           1.70
24 mu_0       0.6      0.991        1.00  0.584           1.60
25 mu_0       0.7      0.987        0.967 0.600           1.94
26 mu_0       0.8      0.968        0.944 0.488           1.44
27 mu_0       0.9      1.03         0.998 0.393           2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0239     1.35e-31  3.38e-84     1.09 
 2 mu         0.2     0.769      2.29e-17  1.86e-56    30.8  
 3 mu         0.3     1.10       9.57e-10  1.87e-40    27.0  
 4 mu         0.4     1.16       6.55e- 5  3.15e-29    17.3  
 5 mu         0.5     1.14       1.69e- 2  1.25e-20    16.2  
 6 mu         0.6     1.06       6.73e- 2  9.87e-14    12.7  
 7 mu         0.7     1.30       1.26e- 1  1.08e-20    10.0  
 8 mu         0.8     1.32       3.72e- 2  1.27e-32    20.0  
 9 mu         0.9     1.53       8.22e- 7  6.31e-54    31.2  
10 mu_1       0.1     0.0482     1.05e-30  3.21e-83     2.24 
11 mu_1       0.2     0.849      7.50e-17  8.82e-56    31.8  
12 mu_1       0.3     1.12       2.05e- 9  5.97e-40    29.7  
13 mu_1       0.4     1.17       1.05e- 4  7.55e-29    17.8  
14 mu_1       0.5     1.12       1.54e- 2  2.40e-20    15.3  
15 mu_1       0.6     1.08       6.82e- 2  1.58e-13    12.3  
16 mu_1       0.7     1.30       1.54e- 1  3.15e-21    10.6  
17 mu_1       0.8     1.32       2.88e- 2  3.25e-33    19.5  
18 mu_1       0.9     1.53       5.82e- 7  1.43e-54    31.2  
19 mu_0       0.1     0.0212     3.46e-32  1.92e-85     0.961
20 mu_0       0.2     0.750      9.87e-18  1.05e-57    30.6  
21 mu_0       0.3     1.10       4.88e-10  1.11e-41    25.8  
22 mu_0       0.4     1.15       3.70e- 5  2.19e-30    17.0  
23 mu_0       0.5     1.16       1.34e- 2  1.04e-21    17.2  
24 mu_0       0.6     1.04       4.24e- 2  1.03e-14    13.3  
25 mu_0       0.7     1.29       6.92e- 2  2.86e-20     9.86 
26 mu_0       0.8     1.33       4.56e- 2  5.06e-32    21.8  
27 mu_0       0.9     1.50       2.98e- 6  5.02e-53    31.6  
[1] "Total run time was 505.545 seconds"
