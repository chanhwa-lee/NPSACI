
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7368"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  67  69  70  73  77  78 
  5   2   1   2   2   4   4   3   2   5   2   2   3   4   1   6   1   2   2   3 
 79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  95  96  97  98  99 
  3   1   3   2   3   1   1   1   3   5   2   1   1   2   3   1   1   2   2   4 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03454 0.34373 0.60711 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4311 3057 
[1] "treatment indicator table: "

   0    1 
2876 4492 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3675
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3693
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 364.096 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.356 0.0559
 2 mu         0.1   0.2 0.436 0.0565
 3 mu         0.1   0.3 0.497 0.0554
 4 mu         0.1   0.4 0.567 0.0634
 5 mu         0.1   0.5 0.612 0.0652
 6 mu         0.2   0.1 0.362 0.0408
 7 mu         0.2   0.2 0.440 0.0370
 8 mu         0.2   0.3 0.506 0.0360
 9 mu         0.2   0.4 0.572 0.0420
10 mu         0.2   0.5 0.614 0.0416
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.934        0.733   0.00136      4.44
 2 mu         0.2      1.02         1.01    0.167        3.10
 3 mu         0.3      0.991        0.982   0.471        1.84
 4 mu         0.4      0.959        0.953   0.369        1.57
 5 mu         0.5      0.984        0.989   0.617        1.35
 6 mu         0.6      1.01         1.01    0.613        1.36
 7 mu         0.7      0.996        0.985   0.675        1.46
 8 mu         0.8      1.04         1.02    0.578        1.82
 9 mu         0.9      1.04         1.02    0.202        2.27
10 mu_1       0.1      0.969        0.758   0.00291      5.28
11 mu_1       0.2      1.02         0.998   0.175        2.77
12 mu_1       0.3      0.989        0.976   0.417        1.84
13 mu_1       0.4      0.960        0.951   0.389        1.51
14 mu_1       0.5      0.986        0.995   0.615        1.37
15 mu_1       0.6      1.01         1.00    0.618        1.36
16 mu_1       0.7      0.996        0.979   0.675        1.48
17 mu_1       0.8      1.04         1.02    0.588        1.81
18 mu_1       0.9      1.04         1.03    0.203        2.30
19 mu_0       0.1      0.930        0.727   0.00119      4.35
20 mu_0       0.2      1.02         0.997   0.165        3.20
21 mu_0       0.3      0.992        0.975   0.458        1.84
22 mu_0       0.4      0.958        0.945   0.355        1.60
23 mu_0       0.5      0.983        0.986   0.619        1.33
24 mu_0       0.6      1.01         1.01    0.606        1.37
25 mu_0       0.7      0.998        0.976   0.676        1.45
26 mu_0       0.8      1.03         1.03    0.539        1.86
27 mu_0       0.9      1.05         1.03    0.191        1.97
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.287     3.92e-24  4.26e-72     18.8 
 2 mu         0.2      0.376     1.02e-13  1.02e-47      8.90
 3 mu         0.3      0.952     1.07e- 7  1.26e-33     15.4 
 4 mu         0.4      1.30      8.64e- 4  8.75e-24     24.4 
 5 mu         0.5      0.834     7.78e- 2  2.59e-16      7.38
 6 mu         0.6      0.946     1.35e- 1  3.84e-14      5.62
 7 mu         0.7      1.09      2.14e- 1  2.41e-21      6.49
 8 mu         0.8      1.32      1.09e- 2  7.40e-32     15.4 
 9 mu         0.9      2.14      1.09e- 7  2.60e-50     28.4 
10 mu_1       0.1      0.371     2.80e-23  3.97e-71     23.5 
11 mu_1       0.2      0.414     3.66e-13  4.74e-47     11.1 
12 mu_1       0.3      1.00      2.11e- 7  3.90e-33     15.1 
13 mu_1       0.4      1.27      1.37e- 3  2.04e-23     24.1 
14 mu_1       0.5      0.836     5.32e- 2  4.83e-16      7.04
15 mu_1       0.6      0.952     1.21e- 1  8.77e-15      5.62
16 mu_1       0.7      1.11      2.13e- 1  4.73e-22      6.77
17 mu_1       0.8      1.34      8.22e- 3  1.27e-32     16.2 
18 mu_1       0.9      2.12      7.27e- 8  3.96e-51     28.2 
19 mu_0       0.1      0.277     1.24e-24  3.23e-73     18.3 
20 mu_0       0.2      0.366     3.55e-14  8.67e-49      8.34
21 mu_0       0.3      0.930     6.26e- 8  1.22e-34     15.6 
22 mu_0       0.4      1.33      5.61e- 4  9.95e-25     24.7 
23 mu_0       0.5      0.832     6.66e- 2  3.54e-17      8.28
24 mu_0       0.6      0.937     1.21e- 1  8.29e-14      5.62
25 mu_0       0.7      1.06      1.46e- 1  6.95e-21      6.35
26 mu_0       0.8      1.28      1.40e- 2  3.19e-31     12.3 
27 mu_0       0.9      2.26      4.40e- 7  2.25e-49     29.9 
[1] "Total run time was 367.648 seconds"
