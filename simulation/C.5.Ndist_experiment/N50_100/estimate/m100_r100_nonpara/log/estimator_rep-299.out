
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7408"
[1] "cluster size dist'n: "

 50  51  52  53  55  57  58  59  60  61  62  64  65  66  67  68  69  70  72  73 
  7   1   2   1   1   1   6   1   3   2   1   4   1   1   3   2   3   2   6   1 
 74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  91  92  93  94  95 
  2   3   3   4   1   2   1   1   3   4   1   3   2   2   3   2   1   1   1   2 
 96  97  98  99 100 
  1   1   1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03519 0.34554 0.61716 1.00000 6.61453 
[1] "event indicator table: "

   0    1 
4372 3036 
[1] "treatment indicator table: "

   0    1 
2865 4543 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3557
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3851
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 400.718 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.537 0.120 
 2 mu         0.1   0.2 0.636 0.136 
 3 mu         0.1   0.3 0.737 0.151 
 4 mu         0.1   0.4 0.761 0.147 
 5 mu         0.1   0.5 0.767 0.135 
 6 mu         0.2   0.1 0.347 0.0418
 7 mu         0.2   0.2 0.425 0.0442
 8 mu         0.2   0.3 0.500 0.0615
 9 mu         0.2   0.4 0.517 0.0488
10 mu         0.2   0.5 0.536 0.0419
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.09         0.149 0.0000000504      6.80
 2 mu         0.2      0.901        0.849 0.0141            3.16
 3 mu         0.3      0.953        0.927 0.174             1.97
 4 mu         0.4      0.967        0.985 0.459             1.74
 5 mu         0.5      0.973        0.972 0.415             1.39
 6 mu         0.6      0.996        0.984 0.698             1.58
 7 mu         0.7      1.01         0.997 0.686             1.58
 8 mu         0.8      1.04         1.01  0.657             1.90
 9 mu         0.9      1.04         1.06  0.398             2.10
10 mu_1       0.1      0.955        0.245 0.000000165       5.17
11 mu_1       0.2      0.917        0.879 0.0235            2.97
12 mu_1       0.3      0.957        0.931 0.173             1.88
13 mu_1       0.4      0.966        0.979 0.490             1.68
14 mu_1       0.5      0.974        0.965 0.404             1.37
15 mu_1       0.6      0.996        0.992 0.692             1.61
16 mu_1       0.7      1.02         0.994 0.693             1.58
17 mu_1       0.8      1.04         1.01  0.654             1.88
18 mu_1       0.9      1.04         1.05  0.385             2.13
19 mu_0       0.1      1.11         0.138 0.0000000378      7.11
20 mu_0       0.2      0.898        0.830 0.0117            3.21
21 mu_0       0.3      0.952        0.917 0.175             2.01
22 mu_0       0.4      0.968        0.977 0.438             1.77
23 mu_0       0.5      0.971        0.968 0.426             1.41
24 mu_0       0.6      0.994        0.977 0.651             1.54
25 mu_0       0.7      1.01         1.00  0.671             1.58
26 mu_0       0.8      1.04         1.01  0.666             1.95
27 mu_0       0.9      1.04         1.05  0.513             1.79
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      5.85      7.17e-25  1.40e-69    584.  
 2 mu         0.2      0.452     2.32e-13  1.32e-44     28.8 
 3 mu         0.3      1.60      5.74e- 7  2.46e-30     36.6 
 4 mu         0.4      1.37      2.05e- 3  1.61e-20     29.3 
 5 mu         0.5      1.39      4.64e- 2  5.65e-16     16.8 
 6 mu         0.6      1.12      2.51e- 1  6.25e-24      9.50
 7 mu         0.7      1.05      2.52e- 1  2.13e-34      6.62
 8 mu         0.8      1.23      2.69e- 2  2.27e-49     10.2 
 9 mu         0.9      0.791     2.96e- 7  2.97e-75     16.0 
10 mu_1       0.1      3.78      4.72e-24  1.22e-68    377.  
11 mu_1       0.2      0.539     7.01e-13  5.76e-44     31.2 
12 mu_1       0.3      1.65      1.28e- 6  7.18e-30     35.0 
13 mu_1       0.4      1.36      3.14e- 3  3.53e-20     31.5 
14 mu_1       0.5      1.39      5.23e- 2  7.29e-17     14.4 
15 mu_1       0.6      1.10      2.64e- 1  6.72e-25      8.59
16 mu_1       0.7      1.06      2.73e- 1  1.96e-35      6.72
17 mu_1       0.8      1.23      2.14e- 2  1.83e-50     10.2 
18 mu_1       0.9      0.782     2.14e- 7  2.13e-76     15.4 
19 mu_0       0.1      6.08      2.72e-25  1.92e-70    607.  
20 mu_0       0.2      0.430     1.15e-13  2.03e-45     28.1 
21 mu_0       0.3      1.58      2.73e- 7  4.35e-31     37.2 
22 mu_0       0.4      1.37      1.31e- 3  2.35e-21     27.8 
23 mu_0       0.5      1.39      4.76e- 2  1.06e-15     19.1 
24 mu_0       0.6      1.15      2.01e- 1  1.46e-23     10.9 
25 mu_0       0.7      1.03      1.94e- 1  6.63e-34      6.38
26 mu_0       0.8      1.24      4.04e- 2  1.06e-48     10.4 
27 mu_0       0.9      0.869     1.02e- 6  2.78e-74     20.7 
[1] "Total run time was 404.375 seconds"
