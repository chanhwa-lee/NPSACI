
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7478"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  63  65  66  67  68  69  70  71  72 
  2   1   1   1   2   3   3   3   1   4   3   6   1   2   2   3   3   1   2   2 
 73  74  75  76  77  78  79  80  82  83  84  85  86  88  89  90  91  92  93  94 
  3   2   1   2   2   3   3   2   1   2   2   2   4   1   4   3   3   1   2   2 
 95  96  97  99 100 
  2   1   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02555 0.30496 0.57781 0.99307 6.00000 
[1] "event indicator table: "

   0    1 
4399 3079 
[1] "treatment indicator table: "

   0    1 
2900 4578 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3676
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 379.352 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.317 0.0485
 2 mu         0.1   0.2 0.464 0.0602
 3 mu         0.1   0.3 0.486 0.0523
 4 mu         0.1   0.4 0.515 0.0572
 5 mu         0.1   0.5 0.553 0.0587
 6 mu         0.2   0.1 0.327 0.0303
 7 mu         0.2   0.2 0.471 0.0375
 8 mu         0.2   0.3 0.506 0.0280
 9 mu         0.2   0.4 0.543 0.0325
10 mu         0.2   0.5 0.585 0.0303
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.908        0.739 0.00000594      4.52
 2 mu         0.2      1.02         0.921 0.0856          2.19
 3 mu         0.3      0.973        0.957 0.387           1.83
 4 mu         0.4      1.01         0.969 0.647           1.61
 5 mu         0.5      1.01         0.991 0.634           1.45
 6 mu         0.6      1.00         1.02  0.633           1.29
 7 mu         0.7      0.993        0.987 0.611           1.45
 8 mu         0.8      0.984        0.978 0.457           1.43
 9 mu         0.9      0.977        0.963 0.258           1.66
10 mu_1       0.1      0.908        0.890 0.0000155       2.68
11 mu_1       0.2      1.02         0.969 0.116           2.17
12 mu_1       0.3      0.972        0.935 0.430           1.77
13 mu_1       0.4      1.02         0.981 0.644           1.62
14 mu_1       0.5      1.01         0.995 0.638           1.45
15 mu_1       0.6      1.00         1.02  0.617           1.28
16 mu_1       0.7      0.993        0.991 0.614           1.46
17 mu_1       0.8      0.983        0.980 0.457           1.45
18 mu_1       0.9      0.978        0.961 0.253           1.67
19 mu_0       0.1      0.908        0.699 0.00000488      4.75
20 mu_0       0.2      1.02         0.926 0.0780          2.19
21 mu_0       0.3      0.973        0.965 0.369           1.86
22 mu_0       0.4      1.01         0.966 0.649           1.61
23 mu_0       0.5      1.01         0.994 0.631           1.46
24 mu_0       0.6      1.00         1.02  0.656           1.30
25 mu_0       0.7      0.992        0.978 0.604           1.43
26 mu_0       0.8      0.988        0.982 0.458           1.40
27 mu_0       0.9      0.973        0.958 0.308           1.62
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00397     1.23e-25  1.18e-81     0.391
 2 mu         0.2    0.250       6.77e-14  1.45e-55    12.6  
 3 mu         0.3    0.890       1.48e- 7  2.31e-40    12.3  
 4 mu         0.4    1.18        1.14e- 3  1.26e-29     7.74 
 5 mu         0.5    0.872       5.39e- 2  2.36e-21     6.54 
 6 mu         0.6    0.776       5.72e- 2  1.17e-14     5.64 
 7 mu         0.7    1.16        6.02e- 2  4.29e-13     7.73 
 8 mu         0.8    1.04        7.79e- 3  2.19e-22    10.5  
 9 mu         0.9    1.29        7.82e- 8  1.80e-39    19.0  
10 mu_1       0.1    0.00864     8.45e-25  1.16e-80     0.847
11 mu_1       0.2    0.312       2.08e-13  7.07e-55    13.7  
12 mu_1       0.3    0.945       3.32e- 7  7.54e-40    10.8  
13 mu_1       0.4    1.17        1.89e- 3  3.08e-29     7.17 
14 mu_1       0.5    0.850       5.95e- 2  4.61e-21     6.23 
15 mu_1       0.6    0.788       4.89e- 2  1.90e-14     5.28 
16 mu_1       0.7    1.17        7.54e- 2  1.78e-13     7.45 
17 mu_1       0.8    1.04        7.44e- 3  7.96e-23    11.0  
18 mu_1       0.9    1.28        5.42e- 8  5.83e-40    19.3  
19 mu_0       0.1    0.00345     4.24e-26  2.95e-83     0.340
20 mu_0       0.2    0.235       3.26e-14  4.06e-57    12.4  
21 mu_0       0.3    0.866       6.91e- 8  7.43e-42    12.9  
22 mu_0       0.4    1.18        6.49e- 4  4.72e-31     8.13 
23 mu_0       0.5    0.894       4.09e- 2  1.06e-22     6.85 
24 mu_0       0.6    0.759       6.35e- 2  6.57e-16     6.18 
25 mu_0       0.7    1.14        6.83e- 2  1.01e-12     8.38 
26 mu_0       0.8    1.05        9.93e- 3  7.76e-22     9.16 
27 mu_0       0.9    1.37        2.82e- 7  1.28e-38    16.7  
[1] "Total run time was 382.482 seconds"
