
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7322"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 69 70 71 72 73 74 75 76 
 4  3  1  3  2  3  5  2  2  1  2  1  1  1  3  2  3  3  2  2  1  3  1  2  2  2 
77 78 79 80 82 83 84 85 86 87 88 90 91 92 93 94 95 96 97 99 
 2  1  1  2  6  1  1  1  4  1  1  3  4  2  1  5  1  1  3  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04714 0.37151 0.64346 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4296 3026 
[1] "treatment indicator table: "

   0    1 
2739 4583 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3588
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3734
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 376.318 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.401 0.0486
 2 mu         0.1   0.2 0.537 0.0577
 3 mu         0.1   0.3 0.622 0.0691
 4 mu         0.1   0.4 0.714 0.0855
 5 mu         0.1   0.5 0.763 0.0805
 6 mu         0.2   0.1 0.278 0.0211
 7 mu         0.2   0.2 0.389 0.0327
 8 mu         0.2   0.3 0.471 0.0411
 9 mu         0.2   0.4 0.533 0.0452
10 mu         0.2   0.5 0.567 0.0410
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.27         0.851  0.000232      6.61
 2 mu         0.2      0.980        0.899  0.227         3.59
 3 mu         0.3      0.993        0.983  0.406         1.82
 4 mu         0.4      1.03         1.01   0.476         1.93
 5 mu         0.5      0.996        0.985  0.494         1.71
 6 mu         0.6      1.00         0.996  0.560         1.66
 7 mu         0.7      1.01         1.02   0.574         1.60
 8 mu         0.8      1.01         0.997  0.438         1.51
 9 mu         0.9      0.936        0.916  0.309         1.77
10 mu_1       0.1      1.23         0.942  0.000561      5.98
11 mu_1       0.2      0.969        0.901  0.255         3.08
12 mu_1       0.3      1.00         1.01   0.403         1.81
13 mu_1       0.4      1.03         1.03   0.461         1.87
14 mu_1       0.5      0.994        0.988  0.488         1.77
15 mu_1       0.6      1.00         1.00   0.572         1.60
16 mu_1       0.7      1.02         1.02   0.580         1.59
17 mu_1       0.8      1.01         0.994  0.429         1.52
18 mu_1       0.9      0.935        0.910  0.296         1.80
19 mu_0       0.1      1.27         0.840  0.000196      6.68
20 mu_0       0.2      0.983        0.901  0.213         3.72
21 mu_0       0.3      0.990        0.993  0.407         1.83
22 mu_0       0.4      1.03         1.02   0.487         1.97
23 mu_0       0.5      0.997        0.998  0.500         1.66
24 mu_0       0.6      1.00         0.998  0.543         1.75
25 mu_0       0.7      1.01         1.02   0.561         1.61
26 mu_0       0.8      1.02         1.00   0.471         1.51
27 mu_0       0.9      0.945        0.947  0.299         1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0206     6.78e-27  3.24e-72      2.03
 2 mu         0.2     0.453      8.97e-14  1.37e-48     21.8 
 3 mu         0.3     0.934      1.74e- 7  7.50e-35     31.5 
 4 mu         0.4     0.990      1.95e- 3  3.50e-25     11.3 
 5 mu         0.5     1.13       4.15e- 2  9.18e-18     10.1 
 6 mu         0.6     1.06       2.94e- 1  8.46e-12      9.77
 7 mu         0.7     1.25       1.63e- 1  6.02e-14      8.95
 8 mu         0.8     1.14       2.80e- 2  1.80e-23      7.91
 9 mu         0.9     1.66       2.02e- 7  9.27e-41     26.4 
10 mu_1       0.1     0.0377     3.92e-26  3.12e-71      3.68
11 mu_1       0.2     0.547      2.91e-13  6.62e-48     27.9 
12 mu_1       0.3     0.922      3.65e- 7  2.41e-34     26.9 
13 mu_1       0.4     1.02       3.07e- 3  8.44e-25     10.2 
14 mu_1       0.5     1.13       5.53e- 2  1.77e-17     10.4 
15 mu_1       0.6     1.05       3.20e- 1  1.36e-11      9.55
16 mu_1       0.7     1.26       1.61e- 1  2.20e-14      9.36
17 mu_1       0.8     1.14       2.69e- 2  5.77e-24      7.99
18 mu_1       0.9     1.68       1.53e- 7  2.64e-41     27.5 
19 mu_0       0.1     0.0187     3.18e-27  0             1.84
20 mu_0       0.2     0.429      3.92e-14  0            20.3 
21 mu_0       0.3     0.939      9.22e- 8  0            33.5 
22 mu_0       0.4     0.971      1.11e- 3  0            12.1 
23 mu_0       0.5     1.13       3.64e- 2  0             9.73
24 mu_0       0.6     1.07       2.43e- 1  0            10.1 
25 mu_0       0.7     1.22       1.37e- 1  0             7.98
26 mu_0       0.8     1.13       1.26e- 2  0             7.59
27 mu_0       0.9     1.44       2.74e- 7  0            16.7 
[1] "Total run time was 379.743 seconds"
