
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7474"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70  72 
  1   1   2   6   1   2   3   4   4   1   2   1   2   2   2   2   1   2   3   3 
 73  74  75  76  77  79  80  81  82  83  84  86  87  88  89  90  91  92  93  94 
  4   2   4   2   1   5   1   2   2   2   1   1   1   1   4   1   1   5   3   1 
 96  97  98  99 100 
  1   3   3   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03292 0.34680 0.60844 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4442 3032 
[1] "treatment indicator table: "

   0    1 
2727 4747 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3664
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3810
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 511.521 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.449 0.184 
 2 mu         0.1   0.2 0.556 0.172 
 3 mu         0.1   0.3 0.630 0.196 
 4 mu         0.1   0.4 0.692 0.201 
 5 mu         0.1   0.5 0.723 0.218 
 6 mu         0.2   0.1 0.371 0.123 
 7 mu         0.2   0.2 0.464 0.0871
 8 mu         0.2   0.3 0.528 0.0944
 9 mu         0.2   0.4 0.585 0.0871
10 mu         0.2   0.5 0.617 0.0950
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.11        0.0841  9.15e-11     27.1 
 2 mu         0.2      0.985       0.922   4.38e- 4      5.32
 3 mu         0.3      1.03        0.973   1.00e- 1      2.36
 4 mu         0.4      0.969       0.944   3.74e- 1      1.72
 5 mu         0.5      1.01        0.994   6.06e- 1      1.81
 6 mu         0.6      1.02        1.01    5.95e- 1      1.38
 7 mu         0.7      1.03        1.02    6.94e- 1      1.46
 8 mu         0.8      1.01        0.963   5.79e- 1      1.69
 9 mu         0.9      0.965       0.918   1.54e- 1      1.94
10 mu_1       0.1      1.10        0.145   3.25e-10     22.6 
11 mu_1       0.2      0.994       0.930   7.81e- 4      4.95
12 mu_1       0.3      1.02        0.992   1.23e- 1      2.26
13 mu_1       0.4      0.971       0.952   4.04e- 1      1.73
14 mu_1       0.5      1.01        0.999   6.04e- 1      1.80
15 mu_1       0.6      1.02        1.02    5.88e- 1      1.38
16 mu_1       0.7      1.03        1.01    6.89e- 1      1.45
17 mu_1       0.8      1.01        0.960   5.65e- 1      1.70
18 mu_1       0.9      0.964       0.914   1.50e- 1      1.92
19 mu_0       0.1      1.11        0.0768  6.55e-11     27.6 
20 mu_0       0.2      0.983       0.932   3.52e- 4      5.41
21 mu_0       0.3      1.03        0.988   9.07e- 2      2.40
22 mu_0       0.4      0.967       0.939   3.53e- 1      1.72
23 mu_0       0.5      1.01        0.999   6.00e- 1      1.81
24 mu_0       0.6      1.01        1.00    6.06e- 1      1.43
25 mu_0       0.7      1.03        1.03    6.89e- 1      1.47
26 mu_0       0.8      1.01        0.972   6.35e- 1      1.67
27 mu_0       0.9      0.976       0.910   1.83e- 1      2.13
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.545     1.50e-26  4.20e-92     51.0 
 2 mu         0.2      5.12      1.19e-13  5.91e-63    412.  
 3 mu         0.3      1.23      1.12e- 7  6.23e-46     67.0 
 4 mu         0.4      0.742     1.49e- 3  7.03e-34     13.1 
 5 mu         0.5      1.22      1.77e- 1  1.47e-24      7.79
 6 mu         0.6      1.62      5.65e- 1  5.64e-17     22.4 
 7 mu         0.7      1.19      1.76e- 1  4.53e-18     16.1 
 8 mu         0.8      1.32      4.66e- 3  1.80e-28     11.9 
 9 mu         0.9      0.924     1.51e- 8  5.73e-47     15.7 
10 mu_1       0.1      1.03      9.50e-26  4.15e-91     96.8 
11 mu_1       0.2      4.96      3.46e-13  2.93e-62    391.  
12 mu_1       0.3      0.967     2.48e- 7  2.06e-45     42.4 
13 mu_1       0.4      0.759     2.34e- 3  1.74e-33     13.1 
14 mu_1       0.5      1.26      2.19e- 1  2.91e-24      7.45
15 mu_1       0.6      1.63      5.17e- 1  9.31e-17     23.9 
16 mu_1       0.7      1.17      1.66e- 1  1.23e-18     14.8 
17 mu_1       0.8      1.34      3.57e- 3  4.28e-29     12.5 
18 mu_1       0.9      0.915     1.08e- 8  1.21e-47     16.2 
19 mu_0       0.1      0.490     6.09e-27  4.76e-94     45.9 
20 mu_0       0.2      5.17      5.97e-14  7.54e-65    417.  
21 mu_0       0.3      1.35      5.36e- 8  9.08e-48     77.6 
22 mu_0       0.4      0.730     9.23e- 4  1.19e-35     13.1 
23 mu_0       0.5      1.18      1.35e- 1  3.00e-26      8.13
24 mu_0       0.6      1.62      5.73e- 1  1.44e-18     20.0 
25 mu_0       0.7      1.23      2.48e- 1  1.22e-17     19.2 
26 mu_0       0.8      1.24      8.09e- 3  7.31e-28     14.1 
27 mu_0       0.9      1.01      5.44e- 8  4.64e-46     13.9 
[1] "Total run time was 516.292 seconds"
