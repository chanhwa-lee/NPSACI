
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7371"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71 
  2   2   4   2   3   4   2   2   2   1   4   3   3   4   1   1   2   2   1   2 
 72  74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93 
  2   1   3   3   1   4   4   2   2   1   2   1   3   1   1   2   2   1   1   1 
 94  95  96  97  98  99 100 
  4   1   1   3   1   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02143 0.30546 0.56690 0.98365 5.00000 
[1] "event indicator table: "

   0    1 
4383 2988 
[1] "treatment indicator table: "

   0    1 
2861 4510 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3760
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3611
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 435.824 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.546 0.115 
 2 mu         0.1   0.2 0.658 0.137 
 3 mu         0.1   0.3 0.698 0.148 
 4 mu         0.1   0.4 0.767 0.163 
 5 mu         0.1   0.5 0.850 0.176 
 6 mu         0.2   0.1 0.416 0.0591
 7 mu         0.2   0.2 0.505 0.0584
 8 mu         0.2   0.3 0.542 0.0541
 9 mu         0.2   0.4 0.584 0.0637
10 mu         0.2   0.5 0.667 0.0669
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.29         0.210 0.0000000510     19.3 
 2 mu         0.2      1.12         0.841 0.0153            4.68
 3 mu         0.3      0.958        0.944 0.227             2.05
 4 mu         0.4      1.00         0.980 0.533             1.71
 5 mu         0.5      0.998        0.981 0.633             1.48
 6 mu         0.6      0.996        1.00  0.628             1.66
 7 mu         0.7      0.993        0.992 0.639             1.48
 8 mu         0.8      0.990        1.01  0.498             1.52
 9 mu         0.9      1.00         0.922 0.0700            2.24
10 mu_1       0.1      1.42         0.339 0.000000162      21.9 
11 mu_1       0.2      1.06         0.835 0.0229            4.37
12 mu_1       0.3      0.960        0.945 0.249             1.86
13 mu_1       0.4      1.01         0.994 0.532             1.70
14 mu_1       0.5      0.995        0.982 0.635             1.46
15 mu_1       0.6      0.998        1.01  0.618             1.67
16 mu_1       0.7      0.992        0.993 0.628             1.46
17 mu_1       0.8      0.990        1.01  0.492             1.50
18 mu_1       0.9      1.00         0.936 0.0641            2.21
19 mu_0       0.1      1.28         0.196 0.0000000387     19.0 
20 mu_0       0.2      1.13         0.844 0.0129            4.99
21 mu_0       0.3      0.957        0.925 0.218             2.13
22 mu_0       0.4      1.00         0.987 0.534             1.72
23 mu_0       0.5      1.00         0.985 0.630             1.49
24 mu_0       0.6      0.995        0.993 0.625             1.65
25 mu_0       0.7      0.994        0.986 0.647             1.52
26 mu_0       0.8      0.989        0.991 0.518             1.59
27 mu_0       0.9      1.01         0.950 0.123             2.47
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0152     8.36e-25  1.37e-80      1.50
 2 mu         0.2     1.73       2.07e-12  2.98e-53    161.  
 3 mu         0.3     0.880      9.95e- 7  1.86e-37     19.5 
 4 mu         0.4     0.857      5.28e- 3  1.97e-26     17.5 
 5 mu         0.5     1.11       1.82e- 1  4.53e-18      8.86
 6 mu         0.6     1.26       6.26e- 1  1.86e-12     12.0 
 7 mu         0.7     1.06       1.56e- 1  7.31e-21     10.2 
 8 mu         0.8     1.11       1.19e- 3  1.94e-33     13.6 
 9 mu         0.9     1.06       1.13e- 9  6.78e-56     22.0 
10 mu_1       0.1     0.0310     5.63e-24  1.28e-79      3.07
11 mu_1       0.2     1.81       6.52e-12  1.39e-52    165.  
12 mu_1       0.3     0.894      1.96e- 6  5.76e-37     19.1 
13 mu_1       0.4     0.831      7.87e- 3  4.58e-26     15.4 
14 mu_1       0.5     1.16       1.94e- 1  8.43e-18      9.14
15 mu_1       0.6     1.23       5.82e- 1  6.34e-13     11.3 
16 mu_1       0.7     1.07       1.31e- 1  2.13e-21     10.8 
17 mu_1       0.8     1.11       8.95e- 4  4.96e-34     13.9 
18 mu_1       0.9     1.07       7.38e-10  1.54e-56     22.9 
19 mu_0       0.1     0.0134     3.03e-25  1.08e-81      1.33
20 mu_0       0.2     1.71       9.62e-13  2.64e-54    161.  
21 mu_0       0.3     0.874      5.64e- 7  1.88e-38     19.7 
22 mu_0       0.4     0.875      3.55e- 3  2.32e-27     19.0 
23 mu_0       0.5     1.06       1.93e- 1  6.41e-19      8.59
24 mu_0       0.6     1.30       6.25e- 1  3.24e-12     13.0 
25 mu_0       0.7     1.03       2.05e- 1  1.94e-20      8.92
26 mu_0       0.8     1.10       2.36e- 3  7.73e-33     12.5 
27 mu_0       0.9     1.04       4.70e- 9  5.40e-55     14.0 
[1] "Total run time was 439.066 seconds"
