
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7438"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  64  65  67  68  69  70  72 
  3   1   2   4   1   2   2   2   5   2   1   5   1   2   2   1   3   2   4   1 
 73  74  75  76  77  78  79  81  82  83  84  85  86  88  89  90  92  93  94  97 
  2   2   4   4   2   1   1   3   1   2   3   2   1   1   3   4   1   4   3   1 
 98  99 100 
  3   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0233  0.3114  0.5770  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4415 3023 
[1] "treatment indicator table: "

   0    1 
2762 4676 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3790
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3648
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 372.485 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.273 0.0513
 2 mu         0.1   0.2 0.320 0.0643
 3 mu         0.1   0.3 0.345 0.0655
 4 mu         0.1   0.4 0.410 0.0778
 5 mu         0.1   0.5 0.429 0.0745
 6 mu         0.2   0.1 0.346 0.0444
 7 mu         0.2   0.2 0.383 0.0520
 8 mu         0.2   0.3 0.417 0.0556
 9 mu         0.2   0.4 0.468 0.0562
10 mu         0.2   0.5 0.528 0.0528
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.637        0.181 0.000000150      5.63
 2 mu         0.2      0.927        0.872 0.00399          4.43
 3 mu         0.3      1.04         1.04  0.181            2.34
 4 mu         0.4      1.01         0.992 0.492            1.72
 5 mu         0.5      1.02         0.992 0.614            1.77
 6 mu         0.6      1.01         1.03  0.661            1.49
 7 mu         0.7      0.989        0.989 0.598            1.34
 8 mu         0.8      1.01         1.00  0.549            1.52
 9 mu         0.9      0.976        0.939 0.413            2.42
10 mu_1       0.1      0.692        0.304 0.000000482      6.66
11 mu_1       0.2      0.946        0.883 0.00706          4.21
12 mu_1       0.3      1.04         1.02  0.229            2.22
13 mu_1       0.4      1.01         0.984 0.475            1.66
14 mu_1       0.5      1.02         0.994 0.614            1.80
15 mu_1       0.6      1.01         1.02  0.673            1.44
16 mu_1       0.7      0.991        0.994 0.589            1.36
17 mu_1       0.8      1.01         1.01  0.537            1.54
18 mu_1       0.9      0.974        0.937 0.418            2.45
19 mu_0       0.1      0.631        0.170 0.000000113      5.52
20 mu_0       0.2      0.923        0.870 0.00322          4.49
21 mu_0       0.3      1.04         1.05  0.161            2.39
22 mu_0       0.4      1.01         1.00  0.500            1.75
23 mu_0       0.5      1.01         0.994 0.614            1.74
24 mu_0       0.6      1.02         1.03  0.644            1.57
25 mu_0       0.7      0.987        0.990 0.602            1.35
26 mu_0       0.8      1.01         1.00  0.598            1.54
27 mu_0       0.9      0.993        0.956 0.370            2.21
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.14      2.87e-25  1.36e-81    201.  
 2 mu         0.2      1.45      1.41e-13  3.33e-54    102.  
 3 mu         0.3      1.08      1.88e- 7  2.37e-38     19.9 
 4 mu         0.4      0.995     9.04e- 4  2.93e-27     11.7 
 5 mu         0.5      1.29      7.67e- 2  7.01e-19     14.0 
 6 mu         0.6      1.09      2.20e- 1  8.90e-17      6.77
 7 mu         0.7      0.984     1.06e- 1  3.60e-25      7.08
 8 mu         0.8      1.06      1.98e- 2  2.51e-37     11.9 
 9 mu         0.9      1.34      3.59e- 7  1.53e-58     30.5 
10 mu_1       0.1      2.47      1.74e-24  1.28e-80    223.  
11 mu_1       0.2      1.37      4.72e-13  1.56e-53     93.7 
12 mu_1       0.3      1.06      4.14e- 7  7.42e-38     19.1 
13 mu_1       0.4      1.01      1.46e- 3  6.89e-27     12.4 
14 mu_1       0.5      1.29      6.49e- 2  1.33e-18     14.3 
15 mu_1       0.6      1.08      1.93e- 1  1.65e-17      6.79
16 mu_1       0.7      0.982     1.07e- 1  5.71e-26      6.96
17 mu_1       0.8      1.07      1.96e- 2  3.49e-38     12.1 
18 mu_1       0.9      1.34      2.62e- 7  1.89e-59     31.6 
19 mu_0       0.1      2.10      1.13e-25  9.27e-83    199.  
20 mu_0       0.2      1.47      5.80e-14  2.55e-55    103.  
21 mu_0       0.3      1.09      9.10e- 8  2.07e-39     20.2 
22 mu_0       0.4      0.985     5.35e- 4  2.99e-28     11.3 
23 mu_0       0.5      1.29      6.06e- 2  7.53e-20     13.7 
24 mu_0       0.6      1.10      1.90e- 1  1.98e-16      6.93
25 mu_0       0.7      0.989     1.21e- 1  1.07e-24      7.35
26 mu_0       0.8      1.03      2.82e- 2  1.12e-36     11.0 
27 mu_0       0.9      1.31      1.23e- 6  1.36e-57     20.9 
[1] "Total run time was 375.777 seconds"
