
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7359"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  4   3   2   1   3   2   2   1   3   2   2   3   1   2   2   1   4   2   1   1 
 70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  88  89  90 
  2   2   4   3   2   2   2   1   1   2   3   2   1   1   1   2   1   2   2   3 
 91  92  93  95  97  98  99 100 
  1   6   1   2   2   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02516 0.31174 0.58255 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4323 3036 
[1] "treatment indicator table: "

   0    1 
2865 4494 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3671
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3688
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 352.545 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.358 0.0822
 2 mu         0.1   0.2 0.393 0.0760
 3 mu         0.1   0.3 0.409 0.0753
 4 mu         0.1   0.4 0.438 0.0830
 5 mu         0.1   0.5 0.493 0.0988
 6 mu         0.2   0.1 0.367 0.0473
 7 mu         0.2   0.2 0.424 0.0300
 8 mu         0.2   0.3 0.457 0.0271
 9 mu         0.2   0.4 0.498 0.0307
10 mu         0.2   0.5 0.559 0.0432
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.804       0.0909 0.000000140      8.50
 2 mu         0.2      0.990       0.888  0.0160           3.21
 3 mu         0.3      0.966       0.984  0.155            1.71
 4 mu         0.4      0.964       0.952  0.596            1.46
 5 mu         0.5      1.00        1.00   0.619            1.35
 6 mu         0.6      1.01        0.995  0.715            1.35
 7 mu         0.7      0.997       1.01   0.658            1.44
 8 mu         0.8      1.03        1.03   0.318            1.89
 9 mu         0.9      0.990       0.890  0.00345          5.08
10 mu_1       0.1      0.825       0.168  0.000000425      4.48
11 mu_1       0.2      0.998       0.929  0.0237           2.93
12 mu_1       0.3      0.960       0.958  0.185            1.68
13 mu_1       0.4      0.968       0.947  0.591            1.42
14 mu_1       0.5      1.01        0.995  0.621            1.35
15 mu_1       0.6      1.01        0.992  0.698            1.34
16 mu_1       0.7      0.998       1.01   0.641            1.45
17 mu_1       0.8      1.03        1.03   0.301            1.89
18 mu_1       0.9      0.991       0.875  0.00296          5.18
19 mu_0       0.1      0.802       0.0822 0.000000108      9.26
20 mu_0       0.2      0.988       0.881  0.0140           3.29
21 mu_0       0.3      0.969       0.988  0.143            1.73
22 mu_0       0.4      0.962       0.952  0.599            1.49
23 mu_0       0.5      1.00        0.993  0.616            1.37
24 mu_0       0.6      1.01        1.00   0.721            1.36
25 mu_0       0.7      0.994       0.989  0.680            1.42
26 mu_0       0.8      1.03        1.02   0.386            1.87
27 mu_0       0.9      0.975       0.908  0.00782          4.20
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0195     1.72e-25  2.85e-63      1.95
 2 mu         0.2     0.381      1.35e-13  2.21e-40     37.2 
 3 mu         0.3     0.620      1.39e- 7  2.75e-28     11.0 
 4 mu         0.4     1.26       1.34e- 3  8.26e-20     14.7 
 5 mu         0.5     0.945      1.17e- 1  2.42e-13     14.2 
 6 mu         0.6     0.882      2.26e- 1  1.27e-13      5.55
 7 mu         0.7     1.08       3.16e- 1  7.45e-22     11.5 
 8 mu         0.8     2.07       6.45e- 3  4.48e-34     26.1 
 9 mu         0.9     7.37       2.83e- 9  8.77e-56    287.  
10 mu_1       0.1     0.0360     1.22e-24  2.50e-62      3.60
11 mu_1       0.2     0.360      4.34e-13  1.03e-39     34.4 
12 mu_1       0.3     0.732      2.87e- 7  8.67e-28     12.5 
13 mu_1       0.4     1.25       9.65e- 4  1.95e-19     14.5 
14 mu_1       0.5     0.932      1.16e- 1  4.58e-13     14.7 
15 mu_1       0.6     0.887      2.52e- 1  3.91e-14      6.20
16 mu_1       0.7     1.10       2.60e- 1  1.97e-22     11.1 
17 mu_1       0.8     2.12       4.93e- 3  1.03e-34     27.3 
18 mu_1       0.9     7.59       1.98e- 9  1.80e-56    301.  
19 mu_0       0.1     0.0176     5.55e-26  3.92e-64      1.76
20 mu_0       0.2     0.387      5.68e-14  1.49e-41     37.9 
21 mu_0       0.3     0.571      7.58e- 8  2.12e-29     10.3 
22 mu_0       0.4     1.27       1.21e- 3  7.44e-21     14.8 
23 mu_0       0.5     0.957      8.62e- 2  2.62e-14     13.8 
24 mu_0       0.6     0.875      1.99e- 1  2.59e-13      5.11
25 mu_0       0.7     1.04       3.55e- 1  2.02e-21     12.7 
26 mu_0       0.8     1.87       1.25e- 2  1.82e-33     21.1 
27 mu_0       0.9     5.40       1.08e- 8  7.15e-55    155.  
[1] "Total run time was 355.692 seconds"
