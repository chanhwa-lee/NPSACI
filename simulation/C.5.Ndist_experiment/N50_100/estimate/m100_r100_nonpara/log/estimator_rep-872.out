
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7280"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  62  63  65  66  68  69  71  72  73  74 
  4   3   3   1   2   7   1   4   2   3   2   5   3   1   5   2   2   2   2   1 
 75  76  77  78  79  80  81  82  83  84  85  86  87  90  91  92  93  94  95  96 
  1   1   2   2   2   1   3   1   1   3   3   1   1   3   2   1   4   2   2   1 
 97  98  99 100 
  3   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.06127 0.43613 0.67717 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4408 2872 
[1] "treatment indicator table: "

   0    1 
2472 4808 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3644
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3636
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 404.761 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.505 0.164 
 2 mu         0.1   0.2 0.590 0.179 
 3 mu         0.1   0.3 0.613 0.180 
 4 mu         0.1   0.4 0.649 0.175 
 5 mu         0.1   0.5 0.670 0.161 
 6 mu         0.2   0.1 0.357 0.0838
 7 mu         0.2   0.2 0.420 0.0926
 8 mu         0.2   0.3 0.440 0.0884
 9 mu         0.2   0.4 0.478 0.0880
10 mu         0.2   0.5 0.515 0.0871
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.836       0.0718  2.71e-14      5.05
 2 mu         0.2      0.772       0.676   1.35e- 6      2.97
 3 mu         0.3      0.975       0.966   4.25e- 3      2.41
 4 mu         0.4      1.03        1.00    1.85e- 1      2.20
 5 mu         0.5      1.01        1.02    5.07e- 1      1.40
 6 mu         0.6      0.990       0.992   5.34e- 1      1.53
 7 mu         0.7      0.963       0.966   6.13e- 1      1.32
 8 mu         0.8      0.982       0.961   6.35e- 1      1.47
 9 mu         0.9      0.957       0.927   5.40e- 2      2.39
10 mu_1       0.1      0.835       0.0848  1.23e-13      5.86
11 mu_1       0.2      0.774       0.737   3.08e- 6      2.67
12 mu_1       0.3      0.997       0.995   6.54e- 3      2.65
13 mu_1       0.4      1.03        1.03    2.22e- 1      2.09
14 mu_1       0.5      1.01        1.02    5.18e- 1      1.40
15 mu_1       0.6      0.987       0.985   5.26e- 1      1.52
16 mu_1       0.7      0.963       0.967   5.95e- 1      1.31
17 mu_1       0.8      0.981       0.962   6.33e- 1      1.46
18 mu_1       0.9      0.958       0.931   4.98e- 2      2.39
19 mu_0       0.1      0.836       0.0658  1.65e-14      4.96
20 mu_0       0.2      0.772       0.664   9.20e- 7      3.04
21 mu_0       0.3      0.965       0.958   3.26e- 3      2.31
22 mu_0       0.4      1.04        1.01    1.60e- 1      2.27
23 mu_0       0.5      1.01        1.03    4.95e- 1      1.41
24 mu_0       0.6      0.994       1.01    5.45e- 1      1.55
25 mu_0       0.7      0.962       0.974   6.45e- 1      1.33
26 mu_0       0.8      0.983       0.952   5.96e- 1      1.51
27 mu_0       0.9      0.952       0.925   9.21e- 2      2.36
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.73      2.71e-30  8.43e-77    270.  
 2 mu         0.2      5.25      3.15e-17  5.73e-52    231.  
 3 mu         0.3      2.48      3.80e-10  1.58e-37    108.  
 4 mu         0.4      1.66      1.86e- 5  2.34e-27     33.5 
 5 mu         0.5      1.26      4.30e- 3  1.49e-19     14.1 
 6 mu         0.6      0.980     8.37e- 2  2.86e-13      8.83
 7 mu         0.7      1.05      3.58e- 1  1.51e-19      6.76
 8 mu         0.8      1.56      1.88e- 1  1.78e-31     11.3 
 9 mu         0.9      1.32      3.31e- 5  8.85e-53     28.3 
10 mu_1       0.1      3.85      2.06e-29  8.14e-76    379.  
11 mu_1       0.2      4.89      9.99e-17  2.76e-51    236.  
12 mu_1       0.3      2.35      8.86e-10  5.09e-37     92.1 
13 mu_1       0.4      1.62      3.13e- 5  5.64e-27     31.0 
14 mu_1       0.5      1.24      6.16e- 3  2.89e-19     13.5 
15 mu_1       0.6      0.976     1.04e- 1  4.60e-13      9.48
16 mu_1       0.7      1.06      3.08e- 1  4.42e-20      6.76
17 mu_1       0.8      1.58      1.60e- 1  4.55e-32     11.3 
18 mu_1       0.9      1.31      2.69e- 5  2.01e-53     28.0 
19 mu_0       0.1      2.60      7.17e-31  3.27e-78    258.  
20 mu_0       0.2      5.34      1.25e-17  2.50e-53    231.  
21 mu_0       0.3      2.54      1.69e-10  7.89e-39    114.  
22 mu_0       0.4      1.69      1.01e- 5  1.36e-28     35.2 
23 mu_0       0.5      1.28      2.44e- 3  1.04e-20     15.4 
24 mu_0       0.6      0.987     7.07e- 2  2.49e-14      9.05
25 mu_0       0.7      1.03      3.73e- 1  4.01e-19      7.89
26 mu_0       0.8      1.52      2.41e- 1  7.09e-31     11.4 
27 mu_0       0.9      1.43      8.86e- 5  7.04e-52     31.5 
[1] "Total run time was 407.968 seconds"
