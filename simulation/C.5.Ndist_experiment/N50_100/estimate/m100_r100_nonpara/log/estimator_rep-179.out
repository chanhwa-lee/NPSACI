
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7547"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  62  63  64  65  66  67  69  70  71  72 
  1   1   4   3   1   5   2   2   1   2   2   2   4   1   1   7   3   5   1   1 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  89  91  92  93  94  95 
  1   1   1   4   2   1   2   2   3   1   1   2   1   1   2   1   2   1   1   1 
 96  97  98  99 100 
  2   6   6   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02442 0.31844 0.57545 0.99986 6.00000 
[1] "event indicator table: "

   0    1 
4495 3052 
[1] "treatment indicator table: "

   0    1 
2762 4785 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3770
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3777
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 489.942 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.287 0.0693
 2 mu         0.1   0.2 0.366 0.0791
 3 mu         0.1   0.3 0.425 0.0895
 4 mu         0.1   0.4 0.490 0.0929
 5 mu         0.1   0.5 0.541 0.0996
 6 mu         0.2   0.1 0.346 0.0345
 7 mu         0.2   0.2 0.415 0.0421
 8 mu         0.2   0.3 0.483 0.0391
 9 mu         0.2   0.4 0.526 0.0385
10 mu         0.2   0.5 0.579 0.0392
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.924        0.239  2.62e-11      9.81
 2 mu         0.2      1.03         0.981  5.22e- 4      3.37
 3 mu         0.3      1.04         0.966  1.76e- 1      2.57
 4 mu         0.4      1.03         0.999  4.05e- 1      2.08
 5 mu         0.5      0.967        0.953  4.80e- 1      1.78
 6 mu         0.6      0.976        0.946  5.30e- 1      1.49
 7 mu         0.7      1.02         1.03   5.69e- 1      1.55
 8 mu         0.8      1.07         1.05   5.24e- 1      2.12
 9 mu         0.9      1.05         0.984  3.95e- 1      2.78
10 mu_1       0.1      0.936        0.328  9.29e-11      9.39
11 mu_1       0.2      1.04         0.957  9.28e- 4      3.14
12 mu_1       0.3      1.04         0.990  2.12e- 1      2.40
13 mu_1       0.4      1.02         0.983  3.93e- 1      2.01
14 mu_1       0.5      0.965        0.941  4.63e- 1      1.79
15 mu_1       0.6      0.980        0.955  5.33e- 1      1.49
16 mu_1       0.7      1.02         1.03   5.65e- 1      1.55
17 mu_1       0.8      1.07         1.05   5.19e- 1      2.13
18 mu_1       0.9      1.05         0.991  3.88e- 1      2.79
19 mu_0       0.1      0.922        0.224  1.88e-11      9.86
20 mu_0       0.2      1.03         0.984  4.21e- 4      3.42
21 mu_0       0.3      1.04         0.953  1.61e- 1      2.64
22 mu_0       0.4      1.03         1.01   4.06e- 1      2.12
23 mu_0       0.5      0.970        0.957  4.97e- 1      1.77
24 mu_0       0.6      0.971        0.941  5.24e- 1      1.50
25 mu_0       0.7      1.02         1.04   5.71e- 1      1.56
26 mu_0       0.8      1.06         1.05   5.47e- 1      2.09
27 mu_0       0.9      1.06         0.997  4.53e- 1      2.74
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.10      1.37e-28  2.56e-78     93.9 
 2 mu         0.2      2.61      2.91e-16  6.94e-52    152.  
 3 mu         0.3      1.41      2.93e- 9  1.28e-36     49.8 
 4 mu         0.4      0.739     3.89e- 5  5.74e-26     16.7 
 5 mu         0.5      0.887     6.98e- 3  6.75e-18      8.68
 6 mu         0.6      0.920     1.44e- 1  1.71e-15      8.54
 7 mu         0.7      1.24      2.12e- 1  6.75e-23     17.1 
 8 mu         0.8      1.24      3.74e- 2  1.39e-33      8.65
 9 mu         0.9      0.909     4.14e- 7  3.43e-52     22.0 
10 mu_1       0.1      1.24      7.82e-28  2.37e-77     93.9 
11 mu_1       0.2      2.63      1.01e-15  3.22e-51    140.  
12 mu_1       0.3      1.27      7.03e- 9  3.96e-36     42.8 
13 mu_1       0.4      0.761     6.61e- 5  1.33e-25     17.6 
14 mu_1       0.5      0.885     9.93e- 3  1.25e-17      8.53
15 mu_1       0.6      0.930     1.52e- 1  2.84e-16      8.61
16 mu_1       0.7      1.25      2.20e- 1  9.65e-24     17.4 
17 mu_1       0.8      1.24      3.12e- 2  1.73e-34      9.09
18 mu_1       0.9      0.904     3.18e- 7  3.81e-53     22.9 
19 mu_0       0.1      1.08      5.23e-29  2.07e-79     93.9 
20 mu_0       0.2      2.60      1.14e-16  6.33e-53    155.  
21 mu_0       0.3      1.48      1.17e- 9  1.33e-37     52.8 
22 mu_0       0.4      0.725     2.11e- 5  6.97e-27     16.1 
23 mu_0       0.5      0.890     4.04e- 3  9.84e-19      9.38
24 mu_0       0.6      0.904     1.20e- 1  3.84e-15      8.43
25 mu_0       0.7      1.22      1.38e- 1  2.03e-22     16.4 
26 mu_0       0.8      1.23      4.74e- 2  6.24e-33     11.6 
27 mu_0       0.9      0.958     1.29e- 6  3.08e-51     14.3 
[1] "Total run time was 493.746 seconds"
