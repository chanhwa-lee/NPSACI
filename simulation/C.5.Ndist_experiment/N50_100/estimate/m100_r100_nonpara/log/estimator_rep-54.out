
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7758"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  65  66  67  68  69  70 
  2   1   1   1   2   3   1   2   3   2   3   2   1   3   1   1   3   3   4   1 
 71  72  74  75  77  78  79  80  82  84  85  86  87  89  90  91  92  93  95  96 
  1   1   2   4   2   1   2   1   4   1   1   2   1   1   5   5   4   2   3   3 
 97  98  99 100 
  2   4   6   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02881 0.33238 0.60431 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4639 3119 
[1] "treatment indicator table: "

   0    1 
2884 4874 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3897
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3861
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 454.884 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.609 0.159 
 2 mu         0.1   0.2 0.685 0.147 
 3 mu         0.1   0.3 0.793 0.167 
 4 mu         0.1   0.4 0.834 0.170 
 5 mu         0.1   0.5 0.910 0.188 
 6 mu         0.2   0.1 0.425 0.0708
 7 mu         0.2   0.2 0.501 0.0552
 8 mu         0.2   0.3 0.588 0.0693
 9 mu         0.2   0.4 0.628 0.0686
10 mu         0.2   0.5 0.683 0.0787
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.28        0.0974 0.000000418     19.7 
 2 mu         0.2      1.03        0.959  0.0219           3.03
 3 mu         0.3      1.02        0.977  0.295            2.08
 4 mu         0.4      1.01        0.996  0.490            1.75
 5 mu         0.5      0.969       0.960  0.631            1.55
 6 mu         0.6      0.998       0.975  0.702            1.45
 7 mu         0.7      0.998       0.999  0.601            1.52
 8 mu         0.8      1.00        1.03   0.602            1.49
 9 mu         0.9      1.06        1.04   0.282            2.01
10 mu_1       0.1      1.16        0.177  0.00000128      14.3 
11 mu_1       0.2      1.05        1.06   0.0343           2.64
12 mu_1       0.3      1.02        0.984  0.341            1.99
13 mu_1       0.4      1.00        0.997  0.500            1.72
14 mu_1       0.5      0.969       0.966  0.637            1.56
15 mu_1       0.6      0.999       0.976  0.709            1.43
16 mu_1       0.7      0.998       1.00   0.601            1.50
17 mu_1       0.8      1.00        1.02   0.617            1.49
18 mu_1       0.9      1.06        1.04   0.268            2.02
19 mu_0       0.1      1.29        0.0888 0.000000322     20.3 
20 mu_0       0.2      1.02        0.931  0.0188           3.13
21 mu_0       0.3      1.03        0.964  0.275            2.12
22 mu_0       0.4      1.01        1.01   0.484            1.76
23 mu_0       0.5      0.968       0.956  0.626            1.54
24 mu_0       0.6      0.997       0.983  0.692            1.48
25 mu_0       0.7      0.999       0.992  0.599            1.54
26 mu_0       0.8      1.00        1.01   0.545            1.49
27 mu_0       0.9      1.06        1.02   0.405            1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00154     2.43e-28  2.55e-69     0.131
 2 mu         0.2    0.391       1.62e-14  4.27e-45    28.4  
 3 mu         0.3    1.12        1.31e- 7  3.53e-31    30.1  
 4 mu         0.4    1.16        1.04e- 3  1.55e-21    15.9  
 5 mu         0.5    1.28        3.25e- 2  1.57e-14    12.1  
 6 mu         0.6    1.05        3.12e- 1  2.10e-11     7.03 
 7 mu         0.7    0.979       6.58e- 2  4.63e-19     6.83 
 8 mu         0.8    1.32        3.60e- 2  1.40e-30    19.9  
 9 mu         0.9    1.26        3.25e- 7  3.13e-51    20.8  
10 mu_1       0.1    0.00347     1.42e-27  2.30e-68     0.284
11 mu_1       0.2    0.462       4.81e-14  1.92e-44    30.9  
12 mu_1       0.3    1.19        2.75e- 7  1.06e-30    33.4  
13 mu_1       0.4    1.16        1.70e- 3  3.49e-21    13.3  
14 mu_1       0.5    1.28        4.35e- 2  2.88e-14    12.7  
15 mu_1       0.6    1.04        2.60e- 1  7.61e-12     7.55 
16 mu_1       0.7    0.973       6.65e- 2  1.44e-19     6.65 
17 mu_1       0.8    1.35        2.93e- 2  3.81e-31    19.9  
18 mu_1       0.9    1.24        2.39e- 7  7.57e-52    20.9  
19 mu_0       0.1    0.00133     1.13e-28  2.80e-70     0.114
20 mu_0       0.2    0.373       7.75e-15  5.28e-46    27.8  
21 mu_0       0.3    1.10        6.95e- 8  4.99e-32    28.6  
22 mu_0       0.4    1.16        6.01e- 4  2.56e-22    17.6  
23 mu_0       0.5    1.28        2.91e- 2  2.61e-15    11.5  
24 mu_0       0.6    1.07        2.44e- 1  4.11e-11     6.97 
25 mu_0       0.7    0.994       8.48e- 2  1.21e-18     7.25 
26 mu_0       0.8    1.23        5.36e- 2  5.49e-30    19.9  
27 mu_0       0.9    1.44        1.10e- 6  2.45e-50    20.5  
[1] "Total run time was 458.381 seconds"
