
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7655"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  61  62  64  66  67  68  69  70  71  72  73 
  3   1   3   1   1   1   3   3   4   2   1   1   1   4   1   2   1   5   3   1 
 74  75  76  78  79  80  81  82  83  84  85  88  89  90  91  92  93  94  95  97 
  4   1   3   2   1   4   3   3   1   2   3   3   3   2   2   4   1   3   2   6 
 98  99 100 
  3   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03892 0.37428 0.62551 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4594 3061 
[1] "treatment indicator table: "

   0    1 
2664 4991 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3850
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3805
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 366.281 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.474 0.116 
 2 mu         0.1   0.2 0.556 0.134 
 3 mu         0.1   0.3 0.647 0.158 
 4 mu         0.1   0.4 0.707 0.165 
 5 mu         0.1   0.5 0.766 0.172 
 6 mu         0.2   0.1 0.357 0.0410
 7 mu         0.2   0.2 0.416 0.0536
 8 mu         0.2   0.3 0.481 0.0646
 9 mu         0.2   0.4 0.528 0.0607
10 mu         0.2   0.5 0.579 0.0570
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.26         0.476 0.00000000143     18.1 
 2 mu         0.2      1.04         0.988 0.00242            3.56
 3 mu         0.3      0.953        0.982 0.168              1.67
 4 mu         0.4      1.04         1.02  0.605              1.79
 5 mu         0.5      0.993        0.986 0.591              1.58
 6 mu         0.6      0.976        0.971 0.506              1.66
 7 mu         0.7      0.978        0.972 0.625              1.60
 8 mu         0.8      1.01         1.02  0.658              1.43
 9 mu         0.9      1.02         0.997 0.366              2.10
10 mu_1       0.1      1.26         0.593 0.00000000483     16.4 
11 mu_1       0.2      1.01         0.977 0.00411            3.23
12 mu_1       0.3      0.961        0.990 0.171              1.66
13 mu_1       0.4      1.04         1.03  0.562              1.85
14 mu_1       0.5      0.990        0.985 0.595              1.54
15 mu_1       0.6      0.977        0.969 0.509              1.66
16 mu_1       0.7      0.978        0.969 0.625              1.56
17 mu_1       0.8      1.01         1.02  0.658              1.42
18 mu_1       0.9      1.02         0.993 0.372              2.11
19 mu_0       0.1      1.26         0.445 0.00000000106     18.3 
20 mu_0       0.2      1.05         0.981 0.00200            3.64
21 mu_0       0.3      0.949        0.992 0.167              1.67
22 mu_0       0.4      1.04         1.02  0.606              1.84
23 mu_0       0.5      0.996        0.992 0.572              1.62
24 mu_0       0.6      0.976        0.970 0.501              1.66
25 mu_0       0.7      0.979        0.983 0.612              1.68
26 mu_0       0.8      0.999        1.00  0.625              1.45
27 mu_0       0.9      1.04         1.02  0.314              2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.10      6.21e-32  2.38e-78      98.1
 2 mu         0.2      1.49      4.95e-18  1.15e-52      60.4
 3 mu         0.3      0.638     3.17e-10  9.39e-38      19.0
 4 mu         0.4      1.21      1.48e- 5  2.82e-27      31.6
 5 mu         0.5      1.19      5.35e- 3  2.93e-19      18.9
 6 mu         0.6      1.44      6.35e- 2  3.72e-16      25.1
 7 mu         0.7      1.23      2.52e- 1  3.32e-25      18.6
 8 mu         0.8      1.64      1.92e- 1  1.54e-38      13.4
 9 mu         0.9      0.924     8.90e- 6  4.18e-62      13.5
10 mu_1       0.1      1.43      4.38e-31  2.28e-77     123. 
11 mu_1       0.2      1.31      1.76e-17  5.50e-52      53.3
12 mu_1       0.3      0.635     6.89e-10  2.99e-37      15.5
13 mu_1       0.4      1.24      2.59e- 5  6.73e-27      31.8
14 mu_1       0.5      1.20      5.84e- 3  5.60e-19      16.5
15 mu_1       0.6      1.44      5.27e- 2  1.02e-16      25.2
16 mu_1       0.7      1.24      2.73e- 1  7.83e-26      19.7
17 mu_1       0.8      1.64      1.87e- 1  3.17e-39      12.4
18 mu_1       0.9      0.915     6.75e- 6  7.66e-63      14.0
19 mu_0       0.1      1.06      2.04e-32  1.18e-79      95.4
20 mu_0       0.2      1.54      1.78e-18  6.39e-54      62.2
21 mu_0       0.3      0.639     1.58e-10  5.96e-39      20.5
22 mu_0       0.4      1.18      7.36e- 6  2.09e-28      31.6
23 mu_0       0.5      1.19      2.96e- 3  2.61e-20      21.3
24 mu_0       0.6      1.44      8.15e- 2  7.77e-16      24.9
25 mu_0       0.7      1.22      2.13e- 1  9.25e-25      16.1
26 mu_0       0.8      1.63      2.20e- 1  6.41e-38      17.4
27 mu_0       0.9      1.00      2.83e- 5  3.49e-61      11.3
[1] "Total run time was 369.461 seconds"
