
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7658"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  61  62  64  65  66  67  68  69  70  72  73 
  1   2   3   1   2   2   1   2   1   2   1   4   2   3   2   1   7   2   5   2 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  89  91  92  93  94  95 
  2   1   3   1   2   2   1   3   3   1   2   3   1   3   2   1   5   1   3   2 
 96  97  98  99 100 
  2   1   1   5   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03227 0.36268 0.61425 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4590 3068 
[1] "treatment indicator table: "

   0    1 
2816 4842 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3868
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3790
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 388.929 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.391 0.0919
 2 mu         0.1   0.2 0.455 0.101 
 3 mu         0.1   0.3 0.513 0.118 
 4 mu         0.1   0.4 0.537 0.113 
 5 mu         0.1   0.5 0.595 0.120 
 6 mu         0.2   0.1 0.409 0.0717
 7 mu         0.2   0.2 0.483 0.0741
 8 mu         0.2   0.3 0.547 0.0880
 9 mu         0.2   0.4 0.574 0.0810
10 mu         0.2   0.5 0.630 0.0786
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.898       0.0527  1.08e-10     10.5 
 2 mu         0.2      1.02        0.815   1.31e- 3      5.21
 3 mu         0.3      0.956       0.921   2.20e- 1      1.97
 4 mu         0.4      1.03        1.02    5.12e- 1      2.18
 5 mu         0.5      1.06        1.04    3.95e- 1      1.84
 6 mu         0.6      1.00        0.988   6.39e- 1      1.38
 7 mu         0.7      1.01        1.01    6.19e- 1      1.48
 8 mu         0.8      1.01        0.984   5.78e- 1      1.75
 9 mu         0.9      0.996       1.01    2.04e- 1      1.95
10 mu_1       0.1      0.937       0.104   3.72e-10      6.16
11 mu_1       0.2      1.01        0.859   2.30e- 3      4.47
12 mu_1       0.3      0.954       0.929   2.29e- 1      1.96
13 mu_1       0.4      1.04        1.02    5.02e- 1      2.18
14 mu_1       0.5      1.05        1.04    3.90e- 1      1.80
15 mu_1       0.6      1.00        0.985   6.51e- 1      1.40
16 mu_1       0.7      1.01        1.01    6.20e- 1      1.50
17 mu_1       0.8      1.01        0.987   5.64e- 1      1.75
18 mu_1       0.9      0.995       1.01    2.00e- 1      1.96
19 mu_0       0.1      0.894       0.0468  7.82e-11     11.0 
20 mu_0       0.2      1.02        0.828   1.06e- 3      5.39
21 mu_0       0.3      0.957       0.926   2.07e- 1      1.97
22 mu_0       0.4      1.03        1.02    5.18e- 1      2.18
23 mu_0       0.5      1.06        1.04    4.01e- 1      1.88
24 mu_0       0.6      1.01        1.01    6.21e- 1      1.37
25 mu_0       0.7      1.01        1.00    6.15e- 1      1.44
26 mu_0       0.8      1.01        0.985   6.23e- 1      1.73
27 mu_0       0.9      1.01        0.978   2.41e- 1      2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00907     5.67e-27  6.79e-63     0.905
 2 mu         0.2    0.526       1.99e-14  5.01e-43    41.6  
 3 mu         0.3    0.850       8.68e- 8  2.10e-31    22.7  
 4 mu         0.4    0.935       7.42e- 4  3.70e-23    15.7  
 5 mu         0.5    1.15        6.15e- 2  9.20e-17    10.9  
 6 mu         0.6    0.939       1.61e- 1  1.55e-11     5.73 
 7 mu         0.7    1.13        2.75e- 1  1.59e-16    18.4  
 8 mu         0.8    1.39        8.47e- 3  1.85e-27    13.6  
 9 mu         0.9    0.772       1.14e- 8  2.64e-47    13.1  
10 mu_1       0.1    0.0207      3.57e-26  6.79e-62     2.06 
11 mu_1       0.2    0.622       6.18e-14  2.50e-42    47.5  
12 mu_1       0.3    0.845       1.82e- 7  6.99e-31    20.1  
13 mu_1       0.4    0.946       1.19e- 3  9.24e-23    14.7  
14 mu_1       0.5    1.15        7.62e- 2  1.84e-16    11.2  
15 mu_1       0.6    0.931       1.51e- 1  2.58e-11     5.84 
16 mu_1       0.7    1.14        2.37e- 1  5.79e-17    18.6  
17 mu_1       0.8    1.39        6.75e- 3  5.89e-28    13.3  
18 mu_1       0.9    0.765       7.95e- 9  7.49e-48    13.5  
19 mu_0       0.1    0.00778     2.33e-27  0            0.776
20 mu_0       0.2    0.502       9.39e-15  0           40.2  
21 mu_0       0.3    0.852       4.61e- 8  0           25.1  
22 mu_0       0.4    0.928       4.46e- 4  0           16.3  
23 mu_0       0.5    1.14        5.61e- 2  0           10.6  
24 mu_0       0.6    0.952       2.00e- 1  0            5.58 
25 mu_0       0.7    1.11        2.22e- 1  0           18.0  
26 mu_0       0.8    1.40        1.51e- 2  0           14.8  
27 mu_0       0.9    0.837       4.16e- 8  0           16.1  
[1] "Total run time was 392.416 seconds"
