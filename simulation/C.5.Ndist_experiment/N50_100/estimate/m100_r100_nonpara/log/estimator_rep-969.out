
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7706"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  60  62  63  64  65  66  67  68  70  71  72  73 
  2   2   2   3   1   2   3   2   2   1   1   4   1   1   2   3   1   3   4   2 
 74  75  76  79  80  81  82  84  85  86  87  89  90  91  92  94  95  96  97  98 
  3   2   2   4   4   3   2   1   1   2   1   3   1   4   5   7   3   4   2   1 
 99 100 
  2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04107 0.37796 0.63892 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4584 3122 
[1] "treatment indicator table: "

   0    1 
2735 4971 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 4037
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3669
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 377.122 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est    se
   <chr>    <dbl> <dbl> <dbl> <dbl>
 1 mu         0.1   0.1 0.348 0.129
 2 mu         0.1   0.2 0.482 0.154
 3 mu         0.1   0.3 0.493 0.130
 4 mu         0.1   0.4 0.531 0.134
 5 mu         0.1   0.5 0.576 0.137
 6 mu         0.2   0.1 0.364 0.112
 7 mu         0.2   0.2 0.491 0.137
 8 mu         0.2   0.3 0.506 0.103
 9 mu         0.2   0.4 0.546 0.104
10 mu         0.2   0.5 0.600 0.102
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.902        0.392 0.00000000654     15.3 
 2 mu         0.2      0.982        0.882 0.00554            4.17
 3 mu         0.3      0.988        0.939 0.358              2.42
 4 mu         0.4      1.01         1.00  0.488              1.76
 5 mu         0.5      1.03         1.01  0.599              1.80
 6 mu         0.6      1.02         1.00  0.474              1.47
 7 mu         0.7      0.993        1.01  0.507              1.28
 8 mu         0.8      1.01         1.00  0.501              1.62
 9 mu         0.9      0.952        0.933 0.211              1.74
10 mu_1       0.1      0.970        0.597 0.0000000208      16.0 
11 mu_1       0.2      0.989        0.913 0.00915            4.66
12 mu_1       0.3      0.985        0.928 0.383              2.34
13 mu_1       0.4      1.01         1.00  0.479              1.85
14 mu_1       0.5      1.03         1.01  0.599              1.73
15 mu_1       0.6      1.02         1.00  0.472              1.47
16 mu_1       0.7      0.994        0.996 0.502              1.28
17 mu_1       0.8      1.01         1.00  0.507              1.63
18 mu_1       0.9      0.951        0.937 0.213              1.73
19 mu_0       0.1      0.895        0.370 0.00000000495     15.3 
20 mu_0       0.2      0.980        0.871 0.00464            4.05
21 mu_0       0.3      0.989        0.942 0.348              2.45
22 mu_0       0.4      1.00         1.01  0.468              1.71
23 mu_0       0.5      1.03         1.01  0.600              1.87
24 mu_0       0.6      1.02         1.00  0.477              1.48
25 mu_0       0.7      0.992        1.01  0.519              1.29
26 mu_0       0.8      1.01         1.00  0.475              1.59
27 mu_0       0.9      0.960        0.935 0.190              1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0935     3.54e-30  4.78e-72      5.15
 2 mu         0.2     1.81       1.01e-16  2.02e-46    111.  
 3 mu         0.3     0.801      6.60e-10  9.73e-32     27.0 
 4 mu         0.4     0.802      1.45e- 5  1.32e-21      8.54
 5 mu         0.5     1.14       7.33e- 3  1.87e-14     14.6 
 6 mu         0.6     0.814      1.40e- 1  7.57e-13     10.4 
 7 mu         0.7     0.940      8.27e- 2  5.91e-21     18.5 
 8 mu         0.8     1.23       1.02e- 1  5.33e-33      8.47
 9 mu         0.9     1.96       1.05e- 6  2.09e-54     35.1 
10 mu_1       0.1     0.177      2.62e-29  4.24e-71      9.63
11 mu_1       0.2     1.83       3.84e-16  8.98e-46    103.  
12 mu_1       0.3     0.739      1.44e- 9  2.88e-31     21.5 
13 mu_1       0.4     0.840      2.57e- 5  2.94e-21      9.08
14 mu_1       0.5     1.12       1.01e- 2  3.43e-14     14.3 
15 mu_1       0.6     0.807      1.63e- 1  2.36e-13     10.3 
16 mu_1       0.7     0.957      9.79e- 2  1.58e-21     18.2 
17 mu_1       0.8     1.24       8.85e- 2  1.24e-33      9.26
18 mu_1       0.9     1.94       7.76e- 7  4.34e-55     35.8 
19 mu_0       0.1     0.0843     1.03e-30  5.96e-73      4.66
20 mu_0       0.2     1.81       2.97e-17  2.84e-47    113.  
21 mu_0       0.3     0.827      3.29e-10  1.56e-32     29.4 
22 mu_0       0.4     0.777      7.00e- 6  2.00e-22      8.32
23 mu_0       0.5     1.15       5.33e- 3  3.04e-15     14.9 
24 mu_0       0.6     0.825      8.31e- 2  1.54e-12     10.5 
25 mu_0       0.7     0.902      5.67e- 2  1.60e-20     19.3 
26 mu_0       0.8     1.19       7.21e- 2  2.17e-32      7.19
27 mu_0       0.9     2.12       3.58e- 6  1.70e-53     34.5 
[1] "Total run time was 380.119 seconds"
