
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7552"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  1   1   2   2   2   1   4   3   2   2   3   1   2   2   2   2   1   3   1   2 
 72  73  74  75  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93 
  3   3   1   4   1   4   2   3   1   2   4   3   1   2   3   2   1   2   2   3 
 95  96  97  98  99 100 
  2   2   1   3   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0337  0.3551  0.6136  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4594 2958 
[1] "treatment indicator table: "

   0    1 
2514 5038 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3723
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3829
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 487.414 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.524 0.0915
 2 mu         0.1   0.2 0.614 0.0916
 3 mu         0.1   0.3 0.721 0.128 
 4 mu         0.1   0.4 0.790 0.127 
 5 mu         0.1   0.5 0.811 0.120 
 6 mu         0.2   0.1 0.458 0.0658
 7 mu         0.2   0.2 0.529 0.0552
 8 mu         0.2   0.3 0.625 0.0883
 9 mu         0.2   0.4 0.678 0.0815
10 mu         0.2   0.5 0.703 0.0691
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.20         0.345 0.000000956      7.94
 2 mu         0.2      1.07         0.866 0.0462           4.58
 3 mu         0.3      1.05         1.03  0.169            2.12
 4 mu         0.4      1.01         1.01  0.394            1.75
 5 mu         0.5      0.954        0.930 0.449            1.57
 6 mu         0.6      0.973        0.973 0.620            1.42
 7 mu         0.7      1.03         0.997 0.732            1.60
 8 mu         0.8      0.987        0.962 0.610            1.87
 9 mu         0.9      0.974        0.965 0.261            1.75
10 mu_1       0.1      1.17         0.487 0.00000268       7.95
11 mu_1       0.2      1.07         0.877 0.0661           4.70
12 mu_1       0.3      1.05         1.03  0.196            2.06
13 mu_1       0.4      1.01         1.01  0.422            1.73
14 mu_1       0.5      0.953        0.938 0.462            1.55
15 mu_1       0.6      0.977        0.973 0.618            1.41
16 mu_1       0.7      1.03         0.994 0.735            1.61
17 mu_1       0.8      0.986        0.954 0.590            1.85
18 mu_1       0.9      0.973        0.962 0.253            1.76
19 mu_0       0.1      1.20         0.326 0.000000765      8.26
20 mu_0       0.2      1.07         0.878 0.0413           4.56
21 mu_0       0.3      1.05         1.03  0.157            2.15
22 mu_0       0.4      1.02         1.03  0.375            1.77
23 mu_0       0.5      0.956        0.929 0.436            1.58
24 mu_0       0.6      0.968        0.955 0.613            1.44
25 mu_0       0.7      1.03         1.00  0.718            1.58
26 mu_0       0.8      0.987        0.963 0.619            1.92
27 mu_0       0.9      0.980        0.981 0.331            1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.505     3.93e-30  8.73e-78     47.4 
 2 mu         0.2      0.877     1.28e-16  4.21e-51     50.9 
 3 mu         0.3      0.515     1.84e- 9  1.02e-35     20.2 
 4 mu         0.4      0.538     5.31e- 5  5.22e-25      6.88
 5 mu         0.5      0.863     1.21e- 2  6.40e-17      8.34
 6 mu         0.6      1.01      2.33e- 1  8.70e-14      8.68
 7 mu         0.7      1.12      1.24e- 1  3.82e-22     17.0 
 8 mu         0.8      1.16      8.63e- 2  1.53e-34      8.41
 9 mu         0.9      1.52      1.16e- 5  1.50e-56     18.2 
10 mu_1       0.1      0.610     2.28e-29  8.01e-77     55.2 
11 mu_1       0.2      0.853     4.47e-16  1.93e-50     46.5 
12 mu_1       0.3      0.482     4.18e- 9  3.12e-35     19.4 
13 mu_1       0.4      0.577     8.44e- 5  1.20e-24      7.14
14 mu_1       0.5      0.863     1.41e- 2  1.17e-16      7.76
15 mu_1       0.6      1.02      2.34e- 1  2.65e-14      8.39
16 mu_1       0.7      1.11      1.47e- 1  9.98e-23     17.2 
17 mu_1       0.8      1.17      8.66e- 2  3.50e-35      8.65
18 mu_1       0.9      1.52      8.45e- 6  3.05e-57     18.7 
19 mu_0       0.1      0.493     1.83e-30  7.91e-79     46.5 
20 mu_0       0.2      0.883     4.79e-17  4.30e-52     52.0 
21 mu_0       0.3      0.529     8.44e-10  1.19e-36     20.6 
22 mu_0       0.4      0.512     2.96e- 5  7.10e-26      6.70
23 mu_0       0.5      0.863     8.84e- 3  1.04e-17      8.91
24 mu_0       0.6      0.993     1.56e- 1  1.78e-13      9.11
25 mu_0       0.7      1.13      1.41e- 1  1.04e-21     16.5 
26 mu_0       0.8      1.10      6.78e- 2  6.26e-34      7.45
27 mu_0       0.9      1.48      3.99e- 5  1.23e-55     19.0 
[1] "Total run time was 492.169 seconds"
