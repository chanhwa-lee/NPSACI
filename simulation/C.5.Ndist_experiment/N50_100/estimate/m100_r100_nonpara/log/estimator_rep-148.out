
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7623"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  4   1   2   2   1   1   1   1   2   2   2   1   2   1   1   3   2   2   2   2 
 70  71  72  73  74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  91 
  2   3   2   3   3   2   5   2   1   1   4   2   1   1   4   1   1   2   1   2 
 92  94  95  96  97  98  99 100 
  1   2   1   1   6   3   6   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04523 0.37867 0.61988 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4499 3124 
[1] "treatment indicator table: "

   0    1 
2835 4788 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3811
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3812
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 512.005 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.395 0.0727
 2 mu         0.1   0.2 0.472 0.0843
 3 mu         0.1   0.3 0.530 0.0920
 4 mu         0.1   0.4 0.560 0.0917
 5 mu         0.1   0.5 0.577 0.0946
 6 mu         0.2   0.1 0.366 0.0415
 7 mu         0.2   0.2 0.451 0.0432
 8 mu         0.2   0.3 0.512 0.0476
 9 mu         0.2   0.4 0.557 0.0377
10 mu         0.2   0.5 0.580 0.0354
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.916        0.206 0.000000253      7.62
 2 mu         0.2      0.988        0.930 0.0365           3.26
 3 mu         0.3      1.01         0.938 0.291            2.55
 4 mu         0.4      0.996        0.967 0.583            1.53
 5 mu         0.5      1.04         1.03  0.594            1.78
 6 mu         0.6      0.991        0.959 0.605            1.36
 7 mu         0.7      1.01         0.996 0.711            1.54
 8 mu         0.8      1.00         0.997 0.553            1.86
 9 mu         0.9      0.943        0.929 0.140            2.35
10 mu_1       0.1      0.878        0.345 0.000000740      6.38
11 mu_1       0.2      0.998        0.926 0.0538           3.36
12 mu_1       0.3      1.01         0.940 0.288            2.33
13 mu_1       0.4      0.998        0.961 0.582            1.55
14 mu_1       0.5      1.04         1.01  0.598            1.76
15 mu_1       0.6      0.990        0.970 0.614            1.36
16 mu_1       0.7      1.01         0.986 0.719            1.51
17 mu_1       0.8      1.00         0.987 0.547            1.87
18 mu_1       0.9      0.942        0.921 0.132            2.36
19 mu_0       0.1      0.921        0.191 0.000000198      7.83
20 mu_0       0.2      0.985        0.918 0.0322           3.24
21 mu_0       0.3      1.01         0.945 0.292            2.65
22 mu_0       0.4      0.994        0.963 0.584            1.55
23 mu_0       0.5      1.04         1.01  0.589            1.80
24 mu_0       0.6      0.993        0.977 0.592            1.36
25 mu_0       0.7      1.01         0.992 0.691            1.60
26 mu_0       0.8      1.01         0.989 0.574            1.83
27 mu_0       0.9      0.945        0.959 0.144            2.17
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.43      2.62e-27  1.30e-80    343.  
 2 mu         0.2      0.243     4.65e-14  1.59e-53     16.7 
 3 mu         0.3      1.08      1.18e- 7  7.56e-38     15.9 
 4 mu         0.4      1.24      9.13e- 4  7.02e-27     21.2 
 5 mu         0.5      1.01      6.44e- 2  1.55e-18      9.20
 6 mu         0.6      1.05      1.66e- 1  5.27e-15      7.80
 7 mu         0.7      1.08      1.14e- 1  3.18e-22      9.07
 8 mu         0.8      1.22      1.50e- 2  1.28e-32     11.7 
 9 mu         0.9      1.42      6.68e- 8  1.13e-50     34.1 
10 mu_1       0.1      3.07      1.51e-26  1.22e-79    307.  
11 mu_1       0.2      0.191     1.48e-13  7.47e-53      7.46
12 mu_1       0.3      1.18      2.45e- 7  2.36e-37     17.4 
13 mu_1       0.4      1.20      1.42e- 3  1.65e-26     20.3 
14 mu_1       0.5      1.02      5.82e- 2  2.91e-18      8.68
15 mu_1       0.6      1.03      1.69e- 1  7.86e-16      7.69
16 mu_1       0.7      1.08      9.41e- 2  4.06e-23      9.12
17 mu_1       0.8      1.23      1.17e- 2  1.44e-33     11.3 
18 mu_1       0.9      1.42      4.92e- 8  1.12e-51     35.6 
19 mu_0       0.1      3.47      1.23e-27  8.97e-82    347.  
20 mu_0       0.2      0.255     2.11e-14  1.23e-54     19.0 
21 mu_0       0.3      1.04      6.33e- 8  6.68e-39     15.2 
22 mu_0       0.4      1.27      5.78e- 4  7.24e-28     21.8 
23 mu_0       0.5      0.995     5.43e- 2  1.92e-19      9.72
24 mu_0       0.6      1.07      1.55e- 1  1.20e-14      8.30
25 mu_0       0.7      1.07      1.26e- 1  9.64e-22      8.95
26 mu_0       0.8      1.16      2.55e- 2  5.84e-32     13.2 
27 mu_0       0.9      1.48      2.26e- 7  1.03e-49     20.7 
[1] "Total run time was 515.574 seconds"
