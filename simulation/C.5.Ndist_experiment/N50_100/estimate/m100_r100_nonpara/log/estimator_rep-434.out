
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7271"
[1] "cluster size dist'n: "

 50  51  52  53  56  57  59  60  61  62  63  64  65  66  67  68  69  71  72  73 
  5   5   2   2   3   2   4   2   4   2   6   2   2   4   2   1   1   1   2   3 
 74  75  76  77  78  79  82  83  84  86  87  88  89  90  92  93  94  95  96  97 
  1   4   1   3   1   1   3   2   2   2   1   2   2   1   2   1   4   1   2   3 
 98  99 100 
  2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03666 0.37384 0.62986 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4319 2952 
[1] "treatment indicator table: "

   0    1 
2687 4584 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3735
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3536
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 592.328 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.387 0.132 
 2 mu         0.1   0.2 0.441 0.126 
 3 mu         0.1   0.3 0.486 0.106 
 4 mu         0.1   0.4 0.517 0.0949
 5 mu         0.1   0.5 0.522 0.0857
 6 mu         0.2   0.1 0.384 0.0904
 7 mu         0.2   0.2 0.457 0.0864
 8 mu         0.2   0.3 0.514 0.0699
 9 mu         0.2   0.4 0.546 0.0599
10 mu         0.2   0.5 0.562 0.0521
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.816        0.465 0.00000000283      6.43
 2 mu         0.2      0.928        0.946 0.00318            2.36
 3 mu         0.3      0.943        0.948 0.285              1.78
 4 mu         0.4      1.03         0.998 0.571              2.10
 5 mu         0.5      1.01         1.01  0.639              1.47
 6 mu         0.6      1.01         0.977 0.573              1.53
 7 mu         0.7      0.996        0.984 0.560              1.45
 8 mu         0.8      0.987        0.985 0.571              1.51
 9 mu         0.9      1.04         1.05  0.325              1.88
10 mu_1       0.1      0.846        0.602 0.00000000955      5.48
11 mu_1       0.2      0.926        0.887 0.00540            2.22
12 mu_1       0.3      0.950        0.917 0.329              1.82
13 mu_1       0.4      1.04         0.994 0.572              2.11
14 mu_1       0.5      1.01         1.02  0.632              1.43
15 mu_1       0.6      1.01         0.984 0.549              1.53
16 mu_1       0.7      0.994        0.983 0.562              1.45
17 mu_1       0.8      0.987        0.978 0.566              1.53
18 mu_1       0.9      1.04         1.05  0.323              1.87
19 mu_0       0.1      0.813        0.436 0.00000000208      6.54
20 mu_0       0.2      0.928        0.930 0.00263            2.42
21 mu_0       0.3      0.940        0.943 0.266              1.81
22 mu_0       0.4      1.03         1.01  0.565              2.10
23 mu_0       0.5      1.01         1.01  0.634              1.51
24 mu_0       0.6      1.01         0.966 0.608              1.53
25 mu_0       0.7      1.00         0.990 0.557              1.43
26 mu_0       0.8      0.985        0.993 0.593              1.42
27 mu_0       0.9      1.03         1.04  0.342              1.96
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.884     4.24e-26  4.12e-84     88.4 
 2 mu         0.2      0.313     1.10e-13  2.27e-56     15.7 
 3 mu         0.3      0.925     4.60e- 7  2.77e-40     16.2 
 4 mu         0.4      0.978     2.22e- 3  5.33e-29      8.91
 5 mu         0.5      1.16      6.72e- 2  2.20e-20      8.07
 6 mu         0.6      1.03      7.19e- 2  1.67e-13      6.31
 7 mu         0.7      0.914     8.43e- 2  1.45e-17      6.41
 8 mu         0.8      1.09      1.60e- 2  2.37e-26      9.57
 9 mu         0.9      1.41      1.07e- 7  2.41e-45     15.3 
10 mu_1       0.1      0.947     2.45e-25  3.91e-83     94.7 
11 mu_1       0.2      0.305     3.70e-13  1.08e-55      9.36
12 mu_1       0.3      0.967     9.04e- 7  8.75e-40     17.3 
13 mu_1       0.4      0.982     3.53e- 3  1.26e-28      9.34
14 mu_1       0.5      1.16      7.39e- 2  4.18e-20      7.95
15 mu_1       0.6      1.02      7.20e- 2  2.64e-13      5.90
16 mu_1       0.7      0.918     6.58e- 2  2.22e-18      6.62
17 mu_1       0.8      1.09      1.34e- 2  6.78e-27      9.51
18 mu_1       0.9      1.42      7.59e- 8  6.84e-46     16.1 
19 mu_0       0.1      0.877     1.99e-26  2.34e-85     87.7 
20 mu_0       0.2      0.316     4.58e-14  1.45e-57     17.5 
21 mu_0       0.3      0.907     2.43e- 7  2.02e-41     15.8 
22 mu_0       0.4      0.975     1.34e- 3  4.53e-30      9.71
23 mu_0       0.5      1.15      6.39e- 2  2.25e-21      8.20
24 mu_0       0.6      1.05      8.05e- 2  2.13e-14      6.93
25 mu_0       0.7      0.904     7.96e- 2  4.31e-17      5.91
26 mu_0       0.8      1.08      2.27e- 2  8.81e-26      9.82
27 mu_0       0.9      1.31      3.86e- 7  1.79e-44     14.7 
[1] "Total run time was 597.113 seconds"
