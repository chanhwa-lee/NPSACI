
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7304"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  2   3   3   1   3   1   1   1   3   4   1   4   2   3   1   3   2   1   4   2 
 71  72  73  75  76  77  78  79  80  81  82  84  85  86  87  88  90  92  93  94 
  1   3   4   4   1   1   4   2   4   1   1   2   4   2   1   2   5   2   1   2 
 95  96  97  98 100 
  2   2   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0431  0.3812  0.6388  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4329 2975 
[1] "treatment indicator table: "

   0    1 
2723 4581 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3559
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3745
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 362.11 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.405 0.0738
 2 mu         0.1   0.2 0.546 0.103 
 3 mu         0.1   0.3 0.573 0.0892
 4 mu         0.1   0.4 0.611 0.0834
 5 mu         0.1   0.5 0.681 0.0938
 6 mu         0.2   0.1 0.332 0.0384
 7 mu         0.2   0.2 0.456 0.0490
 8 mu         0.2   0.3 0.490 0.0458
 9 mu         0.2   0.4 0.528 0.0367
10 mu         0.2   0.5 0.590 0.0385
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.09         0.484 0.0000463      5.57
 2 mu         0.2      1.04         0.935 0.0834         2.94
 3 mu         0.3      1.01         0.974 0.336          1.88
 4 mu         0.4      1.00         0.989 0.522          1.48
 5 mu         0.5      1.01         0.984 0.657          1.56
 6 mu         0.6      1.01         1.01  0.597          1.40
 7 mu         0.7      1.00         1.02  0.567          1.69
 8 mu         0.8      1.01         1.00  0.558          1.58
 9 mu         0.9      0.988        0.981 0.0938         1.65
10 mu_1       0.1      1.10         0.774 0.000121       5.24
11 mu_1       0.2      1.03         0.964 0.0669         2.76
12 mu_1       0.3      1.01         0.995 0.336          1.71
13 mu_1       0.4      0.999        0.993 0.551          1.52
14 mu_1       0.5      1.01         0.976 0.659          1.57
15 mu_1       0.6      1.01         1.01  0.591          1.42
16 mu_1       0.7      1.00         1.02  0.557          1.67
17 mu_1       0.8      1.01         1.01  0.549          1.59
18 mu_1       0.9      0.986        0.963 0.0851         1.66
19 mu_0       0.1      1.09         0.455 0.0000379      5.61
20 mu_0       0.2      1.04         0.949 0.0875         2.99
21 mu_0       0.3      1.01         0.982 0.336          1.95
22 mu_0       0.4      1.00         0.985 0.503          1.51
23 mu_0       0.5      1.01         0.994 0.654          1.54
24 mu_0       0.6      1.01         1.01  0.605          1.37
25 mu_0       0.7      1.00         1.01  0.590          1.72
26 mu_0       0.8      1.01         0.993 0.574          1.54
27 mu_0       0.9      1.00         1.02  0.172          1.58
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.290     7.93e-28  1.20e-66     28.1 
 2 mu         0.2      0.438     1.20e-15  2.07e-43     17.7 
 3 mu         0.3      0.837     2.02e- 8  2.25e-31     35.3 
 4 mu         0.4      1.33      2.78e- 4  6.89e-23     25.4 
 5 mu         0.5      1.15      3.13e- 2  2.33e-16      9.45
 6 mu         0.6      0.924     1.03e- 1  4.33e-11     10.8 
 7 mu         0.7      1.07      5.47e- 2  7.52e-17     12.2 
 8 mu         0.8      1.84      2.65e- 2  1.94e-25     41.8 
 9 mu         0.9      1.39      1.73e- 7  4.45e-44     19.4 
10 mu_1       0.1      0.400     5.44e-27  1.05e-65     38.1 
11 mu_1       0.2      0.436     4.09e-15  1.01e-42     15.5 
12 mu_1       0.3      0.857     4.22e- 8  7.27e-31     33.8 
13 mu_1       0.4      1.37      4.70e- 4  1.67e-22     26.1 
14 mu_1       0.5      1.12      2.92e- 2  4.52e-16      9.09
15 mu_1       0.6      0.918     9.50e- 2  1.17e-11     10.4 
16 mu_1       0.7      1.09      6.43e- 2  1.46e-17     12.2 
17 mu_1       0.8      1.86      2.11e- 2  3.88e-26     43.1 
18 mu_1       0.9      1.37      1.29e- 7  1.32e-44     19.2 
19 mu_0       0.1      0.278     2.65e-28  1.70e-67     27.0 
20 mu_0       0.2      0.439     5.10e-16  7.31e-45     19.1 
21 mu_0       0.3      0.828     1.07e- 8  9.04e-33     35.9 
22 mu_0       0.4      1.30      1.49e- 4  3.23e-24     24.9 
23 mu_0       0.5      1.18      2.80e- 2  1.31e-17      9.81
24 mu_0       0.6      0.933     9.75e- 2  3.05e-12     11.4 
25 mu_0       0.7      1.04      6.52e- 2  2.17e-16     12.2 
26 mu_0       0.8      1.76      4.46e- 2  7.13e-25     36.6 
27 mu_0       0.9      1.54      5.71e- 7  3.26e-43     21.6 
[1] "Total run time was 365.45 seconds"
