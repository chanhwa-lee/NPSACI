
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7689"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  60  61  62  63  64  65  66  68  69  70  71  72 
  4   2   1   3   1   1   1   2   2   4   1   2   3   2   1   1   3   2   3   3 
 73  74  75  77  78  80  81  82  83  84  85  87  88  89  90  91  92  93  94  95 
  2   1   2   3   1   6   1   2   2   3   1   1   3   3   3   3   1   3   2   1 
 97  98  99 100 
  2   4   3   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03325 0.33989 0.60903 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4560 3129 
[1] "treatment indicator table: "

   0    1 
2901 4788 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3932
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 677.483 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.279 0.0526
 2 mu         0.1   0.2 0.353 0.0688
 3 mu         0.1   0.3 0.413 0.0764
 4 mu         0.1   0.4 0.471 0.104 
 5 mu         0.1   0.5 0.539 0.0987
 6 mu         0.2   0.1 0.337 0.0331
 7 mu         0.2   0.2 0.431 0.0454
 8 mu         0.2   0.3 0.507 0.0486
 9 mu         0.2   0.4 0.582 0.0782
10 mu         0.2   0.5 0.653 0.0695
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.780       0.107   1.09e-13     12.9 
 2 mu         0.2      1.04        0.886   1.65e- 5      6.24
 3 mu         0.3      0.999       0.937   3.08e- 2      2.24
 4 mu         0.4      0.951       0.938   2.67e- 1      1.51
 5 mu         0.5      0.990       0.980   6.06e- 1      1.67
 6 mu         0.6      1.00        0.973   6.09e- 1      1.67
 7 mu         0.7      0.980       0.961   5.50e- 1      1.62
 8 mu         0.8      0.960       0.965   2.91e- 1      1.61
 9 mu         0.9      0.984       0.984   7.73e- 2      2.23
10 mu_1       0.1      0.816       0.210   4.15e-13     12.5 
11 mu_1       0.2      1.05        0.908   3.17e- 5      6.40
12 mu_1       0.3      0.991       0.955   4.09e- 2      2.17
13 mu_1       0.4      0.952       0.938   2.99e- 1      1.53
14 mu_1       0.5      0.991       0.971   6.08e- 1      1.63
15 mu_1       0.6      1.00        0.974   6.04e- 1      1.67
16 mu_1       0.7      0.979       0.961   5.45e- 1      1.64
17 mu_1       0.8      0.961       0.958   2.85e- 1      1.62
18 mu_1       0.9      0.982       0.975   7.26e- 2      2.28
19 mu_0       0.1      0.776       0.0952  7.52e-14     13.0 
20 mu_0       0.2      1.04        0.894   1.26e- 5      6.40
21 mu_0       0.3      1.00        0.944   2.65e- 2      2.27
22 mu_0       0.4      0.950       0.942   2.46e- 1      1.54
23 mu_0       0.5      0.989       0.994   5.94e- 1      1.70
24 mu_0       0.6      1.00        0.978   6.15e- 1      1.67
25 mu_0       0.7      0.984       0.964   5.60e- 1      1.58
26 mu_0       0.8      0.959       0.956   3.16e- 1      1.62
27 mu_0       0.9      1.01        0.997   1.20e- 1      1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.204     5.48e-27  3.28e-89     11.7 
 2 mu         0.2      3.08      1.06e-14  3.65e-60    149.  
 3 mu         0.3      1.32      8.26e- 8  2.94e-43     38.2 
 4 mu         0.4      0.854     9.49e- 4  2.44e-31     11.7 
 5 mu         0.5      1.04      5.51e- 2  3.54e-22      8.30
 6 mu         0.6      1.23      3.99e- 1  8.70e-15      8.20
 7 mu         0.7      1.59      4.13e- 1  8.62e-17     15.9 
 8 mu         0.8      1.96      2.78e- 2  2.27e-27     40.5 
 9 mu         0.9      1.79      6.22e- 8  1.82e-46     62.7 
10 mu_1       0.1      0.396     3.40e-26  3.18e-88     23.0 
11 mu_1       0.2      3.09      3.44e-14  1.77e-59    147.  
12 mu_1       0.3      1.16      1.84e- 7  9.51e-43     35.3 
13 mu_1       0.4      0.870     1.49e- 3  5.91e-31     11.7 
14 mu_1       0.5      1.04      7.33e- 2  6.88e-22      8.75
15 mu_1       0.6      1.26      3.94e- 1  1.41e-14      8.60
16 mu_1       0.7      1.59      4.44e- 1  2.94e-17     16.0 
17 mu_1       0.8      1.95      2.35e- 2  6.76e-28     41.2 
18 mu_1       0.9      1.87      4.58e- 8  4.83e-47     67.7 
19 mu_0       0.1      0.183     2.32e-27  1.09e-90     10.4 
20 mu_0       0.2      3.07      5.15e-15  1.37e-61    150.  
21 mu_0       0.3      1.39      3.87e- 8  1.26e-44     39.4 
22 mu_0       0.4      0.843     5.89e- 4  1.22e-32     11.8 
23 mu_0       0.5      1.03      4.64e- 2  2.13e-23      7.84
24 mu_0       0.6      1.19      3.27e- 1  6.52e-16      7.59
25 mu_0       0.7      1.59      4.62e- 1  2.19e-16     15.6 
26 mu_0       0.8      1.98      1.63e- 2  8.63e-27     37.5 
27 mu_0       0.9      1.05      2.10e- 7  1.39e-45     24.7 
[1] "Total run time was 683.172 seconds"
