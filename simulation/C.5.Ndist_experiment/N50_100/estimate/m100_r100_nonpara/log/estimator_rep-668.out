
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7469"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  60  61  62  63  64  65  66  67  68  69  70  71  72 
  1   3   2   4   1   4   2   2   3   1   3   6   3   1   2   1   2   1   5   1 
 73  74  75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  92  94  96 
  2   2   3   1   2   2   1   1   1   2   4   1   2   1   1   5   1   7   3   2 
 97  98  99 100 
  1   3   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0385  0.3672  0.6264  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4361 3108 
[1] "treatment indicator table: "

   0    1 
2677 4792 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3800
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3669
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 480.006 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.295 0.0781
 2 mu         0.1   0.2 0.405 0.102 
 3 mu         0.1   0.3 0.483 0.113 
 4 mu         0.1   0.4 0.502 0.118 
 5 mu         0.1   0.5 0.494 0.133 
 6 mu         0.2   0.1 0.334 0.0555
 7 mu         0.2   0.2 0.449 0.0742
 8 mu         0.2   0.3 0.532 0.0808
 9 mu         0.2   0.4 0.564 0.0823
10 mu         0.2   0.5 0.568 0.0930
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.775        0.184 0.00000259      7.46
 2 mu         0.2      0.931        0.851 0.0366          2.52
 3 mu         0.3      0.998        1.01  0.215           2.24
 4 mu         0.4      0.994        0.971 0.516           1.59
 5 mu         0.5      0.992        0.988 0.635           1.59
 6 mu         0.6      1.00         0.991 0.766           1.45
 7 mu         0.7      0.994        1.01  0.557           1.34
 8 mu         0.8      0.988        0.986 0.654           1.51
 9 mu         0.9      1.01         1.03  0.241           1.81
10 mu_1       0.1      0.811        0.298 0.00000723      5.15
11 mu_1       0.2      0.946        0.873 0.0603          2.48
12 mu_1       0.3      1.00         0.977 0.231           2.33
13 mu_1       0.4      0.993        0.984 0.525           1.58
14 mu_1       0.5      0.994        0.987 0.641           1.61
15 mu_1       0.6      1.00         0.993 0.768           1.44
16 mu_1       0.7      0.994        1.01  0.553           1.37
17 mu_1       0.8      0.988        0.986 0.647           1.49
18 mu_1       0.9      1.01         1.03  0.235           1.81
19 mu_0       0.1      0.770        0.169 0.00000207      7.72
20 mu_0       0.2      0.927        0.850 0.0307          2.57
21 mu_0       0.3      0.997        1.02  0.208           2.20
22 mu_0       0.4      0.995        0.964 0.510           1.62
23 mu_0       0.5      0.991        0.985 0.628           1.58
24 mu_0       0.6      1.01         0.989 0.741           1.47
25 mu_0       0.7      0.994        1.01  0.566           1.27
26 mu_0       0.8      0.988        0.984 0.681           1.56
27 mu_0       0.9      1.01         1.02  0.179           1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000811     1.69e-28  2.80e-80    0.0425
 2 mu         0.2   0.529        1.12e-15  5.41e-54   19.6   
 3 mu         0.3   0.952        1.28e- 8  9.94e-39   21.0   
 4 mu         0.4   0.830        4.20e- 4  5.30e-28   13.4   
 5 mu         0.5   1.30         2.99e- 2  8.62e-20   11.8   
 6 mu         0.6   1.19         1.71e- 1  3.28e-13    7.48  
 7 mu         0.7   1.11         4.20e- 1  3.86e-20    8.27  
 8 mu         0.8   1.06         3.82e- 2  2.30e-32    8.45  
 9 mu         0.9   1.33         1.25e- 6  2.28e-54   38.6   
10 mu_1       0.1   0.00198      1.11e-27  2.68e-79    0.106 
11 mu_1       0.2   0.654        3.88e-15  2.59e-53   24.1   
12 mu_1       0.3   0.925        2.74e- 8  3.17e-38   17.5   
13 mu_1       0.4   0.865        7.02e- 4  1.27e-27   14.9   
14 mu_1       0.5   1.31         3.54e- 2  1.65e-19   11.0   
15 mu_1       0.6   1.19         1.69e- 1  5.23e-13    7.48  
16 mu_1       0.7   1.10         4.53e- 1  1.27e-20    8.17  
17 mu_1       0.8   1.06         3.03e- 2  6.60e-33    8.47  
18 mu_1       0.9   1.34         8.84e- 7  5.83e-55   39.4   
19 mu_0       0.1   0.000681     6.39e-29  1.35e-81    0.0354
20 mu_0       0.2   0.498        4.76e-16  2.94e-55   18.7   
21 mu_0       0.3   0.963        6.57e- 9  6.18e-40   22.5   
22 mu_0       0.4   0.806        2.33e- 4  3.84e-29   12.4   
23 mu_0       0.5   1.29         1.95e- 2  7.50e-21   12.7   
24 mu_0       0.6   1.20         1.66e- 1  3.57e-14    7.48  
25 mu_0       0.7   1.14         2.88e- 1  9.90e-20    9.37  
26 mu_0       0.8   1.06         5.10e- 2  8.84e-32    8.36  
27 mu_0       0.9   1.22         4.11e- 6  1.76e-53   32.2   
[1] "Total run time was 484.068 seconds"
