
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7505"
[1] "cluster size dist'n: "

 50  51  53  54  56  57  58  59  60  61  63  64  65  67  68  69  70  71  73  74 
  4   2   7   2   5   1   4   1   1   1   2   2   2   2   1   2   1   2   1   1 
 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  5   1   1   4   4   5   1   3   2   2   2   1   2   1   4   5   1   1   2   1 
 98  99 100 
  2   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03074 0.32236 0.59319 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4445 3060 
[1] "treatment indicator table: "

   0    1 
2853 4652 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3831
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3674
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 434.8 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.235 0.0529
 2 mu         0.1   0.2 0.296 0.0554
 3 mu         0.1   0.3 0.374 0.0501
 4 mu         0.1   0.4 0.415 0.0549
 5 mu         0.1   0.5 0.437 0.0677
 6 mu         0.2   0.1 0.361 0.0445
 7 mu         0.2   0.2 0.452 0.0539
 8 mu         0.2   0.3 0.528 0.0486
 9 mu         0.2   0.4 0.590 0.0533
10 mu         0.2   0.5 0.619 0.0508
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.719        0.419  5.27e-10      5.92
 2 mu         0.2      1.01         0.913  9.89e- 4      3.07
 3 mu         0.3      0.981        0.935  1.36e- 1      2.22
 4 mu         0.4      1.01         1.01   5.05e- 1      1.61
 5 mu         0.5      1.01         0.990  5.74e- 1      1.47
 6 mu         0.6      1.00         0.987  6.87e- 1      1.44
 7 mu         0.7      0.988        0.985  6.77e- 1      1.34
 8 mu         0.8      0.975        0.976  3.86e- 1      1.63
 9 mu         0.9      0.988        0.955  1.34e- 3      1.95
10 mu_1       0.1      0.814        0.537  1.80e- 9      7.68
11 mu_1       0.2      1.01         0.971  1.69e- 3      3.26
12 mu_1       0.3      0.982        0.937  1.64e- 1      2.05
13 mu_1       0.4      1.01         1.01   4.97e- 1      1.61
14 mu_1       0.5      1.01         0.988  5.91e- 1      1.46
15 mu_1       0.6      1.00         0.988  6.87e- 1      1.41
16 mu_1       0.7      0.987        0.980  6.70e- 1      1.35
17 mu_1       0.8      0.976        0.978  3.77e- 1      1.62
18 mu_1       0.9      0.988        0.954  1.18e- 3      2.01
19 mu_0       0.1      0.709        0.402  3.86e-10      5.72
20 mu_0       0.2      1.01         0.911  8.13e- 4      3.27
21 mu_0       0.3      0.980        0.936  1.24e- 1      2.29
22 mu_0       0.4      1.01         1.01   4.92e- 1      1.60
23 mu_0       0.5      1.01         1.00   5.56e- 1      1.50
24 mu_0       0.6      1.00         0.998  6.83e- 1      1.47
25 mu_0       0.7      0.990        0.989  6.95e- 1      1.34
26 mu_0       0.8      0.971        0.965  4.22e- 1      1.68
27 mu_0       0.9      0.991        0.962  2.80e- 3      2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0308     4.13e-26  8.63e-81      2.96
 2 mu         0.2     0.593      2.03e-13  1.88e-54     23.0 
 3 mu         0.3     1.00       3.18e- 7  3.94e-39     22.6 
 4 mu         0.4     1.40       9.75e- 4  2.45e-28     25.1 
 5 mu         0.5     1.26       7.83e- 2  4.78e-20      9.43
 6 mu         0.6     1.12       2.63e- 1  1.21e-14     12.1 
 7 mu         0.7     1.09       2.19e- 1  6.93e-23     12.0 
 8 mu         0.8     1.29       2.79e- 3  4.78e-35      9.86
 9 mu         0.9     1.44       2.19e- 8  1.48e-56     67.1 
10 mu_1       0.1     0.0530     2.54e-25  8.35e-80      4.98
11 mu_1       0.2     0.693      7.03e-13  9.07e-54     27.3 
12 mu_1       0.3     1.01       6.77e- 7  1.27e-38     21.2 
13 mu_1       0.4     1.42       1.54e- 3  5.92e-28     26.4 
14 mu_1       0.5     1.24       9.53e- 2  9.25e-20      8.95
15 mu_1       0.6     1.10       2.54e- 1  3.39e-15     11.5 
16 mu_1       0.7     1.09       2.39e- 1  1.67e-23     11.7 
17 mu_1       0.8     1.28       2.46e- 3  1.01e-35      9.94
18 mu_1       0.9     1.50       1.50e- 8  2.77e-57     70.8 
19 mu_0       0.1     0.0284     1.76e-26  0             2.73
20 mu_0       0.2     0.568      7.79e-14  0            21.9 
21 mu_0       0.3     0.998      1.63e- 7  0            23.3 
22 mu_0       0.4     1.38       6.00e- 4  0            24.2 
23 mu_0       0.5     1.28       6.63e- 2  0             9.90
24 mu_0       0.6     1.14       2.35e- 1  0            12.9 
25 mu_0       0.7     1.06       2.81e- 1  0            12.8 
26 mu_0       0.8     1.32       2.80e- 3  0             9.52
27 mu_0       0.9     0.870      4.30e- 8  0            34.1 
[1] "Total run time was 438.464 seconds"
