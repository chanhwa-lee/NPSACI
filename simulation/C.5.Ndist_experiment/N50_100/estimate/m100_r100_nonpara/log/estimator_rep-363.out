
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7421"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  71  72 
  1   2   1   1   1   3   1   4   2   4   1   4   2   3   3   3   4   4   4   3 
 74  75  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  94  95  96 
  2   2   4   3   2   1   2   2   5   3   1   1   1   2   1   1   2   2   1   2 
 97  98  99 100 
  2   1   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02754 0.33387 0.61137 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4375 3046 
[1] "treatment indicator table: "

   0    1 
2784 4637 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3859
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3562
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 420.571 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.460 0.0737
 2 mu         0.1   0.2 0.603 0.0954
 3 mu         0.1   0.3 0.662 0.103 
 4 mu         0.1   0.4 0.701 0.112 
 5 mu         0.1   0.5 0.810 0.135 
 6 mu         0.2   0.1 0.355 0.0267
 7 mu         0.2   0.2 0.475 0.0329
 8 mu         0.2   0.3 0.525 0.0338
 9 mu         0.2   0.4 0.561 0.0451
10 mu         0.2   0.5 0.631 0.0435
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.18         0.334 0.00000331      9.52
 2 mu         0.2      1.01         0.968 0.0754          2.56
 3 mu         0.3      1.04         1.04  0.458           1.75
 4 mu         0.4      1.01         0.983 0.546           1.53
 5 mu         0.5      0.975        0.983 0.632           1.48
 6 mu         0.6      0.966        0.978 0.650           1.41
 7 mu         0.7      1.00         0.998 0.620           1.51
 8 mu         0.8      1.01         1.01  0.574           1.52
 9 mu         0.9      1.04         1.01  0.335           1.92
10 mu_1       0.1      1.17         0.511 0.00000952      9.07
11 mu_1       0.2      1.01         0.976 0.112           2.37
12 mu_1       0.3      1.04         1.05  0.437           1.70
13 mu_1       0.4      1.01         1.00  0.556           1.52
14 mu_1       0.5      0.972        0.974 0.647           1.49
15 mu_1       0.6      0.968        0.976 0.646           1.41
16 mu_1       0.7      1.00         0.998 0.615           1.52
17 mu_1       0.8      1.01         1.01  0.552           1.54
18 mu_1       0.9      1.04         1.00  0.331           1.94
19 mu_0       0.1      1.18         0.313 0.00000262      9.67
20 mu_0       0.2      1.01         0.986 0.0664          2.61
21 mu_0       0.3      1.04         1.03  0.468           1.78
22 mu_0       0.4      1.01         1.01  0.540           1.53
23 mu_0       0.5      0.977        0.986 0.607           1.46
24 mu_0       0.6      0.964        0.971 0.647           1.42
25 mu_0       0.7      0.999        0.991 0.633           1.48
26 mu_0       0.8      1.01         1.01  0.579           1.46
27 mu_0       0.9      1.05         1.03  0.326           1.94
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.558     1.14e-26  1.17e-74     52.7 
 2 mu         0.2      1.64      1.84e-14  2.22e-48     45.7 
 3 mu         0.3      1.37      3.13e- 8  2.75e-33     47.7 
 4 mu         0.4      1.04      2.98e- 4  1.26e-23     26.8 
 5 mu         0.5      0.760     3.81e- 2  1.83e-16      6.31
 6 mu         0.6      1.20      1.22e- 1  1.09e-13     13.9 
 7 mu         0.7      1.52      2.48e- 1  3.37e-21     31.4 
 8 mu         0.8      1.25      2.52e- 2  3.50e-32      8.60
 9 mu         0.9      1.49      9.97e- 8  1.73e-51     28.3 
10 mu_1       0.1      0.814     7.92e-26  1.05e-73     75.2 
11 mu_1       0.2      1.60      5.96e-14  9.99e-48     44.6 
12 mu_1       0.3      1.38      7.22e- 8  8.23e-33     53.0 
13 mu_1       0.4      0.989     3.68e- 4  2.95e-23     22.3 
14 mu_1       0.5      0.781     4.66e- 2  3.44e-16      6.07
15 mu_1       0.6      1.23      1.19e- 1  2.59e-14     15.5 
16 mu_1       0.7      1.51      2.46e- 1  6.88e-22     30.0 
17 mu_1       0.8      1.25      2.09e- 2  6.24e-33      8.63
18 mu_1       0.9      1.48      6.67e- 8  2.75e-52     28.3 
19 mu_0       0.1      0.530     3.93e-27  1.31e-75     50.2 
20 mu_0       0.2      1.65      8.12e-15  2.80e-49     48.6 
21 mu_0       0.3      1.36      1.38e- 8  3.96e-34     45.4 
22 mu_0       0.4      1.08      1.70e- 4  1.26e-24     29.8 
23 mu_0       0.5      0.738     2.44e- 2  2.20e-17      6.55
24 mu_0       0.6      1.16      8.45e- 2  2.33e-13     11.5 
25 mu_0       0.7      1.54      3.48e- 1  9.63e-21     34.5 
26 mu_0       0.8      1.27      3.28e- 2  1.50e-31      9.28
27 mu_0       0.9      1.62      4.10e- 7  1.48e-50     28.6 
[1] "Total run time was 425.475 seconds"
