
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7367"
[1] "cluster size dist'n: "

51 52 53 54 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 
 3  3  5  3  2  2  1  1  2  2  3  3  4  2  1  1  4  1  5  2  1  2  2  1  1  2 
78 79 81 82 83 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 1  1  2  3  2  2  5  2  3  1  3  1  2  1  3  3  1  2  2  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02665 0.32244 0.57342 0.96435 6.00000 
[1] "event indicator table: "

   0    1 
4289 3078 
[1] "treatment indicator table: "

   0    1 
2933 4434 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3744
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3623
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 419.339 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0713
 2 mu         0.1   0.2 0.456 0.110 
 3 mu         0.1   0.3 0.499 0.123 
 4 mu         0.1   0.4 0.523 0.132 
 5 mu         0.1   0.5 0.590 0.138 
 6 mu         0.2   0.1 0.315 0.0271
 7 mu         0.2   0.2 0.419 0.0512
 8 mu         0.2   0.3 0.461 0.0532
 9 mu         0.2   0.4 0.498 0.0490
10 mu         0.2   0.5 0.562 0.0508
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.10         0.316 0.000000558     15.2 
 2 mu         0.2      1.03         0.972 0.0292           2.67
 3 mu         0.3      0.978        0.945 0.273            1.85
 4 mu         0.4      0.983        0.963 0.417            1.77
 5 mu         0.5      0.995        0.967 0.647            1.55
 6 mu         0.6      0.970        0.958 0.702            1.54
 7 mu         0.7      0.977        0.967 0.536            1.52
 8 mu         0.8      0.975        0.947 0.461            1.99
 9 mu         0.9      0.932        0.911 0.206            1.97
10 mu_1       0.1      1.06         0.431 0.00000158       9.13
11 mu_1       0.2      1.03         1.00  0.0422           2.43
12 mu_1       0.3      0.973        0.939 0.270            1.81
13 mu_1       0.4      0.987        0.970 0.442            1.78
14 mu_1       0.5      0.993        0.973 0.656            1.50
15 mu_1       0.6      0.971        0.966 0.696            1.54
16 mu_1       0.7      0.976        0.966 0.528            1.52
17 mu_1       0.8      0.975        0.939 0.446            1.99
18 mu_1       0.9      0.931        0.904 0.199            1.97
19 mu_0       0.1      1.10         0.297 0.000000445     15.8 
20 mu_0       0.2      1.03         0.970 0.0259           2.73
21 mu_0       0.3      0.980        0.953 0.274            1.89
22 mu_0       0.4      0.981        0.959 0.400            1.77
23 mu_0       0.5      0.998        0.982 0.637            1.60
24 mu_0       0.6      0.969        0.948 0.710            1.55
25 mu_0       0.7      0.980        0.970 0.555            1.51
26 mu_0       0.8      0.972        0.958 0.513            1.97
27 mu_0       0.9      0.946        0.947 0.236            2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000273     6.71e-24  3.86e-78    0.0258
 2 mu         0.2   0.246        5.51e-12  5.90e-53   13.0   
 3 mu         0.3   1.28         8.89e- 6  2.80e-38   20.2   
 4 mu         0.4   1.04         1.35e- 2  6.42e-28   12.4   
 5 mu         0.5   1.44         6.47e- 2  6.16e-20   13.0   
 6 mu         0.6   0.944        2.96e- 1  1.77e-13    7.40  
 7 mu         0.7   0.973        1.07e- 1  2.08e-14    6.39  
 8 mu         0.8   1.21         2.23e- 3  1.04e-23   13.7   
 9 mu         0.9   1.05         4.69e- 9  6.01e-42   35.7   
10 mu_1       0.1   0.000674     4.06e-23  3.77e-77    0.0628
11 mu_1       0.2   0.332        1.50e-11  2.88e-52   15.8   
12 mu_1       0.3   1.30         1.86e- 5  9.10e-38   19.2   
13 mu_1       0.4   1.05         2.02e- 2  1.57e-27   13.8   
14 mu_1       0.5   1.45         6.93e- 2  1.20e-19   13.3   
15 mu_1       0.6   0.915        3.18e- 1  2.87e-13    6.81  
16 mu_1       0.7   0.982        8.57e- 2  7.24e-15    6.49  
17 mu_1       0.8   1.21         1.87e- 3  3.27e-24   13.6   
18 mu_1       0.9   1.05         3.16e- 9  1.91e-42   36.0   
19 mu_0       0.1   0.000228     2.49e-24  9.97e-80    0.0217
20 mu_0       0.2   0.225        3.13e-12  1.71e-54   12.3   
21 mu_0       0.3   1.27         4.73e- 6  9.29e-40   20.6   
22 mu_0       0.4   1.03         9.07e- 3  2.49e-29   11.4   
23 mu_0       0.5   1.43         4.77e- 2  2.86e-21   12.7   
24 mu_0       0.6   0.987        2.58e- 1  1.03e-14    8.28  
25 mu_0       0.7   0.951        1.37e- 1  5.25e-14    6.17  
26 mu_0       0.8   1.19         4.59e- 3  3.70e-23   14.1   
27 mu_0       0.9   1.02         1.91e- 8  4.29e-41   32.4   
[1] "Total run time was 422.927 seconds"
