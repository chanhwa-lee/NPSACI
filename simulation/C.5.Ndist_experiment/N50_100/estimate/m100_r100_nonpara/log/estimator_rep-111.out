
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7577"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  64  65  67  69  70  73  74  75 
  3   1   2   2   2   2   1   4   1   3   3   5   2   1   2   4   2   2   2   3 
 76  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  94  95  96  97 
  1   2   1   5   1   7   3   2   1   2   2   3   2   2   3   1   1   2   1   5 
 98  99 100 
  2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04353 0.36009 0.63070 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4442 3135 
[1] "treatment indicator table: "

   0    1 
2924 4653 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3713
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3864
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 670.155 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.533 0.0975
 2 mu         0.1   0.2 0.566 0.0900
 3 mu         0.1   0.3 0.676 0.112 
 4 mu         0.1   0.4 0.750 0.128 
 5 mu         0.1   0.5 0.770 0.130 
 6 mu         0.2   0.1 0.423 0.0545
 7 mu         0.2   0.2 0.460 0.0305
 8 mu         0.2   0.3 0.539 0.0439
 9 mu         0.2   0.4 0.607 0.0486
10 mu         0.2   0.5 0.626 0.0457
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.18         0.334 0.0000529     11.3 
 2 mu         0.2      1.06         0.946 0.0914         3.27
 3 mu         0.3      0.964        0.939 0.286          1.86
 4 mu         0.4      1.00         1.01  0.533          1.58
 5 mu         0.5      0.996        0.974 0.497          1.80
 6 mu         0.6      1.00         0.986 0.595          1.50
 7 mu         0.7      1.02         0.984 0.522          1.46
 8 mu         0.8      0.993        0.993 0.472          1.70
 9 mu         0.9      0.965        0.918 0.223          1.90
10 mu_1       0.1      1.19         0.512 0.000136      11.7 
11 mu_1       0.2      1.04         0.893 0.122          3.06
12 mu_1       0.3      0.965        0.944 0.299          1.74
13 mu_1       0.4      1.00         1.01  0.541          1.59
14 mu_1       0.5      0.995        0.972 0.513          1.82
15 mu_1       0.6      1.00         0.997 0.591          1.51
16 mu_1       0.7      1.02         0.987 0.510          1.47
17 mu_1       0.8      0.992        0.990 0.479          1.72
18 mu_1       0.9      0.964        0.912 0.213          1.91
19 mu_0       0.1      1.18         0.314 0.0000437     11.2 
20 mu_0       0.2      1.06         0.946 0.0838         3.36
21 mu_0       0.3      0.964        0.924 0.280          1.91
22 mu_0       0.4      1.00         1.00  0.527          1.57
23 mu_0       0.5      0.997        0.973 0.482          1.78
24 mu_0       0.6      1.00         0.985 0.603          1.49
25 mu_0       0.7      1.02         0.991 0.550          1.47
26 mu_0       0.8      0.996        0.989 0.445          1.65
27 mu_0       0.9      0.969        0.905 0.312          1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00837     1.48e-26  4.87e-74     0.801
 2 mu         0.2    0.369       1.26e-14  2.61e-49    14.6  
 3 mu         0.3    0.964       6.34e- 8  5.53e-35    19.7  
 4 mu         0.4    1.13        7.32e- 4  6.00e-25     8.14 
 5 mu         0.5    0.987       5.96e- 2  2.67e-17     8.83 
 6 mu         0.6    0.743       1.13e- 1  3.26e-11     5.47 
 7 mu         0.7    0.966       1.05e- 1  2.33e-16     9.35 
 8 mu         0.8    0.961       5.45e- 3  1.57e-27     6.45 
 9 mu         0.9    1.90        1.94e- 9  7.11e-48    65.2  
10 mu_1       0.1    0.0175      9.33e-26  4.60e-73     1.66 
11 mu_1       0.2    0.449       4.43e-14  1.23e-48    15.1  
12 mu_1       0.3    0.982       1.37e- 7  1.74e-34    17.4  
13 mu_1       0.4    1.15        1.12e- 3  1.42e-24     9.09 
14 mu_1       0.5    0.952       8.01e- 2  5.03e-17     8.39 
15 mu_1       0.6    0.749       1.20e- 1  5.13e-11     5.17 
16 mu_1       0.7    0.973       9.44e- 2  8.82e-17     9.76 
17 mu_1       0.8    0.964       4.23e- 3  5.21e-28     6.48 
18 mu_1       0.9    1.92        1.35e- 9  2.10e-48    66.5  
19 mu_0       0.1    0.00736     5.74e-27  3.08e-75     0.706
20 mu_0       0.2    0.349       4.73e-15  1.86e-50    14.4  
21 mu_0       0.3    0.956       3.26e- 8  4.49e-36    20.6  
22 mu_0       0.4    1.12        4.69e- 4  5.68e-26     8.30 
23 mu_0       0.5    1.02        4.31e- 2  3.03e-18     9.27 
24 mu_0       0.6    0.733       1.38e- 1  4.63e-12     5.93 
25 mu_0       0.7    0.949       1.02e- 1  5.70e-16     9.93 
26 mu_0       0.8    0.952       6.87e- 3  5.77e-27     6.89 
27 mu_0       0.9    1.76        7.48e- 9  5.22e-47    53.7  
[1] "Total run time was 673.742 seconds"
