
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7432"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  58  59  60  61  62  63  65  66  67  68  70  71  72  74 
  1   5   1   3   2   5   3   2   2   2   2   2   2   2   2   3   1   1   3   1 
 75  76  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  96  97 
  2   1   3   2   5   2   4   3   3   2   3   6   3   1   1   2   3   2   1   3 
 98  99 100 
  1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04153 0.34997 0.61337 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4396 3036 
[1] "treatment indicator table: "

   0    1 
2818 4614 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3613
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3819
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 393.159 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.287 0.0397
 2 mu         0.1   0.2 0.426 0.0672
 3 mu         0.1   0.3 0.529 0.0862
 4 mu         0.1   0.4 0.519 0.0715
 5 mu         0.1   0.5 0.557 0.0730
 6 mu         0.2   0.1 0.302 0.0230
 7 mu         0.2   0.2 0.436 0.0456
 8 mu         0.2   0.3 0.541 0.0615
 9 mu         0.2   0.4 0.542 0.0438
10 mu         0.2   0.5 0.577 0.0382
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.902        0.695 0.00000284      5.57
 2 mu         0.2      0.971        0.913 0.0517          2.37
 3 mu         0.3      1.05         1.03  0.411           2.19
 4 mu         0.4      1.02         0.996 0.586           1.64
 5 mu         0.5      0.994        1.02  0.604           1.51
 6 mu         0.6      0.998        0.982 0.584           1.42
 7 mu         0.7      0.994        0.999 0.579           1.43
 8 mu         0.8      0.976        0.970 0.347           1.50
 9 mu         0.9      1.06         1.03  0.124           2.13
10 mu_1       0.1      0.876        0.699 0.00000831      4.53
11 mu_1       0.2      0.983        0.949 0.0757          2.10
12 mu_1       0.3      1.05         1.01  0.454           2.06
13 mu_1       0.4      1.02         1.00  0.599           1.64
14 mu_1       0.5      0.993        1.01  0.601           1.51
15 mu_1       0.6      0.998        0.986 0.579           1.43
16 mu_1       0.7      0.993        0.997 0.570           1.41
17 mu_1       0.8      0.976        0.975 0.337           1.52
18 mu_1       0.9      1.06         1.02  0.117           2.15
19 mu_0       0.1      0.905        0.690 0.00000223      5.81
20 mu_0       0.2      0.968        0.916 0.0456          2.43
21 mu_0       0.3      1.05         1.03  0.393           2.24
22 mu_0       0.4      1.02         1.00  0.577           1.64
23 mu_0       0.5      0.996        1.02  0.607           1.51
24 mu_0       0.6      0.998        0.972 0.575           1.41
25 mu_0       0.7      0.995        0.996 0.601           1.47
26 mu_0       0.8      0.976        0.975 0.387           1.55
27 mu_0       0.9      1.04         1.02  0.134           2.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0365     1.89e-25  1.64e-77      2.53
 2 mu         0.2     0.657      4.82e-13  1.41e-50     18.0 
 3 mu         0.3     0.948      2.09e- 6  4.48e-35     31.5 
 4 mu         0.4     0.790      1.06e- 2  2.62e-24      6.23
 5 mu         0.5     1.16       4.25e- 2  3.35e-16     10.0 
 6 mu         0.6     1.05       9.20e- 2  5.30e-10     11.1 
 7 mu         0.7     0.938      4.76e- 2  6.03e-16      7.11
 8 mu         0.8     1.32       6.19e- 3  8.22e-26     14.2 
 9 mu         0.9     2.40       7.70e- 9  1.67e-45     31.0 
10 mu_1       0.1     0.0710     1.28e-24  1.50e-76      4.61
11 mu_1       0.2     0.742      1.41e-12  6.41e-50     19.3 
12 mu_1       0.3     0.903      4.09e- 6  1.36e-34     29.2 
13 mu_1       0.4     0.831      8.95e- 3  5.96e-24      7.35
14 mu_1       0.5     1.16       4.53e- 2  6.09e-16      9.44
15 mu_1       0.6     1.04       9.69e- 2  1.60e-10     10.8 
16 mu_1       0.7     0.939      4.16e- 2  1.57e-16      7.25
17 mu_1       0.8     1.34       4.90e- 3  2.86e-26     14.0 
18 mu_1       0.9     2.40       5.60e- 9  5.18e-46     32.0 
19 mu_0       0.1     0.0327     6.75e-26  1.64e-78      2.30
20 mu_0       0.2     0.636      2.50e-13  1.59e-51     18.4 
21 mu_0       0.3     0.967      1.24e- 6  5.76e-36     32.5 
22 mu_0       0.4     0.763      6.91e- 3  3.93e-25      6.06
23 mu_0       0.5     1.16       2.92e- 2  6.02e-17     10.6 
24 mu_0       0.6     1.07       1.15e- 1  1.62e-10     11.4 
25 mu_0       0.7     0.936      4.42e- 2  1.65e-15      6.77
26 mu_0       0.8     1.26       1.13e- 2  2.97e-25     14.9 
27 mu_0       0.9     2.38       2.66e- 8  1.21e-44     32.3 
[1] "Total run time was 396.322 seconds"
