
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7286"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  64  65  66  68  69  70  71  73 
  3   4   2   4   3   2   1   1   4   3   3   4   3   2   2   2   4   4   1   1 
 75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95 
  3   1   3   2   1   4   2   2   2   3   1   3   1   1   2   2   1   1   1   2 
 96  97  98  99 100 
  1   3   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04068 0.36652 0.63703 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4348 2938 
[1] "treatment indicator table: "

   0    1 
2618 4668 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3590
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3696
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.228 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.401 0.0793
 2 mu         0.1   0.2 0.502 0.0903
 3 mu         0.1   0.3 0.543 0.0964
 4 mu         0.1   0.4 0.585 0.102 
 5 mu         0.1   0.5 0.606 0.106 
 6 mu         0.2   0.1 0.406 0.0452
 7 mu         0.2   0.2 0.496 0.0465
 8 mu         0.2   0.3 0.549 0.0463
 9 mu         0.2   0.4 0.592 0.0476
10 mu         0.2   0.5 0.621 0.0481
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.00         0.298 0.0000000135     12.9 
 2 mu         0.2      1.07         0.973 0.00898           4.01
 3 mu         0.3      1.01         0.964 0.259             1.83
 4 mu         0.4      1.03         1.02  0.388             1.68
 5 mu         0.5      0.984        0.991 0.524             1.51
 6 mu         0.6      0.978        0.983 0.687             1.52
 7 mu         0.7      0.990        0.975 0.526             1.61
 8 mu         0.8      1.03         1.00  0.552             1.57
 9 mu         0.9      1.02         1.04  0.282             1.91
10 mu_1       0.1      1.03         0.427 0.0000000423     10.7 
11 mu_1       0.2      1.06         1.02  0.0143            3.25
12 mu_1       0.3      1.01         0.971 0.236             1.84
13 mu_1       0.4      1.02         1.01  0.393             1.68
14 mu_1       0.5      0.982        0.976 0.527             1.50
15 mu_1       0.6      0.977        0.979 0.677             1.50
16 mu_1       0.7      0.992        0.982 0.525             1.61
17 mu_1       0.8      1.03         1.01  0.544             1.58
18 mu_1       0.9      1.02         1.05  0.269             1.93
19 mu_0       0.1      1.00         0.278 0.0000000103     13.2 
20 mu_0       0.2      1.07         0.986 0.00764           4.20
21 mu_0       0.3      1.01         0.963 0.269             1.83
22 mu_0       0.4      1.03         1.03  0.385             1.69
23 mu_0       0.5      0.986        0.996 0.520             1.52
24 mu_0       0.6      0.978        0.978 0.691             1.54
25 mu_0       0.7      0.985        0.984 0.527             1.59
26 mu_0       0.8      1.03         1.02  0.588             1.59
27 mu_0       0.9      1.00         0.985 0.300             2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.123     2.55e-26  1.37e-83     12.1 
 2 mu         0.2      1.73      1.26e-14  6.69e-57    121.  
 3 mu         0.3      1.53      6.53e- 8  2.41e-41     25.0 
 4 mu         0.4      0.998     6.05e- 4  2.33e-30     10.5 
 5 mu         0.5      1.02      4.29e- 2  6.82e-22      7.13
 6 mu         0.6      1.15      5.72e- 2  4.87e-15      7.60
 7 mu         0.7      0.810     2.65e- 1  2.06e-17      4.62
 8 mu         0.8      1.33      1.48e- 2  7.08e-29      8.36
 9 mu         0.9      1.31      9.47e- 8  1.27e-49     20.7 
10 mu_1       0.1      0.229     1.82e-25  1.34e-82     22.5 
11 mu_1       0.2      1.81      4.43e-14  3.27e-56    112.  
12 mu_1       0.3      1.46      1.40e- 7  7.85e-41     25.6 
13 mu_1       0.4      0.988     9.68e- 4  5.70e-30     11.0 
14 mu_1       0.5      1.04      4.71e- 2  1.33e-21      7.37
15 mu_1       0.6      1.13      5.30e- 2  7.93e-15      7.55
16 mu_1       0.7      0.814     2.33e- 1  7.27e-18      4.52
17 mu_1       0.8      1.33      1.17e- 2  2.19e-29      8.41
18 mu_1       0.9      1.31      6.99e- 8  3.48e-50     20.5 
19 mu_0       0.1      0.111     8.19e-27  3.34e-85     11.0 
20 mu_0       0.2      1.72      4.67e-15  1.84e-58    123.  
21 mu_0       0.3      1.57      3.31e- 8  7.56e-43     25.2 
22 mu_0       0.4      1.00      3.63e- 4  8.54e-32     10.3 
23 mu_0       0.5      1.00      2.74e- 2  3.00e-23      7.59
24 mu_0       0.6      1.18      6.99e- 2  2.67e-16      7.68
25 mu_0       0.7      0.799     2.66e- 1  5.16e-17      5.12
26 mu_0       0.8      1.31      1.78e- 2  2.66e-28      8.26
27 mu_0       0.9      1.36      3.24e- 7  9.53e-49     22.0 
[1] "Total run time was 401.907 seconds"
