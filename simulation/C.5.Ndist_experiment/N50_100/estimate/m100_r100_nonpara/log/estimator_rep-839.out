
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7564"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70  73 
  2   4   2   4   1   1   1   2   3   2   2   2   1   2   2   4   2   3   1   2 
 74  75  76  77  79  80  81  82  84  85  86  87  88  89  90  91  92  93  94  95 
  2   3   2   2   2   5   1   2   1   2   4   1   4   3   1   6   3   2   2   2 
 98 100 
  4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02278 0.31432 0.58186 0.99126 5.33393 
[1] "event indicator table: "

   0    1 
4435 3129 
[1] "treatment indicator table: "

   0    1 
2896 4668 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3711
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3853
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 73"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 381.924 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.294 0.0500
 2 mu         0.1   0.2 0.352 0.0479
 3 mu         0.1   0.3 0.429 0.0771
 4 mu         0.1   0.4 0.509 0.0946
 5 mu         0.1   0.5 0.516 0.0777
 6 mu         0.2   0.1 0.363 0.0323
 7 mu         0.2   0.2 0.444 0.0380
 8 mu         0.2   0.3 0.517 0.0501
 9 mu         0.2   0.4 0.585 0.0592
10 mu         0.2   0.5 0.624 0.0634
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.733        0.271 0.00000237      3.81
 2 mu         0.2      1.02         0.894 0.0124          6.95
 3 mu         0.3      0.976        0.888 0.214           2.14
 4 mu         0.4      1.00         0.980 0.443           1.90
 5 mu         0.5      1.01         0.993 0.605           1.85
 6 mu         0.6      1.04         1.01  0.550           1.58
 7 mu         0.7      1.03         1.03  0.694           1.41
 8 mu         0.8      1.02         1.00  0.509           1.57
 9 mu         0.9      0.991        0.969 0.0602          2.00
10 mu_1       0.1      0.789        0.416 0.00000745      4.79
11 mu_1       0.2      1.02         0.930 0.0202          6.68
12 mu_1       0.3      0.976        0.883 0.250           2.07
13 mu_1       0.4      1.00         0.988 0.440           1.88
14 mu_1       0.5      1.01         0.990 0.579           1.83
15 mu_1       0.6      1.05         1.02  0.566           1.58
16 mu_1       0.7      1.03         1.03  0.689           1.40
17 mu_1       0.8      1.02         1.01  0.511           1.58
18 mu_1       0.9      0.991        0.967 0.0555          2.02
19 mu_0       0.1      0.726        0.255 0.00000180      3.74
20 mu_0       0.2      1.02         0.875 0.0105          7.02
21 mu_0       0.3      0.976        0.895 0.198           2.17
22 mu_0       0.4      0.998        0.980 0.444           1.91
23 mu_0       0.5      1.01         0.998 0.631           1.86
24 mu_0       0.6      1.04         1.01  0.528           1.59
25 mu_0       0.7      1.03         1.03  0.707           1.45
26 mu_0       0.8      1.02         0.970 0.499           1.53
27 mu_0       0.9      0.992        1.00  0.102           1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.226     1.03e-26  7.04e-76      20.8
 2 mu         0.2      1.71      1.31e-14  7.77e-50      59.8
 3 mu         0.3      1.46      2.35e- 8  3.24e-35      29.0
 4 mu         0.4      1.17      3.42e- 4  5.35e-25      22.7
 5 mu         0.5      1.07      1.95e- 2  3.10e-17      13.3
 6 mu         0.6      0.877     6.29e- 2  4.30e-11      14.0
 7 mu         0.7      1.24      7.67e- 2  1.26e-18      19.5
 8 mu         0.8      1.29      1.31e- 2  5.74e-30      19.3
 9 mu         0.9      1.51      1.84e- 8  2.57e-50      27.9
10 mu_1       0.1      0.390     7.04e-26  6.34e-75      35.4
11 mu_1       0.2      1.81      4.47e-14  3.63e-49      50.8
12 mu_1       0.3      1.37      5.13e- 8  1.01e-34      31.5
13 mu_1       0.4      1.17      5.37e- 4  1.25e-24      21.2
14 mu_1       0.5      1.06      1.69e- 2  5.78e-17      13.3
15 mu_1       0.6      0.880     6.58e- 2  1.58e-11      13.9
16 mu_1       0.7      1.25      8.98e- 2  3.97e-19      19.2
17 mu_1       0.8      1.29      1.05e- 2  1.58e-30      19.5
18 mu_1       0.9      1.51      1.22e- 8  6.27e-51      28.3
19 mu_0       0.1      0.208     3.61e-27  7.83e-77      19.2
20 mu_0       0.2      1.69      5.18e-15  6.41e-51      62.1
21 mu_0       0.3      1.50      1.16e- 8  3.05e-36      28.0
22 mu_0       0.4      1.18      2.11e- 4  5.88e-26      23.7
23 mu_0       0.5      1.08      1.66e- 2  4.08e-18      13.3
24 mu_0       0.6      0.872     7.25e- 2  7.19e-12      14.1
25 mu_0       0.7      1.21      8.23e- 2  3.29e-18      20.2
26 mu_0       0.8      1.30      1.55e- 2  2.24e-29      18.7
27 mu_0       0.9      1.49      7.37e- 8  2.00e-49      24.5
[1] "Total run time was 385.345 seconds"
