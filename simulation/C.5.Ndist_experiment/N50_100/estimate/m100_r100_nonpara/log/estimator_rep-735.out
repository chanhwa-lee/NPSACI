
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7537"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  63  64  65  66  67  68  69  70 
  2   1   2   2   2   1   3   1   2   2   3   2   1   3   3   3   3   2   2   4 
 71  72  73  74  75  77  78  81  82  83  84  86  89  90  91  92  93  94  95  96 
  1   1   2   3   2   3   3   3   1   1   4   4   5   2   1   2   2   4   1   1 
 97  98  99 100 
  2   5   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02182 0.30657 0.56486 0.97480 6.00000 
[1] "event indicator table: "

   0    1 
4467 3070 
[1] "treatment indicator table: "

   0    1 
2849 4688 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3901
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3636
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 365.669 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.361 0.0541
 2 mu         0.1   0.2 0.483 0.0677
 3 mu         0.1   0.3 0.533 0.0761
 4 mu         0.1   0.4 0.601 0.0884
 5 mu         0.1   0.5 0.638 0.0954
 6 mu         0.2   0.1 0.363 0.0216
 7 mu         0.2   0.2 0.475 0.0266
 8 mu         0.2   0.3 0.536 0.0309
 9 mu         0.2   0.4 0.601 0.0385
10 mu         0.2   0.5 0.643 0.0436
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.01         0.352 0.000000469      7.45
 2 mu         0.2      1.05         1.05  0.00547          2.47
 3 mu         0.3      0.957        0.961 0.174            1.73
 4 mu         0.4      0.978        0.931 0.483            1.64
 5 mu         0.5      1.01         1.01  0.601            1.61
 6 mu         0.6      1.04         1.02  0.571            1.46
 7 mu         0.7      1.03         1.04  0.699            1.47
 8 mu         0.8      0.984        0.983 0.576            1.51
 9 mu         0.9      0.959        0.960 0.150            1.91
10 mu_1       0.1      1.01         0.496 0.00000157       6.94
11 mu_1       0.2      1.04         1.00  0.00939          2.23
12 mu_1       0.3      0.955        0.959 0.217            1.69
13 mu_1       0.4      0.981        0.948 0.486            1.64
14 mu_1       0.5      1.02         0.997 0.609            1.63
15 mu_1       0.6      1.04         1.03  0.576            1.48
16 mu_1       0.7      1.03         1.03  0.700            1.48
17 mu_1       0.8      0.983        0.984 0.568            1.53
18 mu_1       0.9      0.960        0.956 0.144            1.94
19 mu_0       0.1      1.01         0.344 0.000000347      7.75
20 mu_0       0.2      1.06         1.07  0.00449          2.58
21 mu_0       0.3      0.958        0.951 0.156            1.75
22 mu_0       0.4      0.975        0.929 0.480            1.64
23 mu_0       0.5      1.01         0.994 0.593            1.59
24 mu_0       0.6      1.04         1.01  0.564            1.43
25 mu_0       0.7      1.03         1.04  0.698            1.46
26 mu_0       0.8      0.990        0.987 0.607            1.45
27 mu_0       0.9      0.948        0.949 0.205            1.72
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0133     5.29e-26  1.56e-73      1.31
 2 mu         0.2     0.901      2.79e-14  1.49e-47     49.9 
 3 mu         0.3     1.57       7.10e- 8  1.23e-32     44.8 
 4 mu         0.4     1.17       8.07e- 4  2.60e-22     11.9 
 5 mu         0.5     1.03       5.75e- 2  5.30e-16      7.31
 6 mu         0.6     1.02       1.77e- 1  5.12e-13      8.49
 7 mu         0.7     1.09       1.84e- 1  3.50e-21      7.75
 8 mu         0.8     1.07       1.36e- 2  2.40e-33      6.73
 9 mu         0.9     1.92       8.69e- 8  5.30e-55     42.2 
10 mu_1       0.1     0.0260     3.33e-25  1.40e-72      2.53
11 mu_1       0.2     1.01       8.96e-14  6.69e-47     48.3 
12 mu_1       0.3     1.57       1.48e- 7  3.68e-32     42.0 
13 mu_1       0.4     1.15       1.27e- 3  5.83e-22     11.8 
14 mu_1       0.5     1.02       6.48e- 2  1.04e-15      7.52
15 mu_1       0.6     1.03       1.89e- 1  1.65e-13      8.90
16 mu_1       0.7     1.08       1.69e- 1  9.68e-22      8.11
17 mu_1       0.8     1.08       1.07e- 2  5.82e-34      7.07
18 mu_1       0.9     1.93       6.16e- 8  1.14e-55     42.1 
19 mu_0       0.1     0.0119     1.87e-26  1.77e-74      1.17
20 mu_0       0.2     0.873      1.24e-14  1.90e-48     50.4 
21 mu_0       0.3     1.57       3.80e- 8  1.79e-33     46.0 
22 mu_0       0.4     1.18       4.98e- 4  8.06e-24     12.0 
23 mu_0       0.5     1.04       5.74e- 2  1.60e-17      7.59
24 mu_0       0.6     0.991      1.72e- 1  1.03e-12      7.89
25 mu_0       0.7     1.12       1.68e- 1  9.41e-21      6.92
26 mu_0       0.8     1.05       2.51e- 2  9.70e-33      6.43
27 mu_0       0.9     1.84       3.14e- 7  4.28e-54     43.0 
[1] "Total run time was 368.693 seconds"
