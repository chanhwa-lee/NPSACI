
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7751"
[1] "cluster size dist'n: "

 50  51  52  53  56  58  59  60  61  62  63  64  66  67  68  69  70  73  74  75 
  1   2   3   4   2   2   2   3   2   1   3   1   2   4   2   2   1   1   3   2 
 77  78  79  80  81  82  83  84  85  86  87  88  89  91  92  93  94  95  97  98 
  1   1   3   4   2   3   2   2   1   3   3   1   2   2   4   3   5   5   5   1 
 99 100 
  2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02563 0.31466 0.58049 0.99878 6.00000 
[1] "event indicator table: "

   0    1 
4632 3119 
[1] "treatment indicator table: "

   0    1 
3004 4747 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3885
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3866
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 391.351 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.319 0.107 
 2 mu         0.1   0.2 0.346 0.125 
 3 mu         0.1   0.3 0.364 0.118 
 4 mu         0.1   0.4 0.427 0.117 
 5 mu         0.1   0.5 0.426 0.116 
 6 mu         0.2   0.1 0.366 0.0730
 7 mu         0.2   0.2 0.416 0.0865
 8 mu         0.2   0.3 0.456 0.0705
 9 mu         0.2   0.4 0.535 0.0603
10 mu         0.2   0.5 0.549 0.0510
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.605       0.0118 0.000000235     11.1 
 2 mu         0.2      0.924       0.678  0.0195           3.61
 3 mu         0.3      0.958       0.968  0.378            2.25
 4 mu         0.4      0.990       0.970  0.516            1.80
 5 mu         0.5      1.03        1.02   0.539            1.77
 6 mu         0.6      1.02        1.01   0.712            1.32
 7 mu         0.7      1.00        1.01   0.653            1.32
 8 mu         0.8      0.948       0.921  0.474            1.41
 9 mu         0.9      0.898       0.829  0.0461           2.50
10 mu_1       0.1      0.682       0.0250 0.000000712     10.9 
11 mu_1       0.2      0.916       0.821  0.0318           3.08
12 mu_1       0.3      0.965       0.956  0.333            2.17
13 mu_1       0.4      0.994       0.981  0.527            1.82
14 mu_1       0.5      1.03        1.03   0.548            1.76
15 mu_1       0.6      1.02        1.02   0.709            1.31
16 mu_1       0.7      1.00        1.01   0.657            1.31
17 mu_1       0.8      0.946       0.927  0.462            1.41
18 mu_1       0.9      0.898       0.827  0.0418           2.52
19 mu_0       0.1      0.597       0.0104 0.000000183     11.1 
20 mu_0       0.2      0.926       0.668  0.0165           3.74
21 mu_0       0.3      0.955       0.963  0.398            2.29
22 mu_0       0.4      0.987       0.963  0.508            1.78
23 mu_0       0.5      1.03        1.02   0.529            1.78
24 mu_0       0.6      1.02        1.01   0.717            1.33
25 mu_0       0.7      1.01        1.00   0.645            1.34
26 mu_0       0.8      0.955       0.950  0.508            1.44
27 mu_0       0.9      0.898       0.862  0.0847           2.29
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00266     3.48e-28  7.89e-72     0.264
 2 mu         0.2    0.535       4.33e-15  3.34e-46    46.6  
 3 mu         0.3    0.816       4.99e- 8  1.61e-31    17.9  
 4 mu         0.4    1.05        4.74e- 4  2.18e-21     9.20 
 5 mu         0.5    1.12        1.29e- 1  7.93e-14    18.4  
 6 mu         0.6    1.02        3.56e- 1  3.92e- 9     5.24 
 7 mu         0.7    0.945       2.93e- 1  1.13e-15     6.40 
 8 mu         0.8    1.30        4.89e- 3  1.51e-25     9.83 
 9 mu         0.9    0.938       2.30e- 9  2.72e-43    26.3  
10 mu_1       0.1    0.00599     2.45e-27  7.01e-71     0.594
11 mu_1       0.2    0.624       1.34e-14  1.48e-45    52.5  
12 mu_1       0.3    0.847       1.11e- 7  4.76e-31    18.9  
13 mu_1       0.4    1.04        7.74e- 4  4.85e-21     9.35 
14 mu_1       0.5    1.12        1.43e- 1  1.41e-13    17.8  
15 mu_1       0.6    1.02        3.64e- 1  1.47e- 9     5.25 
16 mu_1       0.7    0.953       2.53e- 1  3.62e-16     6.49 
17 mu_1       0.8    1.31        3.82e- 3  4.24e-26     9.79 
18 mu_1       0.9    0.916       1.62e- 9  6.80e-44    25.9  
19 mu_0       0.1    0.00229     1.30e-28  9.84e-73     0.227
20 mu_0       0.2    0.513       2.12e-15  4.69e-47    45.2  
21 mu_0       0.3    0.803       2.35e- 8  2.58e-32    19.4  
22 mu_0       0.4    1.05        2.79e- 4  4.09e-22     9.11 
23 mu_0       0.5    1.12        9.93e- 2  1.78e-14    18.9  
24 mu_0       0.6    1.03        2.82e- 1  7.59e- 9     6.07 
25 mu_0       0.7    0.924       2.66e- 1  2.91e-15     6.18 
26 mu_0       0.8    1.27        9.14e- 3  5.84e-25    10.0  
27 mu_0       0.9    1.14        8.46e- 9  2.11e-42    29.5  
[1] "Total run time was 394.764 seconds"
