
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7543"
[1] "cluster size dist'n: "

52 53 54 55 56 57 59 60 61 62 63 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 
 3  1  4  2  1  2  1  1  2  2  5  4  1  2  1  2  2  3  1  5  4  1  3  2  2  1 
80 81 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 
 5  3  2  2  2  3  2  2  1  2  2  5  3  2  1  1  2  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04026 0.37592 0.64316 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4478 3065 
[1] "treatment indicator table: "

   0    1 
2764 4779 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3839
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3704
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 386.644 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0343
 2 mu         0.1   0.2 0.399 0.0431
 3 mu         0.1   0.3 0.448 0.0553
 4 mu         0.1   0.4 0.472 0.0561
 5 mu         0.1   0.5 0.527 0.0574
 6 mu         0.2   0.1 0.333 0.0315
 7 mu         0.2   0.2 0.455 0.0620
 8 mu         0.2   0.3 0.521 0.0791
 9 mu         0.2   0.4 0.564 0.0817
10 mu         0.2   0.5 0.604 0.0805
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.972        0.804  0.000173      4.02
 2 mu         0.2      1.03         1.02   0.243         2.24
 3 mu         0.3      0.980        0.930  0.428         2.16
 4 mu         0.4      0.987        0.978  0.575         1.86
 5 mu         0.5      0.986        0.988  0.323         1.45
 6 mu         0.6      1.00         0.997  0.617         1.44
 7 mu         0.7      0.991        0.994  0.509         1.38
 8 mu         0.8      0.976        0.972  0.396         1.93
 9 mu         0.9      1.01         1.00   0.365         2.16
10 mu_1       0.1      0.991        0.862  0.000417      3.84
11 mu_1       0.2      1.02         0.992  0.264         2.25
12 mu_1       0.3      0.979        0.939  0.391         2.26
13 mu_1       0.4      0.988        0.989  0.571         1.76
14 mu_1       0.5      0.985        0.986  0.324         1.42
15 mu_1       0.6      1.01         0.995  0.636         1.44
16 mu_1       0.7      0.989        0.993  0.511         1.38
17 mu_1       0.8      0.977        0.966  0.404         1.92
18 mu_1       0.9      1.01         1.01   0.360         2.17
19 mu_0       0.1      0.970        0.799  0.000146      4.04
20 mu_0       0.2      1.03         1.02   0.238         2.24
21 mu_0       0.3      0.980        0.925  0.420         2.12
22 mu_0       0.4      0.987        0.971  0.548         1.93
23 mu_0       0.5      0.986        0.984  0.321         1.48
24 mu_0       0.6      1.00         0.997  0.588         1.47
25 mu_0       0.7      0.996        1.02   0.505         1.40
26 mu_0       0.8      0.972        0.956  0.364         1.96
27 mu_0       0.9      1.00         0.980  0.364         2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.833     1.71e-28  2.06e-68     41.9 
 2 mu         0.2      0.847     3.84e-15  1.45e-44     42.1 
 3 mu         0.3      0.983     3.65e- 8  4.37e-31     17.8 
 4 mu         0.4      0.705     2.65e- 4  2.04e-22      8.40
 5 mu         0.5      0.830     3.20e- 2  8.98e-16      9.31
 6 mu         0.6      1.35      9.92e- 2  4.41e-19      7.91
 7 mu         0.7      1.11      1.32e- 1  1.82e-28     10.8 
 8 mu         0.8      1.42      3.08e- 2  4.31e-42     13.2 
 9 mu         0.9      1.55      9.17e- 8  6.52e-66     27.8 
10 mu_1       0.1      1.04      1.23e-27  1.82e-67     53.7 
11 mu_1       0.2      0.883     1.28e-14  6.66e-44     44.7 
12 mu_1       0.3      0.968     7.61e- 8  1.40e-30     16.9 
13 mu_1       0.4      0.682     4.57e- 4  4.90e-22      8.59
14 mu_1       0.5      0.867     3.52e- 2  1.72e-15     10.0 
15 mu_1       0.6      1.36      1.19e- 1  8.78e-20      8.17
16 mu_1       0.7      1.10      1.40e- 1  3.11e-29     10.8 
17 mu_1       0.8      1.45      2.45e- 2  6.45e-43     13.2 
18 mu_1       0.9      1.54      6.87e- 8  8.66e-67     28.3 
19 mu_0       0.1      0.810     5.33e-29  2.68e-69     40.6 
20 mu_0       0.2      0.838     1.61e-15  1.47e-45     41.4 
21 mu_0       0.3      0.989     1.62e- 8  2.53e-32     18.6 
22 mu_0       0.4      0.719     1.37e- 4  1.38e-23      8.27
23 mu_0       0.5      0.794     2.56e- 2  7.28e-17      8.62
24 mu_0       0.6      1.34      6.97e- 2  9.70e-19      8.05
25 mu_0       0.7      1.15      1.61e- 1  5.35e-28     10.7 
26 mu_0       0.8      1.30      5.61e- 2  1.90e-41     13.3 
27 mu_0       0.9      1.64      3.21e- 7  5.74e-65     22.6 
[1] "Total run time was 390.48 seconds"
