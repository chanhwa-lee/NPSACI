
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7520"
[1] "cluster size dist'n: "

50 51 52 53 54 56 57 59 60 61 62 64 65 66 67 68 69 70 71 72 73 76 78 79 80 81 
 2  3  2  1  1  2  1  4  1  3  4  2  2  3  2  4  2  2  2  4  3  4  3  2  2  3 
82 83 85 86 87 88 89 90 92 93 94 95 96 98 99 
 1  3  1  1  3  3  3  4  2  2  4  2  3  2  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01513 0.28538 0.55794 0.91633 7.00000 
[1] "event indicator table: "

   0    1 
4400 3120 
[1] "treatment indicator table: "

   0    1 
3073 4447 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3722
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3798
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 353.191 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.346 0.0871
 2 mu         0.1   0.2 0.387 0.0971
 3 mu         0.1   0.3 0.477 0.124 
 4 mu         0.1   0.4 0.503 0.139 
 5 mu         0.1   0.5 0.535 0.149 
 6 mu         0.2   0.1 0.381 0.0499
 7 mu         0.2   0.2 0.431 0.0444
 8 mu         0.2   0.3 0.518 0.0593
 9 mu         0.2   0.4 0.558 0.0712
10 mu         0.2   0.5 0.602 0.0774
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.754       0.0782 0.00000394     15.9 
 2 mu         0.2      0.911       0.786  0.0586          4.52
 3 mu         0.3      0.986       0.918  0.345           1.98
 4 mu         0.4      1.03        1.03   0.535           1.53
 5 mu         0.5      0.992       0.998  0.623           1.38
 6 mu         0.6      0.976       0.976  0.639           1.33
 7 mu         0.7      0.992       0.982  0.649           1.50
 8 mu         0.8      0.996       0.974  0.412           1.87
 9 mu         0.9      0.999       0.866  0.0160          4.10
10 mu_1       0.1      0.846       0.141  0.0000110      18.7 
11 mu_1       0.2      0.921       0.892  0.0835          3.73
12 mu_1       0.3      0.991       0.918  0.370           1.95
13 mu_1       0.4      1.03        1.05   0.539           1.46
14 mu_1       0.5      0.989       0.988  0.606           1.41
15 mu_1       0.6      0.976       0.978  0.636           1.33
16 mu_1       0.7      0.992       0.982  0.635           1.50
17 mu_1       0.8      0.995       0.976  0.401           1.90
18 mu_1       0.9      1.00        0.864  0.0144          4.16
19 mu_0       0.1      0.744       0.0712 0.00000315     15.6 
20 mu_0       0.2      0.909       0.761  0.0524          4.72
21 mu_0       0.3      0.984       0.906  0.335           1.99
22 mu_0       0.4      1.03        1.04   0.532           1.57
23 mu_0       0.5      0.995       0.999  0.640           1.35
24 mu_0       0.6      0.975       0.965  0.643           1.36
25 mu_0       0.7      0.992       0.977  0.683           1.48
26 mu_0       0.8      0.999       0.976  0.456           1.76
27 mu_0       0.9      0.974       0.924  0.0306          3.50
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.480     2.46e-23  3.64e-78     24.8 
 2 mu         0.2      3.68      1.68e-11  1.11e-52    170.  
 3 mu         0.3      0.645     8.30e- 6  7.91e-38     17.2 
 4 mu         0.4      0.948     1.69e- 2  2.42e-27     11.7 
 5 mu         0.5      1.46      3.74e- 1  2.90e-19     18.3 
 6 mu         0.6      1.24      6.31e- 1  9.99e-13      6.03
 7 mu         0.7      0.900     1.16e- 1  2.85e-20      7.94
 8 mu         0.8      0.873     5.78e- 4  6.61e-32      8.58
 9 mu         0.9      2.47      8.47e-11  1.17e-52     61.8 
10 mu_1       0.1      0.845     1.41e-22  3.56e-77     42.6 
11 mu_1       0.2      3.41      5.04e-11  5.44e-52    154.  
12 mu_1       0.3      0.566     1.67e- 5  2.58e-37     12.7 
13 mu_1       0.4      1.00      2.08e- 2  5.91e-27     10.7 
14 mu_1       0.5      1.48      4.44e- 1  5.67e-19     17.7 
15 mu_1       0.6      1.22      6.68e- 1  5.87e-13      5.93
16 mu_1       0.7      0.890     9.38e- 2  8.15e-21      7.88
17 mu_1       0.8      0.882     3.96e- 4  1.65e-32      8.72
18 mu_1       0.9      2.52      5.34e-11  2.59e-53     62.9 
19 mu_0       0.1      0.440     1.17e-23  9.30e-80     22.8 
20 mu_0       0.2      3.75      8.41e-12  3.20e-54    174.  
21 mu_0       0.3      0.679     4.72e- 6  2.60e-39     19.1 
22 mu_0       0.4      0.913     1.13e- 2  9.28e-29     12.4 
23 mu_0       0.5      1.45      2.90e- 1  1.34e-20     18.8 
24 mu_0       0.6      1.27      5.68e- 1  5.74e-14      6.22
25 mu_0       0.7      0.924     1.68e- 1  7.60e-20      8.08
26 mu_0       0.8      0.837     1.18e- 3  2.65e-31      8.08
27 mu_0       0.9      2.09      3.67e-10  9.33e-52     63.4 
[1] "Total run time was 356.682 seconds"
