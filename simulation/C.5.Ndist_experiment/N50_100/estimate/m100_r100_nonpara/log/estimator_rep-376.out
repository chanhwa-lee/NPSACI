
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7553"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  61  62  63  64  65  66  68  69  70  71  72 
  4   2   2   1   4   1   3   1   2   2   1   2   2   4   2   2   2   3   1   3 
 73  74  75  76  77  78  79  80  81  82  83  84  85  87  88  89  90  92  93  94 
  3   1   3   2   3   2   1   2   2   1   2   2   2   1   1   3   1   3   5   1 
 95  96  97  98 100 
  3   3   2   4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05259 0.40289 0.64655 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4497 3056 
[1] "treatment indicator table: "

   0    1 
2510 5043 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3682
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3871
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 408.332 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.290 0.102 
 2 mu         0.1   0.2 0.292 0.0995
 3 mu         0.1   0.3 0.309 0.112 
 4 mu         0.1   0.4 0.309 0.122 
 5 mu         0.1   0.5 0.331 0.128 
 6 mu         0.2   0.1 0.373 0.0728
 7 mu         0.2   0.2 0.415 0.0565
 8 mu         0.2   0.3 0.455 0.0534
 9 mu         0.2   0.4 0.491 0.0547
10 mu         0.2   0.5 0.518 0.0574
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.594      0.00646  6.83e-12     19.5 
 2 mu         0.2      0.947      0.601    1.71e- 4      4.61
 3 mu         0.3      0.957      0.927    8.29e- 2      2.69
 4 mu         0.4      0.965      0.931    2.83e- 1      1.82
 5 mu         0.5      0.998      0.936    4.17e- 1      1.83
 6 mu         0.6      1.02       1.02     4.45e- 1      1.47
 7 mu         0.7      1.04       1.03     7.13e- 1      1.58
 8 mu         0.8      1.03       1.03     5.39e- 1      1.35
 9 mu         0.9      0.947      0.943    1.54e- 1      2.90
10 mu_1       0.1      0.712      0.0138   2.52e-11     19.9 
11 mu_1       0.2      0.969      0.625    3.30e- 4      4.73
12 mu_1       0.3      0.949      0.968    1.07e- 1      2.71
13 mu_1       0.4      0.969      0.915    3.11e- 1      1.78
14 mu_1       0.5      0.998      0.931    4.43e- 1      1.82
15 mu_1       0.6      1.02       1.02     4.48e- 1      1.47
16 mu_1       0.7      1.04       1.03     7.14e- 1      1.58
17 mu_1       0.8      1.03       1.02     5.41e- 1      1.37
18 mu_1       0.9      0.947      0.937    1.44e- 1      2.91
19 mu_0       0.1      0.581      0.00564  4.79e-12     19.5 
20 mu_0       0.2      0.942      0.585    1.32e- 4      4.69
21 mu_0       0.3      0.961      0.935    7.01e- 2      2.86
22 mu_0       0.4      0.961      0.934    2.64e- 1      1.90
23 mu_0       0.5      0.998      0.948    3.91e- 1      1.83
24 mu_0       0.6      1.01       1.01     4.40e- 1      1.47
25 mu_0       0.7      1.04       1.02     7.10e- 1      1.59
26 mu_0       0.8      1.03       1.03     5.33e- 1      1.35
27 mu_0       0.9      0.945      0.954    2.43e- 1      2.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.717     6.26e-32  9.05e-80     65.3 
 2 mu         0.2      3.78      4.48e-18  1.75e-52    195.  
 3 mu         0.3      1.26      2.87e-10  9.52e-37     67.8 
 4 mu         0.4      0.599     1.55e- 5  8.66e-26     10.0 
 5 mu         0.5      1.01      5.49e- 3  1.66e-17     14.2 
 6 mu         0.6      1.18      1.75e- 1  4.62e-15     10.6 
 7 mu         0.7      1.27      3.33e- 1  6.29e-24     16.9 
 8 mu         0.8      1.29      1.03e- 1  5.72e-37      9.86
 9 mu         0.9      1.19      8.57e- 6  5.54e-60     37.5 
10 mu_1       0.1      1.16      4.43e-31  8.33e-79    104.  
11 mu_1       0.2      3.54      1.44e-17  8.04e-52    155.  
12 mu_1       0.3      1.10      6.43e-10  2.92e-36     56.5 
13 mu_1       0.4      0.615     2.65e- 5  1.99e-25      8.78
14 mu_1       0.5      1.04      4.05e- 3  3.05e-17     15.0 
15 mu_1       0.6      1.18      1.68e- 1  1.23e-15     11.8 
16 mu_1       0.7      1.27      3.33e- 1  1.43e-24     16.0 
17 mu_1       0.8      1.29      9.34e- 2  1.14e-37     10.1 
18 mu_1       0.9      1.17      6.79e- 6  9.82e-61     37.6 
19 mu_0       0.1      0.667     1.76e-32  8.05e-81     61.0 
20 mu_0       0.2      3.84      2.00e-18  1.75e-53    205.  
21 mu_0       0.3      1.33      1.35e-10  1.09e-37     72.6 
22 mu_0       0.4      0.587     7.90e- 6  1.15e-26     10.8 
23 mu_0       0.5      0.985     4.09e- 3  2.65e-18     13.3 
24 mu_0       0.6      1.18      1.65e- 1  9.71e-15      8.97
25 mu_0       0.7      1.27      3.52e- 1  1.76e-23     19.0 
26 mu_0       0.8      1.29      1.67e- 1  2.40e-36      9.04
27 mu_0       0.9      1.31      2.48e- 5  4.65e-59     36.3 
[1] "Total run time was 411.425 seconds"
