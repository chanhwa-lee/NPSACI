
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7650"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  69  72 
  1   4   1   2   2   3   1   1   1   1   1   1   3   2   2   3   2   1   1   3 
 73  74  75  76  77  78  79  80  81  82  83  85  86  87  88  90  92  93  95  96 
  2   3   2   4   2   3   6   3   1   3   3   1   1   2   2   3   4   3   2   4 
 97  98  99 100 
  2   5   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02938 0.35025 0.61857 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4557 3093 
[1] "treatment indicator table: "

   0    1 
2832 4818 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3873
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3777
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 407.323 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.464 0.0619
 2 mu         0.1   0.2 0.556 0.0715
 3 mu         0.1   0.3 0.654 0.0850
 4 mu         0.1   0.4 0.683 0.0872
 5 mu         0.1   0.5 0.750 0.0986
 6 mu         0.2   0.1 0.361 0.0344
 7 mu         0.2   0.2 0.425 0.0347
 8 mu         0.2   0.3 0.498 0.0444
 9 mu         0.2   0.4 0.522 0.0418
10 mu         0.2   0.5 0.567 0.0503
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.14         0.585 0.0000000222      6.75
 2 mu         0.2      0.916        0.827 0.0108            2.60
 3 mu         0.3      0.979        0.962 0.136             2.07
 4 mu         0.4      0.973        0.972 0.327             1.70
 5 mu         0.5      0.968        0.959 0.561             1.60
 6 mu         0.6      0.987        0.962 0.564             1.46
 7 mu         0.7      1.02         1.02  0.616             1.40
 8 mu         0.8      1.01         1.00  0.546             1.88
 9 mu         0.9      1.06         1.03  0.193             3.00
10 mu_1       0.1      1.11         0.735 0.0000000706      5.17
11 mu_1       0.2      0.911        0.887 0.0175            2.70
12 mu_1       0.3      0.980        0.987 0.141             1.99
13 mu_1       0.4      0.974        0.976 0.333             1.68
14 mu_1       0.5      0.967        0.955 0.575             1.61
15 mu_1       0.6      0.990        0.966 0.574             1.48
16 mu_1       0.7      1.02         1.02  0.605             1.39
17 mu_1       0.8      1.01         0.997 0.543             1.91
18 mu_1       0.9      1.06         1.03  0.181             3.02
19 mu_0       0.1      1.14         0.567 0.0000000168      6.93
20 mu_0       0.2      0.917        0.833 0.00918           2.62
21 mu_0       0.3      0.979        0.957 0.134             2.10
22 mu_0       0.4      0.973        0.954 0.324             1.72
23 mu_0       0.5      0.969        0.966 0.547             1.60
24 mu_0       0.6      0.984        0.964 0.549             1.42
25 mu_0       0.7      1.02         1.02  0.641             1.43
26 mu_0       0.8      1.01         1.02  0.558             1.78
27 mu_0       0.9      1.05         1.04  0.276             2.83
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.440     3.35e-29  4.09e-69     27.8 
 2 mu         0.2      1.90      7.46e-16  6.09e-44     95.9 
 3 mu         0.3      0.802     3.73e- 9  9.90e-30     16.0 
 4 mu         0.4      0.982     7.89e- 5  1.14e-20     15.9 
 5 mu         0.5      1.14      7.05e- 3  5.68e-14     10.6 
 6 mu         0.6      0.940     8.00e- 2  3.35e-15      6.84
 7 mu         0.7      1.18      2.53e- 1  2.87e-23      8.39
 8 mu         0.8      1.47      1.07e- 1  4.47e-35     16.0 
 9 mu         0.9      1.59      1.40e- 6  7.79e-56     29.6 
10 mu_1       0.1      0.696     2.16e-28  3.52e-68     45.8 
11 mu_1       0.2      1.76      2.64e-15  2.62e-43     78.9 
12 mu_1       0.3      0.804     8.59e- 9  2.91e-29     15.2 
13 mu_1       0.4      0.996     8.55e- 5  2.65e-20     16.8 
14 mu_1       0.5      1.14      9.86e- 3  1.05e-13     11.0 
15 mu_1       0.6      0.937     9.32e- 2  8.06e-16      6.69
16 mu_1       0.7      1.20      3.00e- 1  5.92e-24      8.89
17 mu_1       0.8      1.47      1.26e- 1  8.09e-36     16.4 
18 mu_1       0.9      1.59      1.07e- 6  1.25e-56     30.0 
19 mu_0       0.1      0.412     1.33e-29  6.37e-70     25.8 
20 mu_0       0.2      1.94      2.73e-16  1.07e-44    100.  
21 mu_0       0.3      0.801     1.65e- 9  1.67e-30     16.3 
22 mu_0       0.4      0.973     3.95e- 5  1.43e-21     16.7 
23 mu_0       0.5      1.14      4.24e- 3  8.53e-15     10.2 
24 mu_0       0.6      0.945     6.46e- 2  7.16e-15      7.06
25 mu_0       0.7      1.14      1.85e- 1  8.17e-23      7.22
26 mu_0       0.8      1.46      1.09e- 1  1.91e-34     14.2 
27 mu_0       0.9      1.56      4.37e- 6  6.66e-55     26.6 
[1] "Total run time was 411.419 seconds"
