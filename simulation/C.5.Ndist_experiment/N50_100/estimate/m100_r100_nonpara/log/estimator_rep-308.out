
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7544"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  61  63  65  66  67  68  69  70  71  72 
  3   1   1   1   5   1   2   2   2   1   4   2   1   2   2   2   1   2   2   3 
 73  74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92  93 
  2   3   3   3   4   2   4   3   1   4   1   2   2   1   1   4   2   2   4   2 
 94  97  98  99 100 
  1   2   2   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04418 0.35956 0.61766 1.00000 6.03151 
[1] "event indicator table: "

   0    1 
4465 3079 
[1] "treatment indicator table: "

   0    1 
2751 4793 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3804
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3740
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 496.951 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.303 0.0690
 2 mu         0.1   0.2 0.339 0.0662
 3 mu         0.1   0.3 0.393 0.0755
 4 mu         0.1   0.4 0.412 0.0826
 5 mu         0.1   0.5 0.472 0.0977
 6 mu         0.2   0.1 0.322 0.0708
 7 mu         0.2   0.2 0.382 0.0528
 8 mu         0.2   0.3 0.423 0.0463
 9 mu         0.2   0.4 0.463 0.0459
10 mu         0.2   0.5 0.513 0.0523
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.674        0.128  3.35e-10      8.46
 2 mu         0.2      0.824        0.658  6.78e- 4      3.66
 3 mu         0.3      0.983        0.831  1.17e- 1      2.32
 4 mu         0.4      0.940        0.923  3.00e- 1      1.75
 5 mu         0.5      0.978        0.968  5.02e- 1      1.72
 6 mu         0.6      1.01         0.974  4.77e- 1      1.57
 7 mu         0.7      0.977        0.961  5.57e- 1      1.40
 8 mu         0.8      0.999        0.991  5.12e- 1      1.64
 9 mu         0.9      1.06         0.999  4.61e- 1      2.87
10 mu_1       0.1      0.680        0.219  1.25e- 9      7.05
11 mu_1       0.2      0.837        0.745  1.28e- 3      3.16
12 mu_1       0.3      0.986        0.896  1.47e- 1      2.38
13 mu_1       0.4      0.938        0.924  2.77e- 1      1.69
14 mu_1       0.5      0.981        0.968  4.95e- 1      1.81
15 mu_1       0.6      1.01         0.972  4.86e- 1      1.60
16 mu_1       0.7      0.977        0.972  5.38e- 1      1.42
17 mu_1       0.8      0.998        0.987  5.25e- 1      1.66
18 mu_1       0.9      1.06         1.00   4.62e- 1      2.92
19 mu_0       0.1      0.673        0.117  2.33e-10      8.89
20 mu_0       0.2      0.820        0.661  5.28e- 4      3.79
21 mu_0       0.3      0.982        0.843  1.04e- 1      2.41
22 mu_0       0.4      0.941        0.909  3.15e- 1      1.79
23 mu_0       0.5      0.975        0.956  5.00e- 1      1.63
24 mu_0       0.6      1.01         0.986  4.65e- 1      1.59
25 mu_0       0.7      0.976        0.965  5.56e- 1      1.39
26 mu_0       0.8      1.00         0.989  4.62e- 1      1.59
27 mu_0       0.9      1.04         0.975  4.51e- 1      2.36
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     10.6       8.43e-29  3.00e-81     401. 
 2 mu         0.2      2.44      2.10e-15  1.16e-54     123. 
 3 mu         0.3      0.992     3.02e- 8  3.20e-39      29.9
 4 mu         0.4      1.73      9.70e- 5  2.27e-28      60.6
 5 mu         0.5      1.07      7.65e- 3  4.62e-20      13.1
 6 mu         0.6      1.49      1.14e- 1  2.99e-14      20.2
 7 mu         0.7      1.38      3.53e- 1  2.10e-21      14.6
 8 mu         0.8      1.40      5.03e- 2  9.70e-32      18.4
 9 mu         0.9      0.833     5.50e- 7  9.59e-50      25.3
10 mu_1       0.1     12.1       5.26e-28  2.88e-80     501. 
11 mu_1       0.2      1.57      6.27e-15  5.56e-54      76.9
12 mu_1       0.3      1.07      6.38e- 8  1.02e-38      36.5
13 mu_1       0.4      1.70      9.85e- 5  5.44e-28      55.6
14 mu_1       0.5      1.08      9.35e- 3  8.85e-20      13.1
15 mu_1       0.6      1.51      1.09e- 1  5.12e-15      21.2
16 mu_1       0.7      1.37      3.13e- 1  3.09e-22      14.3
17 mu_1       0.8      1.41      5.35e- 2  1.25e-32      19.4
18 mu_1       0.9      0.831     3.97e- 7  1.10e-50      26.5
19 mu_0       0.1     10.4       3.39e-29  1.44e-82     390. 
20 mu_0       0.2      2.65      1.05e-15  6.24e-56     135. 
21 mu_0       0.3      0.960     1.58e- 8  1.97e-40      27.0
22 mu_0       0.4      1.75      9.84e- 5  1.63e-29      64.0
23 mu_0       0.5      1.07      4.51e- 3  3.98e-21      13.1
24 mu_0       0.6      1.48      1.11e- 1  2.27e-14      18.6
25 mu_0       0.7      1.40      3.82e- 1  6.28e-21      15.2
26 mu_0       0.8      1.39      5.64e- 2  4.35e-31      14.8
27 mu_0       0.9      0.846     1.93e- 6  8.61e-49      16.2
[1] "Total run time was 500.836 seconds"
