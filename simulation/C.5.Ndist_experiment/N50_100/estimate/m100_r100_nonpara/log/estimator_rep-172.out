
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7473"
[1] "cluster size dist'n: "

50 51 52 54 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 78 
 4  3  3  1  1  2  2  1  1  1  2  1  2  3  3  3  1  5  5  2  2  3  1  3  4  2 
80 81 82 83 84 86 87 90 91 92 93 94 95 96 97 98 99 
 1  2  4  2  1  3  2  4  1  5  1  1  3  4  1  3  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03169 0.33481 0.60313 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4396 3077 
[1] "treatment indicator table: "

   0    1 
2832 4641 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3643
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3830
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 437.798 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.548 0.117 
 2 mu         0.1   0.2 0.617 0.116 
 3 mu         0.1   0.3 0.712 0.133 
 4 mu         0.1   0.4 0.781 0.146 
 5 mu         0.1   0.5 0.826 0.152 
 6 mu         0.2   0.1 0.399 0.0601
 7 mu         0.2   0.2 0.474 0.0508
 8 mu         0.2   0.3 0.560 0.0645
 9 mu         0.2   0.4 0.637 0.0835
10 mu         0.2   0.5 0.685 0.0820
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.21         0.376 0.000000112      16.6 
 2 mu         0.2      1.09         0.896 0.0145            4.48
 3 mu         0.3      0.928        0.890 0.306             1.82
 4 mu         0.4      0.991        0.953 0.467             1.93
 5 mu         0.5      0.998        0.997 0.585             1.47
 6 mu         0.6      0.997        0.986 0.738             1.30
 7 mu         0.7      0.991        1.00  0.482             1.49
 8 mu         0.8      0.983        0.969 0.440             1.92
 9 mu         0.9      0.975        0.946 0.116             2.66
10 mu_1       0.1      1.31         0.544 0.000000362      16.4 
11 mu_1       0.2      1.05         0.877 0.0236            3.78
12 mu_1       0.3      0.929        0.875 0.264             1.82
13 mu_1       0.4      0.995        0.961 0.471             1.88
14 mu_1       0.5      0.998        1.00  0.601             1.47
15 mu_1       0.6      0.998        0.988 0.741             1.31
16 mu_1       0.7      0.990        1.00  0.472             1.53
17 mu_1       0.8      0.982        0.973 0.437             1.87
18 mu_1       0.9      0.975        0.941 0.110             2.68
19 mu_0       0.1      1.20         0.352 0.0000000842     16.6 
20 mu_0       0.2      1.10         0.900 0.0122            4.66
21 mu_0       0.3      0.928        0.874 0.298             1.90
22 mu_0       0.4      0.989        0.944 0.465             1.96
23 mu_0       0.5      0.999        1.01  0.570             1.46
24 mu_0       0.6      0.997        0.981 0.733             1.29
25 mu_0       0.7      0.993        0.999 0.504             1.42
26 mu_0       0.8      0.985        0.954 0.420             2.10
27 mu_0       0.9      0.973        0.936 0.171             2.51
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      4.18      3.34e-25  1.05e-78    376.  
 2 mu         0.2      2.58      1.44e-13  1.02e-52     98.5 
 3 mu         0.3      0.768     2.16e- 7  1.25e-37     29.5 
 4 mu         0.4      1.03      1.17e- 3  4.99e-27     16.8 
 5 mu         0.5      1.35      4.64e- 2  6.49e-19      8.73
 6 mu         0.6      1.18      4.66e- 1  8.26e-14      9.09
 7 mu         0.7      1.53      3.11e- 1  2.08e-22     11.1 
 8 mu         0.8      1.86      1.65e- 2  3.23e-35     19.5 
 9 mu         0.9      1.01      3.24e- 8  5.01e-58     27.6 
10 mu_1       0.1      4.43      2.08e-24  1.01e-77    376.  
11 mu_1       0.2      2.27      4.84e-13  4.87e-52     78.8 
12 mu_1       0.3      0.723     4.59e- 7  3.97e-37     25.6 
13 mu_1       0.4      1.09      1.49e- 3  1.19e-26     16.4 
14 mu_1       0.5      1.35      6.36e- 2  1.24e-18      8.35
15 mu_1       0.6      1.17      4.11e- 1  2.67e-14      9.41
16 mu_1       0.7      1.55      3.26e- 1  5.77e-23     11.3 
17 mu_1       0.8      1.86      1.30e- 2  7.83e-36     20.9 
18 mu_1       0.9      1.01      2.30e- 8  1.08e-58     29.5 
19 mu_0       0.1      4.15      1.40e-25  5.15e-80    376.  
20 mu_0       0.2      2.66      5.94e-14  5.59e-54    103.  
21 mu_0       0.3      0.787     1.12e- 7  7.83e-39     31.2 
22 mu_0       0.4      0.989     7.78e- 4  3.65e-28     17.0 
23 mu_0       0.5      1.35      2.93e- 2  5.70e-20      9.11
24 mu_0       0.6      1.19      4.49e- 1  1.66e-13      8.61
25 mu_0       0.7      1.49      2.26e- 1  5.60e-22     10.7 
26 mu_0       0.8      1.87      2.60e- 2  1.30e-34     16.8 
27 mu_0       0.9      0.984     1.22e- 7  4.04e-57     32.8 
[1] "Total run time was 441.348 seconds"
