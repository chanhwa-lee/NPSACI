
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7268"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  62  63  64  65  68  69  70  71  72  73 
  4   3   4   1   1   3   6   2   5   4   4   1   1   2   2   2   1   4   3   2 
 74  75  77  78  79  80  81  82  83  84  85  86  88  90  91  92  93  94  95  96 
  1   2   1   1   3   3   1   4   2   1   3   1   2   1   1   2   3   1   1   3 
 97  98  99 100 
  2   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03006 0.32777 0.59405 1.00000 6.78370 
[1] "event indicator table: "

   0    1 
4342 2926 
[1] "treatment indicator table: "

   0    1 
2741 4527 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3684
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3584
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 395.55 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.418 0.0961
 2 mu         0.1   0.2 0.505 0.0847
 3 mu         0.1   0.3 0.555 0.0910
 4 mu         0.1   0.4 0.607 0.111 
 5 mu         0.1   0.5 0.641 0.0909
 6 mu         0.2   0.1 0.368 0.0513
 7 mu         0.2   0.2 0.472 0.0536
 8 mu         0.2   0.3 0.512 0.0438
 9 mu         0.2   0.4 0.553 0.0497
10 mu         0.2   0.5 0.602 0.0370
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.989        0.595  0.000414      4.98
 2 mu         0.2      1.07         0.989  0.314         3.14
 3 mu         0.3      1.07         1.02   0.521         2.08
 4 mu         0.4      1.00         1.04   0.452         1.56
 5 mu         0.5      1.00         1.01   0.580         1.52
 6 mu         0.6      1.01         1.02   0.650         1.56
 7 mu         0.7      1.01         1.02   0.572         1.50
 8 mu         0.8      0.975        0.941  0.554         1.62
 9 mu         0.9      0.983        0.904  0.274         2.18
10 mu_1       0.1      0.967        0.730  0.000960      4.06
11 mu_1       0.2      1.09         1.01   0.373         3.16
12 mu_1       0.3      1.06         1.01   0.457         2.10
13 mu_1       0.4      1.00         1.03   0.440         1.58
14 mu_1       0.5      1.00         1.00   0.577         1.54
15 mu_1       0.6      1.01         1.02   0.655         1.58
16 mu_1       0.7      1.01         1.01   0.579         1.49
17 mu_1       0.8      0.974        0.942  0.545         1.61
18 mu_1       0.9      0.982        0.894  0.266         2.21
19 mu_0       0.1      0.992        0.571  0.000353      5.08
20 mu_0       0.2      1.07         0.971  0.299         3.13
21 mu_0       0.3      1.07         1.03   0.539         2.07
22 mu_0       0.4      1.00         1.04   0.461         1.54
23 mu_0       0.5      1.00         1.01   0.583         1.53
24 mu_0       0.6      1.01         1.02   0.628         1.52
25 mu_0       0.7      1.01         1.01   0.557         1.54
26 mu_0       0.8      0.979        0.954  0.570         1.65
27 mu_0       0.9      0.990        0.929  0.273         1.95
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.304     5.77e-24  9.10e-72     26.7 
 2 mu         0.2      0.723     1.17e-12  3.43e-46     41.2 
 3 mu         0.3      0.572     2.28e- 6  1.44e-31      8.13
 4 mu         0.4      0.982     3.71e- 3  1.68e-21     18.6 
 5 mu         0.5      1.45      1.65e- 1  6.48e-15      9.94
 6 mu         0.6      1.15      2.93e- 1  2.36e-13     10.8 
 7 mu         0.7      0.944     7.09e- 2  1.97e-20      9.33
 8 mu         0.8      1.27      3.22e- 3  9.07e-31     12.0 
 9 mu         0.9      1.05      3.16e- 8  6.39e-49     18.5 
10 mu_1       0.1      0.444     3.84e-23  8.00e-71     37.0 
11 mu_1       0.2      0.689     3.41e-12  1.51e-45     39.9 
12 mu_1       0.3      0.584     4.96e- 6  4.22e-31      8.19
13 mu_1       0.4      1.04      5.71e- 3  3.69e-21     20.1 
14 mu_1       0.5      1.45      1.71e- 1  1.30e-14     10.1 
15 mu_1       0.6      1.14      2.29e- 1  5.45e-14     11.1 
16 mu_1       0.7      0.935     6.90e- 2  3.92e-21      8.66
17 mu_1       0.8      1.29      2.53e- 3  1.57e-31     12.3 
18 mu_1       0.9      1.04      2.17e- 8  9.86e-50     19.2 
19 mu_0       0.1      0.289     2.14e-24  0            25.5 
20 mu_0       0.2      0.731     6.17e-13  0            41.6 
21 mu_0       0.3      0.566     1.14e- 6  0             8.47
22 mu_0       0.4      0.945     2.38e- 3  0            17.6 
23 mu_0       0.5      1.45      1.09e- 1  0            11.2 
24 mu_0       0.6      1.18      2.55e- 1  0            10.2 
25 mu_0       0.7      0.963     7.81e- 2  0            10.9 
26 mu_0       0.8      1.21      6.15e- 3  0            11.2 
27 mu_0       0.9      1.10      5.06e- 8  0            12.8 
[1] "Total run time was 398.67 seconds"
