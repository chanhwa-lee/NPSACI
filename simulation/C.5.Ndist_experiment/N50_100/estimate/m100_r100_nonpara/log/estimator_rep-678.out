
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7404"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  63  64  65  66  68  69  70  71  72  73 
  4   6   1   1   1   2   1   1   2   1   2   1   4   2   3   1   2   4   7   4 
 74  76  77  78  80  81  82  83  84  85  86  87  88  90  92  93  94  95  96  98 
  2   5   3   1   4   4   4   1   3   2   1   2   2   2   3   2   1   2   1   3 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04088 0.35939 0.61423 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4370 3034 
[1] "treatment indicator table: "

   0    1 
2808 4596 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3752
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3652
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 368.734 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.239 0.0617
 2 mu         0.1   0.2 0.305 0.0597
 3 mu         0.1   0.3 0.351 0.0653
 4 mu         0.1   0.4 0.373 0.0773
 5 mu         0.1   0.5 0.412 0.0829
 6 mu         0.2   0.1 0.310 0.0361
 7 mu         0.2   0.2 0.386 0.0348
 8 mu         0.2   0.3 0.451 0.0381
 9 mu         0.2   0.4 0.508 0.0472
10 mu         0.2   0.5 0.554 0.0490
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.713        0.230  9.82e-10      6.76
 2 mu         0.2      0.990        0.946  1.92e- 3      3.76
 3 mu         0.3      0.996        0.962  1.86e- 1      2.04
 4 mu         0.4      1.00         0.996  4.26e- 1      1.86
 5 mu         0.5      0.980        0.980  5.26e- 1      1.88
 6 mu         0.6      1.00         0.989  6.21e- 1      1.52
 7 mu         0.7      1.01         1.00   6.04e- 1      1.42
 8 mu         0.8      1.01         0.996  5.64e- 1      1.71
 9 mu         0.9      1.01         0.979  3.18e- 1      1.93
10 mu_1       0.1      0.796        0.362  3.21e- 9      8.25
11 mu_1       0.2      0.993        0.968  3.15e- 3      4.13
12 mu_1       0.3      1.00         0.949  2.14e- 1      2.03
13 mu_1       0.4      0.998        1.00   4.01e- 1      1.83
14 mu_1       0.5      0.979        0.985  5.20e- 1      1.85
15 mu_1       0.6      1.01         0.991  6.22e- 1      1.55
16 mu_1       0.7      1.01         1.01   6.10e- 1      1.42
17 mu_1       0.8      1.01         0.996  5.57e- 1      1.73
18 mu_1       0.9      1.01         0.978  3.13e- 1      1.93
19 mu_0       0.1      0.704        0.209  7.35e-10      6.60
20 mu_0       0.2      0.989        0.939  1.61e- 3      3.84
21 mu_0       0.3      0.995        0.962  1.74e- 1      2.04
22 mu_0       0.4      1.00         0.998  4.43e- 1      1.89
23 mu_0       0.5      0.980        0.973  5.31e- 1      1.91
24 mu_0       0.6      1.00         0.992  6.07e- 1      1.47
25 mu_0       0.7      1.01         0.994  5.89e- 1      1.47
26 mu_0       0.8      1.01         0.986  5.89e- 1      1.66
27 mu_0       0.9      1.01         1.01   3.68e- 1      1.92
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     10.1       2.49e-25  2.86e-78    791.  
 2 mu         0.2      7.10      3.67e-14  7.77e-53    426.  
 3 mu         0.3      0.940     1.70e- 7  4.83e-38     37.3 
 4 mu         0.4      0.900     1.13e- 3  1.27e-27     24.7 
 5 mu         0.5      1.51      6.65e- 2  1.27e-19     22.7 
 6 mu         0.6      1.33      3.09e- 1  1.04e-16     10.4 
 7 mu         0.7      1.14      1.72e- 1  2.76e-25      8.00
 8 mu         0.8      1.15      8.60e- 3  9.79e-38     12.2 
 9 mu         0.9      1.24      2.13e- 8  1.68e-59     17.5 
10 mu_1       0.1     13.5       1.79e-24  2.76e-77   1075.  
11 mu_1       0.2      5.53      1.23e-13  3.75e-52    289.  
12 mu_1       0.3      0.826     3.59e- 7  1.56e-37     37.1 
13 mu_1       0.4      0.967     1.40e- 3  3.06e-27     26.2 
14 mu_1       0.5      1.53      6.97e- 2  2.45e-19     24.1 
15 mu_1       0.6      1.31      3.15e- 1  2.07e-17      9.16
16 mu_1       0.7      1.15      1.82e- 1  4.70e-26      7.87
17 mu_1       0.8      1.15      6.67e- 3  1.46e-38     11.9 
18 mu_1       0.9      1.25      1.56e- 8  2.23e-60     17.6 
19 mu_0       0.1      9.74      7.80e-26  1.08e-79    760.  
20 mu_0       0.2      7.49      1.51e-14  3.31e-54    460.  
21 mu_0       0.3      0.989     8.83e- 8  2.35e-39     37.3 
22 mu_0       0.4      0.855     6.98e- 4  7.20e-29     23.7 
23 mu_0       0.5      1.50      5.83e- 2  8.64e-21     21.3 
24 mu_0       0.6      1.35      2.43e- 1  2.29e-16     12.2 
25 mu_0       0.7      1.13      2.16e- 1  8.12e-25      8.32
26 mu_0       0.8      1.18      1.62e- 2  4.31e-37     13.4 
27 mu_0       0.9      1.16      7.27e- 8  1.48e-58     16.6 
[1] "Total run time was 372.147 seconds"
