
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7557"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  62  63  64  65  66  67  68  69  70  71  72 
  1   3   3   1   2   1   2   3   2   4   3   1   1   2   2   2   2   1   3   4 
 73  74  75  76  77  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  3   4   1   2   2   3   1   5   2   3   1   1   3   2   1   1   4   1   2   1 
 94  95  97  98 100 
  1   4   2   5   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04421 0.39624 0.65151 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4440 3117 
[1] "treatment indicator table: "

   0    1 
2732 4825 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3657
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3900
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 466.164 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.412 0.0611
 2 mu         0.1   0.2 0.487 0.0722
 3 mu         0.1   0.3 0.589 0.101 
 4 mu         0.1   0.4 0.625 0.0925
 5 mu         0.1   0.5 0.674 0.107 
 6 mu         0.2   0.1 0.383 0.0673
 7 mu         0.2   0.2 0.455 0.0544
 8 mu         0.2   0.3 0.499 0.0450
 9 mu         0.2   0.4 0.541 0.0399
10 mu         0.2   0.5 0.569 0.0366
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.02         0.805 0.0000000476      4.57
 2 mu         0.2      0.968        0.891 0.00347           2.38
 3 mu         0.3      0.964        0.979 0.183             1.68
 4 mu         0.4      0.971        0.949 0.456             1.65
 5 mu         0.5      1.01         1.00  0.448             1.58
 6 mu         0.6      1.02         1.03  0.528             1.63
 7 mu         0.7      1.01         0.997 0.610             1.45
 8 mu         0.8      1.01         1.04  0.587             1.49
 9 mu         0.9      0.989        0.950 0.317             2.09
10 mu_1       0.1      1.06         0.954 0.000000159       4.62
11 mu_1       0.2      0.956        0.904 0.00592           2.37
12 mu_1       0.3      0.966        0.980 0.222             1.74
13 mu_1       0.4      0.974        0.960 0.457             1.63
14 mu_1       0.5      1.01         1.03  0.457             1.57
15 mu_1       0.6      1.02         1.03  0.530             1.64
16 mu_1       0.7      1.01         0.998 0.602             1.42
17 mu_1       0.8      1.01         1.03  0.594             1.51
18 mu_1       0.9      0.988        0.948 0.304             2.11
19 mu_0       0.1      1.02         0.797 0.0000000352      4.56
20 mu_0       0.2      0.971        0.872 0.00285           2.38
21 mu_0       0.3      0.962        0.985 0.166             1.66
22 mu_0       0.4      0.969        0.947 0.444             1.67
23 mu_0       0.5      1.01         1.01  0.440             1.59
24 mu_0       0.6      1.02         1.02  0.524             1.62
25 mu_0       0.7      1.01         0.998 0.628             1.53
26 mu_0       0.8      1.01         1.03  0.555             1.44
27 mu_0       0.9      0.999        0.962 0.435             1.96
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      5.98      1.75e-28  1.17e-77    335.  
 2 mu         0.2      0.702     3.28e-16  3.90e-51     22.7 
 3 mu         0.3      0.516     3.37e- 9  4.79e-36     10.8 
 4 mu         0.4      0.772     2.63e- 5  1.61e-25     16.7 
 5 mu         0.5      0.936     1.34e- 2  1.52e-17      7.15
 6 mu         0.6      1.35      2.60e- 1  1.27e-20      8.84
 7 mu         0.7      1.48      2.96e- 1  3.85e-30     11.0 
 8 mu         0.8      1.13      7.14e- 2  6.99e-44     10.9 
 9 mu         0.9      1.39      5.13e- 7  7.33e-68     20.7 
10 mu_1       0.1      5.21      1.13e-27  1.07e-76    331.  
11 mu_1       0.2      0.602     1.20e-15  1.80e-50     25.2 
12 mu_1       0.3      0.530     7.06e- 9  1.48e-35     11.8 
13 mu_1       0.4      0.792     2.85e- 5  3.73e-25     17.0 
14 mu_1       0.5      0.954     1.80e- 2  2.81e-17      7.96
15 mu_1       0.6      1.38      2.89e- 1  2.11e-21      9.06
16 mu_1       0.7      1.47      2.92e- 1  5.50e-31     10.7 
17 mu_1       0.8      1.13      5.84e- 2  8.73e-45     11.2 
18 mu_1       0.9      1.41      3.61e- 7  8.05e-69     21.1 
19 mu_0       0.1      6.07      5.88e-29  1.06e-78    335.  
20 mu_0       0.2      0.727     1.11e-16  3.59e-52     22.0 
21 mu_0       0.3      0.510     1.79e- 9  5.05e-37     10.6 
22 mu_0       0.4      0.759     1.43e- 5  1.98e-26     16.5 
23 mu_0       0.5      0.919     8.72e- 3  2.23e-18      7.11
24 mu_0       0.6      1.31      2.08e- 1  2.85e-20      9.79
25 mu_0       0.7      1.53      1.84e- 1  1.16e-29     11.8 
26 mu_0       0.8      1.14      9.77e- 2  3.14e-43      9.73
27 mu_0       0.9      1.28      1.88e- 6  6.60e-67     17.3 
[1] "Total run time was 471.008 seconds"
