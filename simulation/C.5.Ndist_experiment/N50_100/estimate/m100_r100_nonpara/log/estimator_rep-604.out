
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7720"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70  71 
  1   4   1   2   1   2   1   2   1   1   2   1   3   1   2   2   2   2   2   5 
 75  76  77  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94  95  97 
  2   2   2   6   3   4   4   1   4   3   4   4   1   1   1   1   4   4   2   1 
 98  99 100 
  5   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02811 0.33900 0.61214 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4643 3077 
[1] "treatment indicator table: "

   0    1 
2922 4798 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3879
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3841
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 514.858 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.398 0.0783
 2 mu         0.1   0.2 0.542 0.127 
 3 mu         0.1   0.3 0.672 0.161 
 4 mu         0.1   0.4 0.708 0.162 
 5 mu         0.1   0.5 0.724 0.160 
 6 mu         0.2   0.1 0.315 0.0327
 7 mu         0.2   0.2 0.442 0.0683
 8 mu         0.2   0.3 0.552 0.104 
 9 mu         0.2   0.4 0.581 0.0909
10 mu         0.2   0.5 0.592 0.0842
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.08         0.137 0.00000373     17.3 
 2 mu         0.2      0.914        0.830 0.0413          3.06
 3 mu         0.3      0.997        1.00  0.249           1.79
 4 mu         0.4      1.01         1.01  0.556           1.63
 5 mu         0.5      1.03         1.02  0.672           1.50
 6 mu         0.6      1.03         1.02  0.634           1.66
 7 mu         0.7      1.01         1.01  0.673           1.47
 8 mu         0.8      0.995        0.987 0.570           1.79
 9 mu         0.9      0.969        0.962 0.164           2.24
10 mu_1       0.1      0.998        0.235 0.00000995      9.89
11 mu_1       0.2      0.919        0.791 0.0653          3.05
12 mu_1       0.3      1.00         1.01  0.252           1.79
13 mu_1       0.4      1.01         0.994 0.525           1.65
14 mu_1       0.5      1.03         1.02  0.695           1.52
15 mu_1       0.6      1.03         1.01  0.644           1.67
16 mu_1       0.7      1.01         1.01  0.672           1.46
17 mu_1       0.8      0.994        0.981 0.570           1.80
18 mu_1       0.9      0.968        0.958 0.156           2.23
19 mu_0       0.1      1.09         0.127 0.00000303     18.1 
20 mu_0       0.2      0.913        0.829 0.0348          3.07
21 mu_0       0.3      0.995        0.989 0.247           1.79
22 mu_0       0.4      1.00         0.999 0.577           1.61
23 mu_0       0.5      1.03         1.03  0.638           1.48
24 mu_0       0.6      1.03         1.01  0.618           1.65
25 mu_0       0.7      1.01         1.01  0.643           1.51
26 mu_0       0.8      0.998        0.995 0.520           1.75
27 mu_0       0.9      0.978        0.942 0.233           2.34
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0134     3.80e-28  1.64e-76      1.34
 2 mu         0.2     0.690      1.36e-14  1.25e-50     59.9 
 3 mu         0.3     0.578      8.96e- 8  1.17e-35     15.5 
 4 mu         0.4     0.734      1.52e- 3  3.44e-25      6.97
 5 mu         0.5     1.05       1.24e- 1  3.11e-17      6.32
 6 mu         0.6     1.02       2.16e- 1  6.18e-11      9.92
 7 mu         0.7     0.778      1.55e- 1  1.21e-14      4.39
 8 mu         0.8     1.23       4.61e- 3  1.24e-23     13.5 
 9 mu         0.9     1.85       1.42e- 9  9.56e-40     54.6 
10 mu_1       0.1     0.0284     2.63e-27  1.53e-75      2.83
11 mu_1       0.2     0.758      4.63e-14  5.85e-50     63.3 
12 mu_1       0.3     0.543      1.85e- 7  3.65e-35     13.8 
13 mu_1       0.4     0.779      2.37e- 3  8.05e-25      6.85
14 mu_1       0.5     1.05       1.25e- 1  5.82e-17      6.16
15 mu_1       0.6     1.01       1.78e- 1  9.84e-11      9.86
16 mu_1       0.7     0.787      1.70e- 1  3.66e-15      4.42
17 mu_1       0.8     1.23       3.55e- 3  3.27e-24     14.1 
18 mu_1       0.9     1.89       8.74e-10  2.36e-40     56.4 
19 mu_0       0.1     0.0118     1.30e-28  1.17e-77      1.17
20 mu_0       0.2     0.673      5.41e-15  1.01e-51     59.1 
21 mu_0       0.3     0.593      4.86e- 8  1.08e-36     16.7 
22 mu_0       0.4     0.703      9.42e- 4  3.70e-26      7.09
23 mu_0       0.5     1.04       9.75e- 2  4.01e-18      6.73
24 mu_0       0.6     1.05       2.31e- 1  4.35e-12     10.6 
25 mu_0       0.7     0.758      1.84e- 1  3.19e-14      4.55
26 mu_0       0.8     1.21       7.16e- 3  4.89e-23     10.8 
27 mu_0       0.9     1.51       6.38e- 9  7.00e-39     39.0 
[1] "Total run time was 519.237 seconds"
