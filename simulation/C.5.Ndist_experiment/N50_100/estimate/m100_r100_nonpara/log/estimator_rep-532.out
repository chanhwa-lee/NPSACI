
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7739"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  60  61  62  63  65  66  67  68  69  70  71  72  73 
  1   4   1   1   1   2   3   4   3   2   4   3   1   2   2   1   1   3   1   3 
 74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92  93  94 
  3   2   1   1   2   1   1   5   1   1   1   1   1   2   3   2   1   2   5   2 
 95  96  97  98  99 100 
  4   4   3   4   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05845 0.40775 0.65445 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4582 3157 
[1] "treatment indicator table: "

   0    1 
2876 4863 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3838
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3901
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 467.847 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.428 0.0854
 2 mu         0.1   0.2 0.537 0.108 
 3 mu         0.1   0.3 0.621 0.129 
 4 mu         0.1   0.4 0.706 0.148 
 5 mu         0.1   0.5 0.735 0.156 
 6 mu         0.2   0.1 0.280 0.0249
 7 mu         0.2   0.2 0.350 0.0264
 8 mu         0.2   0.3 0.411 0.0445
 9 mu         0.2   0.4 0.477 0.0635
10 mu         0.2   0.5 0.493 0.0613
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.32         0.153  1.32e- 9     16.2 
 2 mu         0.2      0.939        0.900  2.05e- 3      2.70
 3 mu         0.3      0.989        0.957  1.33e- 1      2.96
 4 mu         0.4      0.970        0.939  4.14e- 1      1.60
 5 mu         0.5      0.957        0.929  6.07e- 1      1.52
 6 mu         0.6      0.995        0.983  5.79e- 1      1.56
 7 mu         0.7      0.988        1.00   3.83e- 1      1.49
 8 mu         0.8      1.00         0.998  4.45e- 1      1.90
 9 mu         0.9      0.977        0.897  1.50e- 1      2.73
10 mu_1       0.1      1.26         0.239  4.25e- 9      9.88
11 mu_1       0.2      0.931        0.848  3.40e- 3      2.65
12 mu_1       0.3      0.997        0.956  1.39e- 1      2.73
13 mu_1       0.4      0.965        0.941  4.27e- 1      1.51
14 mu_1       0.5      0.960        0.924  6.11e- 1      1.55
15 mu_1       0.6      0.995        0.973  5.85e- 1      1.60
16 mu_1       0.7      0.988        1.00   3.87e- 1      1.50
17 mu_1       0.8      1.00         1.00   4.34e- 1      1.96
18 mu_1       0.9      0.975        0.892  1.44e- 1      2.76
19 mu_0       0.1      1.33         0.144  9.91e-10     16.9 
20 mu_0       0.2      0.942        0.926  1.71e- 3      2.73
21 mu_0       0.3      0.986        0.953  1.30e- 1      3.05
22 mu_0       0.4      0.974        0.942  3.99e- 1      1.66
23 mu_0       0.5      0.954        0.926  6.03e- 1      1.48
24 mu_0       0.6      0.994        0.979  5.71e- 1      1.57
25 mu_0       0.7      0.988        1.01   3.74e- 1      1.48
26 mu_0       0.8      0.998        0.993  4.88e- 1      1.66
27 mu_0       0.9      1.00         0.931  2.06e- 1      2.45
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00960     6.25e-27  4.25e-80     0.940
 2 mu         0.2    0.581       2.00e-14  4.62e-54    37.9  
 3 mu         0.3    0.694       3.96e- 7  6.46e-39    17.3  
 4 mu         0.4    0.803       1.76e- 3  3.01e-28    14.9  
 5 mu         0.5    1.16        1.16e- 1  4.71e-20     7.97 
 6 mu         0.6    1.46        3.07e- 1  1.87e-13    13.9  
 7 mu         0.7    0.974       1.21e- 1  5.82e-16     8.48 
 8 mu         0.8    1.11        1.92e- 3  1.52e-26    15.8  
 9 mu         0.9    2.04        2.55e-10  8.71e-46    44.7  
10 mu_1       0.1    0.0208      3.98e-26  4.11e-79     2.02 
11 mu_1       0.2    0.671       6.03e-14  2.23e-53    40.8  
12 mu_1       0.3    0.671       7.88e- 7  2.08e-38    14.6  
13 mu_1       0.4    0.821       2.87e- 3  7.28e-28    15.4  
14 mu_1       0.5    1.19        1.42e- 1  9.10e-20     8.69 
15 mu_1       0.6    1.45        3.10e- 1  3.01e-13    14.3  
16 mu_1       0.7    0.969       9.63e- 2  2.17e-16     8.68 
17 mu_1       0.8    1.12        1.71e- 3  4.96e-27    16.2  
18 mu_1       0.9    2.07        1.71e-10  2.52e-46    45.4  
19 mu_0       0.1    0.00836     2.52e-27  1.57e-81     0.819
20 mu_0       0.2    0.558       9.95e-15  1.92e-55    37.2  
21 mu_0       0.3    0.704       2.29e- 7  3.08e-40    18.4  
22 mu_0       0.4    0.791       1.02e- 3  1.67e-29    14.7  
23 mu_0       0.5    1.13        8.10e- 2  3.14e-21     8.12 
24 mu_0       0.6    1.49        2.74e- 1  1.55e-14    13.6  
25 mu_0       0.7    0.984       1.25e- 1  1.43e-15     8.02 
26 mu_0       0.8    1.07        3.48e- 3  5.62e-26    14.2  
27 mu_0       0.9    1.78        1.01e- 9  6.44e-45    38.4  
[1] "Total run time was 471.884 seconds"
