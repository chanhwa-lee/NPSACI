
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7395"
[1] "cluster size dist'n: "

50 51 52 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 71 72 73 74 75 76 77 
 2  1  1  5  1  4  2  5  4  3  3  2  2  1  1  2  2  2  2  5  1  1  1  2  1  1 
79 80 81 82 83 84 85 86 87 89 90 91 93 96 97 98 99 
 2  1  1  2  1  5  2  3  2  1  5  2  5  1  7  2  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03441 0.35855 0.61124 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4330 3065 
[1] "treatment indicator table: "

   0    1 
2968 4427 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3647
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3748
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 370.392 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.455 0.0882
 2 mu         0.1   0.2 0.553 0.104 
 3 mu         0.1   0.3 0.623 0.115 
 4 mu         0.1   0.4 0.642 0.110 
 5 mu         0.1   0.5 0.662 0.112 
 6 mu         0.2   0.1 0.383 0.0577
 7 mu         0.2   0.2 0.450 0.0563
 8 mu         0.2   0.3 0.502 0.0587
 9 mu         0.2   0.4 0.533 0.0513
10 mu         0.2   0.5 0.548 0.0492
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.01         0.448 0.00000244     15.2 
 2 mu         0.2      0.911        0.942 0.0188          2.35
 3 mu         0.3      0.964        0.979 0.260           1.74
 4 mu         0.4      1.01         0.962 0.585           1.70
 5 mu         0.5      0.995        0.987 0.588           1.76
 6 mu         0.6      0.994        0.989 0.570           1.39
 7 mu         0.7      1.00         0.989 0.633           1.54
 8 mu         0.8      1.04         1.02  0.520           2.08
 9 mu         0.9      1.05         1.05  0.439           2.04
10 mu_1       0.1      0.998        0.601 0.00000655     14.5 
11 mu_1       0.2      0.910        0.921 0.0298          2.14
12 mu_1       0.3      0.969        0.950 0.305           1.74
13 mu_1       0.4      1.01         0.967 0.604           1.70
14 mu_1       0.5      0.994        0.987 0.579           1.70
15 mu_1       0.6      0.995        0.995 0.566           1.41
16 mu_1       0.7      1.00         0.985 0.634           1.56
17 mu_1       0.8      1.04         1.01  0.503           2.10
18 mu_1       0.9      1.06         1.05  0.440           2.08
19 mu_0       0.1      1.01         0.427 0.00000198     15.3 
20 mu_0       0.2      0.912        0.929 0.0161          2.40
21 mu_0       0.3      0.963        0.985 0.241           1.74
22 mu_0       0.4      1.01         0.974 0.573           1.71
23 mu_0       0.5      0.996        1.00  0.575           1.81
24 mu_0       0.6      0.993        0.983 0.577           1.37
25 mu_0       0.7      0.999        0.978 0.618           1.49
26 mu_0       0.8      1.04         1.03  0.566           1.97
27 mu_0       0.9      1.04         1.05  0.431           1.74
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0491     3.70e-24  6.65e-76      4.66
 2 mu         0.2     0.598      6.52e-13  1.43e-50     18.3 
 3 mu         0.3     1.05       6.74e- 7  6.79e-36     21.8 
 4 mu         0.4     1.31       3.84e- 3  1.31e-25     11.6 
 5 mu         0.5     1.43       8.01e- 2  9.09e-18     12.9 
 6 mu         0.6     1.03       1.26e- 1  9.94e-12      8.66
 7 mu         0.7     1.25       8.63e- 2  1.26e-19     16.8 
 8 mu         0.8     1.64       5.64e- 3  1.48e-31     21.6 
 9 mu         0.9     1.56       1.04e- 8  5.21e-53     31.5 
10 mu_1       0.1     0.0842     2.36e-23  6.28e-75      7.87
11 mu_1       0.2     0.648      1.99e-12  6.74e-50     16.5 
12 mu_1       0.3     1.11       1.43e- 6  2.14e-35     22.5 
13 mu_1       0.4     1.32       5.73e- 3  3.09e-25     11.2 
14 mu_1       0.5     1.41       1.07e- 1  1.72e-17     12.9 
15 mu_1       0.6     1.02       1.41e- 1  3.76e-12      9.08
16 mu_1       0.7     1.28       9.15e- 2  4.08e-20     17.3 
17 mu_1       0.8     1.63       4.28e- 3  4.18e-32     21.3 
18 mu_1       0.9     1.57       6.80e- 9  1.31e-53     32.4 
19 mu_0       0.1     0.0452     1.69e-24  4.10e-77      4.30
20 mu_0       0.2     0.585      3.18e-13  9.91e-52     19.0 
21 mu_0       0.3     1.03       3.55e- 7  5.39e-37     21.5 
22 mu_0       0.4     1.31       2.58e- 3  1.21e-26     12.0 
23 mu_0       0.5     1.44       6.01e- 2  1.01e-18     12.9 
24 mu_0       0.6     1.05       1.02e- 1  2.22e-12      8.41
25 mu_0       0.7     1.18       1.12e- 1  3.24e-19     15.7 
26 mu_0       0.8     1.68       9.72e- 3  5.70e-31     22.8 
27 mu_0       0.9     1.50       4.24e- 8  4.03e-52     24.4 
[1] "Total run time was 373.398 seconds"
