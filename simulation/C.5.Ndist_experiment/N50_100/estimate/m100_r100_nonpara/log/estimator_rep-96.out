
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7596"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  60  61  62  63  64  65  66  68  69  70  72  74 
  2   3   1   3   1   2   4   2   3   2   3   2   2   2   3   4   1   3   3   3 
 75  76  77  78  79  80  82  83  85  87  88  89  91  92  93  94  95  96  97  99 
  1   2   1   4   4   1   1   1   2   3   3   1   2   1   3   2   4   2   4   3 
100 
  6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03411 0.34570 0.61485 1.00000 6.52573 
[1] "event indicator table: "

   0    1 
4430 3166 
[1] "treatment indicator table: "

   0    1 
3017 4579 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3699
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3897
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 473.648 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.421 0.0678
 2 mu         0.1   0.2 0.487 0.0805
 3 mu         0.1   0.3 0.530 0.104 
 4 mu         0.1   0.4 0.574 0.115 
 5 mu         0.1   0.5 0.647 0.113 
 6 mu         0.2   0.1 0.338 0.0386
 7 mu         0.2   0.2 0.400 0.0460
 8 mu         0.2   0.3 0.434 0.0695
 9 mu         0.2   0.4 0.471 0.0764
10 mu         0.2   0.5 0.531 0.0636
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.24         0.512 0.00000276     11.9 
 2 mu         0.2      1.07         0.997 0.0304          3.86
 3 mu         0.3      0.966        0.956 0.390           1.90
 4 mu         0.4      1.01         1.01  0.355           1.60
 5 mu         0.5      1.02         1.00  0.647           1.56
 6 mu         0.6      0.993        0.988 0.699           1.34
 7 mu         0.7      1.00         0.989 0.593           1.45
 8 mu         0.8      0.961        0.945 0.519           1.49
 9 mu         0.9      0.922        0.868 0.130           2.46
10 mu_1       0.1      1.20         0.771 0.00000786      6.76
11 mu_1       0.2      1.04         1.03  0.0462          3.65
12 mu_1       0.3      0.970        0.964 0.387           1.94
13 mu_1       0.4      1.02         1.00  0.368           1.53
14 mu_1       0.5      1.01         1.00  0.652           1.58
15 mu_1       0.6      0.993        0.989 0.709           1.35
16 mu_1       0.7      1.00         0.984 0.588           1.44
17 mu_1       0.8      0.959        0.942 0.518           1.48
18 mu_1       0.9      0.923        0.862 0.122           2.49
19 mu_0       0.1      1.25         0.485 0.00000219     12.5 
20 mu_0       0.2      1.07         0.985 0.0265          3.91
21 mu_0       0.3      0.964        0.954 0.391           1.87
22 mu_0       0.4      1.01         1.01  0.347           1.64
23 mu_0       0.5      1.02         1.00  0.642           1.54
24 mu_0       0.6      0.993        0.985 0.682           1.32
25 mu_0       0.7      1.00         0.990 0.606           1.47
26 mu_0       0.8      0.969        0.948 0.521           1.51
27 mu_0       0.9      0.912        0.894 0.201           2.18
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0903     8.95e-23  1.68e-79      3.30
 2 mu         0.2     1.50       7.96e-12  3.24e-52     70.8 
 3 mu         0.3     1.06       4.19e- 6  1.76e-36     25.4 
 4 mu         0.4     0.934      1.06e- 2  1.60e-25     19.8 
 5 mu         0.5     1.25       1.22e- 1  3.07e-17     15.0 
 6 mu         0.6     1.11       3.39e- 1  4.84e-13     12.2 
 7 mu         0.7     0.973      8.35e- 2  3.78e-21     11.4 
 8 mu         0.8     0.998      1.40e- 3  3.41e-33     13.0 
 9 mu         0.9     1.25       2.16e- 9  1.34e-54     24.0 
10 mu_1       0.1     0.172      5.36e-22  1.54e-78      6.16
11 mu_1       0.2     1.48       2.60e-11  1.49e-51     66.2 
12 mu_1       0.3     1.06       7.86e- 6  5.41e-36     28.9 
13 mu_1       0.4     0.934      1.28e- 2  3.69e-25     16.9 
14 mu_1       0.5     1.27       1.15e- 1  5.65e-17     14.8 
15 mu_1       0.6     1.10       3.31e- 1  1.51e-13     13.2 
16 mu_1       0.7     0.964      7.30e- 2  1.01e-21     10.6 
17 mu_1       0.8     1.01       1.00e- 3  7.97e-34     13.5 
18 mu_1       0.9     1.23       1.44e- 9  2.78e-55     24.6 
19 mu_0       0.1     0.0813     3.99e-23  1.49e-80      2.98
20 mu_0       0.2     1.50       3.46e-12  3.24e-53     72.0 
21 mu_0       0.3     1.06       2.61e- 6  2.02e-37     23.8 
22 mu_0       0.4     0.935      8.29e- 3  2.14e-26     21.7 
23 mu_0       0.5     1.23       1.30e- 1  4.92e-18     15.1 
24 mu_0       0.6     1.13       3.35e- 1  9.85e-13     10.7 
25 mu_0       0.7     0.995      7.45e- 2  1.03e-20     13.4 
26 mu_0       0.8     0.932      3.02e- 3  1.39e-32     11.1 
27 mu_0       0.9     1.36       8.67e- 9  1.09e-53     19.2 
[1] "Total run time was 477.597 seconds"
