
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7495"
[1] "cluster size dist'n: "

 50  51  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  1   2   3   4   2   3   1   2   2   3   2   1   2   4   1   1   2   1   1   3 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  88  89  90  91  92  93 
  4   1   1   2   1   2   3   5   3   5   1   2   2   4   1   2   2   1   3   3 
 94  95  96  97  98  99 100 
  2   1   2   2   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02666 0.32895 0.59993 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4428 3067 
[1] "treatment indicator table: "

   0    1 
2815 4680 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3682
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3813
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 382.71 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.664 0.115 
 2 mu         0.1   0.2 0.782 0.138 
 3 mu         0.1   0.3 0.841 0.153 
 4 mu         0.1   0.4 0.882 0.151 
 5 mu         0.1   0.5 0.924 0.162 
 6 mu         0.2   0.1 0.539 0.0916
 7 mu         0.2   0.2 0.653 0.113 
 8 mu         0.2   0.3 0.728 0.127 
 9 mu         0.2   0.4 0.750 0.115 
10 mu         0.2   0.5 0.779 0.112 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.42         0.550 0.000000946      9.37
 2 mu         0.2      1.17         0.989 0.0348           6.77
 3 mu         0.3      1.01         0.927 0.195            2.49
 4 mu         0.4      0.950        0.924 0.207            1.67
 5 mu         0.5      0.963        0.936 0.473            1.47
 6 mu         0.6      0.988        1.00  0.593            1.52
 7 mu         0.7      1.02         0.999 0.509            1.59
 8 mu         0.8      1.06         1.05  0.647            1.93
 9 mu         0.9      1.01         0.984 0.286            2.19
10 mu_1       0.1      1.41         0.739 0.00000282       8.71
11 mu_1       0.2      1.14         0.935 0.0540           5.71
12 mu_1       0.3      1.01         0.937 0.209            2.38
13 mu_1       0.4      0.947        0.906 0.208            1.62
14 mu_1       0.5      0.964        0.947 0.469            1.44
15 mu_1       0.6      0.990        0.996 0.582            1.54
16 mu_1       0.7      1.02         0.999 0.520            1.60
17 mu_1       0.8      1.06         1.05  0.656            1.93
18 mu_1       0.9      1.01         0.977 0.283            2.20
19 mu_0       0.1      1.42         0.520 0.000000738      9.44
20 mu_0       0.2      1.18         0.986 0.0300           7.03
21 mu_0       0.3      1.01         0.933 0.189            2.54
22 mu_0       0.4      0.952        0.935 0.206            1.73
23 mu_0       0.5      0.961        0.926 0.476            1.50
24 mu_0       0.6      0.986        0.997 0.609            1.51
25 mu_0       0.7      1.01         0.994 0.484            1.57
26 mu_0       0.8      1.07         1.07  0.613            1.97
27 mu_0       0.9      1.00         0.969 0.321            2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.311     2.51e-28  5.24e-77     16.4 
 2 mu         0.2      1.24      2.46e-15  4.00e-51     70.2 
 3 mu         0.3      0.601     3.64e- 8  3.75e-36     13.5 
 4 mu         0.4      1.00      6.82e- 4  1.10e-25     15.3 
 5 mu         0.5      1.04      8.50e- 2  9.96e-18     13.1 
 6 mu         0.6      1.33      1.21e- 1  2.40e-13     10.4 
 7 mu         0.7      1.90      1.20e- 1  1.41e-21     32.1 
 8 mu         0.8      0.923     1.61e- 2  8.45e-34      9.14
 9 mu         0.9      1.08      4.64e- 8  1.66e-55     22.9 
10 mu_1       0.1      0.498     1.89e-27  4.90e-76     25.9 
11 mu_1       0.2      1.10      7.67e-15  1.87e-50     64.9 
12 mu_1       0.3      0.643     7.43e- 8  1.17e-35     15.3 
13 mu_1       0.4      1.02      7.52e- 4  2.58e-25     16.1 
14 mu_1       0.5      1.05      8.13e- 2  1.86e-17     14.1 
15 mu_1       0.6      1.37      1.22e- 1  7.39e-14     11.1 
16 mu_1       0.7      1.87      1.23e- 1  3.71e-22     32.2 
17 mu_1       0.8      0.927     1.49e- 2  1.95e-34      9.58
18 mu_1       0.9      1.08      3.28e- 8  3.40e-56     23.3 
19 mu_0       0.1      0.290     6.93e-29  3.76e-78     15.4 
20 mu_0       0.2      1.27      1.16e-15  3.23e-52     71.6 
21 mu_0       0.3      0.584     2.01e- 8  3.46e-37     12.8 
22 mu_0       0.4      0.993     3.99e- 4  1.18e-26     14.9 
23 mu_0       0.5      1.04      5.79e- 2  1.28e-18     12.0 
24 mu_0       0.6      1.28      1.55e- 1  4.89e-13     11.9 
25 mu_0       0.7      1.97      1.54e- 1  3.82e-21     32.0 
26 mu_0       0.8      0.905     1.55e- 2  3.45e-33      8.16
27 mu_0       0.9      1.12      1.69e- 7  1.35e-54     20.0 
[1] "Total run time was 385.594 seconds"
