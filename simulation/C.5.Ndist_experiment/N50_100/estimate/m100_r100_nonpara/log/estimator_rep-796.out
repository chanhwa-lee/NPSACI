
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7220"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  62  64  65  66  67  68  69  70  71  73 
  2   2   2   6   2   2   2   1   3   4   4   1   2   1   5   3   4   5   4   2 
 74  75  76  77  78  79  80  81  82  83  85  86  87  88  90  91  92  94  95  96 
  3   3   1   1   1   1   2   2   3   5   1   3   2   1   2   1   2   1   2   1 
 97  98  99 100 
  1   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04507 0.38901 0.64340 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4309 2911 
[1] "treatment indicator table: "

   0    1 
2356 4864 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3689
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3531
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 455.45 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.301 0.0792
 2 mu         0.1   0.2 0.377 0.0893
 3 mu         0.1   0.3 0.441 0.102 
 4 mu         0.1   0.4 0.500 0.116 
 5 mu         0.1   0.5 0.531 0.121 
 6 mu         0.2   0.1 0.341 0.0449
 7 mu         0.2   0.2 0.438 0.0475
 8 mu         0.2   0.3 0.518 0.0556
 9 mu         0.2   0.4 0.589 0.0722
10 mu         0.2   0.5 0.626 0.0730
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.732       0.0582 0.0000000352     12.7 
 2 mu         0.2      0.962       0.670  0.00771           4.59
 3 mu         0.3      1.03        0.993  0.166             3.08
 4 mu         0.4      0.992       0.972  0.381             1.90
 5 mu         0.5      0.987       0.981  0.392             1.74
 6 mu         0.6      1.04        1.00   0.494             2.21
 7 mu         0.7      1.02        0.983  0.683             1.82
 8 mu         0.8      1.00        1.02   0.613             1.70
 9 mu         0.9      0.921       0.915  0.268             1.68
10 mu_1       0.1      0.832       0.100  0.000000116      14.3 
11 mu_1       0.2      0.965       0.736  0.0128            3.42
12 mu_1       0.3      1.03        0.964  0.174             3.03
13 mu_1       0.4      0.992       0.947  0.410             1.84
14 mu_1       0.5      0.990       0.974  0.413             1.75
15 mu_1       0.6      1.04        1.01   0.489             2.21
16 mu_1       0.7      1.02        0.986  0.692             1.83
17 mu_1       0.8      1.00        1.02   0.614             1.73
18 mu_1       0.9      0.920       0.914  0.261             1.68
19 mu_0       0.1      0.721       0.0510 0.0000000262     12.5 
20 mu_0       0.2      0.961       0.658  0.00645           4.91
21 mu_0       0.3      1.03        0.998  0.162             3.10
22 mu_0       0.4      0.993       0.973  0.361             1.95
23 mu_0       0.5      0.985       0.973  0.372             1.74
24 mu_0       0.6      1.04        0.998  0.501             2.20
25 mu_0       0.7      1.03        1.00   0.664             1.80
26 mu_0       0.8      1.01        0.997  0.610             1.68
27 mu_0       0.9      0.922       0.909  0.330             1.67
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000351     5.41e-32  9.68e-73    0.0293
 2 mu         0.2   0.141        1.80e-17  1.30e-49    9.71  
 3 mu         0.3   0.888        3.27e-10  4.12e-36   27.3   
 4 mu         0.4   1.98         1.18e- 5  1.47e-26   29.3   
 5 mu         0.5   2.06         1.92e- 2  3.56e-19   54.2   
 6 mu         0.6   1.20         1.44e- 1  3.56e-13   15.4   
 7 mu         0.7   1.29         2.46e- 1  4.75e-10   16.2   
 8 mu         0.8   1.14         8.02e- 2  4.10e-19    6.93  
 9 mu         0.9   1.33         4.24e- 5  2.74e-36   17.5   
10 mu_1       0.1   0.000987     3.53e-31  9.55e-72    0.0814
11 mu_1       0.2   0.205        6.27e-17  6.42e-49   13.5   
12 mu_1       0.3   0.998        7.80e-10  1.36e-35   32.0   
13 mu_1       0.4   2.05         2.08e- 5  3.64e-26   34.0   
14 mu_1       0.5   1.99         2.66e- 2  7.03e-19   50.6   
15 mu_1       0.6   1.18         1.50e- 1  5.86e-13   14.2   
16 mu_1       0.7   1.29         2.82e- 1  2.42e-10   16.3   
17 mu_1       0.8   1.13         8.01e- 2  1.83e-19    6.93  
18 mu_1       0.9   1.36         3.35e- 5  1.09e-36   18.2   
19 mu_0       0.1   0.000280     2.09e-32  1.38e-74    0.0235
20 mu_0       0.2   0.125        6.89e-18  2.08e-51    8.77  
21 mu_0       0.3   0.842        1.32e-10  7.55e-38   25.3   
22 mu_0       0.4   1.93         5.84e- 6  3.15e-28   31.7   
23 mu_0       0.5   2.14         1.17e- 2  9.12e-21   57.8   
24 mu_0       0.6   1.22         1.27e- 1  1.14e-14   17.1   
25 mu_0       0.7   1.29         2.10e- 1  1.02e- 9   15.8   
26 mu_0       0.8   1.15         8.33e- 2  1.32e-18    6.93  
27 mu_0       0.9   1.07         1.33e- 4  1.76e-35   19.9   
[1] "Total run time was 459.304 seconds"
