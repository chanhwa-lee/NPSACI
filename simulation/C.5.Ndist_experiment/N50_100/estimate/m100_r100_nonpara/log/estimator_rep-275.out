
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7604"
[1] "cluster size dist'n: "

 50  51  52  55  57  58  60  61  62  63  64  65  67  68  69  70  71  72  73  74 
  2   2   2   6   1   2   2   4   1   1   3   3   2   2   2   2   2   3   2   3 
 75  76  77  78  81  82  83  84  85  86  87  88  89  90  91  92  93  94  96  97 
  1   3   3   3   2   1   4   1   1   1   3   4   3   4   3   2   2   4   2   1 
 99 100 
  2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03901 0.35225 0.62807 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4501 3103 
[1] "treatment indicator table: "

   0    1 
2841 4763 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3794
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3810
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 375.452 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.232 0.0762
 2 mu         0.1   0.2 0.324 0.0942
 3 mu         0.1   0.3 0.387 0.0834
 4 mu         0.1   0.4 0.450 0.0942
 5 mu         0.1   0.5 0.458 0.0964
 6 mu         0.2   0.1 0.220 0.0594
 7 mu         0.2   0.2 0.312 0.0734
 8 mu         0.2   0.3 0.373 0.0484
 9 mu         0.2   0.4 0.439 0.0583
10 mu         0.2   0.5 0.448 0.0557
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.796        0.108  1.97e-15      8.61
 2 mu         0.2      0.827        0.714  4.32e- 6      3.46
 3 mu         0.3      0.902        0.897  1.66e- 2      2.47
 4 mu         0.4      0.953        0.948  2.94e- 1      2.02
 5 mu         0.5      1.01         0.992  4.81e- 1      1.98
 6 mu         0.6      0.992        1.00   5.10e- 1      1.39
 7 mu         0.7      0.981        0.986  5.64e- 1      1.32
 8 mu         0.8      0.994        0.992  4.79e- 1      1.48
 9 mu         0.9      0.969        0.932  1.03e- 1      3.01
10 mu_1       0.1      0.790        0.179  8.10e-15      9.88
11 mu_1       0.2      0.840        0.700  8.89e- 6      3.19
12 mu_1       0.3      0.903        0.896  2.49e- 2      2.44
13 mu_1       0.4      0.959        0.952  3.48e- 1      1.98
14 mu_1       0.5      1.01         0.983  4.85e- 1      1.96
15 mu_1       0.6      0.992        1.01   5.10e- 1      1.37
16 mu_1       0.7      0.981        0.993  5.62e- 1      1.31
17 mu_1       0.8      0.994        0.992  4.80e- 1      1.50
18 mu_1       0.9      0.970        0.926  9.50e- 2      3.08
19 mu_0       0.1      0.797        0.100  1.29e-15      8.46
20 mu_0       0.2      0.824        0.707  3.18e- 6      3.53
21 mu_0       0.3      0.901        0.911  1.30e- 2      2.55
22 mu_0       0.4      0.949        0.950  2.58e- 1      2.04
23 mu_0       0.5      1.01         0.991  4.76e- 1      2.01
24 mu_0       0.6      0.993        0.996  5.09e- 1      1.44
25 mu_0       0.7      0.983        0.985  5.69e- 1      1.34
26 mu_0       0.8      0.992        0.984  4.78e- 1      1.39
27 mu_0       0.9      0.962        0.947  1.76e- 1      2.39
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.181     4.80e-30  9.19e-71     16.4 
 2 mu         0.2      2.94      8.70e-16  1.10e-46    236.  
 3 mu         0.3      3.79      2.24e- 8  9.03e-33    254.  
 4 mu         0.4      2.01      4.71e- 4  4.72e-23     39.7 
 5 mu         0.5      1.36      8.69e- 2  1.12e-15     12.7 
 6 mu         0.6      1.13      1.63e- 1  8.68e-13      7.33
 7 mu         0.7      1.01      2.41e- 1  8.48e-20      5.92
 8 mu         0.8      1.49      1.59e- 2  4.46e-30     14.3 
 9 mu         0.9      2.50      1.43e- 8  3.53e-48     46.6 
10 mu_1       0.1      0.289     2.93e-29  8.56e-70     24.7 
11 mu_1       0.2      3.59      2.61e-15  5.10e-46    295.  
12 mu_1       0.3      3.44      4.93e- 8  2.80e-32    211.  
13 mu_1       0.4      1.93      4.55e- 4  1.10e-22     37.0 
14 mu_1       0.5      1.33      9.66e- 2  2.08e-15     13.4 
15 mu_1       0.6      1.12      1.65e- 1  2.18e-13      7.28
16 mu_1       0.7      1.01      2.03e- 1  1.83e-20      6.11
17 mu_1       0.8      1.52      1.22e- 2  8.39e-31     14.9 
18 mu_1       0.9      2.50      1.01e- 8  5.91e-49     46.6 
19 mu_0       0.1      0.169     2.08e-30  7.05e-72     15.4 
20 mu_0       0.2      2.78      4.35e-16  9.45e-48    221.  
21 mu_0       0.3      3.95      1.11e- 8  8.89e-34    272.  
22 mu_0       0.4      2.07      2.97e- 4  5.42e-24     41.6 
23 mu_0       0.5      1.39      7.17e- 2  1.54e-16     11.9 
24 mu_0       0.6      1.14      1.60e- 1  1.84e-12      7.54
25 mu_0       0.7      1.01      2.20e- 1  2.40e-19      5.60
26 mu_0       0.8      1.36      1.52e- 2  1.89e-29     12.1 
27 mu_0       0.9      2.52      5.23e- 8  3.00e-47     46.0 
[1] "Total run time was 378.611 seconds"
