
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7505"
[1] "cluster size dist'n: "

50 52 53 54 55 56 57 58 59 60 61 63 65 67 69 70 71 72 73 74 75 76 77 78 79 80 
 4  3  3  1  1  3  1  2  2  5  2  4  1  2  2  2  1  6  2  1  1  2  2  3  3  1 
81 82 83 84 86 87 88 89 90 91 92 93 95 96 97 98 99 
 1  1  4  4  1  3  1  1  3  2  4  4  1  2  3  4  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0225  0.3202  0.5812  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4505 3000 
[1] "treatment indicator table: "

   0    1 
2842 4663 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3818
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3687
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 462.556 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.337 0.0491
 2 mu         0.1   0.2 0.372 0.0555
 3 mu         0.1   0.3 0.426 0.0619
 4 mu         0.1   0.4 0.537 0.0847
 5 mu         0.1   0.5 0.558 0.0838
 6 mu         0.2   0.1 0.274 0.0554
 7 mu         0.2   0.2 0.344 0.0563
 8 mu         0.2   0.3 0.384 0.0586
 9 mu         0.2   0.4 0.433 0.0730
10 mu         0.2   0.5 0.501 0.0510
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.842        0.234 0.0000000598      5.45
 2 mu         0.2      0.871        0.737 0.00620           3.61
 3 mu         0.3      0.993        0.963 0.180             2.64
 4 mu         0.4      0.990        0.950 0.442             2.50
 5 mu         0.5      0.964        0.947 0.444             1.72
 6 mu         0.6      0.981        0.946 0.569             1.89
 7 mu         0.7      0.993        0.998 0.545             1.79
 8 mu         0.8      1.02         1.00  0.455             1.73
 9 mu         0.9      0.996        0.976 0.214             2.39
10 mu_1       0.1      0.869        0.340 0.000000192       5.36
11 mu_1       0.2      0.890        0.780 0.00996           4.06
12 mu_1       0.3      0.994        0.954 0.201             2.71
13 mu_1       0.4      0.988        0.956 0.471             2.46
14 mu_1       0.5      0.965        0.944 0.464             1.67
15 mu_1       0.6      0.982        0.949 0.588             1.91
16 mu_1       0.7      0.995        0.992 0.558             1.81
17 mu_1       0.8      1.02         1.01  0.452             1.73
18 mu_1       0.9      0.996        0.968 0.212             2.43
19 mu_0       0.1      0.839        0.222 0.0000000451      5.46
20 mu_0       0.2      0.866        0.733 0.00526           3.50
21 mu_0       0.3      0.992        0.950 0.171             2.61
22 mu_0       0.4      0.990        0.942 0.423             2.52
23 mu_0       0.5      0.964        0.949 0.425             1.76
24 mu_0       0.6      0.981        0.948 0.539             1.86
25 mu_0       0.7      0.989        0.980 0.513             1.76
26 mu_0       0.8      1.02         1.01  0.467             1.75
27 mu_0       0.9      0.999        0.962 0.240             2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.14      3.06e-27  6.90e-75    106.  
 2 mu         0.2      2.99      9.50e-15  2.34e-49    120.  
 3 mu         0.3      1.61      1.16e- 7  1.28e-34     48.7 
 4 mu         0.4      0.715     6.90e- 4  2.42e-24     12.9 
 5 mu         0.5      1.05      1.27e- 2  1.46e-16      9.63
 6 mu         0.6      1.51      2.89e- 1  7.88e-14     25.7 
 7 mu         0.7      1.32      3.93e- 1  8.39e-21     28.7 
 8 mu         0.8      1.15      1.69e- 2  2.23e-32     19.0 
 9 mu         0.9      1.06      1.33e- 7  6.23e-53     30.6 
10 mu_1       0.1      2.55      1.87e-26  6.38e-74    143.  
11 mu_1       0.2      2.82      3.25e-14  1.08e-48     90.2 
12 mu_1       0.3      1.43      2.37e- 7  3.94e-34     44.6 
13 mu_1       0.4      0.715     1.09e- 3  5.59e-24     13.3 
14 mu_1       0.5      1.09      1.75e- 2  2.69e-16      9.63
15 mu_1       0.6      1.51      2.59e- 1  1.11e-14     26.0 
16 mu_1       0.7      1.31      3.71e- 1  2.20e-21     28.5 
17 mu_1       0.8      1.16      1.34e- 2  5.14e-33     20.1 
18 mu_1       0.9      1.04      9.44e- 8  1.27e-53     30.2 
19 mu_0       0.1      2.09      1.32e-27  5.77e-76    107.  
20 mu_0       0.2      3.04      3.76e-15  2.20e-50    128.  
21 mu_0       0.3      1.68      5.90e- 8  1.38e-35     50.4 
22 mu_0       0.4      0.715     3.89e- 4  3.03e-25     13.9 
23 mu_0       0.5      1.01      1.21e- 2  2.19e-17      9.63
24 mu_0       0.6      1.51      2.68e- 1  1.80e-13     25.1 
25 mu_0       0.7      1.34      4.02e- 1  2.28e-20     29.0 
26 mu_0       0.8      1.12      2.72e- 2  9.12e-32     14.5 
27 mu_0       0.9      1.24      4.75e- 7  5.08e-52     34.3 
[1] "Total run time was 466.134 seconds"
