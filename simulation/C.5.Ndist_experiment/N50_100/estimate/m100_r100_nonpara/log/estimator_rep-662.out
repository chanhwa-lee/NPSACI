
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7623"
[1] "cluster size dist'n: "

 50  52  55  56  57  58  59  60  61  63  65  66  67  68  69  70  71  72  73  75 
  1   7   2   3   1   1   3   7   3   1   3   1   1   1   1   3   2   4   1   2 
 76  77  78  80  82  83  84  85  86  87  88  90  91  92  94  95  96  97  98  99 
  1   2   2   1   1   3   7   4   1   3   3   1   3   1   2   3   1   2   3   3 
100 
  5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02601 0.32204 0.58711 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4531 3092 
[1] "treatment indicator table: "

   0    1 
2904 4719 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3720
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3903
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 412.383 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.460 0.119 
 2 mu         0.1   0.2 0.541 0.141 
 3 mu         0.1   0.3 0.623 0.163 
 4 mu         0.1   0.4 0.649 0.170 
 5 mu         0.1   0.5 0.667 0.178 
 6 mu         0.2   0.1 0.446 0.0447
 7 mu         0.2   0.2 0.537 0.0493
 8 mu         0.2   0.3 0.619 0.0583
 9 mu         0.2   0.4 0.651 0.0611
10 mu         0.2   0.5 0.673 0.0628
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.19         0.214 0.000000196     22.4 
 2 mu         0.2      1.22         1.06  0.00735          3.83
 3 mu         0.3      1.01         0.973 0.261            2.47
 4 mu         0.4      0.942        0.932 0.541            1.40
 5 mu         0.5      0.992        0.982 0.664            1.55
 6 mu         0.6      0.981        0.959 0.569            1.29
 7 mu         0.7      1.03         1.02  0.705            1.41
 8 mu         0.8      1.02         1.02  0.609            1.59
 9 mu         0.9      1.03         1.04  0.267            1.90
10 mu_1       0.1      1.13         0.375 0.000000629     19.4 
11 mu_1       0.2      1.23         1.06  0.0122           4.27
12 mu_1       0.3      0.986        0.975 0.277            2.09
13 mu_1       0.4      0.946        0.930 0.545            1.38
14 mu_1       0.5      0.993        0.978 0.658            1.54
15 mu_1       0.6      0.982        0.957 0.582            1.29
16 mu_1       0.7      1.03         1.02  0.699            1.41
17 mu_1       0.8      1.02         1.02  0.598            1.58
18 mu_1       0.9      1.03         1.05  0.250            1.92
19 mu_0       0.1      1.20         0.196 0.000000147     23.4 
20 mu_0       0.2      1.22         1.05  0.00613          3.72
21 mu_0       0.3      1.02         0.985 0.255            2.63
22 mu_0       0.4      0.939        0.934 0.529            1.42
23 mu_0       0.5      0.992        0.997 0.671            1.56
24 mu_0       0.6      0.980        0.962 0.550            1.29
25 mu_0       0.7      1.02         1.02  0.719            1.41
26 mu_0       0.8      1.02         1.02  0.651            1.63
27 mu_0       0.9      1.03         1.04  0.372            1.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.544     9.66e-26  5.67e-83     54.4 
 2 mu         0.2      1.64      2.13e-13  2.77e-56    154.  
 3 mu         0.3      1.05      9.72e- 7  9.97e-41     47.0 
 4 mu         0.4      1.14      4.01e- 3  9.65e-30     13.1 
 5 mu         0.5      1.22      3.32e- 1  2.83e-21     12.5 
 6 mu         0.6      1.23      3.17e- 1  2.02e-14      9.46
 7 mu         0.7      1.01      9.43e- 2  9.40e-15     14.7 
 8 mu         0.8      0.885     3.24e- 3  3.69e-24     10.6 
 9 mu         0.9      1.41      5.04e-10  2.97e-41     28.7 
10 mu_1       0.1      0.907     6.46e-25  5.54e-82     90.7 
11 mu_1       0.2      1.42      6.53e-13  1.36e-55    129.  
12 mu_1       0.3      1.08      2.02e- 6  3.25e-40     50.1 
13 mu_1       0.4      1.14      6.07e- 3  2.36e-29     10.5 
14 mu_1       0.5      1.23      3.44e- 1  5.53e-21     12.6 
15 mu_1       0.6      1.21      3.75e- 1  3.29e-14      8.96
16 mu_1       0.7      1.00      7.40e- 2  3.36e-15     15.0 
17 mu_1       0.8      0.886     2.43e- 3  1.15e-24     10.4 
18 mu_1       0.9      1.44      3.34e-10  9.39e-42     29.4 
19 mu_0       0.1      0.504     3.57e-26  1.38e-84     50.4 
20 mu_0       0.2      1.70      1.03e-13  7.61e-58    161.  
21 mu_0       0.3      1.04      5.22e- 7  3.13e-42     45.6 
22 mu_0       0.4      1.14      2.65e- 3  3.53e-31     14.9 
23 mu_0       0.5      1.22      2.96e- 1  1.24e-22     12.3 
24 mu_0       0.6      1.24      2.42e- 1  1.11e-15     10.2 
25 mu_0       0.7      1.02      1.31e- 1  2.35e-14     14.2 
26 mu_0       0.8      0.878     4.49e- 3  1.39e-23     11.3 
27 mu_0       0.9      1.11      2.07e- 9  2.02e-40     22.0 
[1] "Total run time was 415.46 seconds"
