
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7555"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  59  60  61  62  63  64  67  68  69  70  71  72  73 
  1   2   2   2   4   2   3   1   2   2   1   4   3   1   7   1   2   3   2   2 
 74  75  76  78  80  81  82  83  86  87  88  89  90  91  92  93  94  95  96  97 
  4   1   3   2   3   4   2   1   4   3   3   2   2   1   3   1   2   1   1   3 
 98  99 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04616 0.38839 0.64989 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4476 3079 
[1] "treatment indicator table: "

   0    1 
2642 4913 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3787
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3768
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 423.99 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.401 0.0804
 2 mu         0.1   0.2 0.475 0.0631
 3 mu         0.1   0.3 0.502 0.0604
 4 mu         0.1   0.4 0.598 0.0804
 5 mu         0.1   0.5 0.626 0.0778
 6 mu         0.2   0.1 0.307 0.0219
 7 mu         0.2   0.2 0.399 0.0325
 8 mu         0.2   0.3 0.421 0.0306
 9 mu         0.2   0.4 0.490 0.0352
10 mu         0.2   0.5 0.529 0.0354
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.974        0.745 0.00000138      7.58
 2 mu         0.2      0.896        0.788 0.0134          2.10
 3 mu         0.3      0.947        0.920 0.198           2.10
 4 mu         0.4      0.981        0.961 0.345           2.42
 5 mu         0.5      1.02         1.04  0.375           2.02
 6 mu         0.6      1.02         1.01  0.593           1.70
 7 mu         0.7      1.03         0.991 0.646           1.60
 8 mu         0.8      1.03         0.996 0.578           1.84
 9 mu         0.9      0.928        0.903 0.278           1.85
10 mu_1       0.1      0.952        0.663 0.00000394      7.21
11 mu_1       0.2      0.904        0.788 0.0199          2.20
12 mu_1       0.3      0.950        0.914 0.226           2.03
13 mu_1       0.4      0.983        0.955 0.360           2.47
14 mu_1       0.5      1.02         1.04  0.392           2.00
15 mu_1       0.6      1.01         1.01  0.586           1.71
16 mu_1       0.7      1.03         0.990 0.642           1.58
17 mu_1       0.8      1.02         0.993 0.574           1.83
18 mu_1       0.9      0.927        0.899 0.273           1.86
19 mu_0       0.1      0.976        0.733 0.00000109      7.62
20 mu_0       0.2      0.894        0.793 0.0118          2.10
21 mu_0       0.3      0.945        0.918 0.186           2.13
22 mu_0       0.4      0.980        0.952 0.335           2.38
23 mu_0       0.5      1.01         1.03  0.358           2.04
24 mu_0       0.6      1.02         1.00  0.588           1.69
25 mu_0       0.7      1.03         0.983 0.616           1.64
26 mu_0       0.8      1.03         1.02  0.572           1.85
27 mu_0       0.9      0.932        0.926 0.322           1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.433     1.51e-29  1.04e-82     26.2 
 2 mu         0.2      0.213     2.43e-16  2.54e-56     17.2 
 3 mu         0.3      0.625     5.66e- 9  6.09e-41     29.0 
 4 mu         0.4      0.760     3.78e- 5  4.42e-30     10.8 
 5 mu         0.5      1.08      1.24e- 2  1.04e-21     10.2 
 6 mu         0.6      0.968     8.25e- 2  4.27e-27     12.9 
 7 mu         0.7      1.33      7.49e- 2  1.63e-37     15.8 
 8 mu         0.8      3.08      9.31e- 2  2.62e-52    139.  
 9 mu         0.9      1.31      4.63e- 6  9.63e-78     33.0 
10 mu_1       0.1      0.333     1.08e-28  1.02e-81     27.4 
11 mu_1       0.2      0.267     7.75e-16  1.24e-55     22.1 
12 mu_1       0.3      0.626     1.25e- 8  1.98e-40     24.9 
13 mu_1       0.4      0.798     6.23e- 5  1.08e-29     11.1 
14 mu_1       0.5      1.08      1.54e- 2  2.02e-21     11.4 
15 mu_1       0.6      0.967     7.96e- 2  2.43e-28     12.0 
16 mu_1       0.7      1.37      8.55e- 2  7.92e-39     18.0 
17 mu_1       0.8      3.06      7.68e- 2  1.11e-53    138.  
18 mu_1       0.9      1.30      3.52e- 6  3.65e-79     33.2 
19 mu_0       0.1      0.444     4.72e-30  2.56e-84     26.1 
20 mu_0       0.2      0.199     1.10e-16  7.05e-58     15.9 
21 mu_0       0.3      0.625     2.72e- 9  1.93e-42     30.7 
22 mu_0       0.4      0.735     2.15e- 5  1.64e-31     11.1 
23 mu_0       0.5      1.08      9.35e- 3  4.60e-23      9.00
24 mu_0       0.6      0.968     9.63e- 2  1.03e-26     14.2 
25 mu_0       0.7      1.24      9.02e- 2  5.24e-37     15.2 
26 mu_0       0.8      3.14      1.24e- 1  1.26e-51    143.  
27 mu_0       0.9      1.39      1.46e- 5  9.30e-77     30.6 
[1] "Total run time was 428.72 seconds"
