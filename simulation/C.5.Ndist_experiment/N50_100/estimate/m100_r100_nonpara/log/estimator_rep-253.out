
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7741"
[1] "cluster size dist'n: "

 50  51  52  55  57  58  59  61  62  63  65  66  68  69  70  72  73  74  75  76 
  1   2   1   3   1   5   1   2   1   3   2   5   1   3   1   2   2   7   1   3 
 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94  95  96  97 
  3   1   3   3   2   1   6   1   1   1   4   1   3   3   1   2   1   5   3   3 
 98 100 
  2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03366 0.34115 0.59309 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4565 3176 
[1] "treatment indicator table: "

   0    1 
2933 4808 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3782
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3959
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 446.607 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.343 0.0590
 2 mu         0.1   0.2 0.423 0.0750
 3 mu         0.1   0.3 0.508 0.0904
 4 mu         0.1   0.4 0.529 0.0846
 5 mu         0.1   0.5 0.546 0.0845
 6 mu         0.2   0.1 0.352 0.0384
 7 mu         0.2   0.2 0.451 0.0507
 8 mu         0.2   0.3 0.537 0.0622
 9 mu         0.2   0.4 0.565 0.0512
10 mu         0.2   0.5 0.585 0.0468
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.914        0.200 0.00000000146      8.95
 2 mu         0.2      1.07         0.971 0.00113            3.33
 3 mu         0.3      0.993        1.00  0.192              1.89
 4 mu         0.4      1.02         1.02  0.571              1.68
 5 mu         0.5      0.975        0.937 0.690              1.45
 6 mu         0.6      0.983        0.990 0.506              1.43
 7 mu         0.7      1.01         1.00  0.634              1.69
 8 mu         0.8      0.980        0.981 0.540              1.54
 9 mu         0.9      0.888        0.838 0.0613             1.92
10 mu_1       0.1      0.951        0.364 0.00000000546      7.89
11 mu_1       0.2      1.05         0.963 0.00211            3.23
12 mu_1       0.3      0.997        0.992 0.244              1.86
13 mu_1       0.4      1.01         1.03  0.552              1.72
14 mu_1       0.5      0.975        0.936 0.696              1.41
15 mu_1       0.6      0.984        0.993 0.504              1.43
16 mu_1       0.7      1.01         1.01  0.635              1.70
17 mu_1       0.8      0.978        0.983 0.532              1.55
18 mu_1       0.9      0.885        0.846 0.0566             1.94
19 mu_0       0.1      0.910        0.182 0.00000000102      9.07
20 mu_0       0.2      1.07         0.968 0.000878           3.41
21 mu_0       0.3      0.991        1.02  0.169              1.91
22 mu_0       0.4      1.02         1.02  0.537              1.65
23 mu_0       0.5      0.976        0.939 0.664              1.49
24 mu_0       0.6      0.982        0.979 0.509              1.44
25 mu_0       0.7      1.01         1.01  0.633              1.66
26 mu_0       0.8      0.984        0.979 0.547              1.53
27 mu_0       0.9      0.910        0.847 0.103              1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00403     1.95e-27  8.55e-72     0.165
 2 mu         0.2    0.588       3.18e-15  2.04e-46    15.8  
 3 mu         0.3    1.14        2.04e- 8  7.46e-32    23.8  
 4 mu         0.4    1.17        6.23e- 4  8.87e-22    15.7  
 5 mu         0.5    1.55        2.62e- 2  3.09e-14    28.2  
 6 mu         0.6    1.02        2.01e- 1  6.87e- 9    10.1  
 7 mu         0.7    1.14        7.26e- 2  5.35e-15    13.2  
 8 mu         0.8    1.09        2.43e- 2  3.17e-24    11.1  
 9 mu         0.9    0.939       4.50e- 8  2.05e-42    28.5  
10 mu_1       0.1    0.00952     1.41e-26  7.66e-71     0.374
11 mu_1       0.2    0.732       1.08e-14  9.12e-46    20.2  
12 mu_1       0.3    1.10        4.18e- 8  2.23e-31    22.0  
13 mu_1       0.4    1.23        1.01e- 3  1.99e-21    17.4  
14 mu_1       0.5    1.52        1.81e- 2  5.54e-14    27.1  
15 mu_1       0.6    1.01        2.13e- 1  2.60e- 9    10.0  
16 mu_1       0.7    1.13        8.78e- 2  1.73e-15    12.7  
17 mu_1       0.8    1.10        1.98e- 2  8.98e-25    10.9  
18 mu_1       0.9    0.921       3.16e- 8  6.50e-43    28.3  
19 mu_0       0.1    0.00342     6.04e-28  9.89e-73     0.141
20 mu_0       0.2    0.553       1.28e-15  2.65e-47    14.8  
21 mu_0       0.3    1.16        1.13e- 8  1.11e-32    24.6  
22 mu_0       0.4    1.13        3.63e- 4  1.54e-22    14.5  
23 mu_0       0.5    1.58        3.37e- 2  6.44e-15    29.2  
24 mu_0       0.6    1.03        2.29e- 1  5.58e- 9    10.1  
25 mu_0       0.7    1.15        5.37e- 2  1.38e-14    14.2  
26 mu_0       0.8    1.05        3.88e- 2  1.23e-23    11.9  
27 mu_0       0.9    1.10        1.65e- 7  1.46e-41    29.6  
[1] "Total run time was 449.895 seconds"
