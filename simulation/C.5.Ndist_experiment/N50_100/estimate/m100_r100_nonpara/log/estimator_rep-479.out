
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7360"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  63  64  65  66  67  69  70  71  72 
  3   7   2   1   2   2   3   1   3   1   3   1   2   1   2   1   1   2   4   1 
 73  74  75  76  77  78  79  81  82  83  85  86  87  88  89  90  91  92  93  94 
  4   4   2   2   2   4   4   3   3   3   1   2   3   2   1   1   1   3   1   1 
 96  97  98 100 
  2   3   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03188 0.33101 0.60576 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4348 3012 
[1] "treatment indicator table: "

   0    1 
2790 4570 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3705
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3655
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 385.311 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.461 0.0617
 2 mu         0.1   0.2 0.527 0.0619
 3 mu         0.1   0.3 0.587 0.0702
 4 mu         0.1   0.4 0.693 0.0680
 5 mu         0.1   0.5 0.748 0.0731
 6 mu         0.2   0.1 0.387 0.0358
 7 mu         0.2   0.2 0.457 0.0312
 8 mu         0.2   0.3 0.509 0.0338
 9 mu         0.2   0.4 0.576 0.0367
10 mu         0.2   0.5 0.618 0.0387
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.21         1.03  0.0000346      5.46
 2 mu         0.2      1.05         0.975 0.0641         3.28
 3 mu         0.3      1.00         1.01  0.192          1.78
 4 mu         0.4      1.03         1.00  0.514          1.54
 5 mu         0.5      1.03         1.01  0.606          1.88
 6 mu         0.6      0.983        0.942 0.468          1.69
 7 mu         0.7      0.971        0.966 0.542          1.59
 8 mu         0.8      0.976        0.961 0.480          1.73
 9 mu         0.9      0.989        0.955 0.424          1.76
10 mu_1       0.1      1.19         1.06  0.0000939      4.98
11 mu_1       0.2      1.04         0.981 0.0795         3.05
12 mu_1       0.3      1.00         1.02  0.215          1.78
13 mu_1       0.4      1.03         0.992 0.534          1.59
14 mu_1       0.5      1.02         0.998 0.603          1.90
15 mu_1       0.6      0.981        0.948 0.456          1.72
16 mu_1       0.7      0.971        0.971 0.540          1.58
17 mu_1       0.8      0.977        0.961 0.484          1.74
18 mu_1       0.9      0.989        0.949 0.417          1.79
19 mu_0       0.1      1.21         1.01  0.0000281      5.61
20 mu_0       0.2      1.05         0.962 0.0603         3.34
21 mu_0       0.3      1.00         1.01  0.182          1.79
22 mu_0       0.4      1.03         0.989 0.500          1.56
23 mu_0       0.5      1.03         1.01  0.582          1.85
24 mu_0       0.6      0.985        0.952 0.485          1.65
25 mu_0       0.7      0.971        0.956 0.545          1.62
26 mu_0       0.8      0.973        0.949 0.465          1.70
27 mu_0       0.9      0.991        0.970 0.416          1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.631     6.36e-25  1.55e-69     58.9 
 2 mu         0.2      2.24      2.74e-13  1.30e-47     81.2 
 3 mu         0.3      0.742     3.18e- 7  8.16e-35     16.0 
 4 mu         0.4      1.06      1.63e- 3  9.23e-26     13.1 
 5 mu         0.5      0.940     1.17e- 1  9.13e-19     10.3 
 6 mu         0.6      1.25      9.19e- 2  2.29e-13      9.09
 7 mu         0.7      1.08      1.01e- 1  7.85e-22     10.6 
 8 mu         0.8      1.21      2.03e- 2  1.59e-34     16.3 
 9 mu         0.9      1.09      2.05e- 7  3.12e-57     22.4 
10 mu_1       0.1      0.969     4.43e-24  1.53e-68     88.7 
11 mu_1       0.2      2.07      9.15e-13  6.43e-47     61.2 
12 mu_1       0.3      0.720     6.74e- 7  2.68e-34     17.6 
13 mu_1       0.4      1.09      1.78e- 3  2.28e-25     13.1 
14 mu_1       0.5      0.939     1.27e- 1  1.80e-18      9.17
15 mu_1       0.6      1.28      8.15e- 2  8.00e-14      9.48
16 mu_1       0.7      1.05      8.08e- 2  2.35e-22     11.0 
17 mu_1       0.8      1.23      1.66e- 2  4.17e-35     16.4 
18 mu_1       0.9      1.09      1.52e- 7  7.28e-58     22.6 
19 mu_0       0.1      0.593     2.15e-25  2.33e-71     55.5 
20 mu_0       0.2      2.28      1.13e-13  2.20e-49     86.2 
21 mu_0       0.3      0.751     1.66e- 7  1.58e-36     15.8 
22 mu_0       0.4      1.05      9.00e- 4  2.08e-27     13.4 
23 mu_0       0.5      0.941     8.02e- 2  2.47e-20     11.4 
24 mu_0       0.6      1.22      9.33e- 2  1.49e-14      9.41
25 mu_0       0.7      1.13      8.71e- 2  2.07e-21      9.75
26 mu_0       0.8      1.15      3.54e- 2  6.28e-34     15.7 
27 mu_0       0.9      1.18      6.64e- 7  2.47e-56     20.8 
[1] "Total run time was 389.149 seconds"
