
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7597"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  60  61  62  63  64  65  66  67  69  70  71  72 
  3   1   1   2   3   1   1   2   3   1   1   5   4   1   1   3   1   3   1   3 
 73  74  75  76  77  78  80  81  82  84  85  86  87  88  90  91  92  93  94  96 
  4   3   2   5   2   3   1   3   1   1   5   1   1   2   3   3   2   1   4   4 
 97  99 100 
  1   3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03342 0.34495 0.59723 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4598 2999 
[1] "treatment indicator table: "

   0    1 
2516 5081 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3627
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3970
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 472.142 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.460 0.0932
 2 mu         0.1   0.2 0.564 0.109 
 3 mu         0.1   0.3 0.633 0.115 
 4 mu         0.1   0.4 0.688 0.125 
 5 mu         0.1   0.5 0.747 0.137 
 6 mu         0.2   0.1 0.448 0.0732
 7 mu         0.2   0.2 0.552 0.0849
 8 mu         0.2   0.3 0.625 0.0871
 9 mu         0.2   0.4 0.678 0.0913
10 mu         0.2   0.5 0.741 0.103 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.985        0.146 0.000000684     10.7 
 2 mu         0.2      1.01         0.927 0.00687          4.51
 3 mu         0.3      0.953        0.907 0.194            3.20
 4 mu         0.4      0.958        0.940 0.276            2.49
 5 mu         0.5      0.989        0.943 0.601            1.68
 6 mu         0.6      0.989        0.976 0.618            1.55
 7 mu         0.7      0.975        0.963 0.560            1.41
 8 mu         0.8      0.990        0.972 0.550            1.80
 9 mu         0.9      1.05         1.04  0.281            1.80
10 mu_1       0.1      1.01         0.248 0.00000232       9.09
11 mu_1       0.2      0.994        0.922 0.0121           3.97
12 mu_1       0.3      0.954        0.921 0.175            3.33
13 mu_1       0.4      0.961        0.954 0.282            2.41
14 mu_1       0.5      0.991        0.950 0.612            1.63
15 mu_1       0.6      0.989        0.980 0.625            1.52
16 mu_1       0.7      0.974        0.969 0.563            1.43
17 mu_1       0.8      0.992        0.978 0.546            1.83
18 mu_1       0.9      1.05         1.04  0.284            1.80
19 mu_0       0.1      0.982        0.135 0.000000502     10.8 
20 mu_0       0.2      1.02         0.936 0.00557          4.65
21 mu_0       0.3      0.953        0.924 0.189            3.15
22 mu_0       0.4      0.957        0.951 0.272            2.54
23 mu_0       0.5      0.987        0.946 0.589            1.73
24 mu_0       0.6      0.991        0.971 0.606            1.58
25 mu_0       0.7      0.976        0.961 0.552            1.36
26 mu_0       0.8      0.981        0.963 0.567            1.68
27 mu_0       0.9      1.05         1.05  0.253            1.76
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00281     3.66e-33  1.10e-81     0.169
 2 mu         0.2    0.545       4.45e-19  4.77e-54    34.3  
 3 mu         0.3    0.799       1.76e-11  4.46e-38    24.7  
 4 mu         0.4    0.798       5.05e- 6  6.31e-27     8.88 
 5 mu         0.5    1.23        1.07e- 2  7.93e-20    12.9  
 6 mu         0.6    1.14        1.01e- 1  4.78e-14    13.9  
 7 mu         0.7    1.73        3.35e- 1  1.03e-19    21.4  
 8 mu         0.8    1.31        1.66e- 1  1.06e-31    10.3  
 9 mu         0.9    1.31        2.45e- 5  3.32e-53    15.3  
10 mu_1       0.1    0.00685     2.59e-32  1.02e-80     0.439
11 mu_1       0.2    0.643       1.44e-18  2.22e-53    37.6  
12 mu_1       0.3    0.807       4.35e-11  1.38e-37    21.4  
13 mu_1       0.4    0.805       8.70e- 6  1.47e-26     7.81 
14 mu_1       0.5    1.24        1.52e- 2  1.59e-19    14.3  
15 mu_1       0.6    1.14        1.17e- 1  7.97e-14    12.8  
16 mu_1       0.7    1.74        3.21e- 1  3.23e-20    22.1  
17 mu_1       0.8    1.30        1.39e- 1  2.89e-32    10.7  
18 mu_1       0.9    1.32        1.88e- 5  8.08e-54    15.6  
19 mu_0       0.1    0.00237     9.74e-34  0            0.139
20 mu_0       0.2    0.521       1.48e-19  0           33.5  
21 mu_0       0.3    0.796       7.12e-12  0           26.1  
22 mu_0       0.4    0.794       2.62e- 6  0            9.64 
23 mu_0       0.5    1.21        6.30e- 3  0           11.6  
24 mu_0       0.6    1.13        6.14e- 2  0           15.5  
25 mu_0       0.7    1.71        1.96e- 1  0           20.2  
26 mu_0       0.8    1.32        1.46e- 1  0            9.09 
27 mu_0       0.9    1.27        5.84e- 5  0           12.7  
[1] "Total run time was 476.21 seconds"
