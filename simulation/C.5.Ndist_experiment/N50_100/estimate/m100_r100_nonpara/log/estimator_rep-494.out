
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7255"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  1   2   3   1   3   2   3   2   2   4   1   5   4   5   2   2   2   2   2   2 
 70  72  73  74  75  76  77  78  79  80  82  83  84  85  86  90  91  92  93  94 
  1   3   1   3   2   4   3   1   1   3   1   1   3   2   1   1   1   2   1   1 
 95  96  98  99 100 
  2   2   2   4   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01658 0.29199 0.56486 0.96058 5.38273 
[1] "event indicator table: "

   0    1 
4289 2966 
[1] "treatment indicator table: "

   0    1 
2833 4422 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3564
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3691
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 397.532 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.350 0.0786
 2 mu         0.1   0.2 0.446 0.103 
 3 mu         0.1   0.3 0.464 0.111 
 4 mu         0.1   0.4 0.530 0.125 
 5 mu         0.1   0.5 0.538 0.126 
 6 mu         0.2   0.1 0.392 0.0406
 7 mu         0.2   0.2 0.503 0.0593
 8 mu         0.2   0.3 0.547 0.0574
 9 mu         0.2   0.4 0.630 0.0687
10 mu         0.2   0.5 0.646 0.0631
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.880        0.141 0.000000490     17.3 
 2 mu         0.2      1.04         0.832 0.0393           5.14
 3 mu         0.3      0.988        0.970 0.417            2.00
 4 mu         0.4      0.987        0.989 0.438            1.75
 5 mu         0.5      1.00         1.00  0.581            1.84
 6 mu         0.6      0.992        0.991 0.601            1.45
 7 mu         0.7      0.979        0.949 0.705            1.66
 8 mu         0.8      1.01         0.999 0.419            1.48
 9 mu         0.9      1.01         0.944 0.170            2.28
10 mu_1       0.1      0.926        0.242 0.00000144      16.8 
11 mu_1       0.2      1.03         0.825 0.0579           4.88
12 mu_1       0.3      0.985        0.963 0.409            1.86
13 mu_1       0.4      0.989        0.986 0.420            1.74
14 mu_1       0.5      1.00         1.00  0.594            1.80
15 mu_1       0.6      0.990        0.990 0.604            1.43
16 mu_1       0.7      0.979        0.950 0.705            1.68
17 mu_1       0.8      1.01         0.998 0.419            1.49
18 mu_1       0.9      1.01         0.940 0.160            2.38
19 mu_0       0.1      0.875        0.131 0.000000385     17.3 
20 mu_0       0.2      1.04         0.823 0.0346           5.21
21 mu_0       0.3      0.990        0.959 0.394            2.06
22 mu_0       0.4      0.985        0.991 0.449            1.76
23 mu_0       0.5      1.00         1.01  0.557            1.88
24 mu_0       0.6      0.994        0.992 0.596            1.48
25 mu_0       0.7      0.977        0.955 0.691            1.63
26 mu_0       0.8      1.00         0.977 0.419            1.46
27 mu_0       0.9      1.01         0.956 0.261            2.02
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.217     6.25e-24  1.38e-72     21.5 
 2 mu         0.2      1.34      7.52e-13  1.17e-47     80.2 
 3 mu         0.3      1.52      7.02e- 7  2.85e-33     29.8 
 4 mu         0.4      1.01      1.65e- 3  3.03e-23     14.3 
 5 mu         0.5      1.06      1.07e- 1  1.17e-15     13.8 
 6 mu         0.6      1.32      2.55e- 1  3.57e-16     16.4 
 7 mu         0.7      1.36      4.30e- 1  1.79e-25      9.38
 8 mu         0.8      1.34      1.48e- 2  3.68e-39     15.2 
 9 mu         0.9      1.94      6.07e- 8  2.51e-63     91.8 
10 mu_1       0.1      0.352     4.07e-23  1.28e-71     34.8 
11 mu_1       0.2      1.35      2.39e-12  5.42e-47     64.8 
12 mu_1       0.3      1.49      1.50e- 6  8.78e-33     27.7 
13 mu_1       0.4      0.990     2.67e- 3  7.00e-23     13.5 
14 mu_1       0.5      1.08      1.24e- 1  2.16e-15     15.4 
15 mu_1       0.6      1.32      3.08e- 1  9.61e-17     15.3 
16 mu_1       0.7      1.36      3.73e- 1  4.14e-26      8.80
17 mu_1       0.8      1.34      1.13e- 2  7.44e-40     15.4 
18 mu_1       0.9      1.96      4.07e- 8  4.50e-64     95.3 
19 mu_0       0.1      0.202     2.41e-24  1.18e-73     20.1 
20 mu_0       0.2      1.33      3.43e-13  1.13e-48     84.0 
21 mu_0       0.3      1.53      3.60e- 7  3.14e-34     30.7 
22 mu_0       0.4      1.02      9.71e- 4  3.89e-24     15.1 
23 mu_0       0.5      1.04      7.65e- 2  1.80e-16     12.2 
24 mu_0       0.6      1.31      2.25e- 1  7.48e-16     18.2 
25 mu_0       0.7      1.37      4.35e- 1  5.01e-25     10.7 
26 mu_0       0.8      1.35      2.90e- 2  1.54e-38     14.3 
27 mu_0       0.9      1.75      2.39e- 7  2.10e-62     60.4 
[1] "Total run time was 401.366 seconds"
