
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7396"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  68  70  72  73 
  2   3   3   3   1   5   3   2   1   3   1   3   1   2   3   4   2   1   3   2 
 74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94  95 
  2   3   3   2   1   2   1   3   2   3   1   2   3   3   5   2   2   2   2   2 
 97  98  99 100 
  1   3   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0202  0.3018  0.5696  0.9462  5.5491 
[1] "event indicator table: "

   0    1 
4380 3016 
[1] "treatment indicator table: "

   0    1 
2845 4551 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3567
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3829
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 374.929 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.357 0.0768
 2 mu         0.1   0.2 0.446 0.0901
 3 mu         0.1   0.3 0.554 0.0874
 4 mu         0.1   0.4 0.587 0.0875
 5 mu         0.1   0.5 0.636 0.0821
 6 mu         0.2   0.1 0.387 0.0461
 7 mu         0.2   0.2 0.485 0.0513
 8 mu         0.2   0.3 0.567 0.0557
 9 mu         0.2   0.4 0.601 0.0525
10 mu         0.2   0.5 0.653 0.0484
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.942        0.814  0.000125      6.10
 2 mu         0.2      1.07         1.04   0.152         3.78
 3 mu         0.3      1.01         1.01   0.385         1.65
 4 mu         0.4      0.989        1.00   0.522         1.59
 5 mu         0.5      0.991        0.980  0.557         1.37
 6 mu         0.6      1.01         1.01   0.654         1.57
 7 mu         0.7      0.978        0.967  0.690         1.42
 8 mu         0.8      1.01         1.00   0.509         1.67
 9 mu         0.9      0.944        0.883  0.220         2.43
10 mu_1       0.1      0.959        0.879  0.000322      6.10
11 mu_1       0.2      1.07         0.997  0.211         3.71
12 mu_1       0.3      1.01         0.983  0.373         1.67
13 mu_1       0.4      0.988        0.998  0.514         1.59
14 mu_1       0.5      0.995        0.994  0.554         1.40
15 mu_1       0.6      1.01         1.01   0.649         1.59
16 mu_1       0.7      0.978        0.973  0.685         1.42
17 mu_1       0.8      1.01         1.00   0.508         1.67
18 mu_1       0.9      0.941        0.880  0.212         2.42
19 mu_0       0.1      0.941        0.783  0.000103      6.10
20 mu_0       0.2      1.07         1.04   0.137         3.79
21 mu_0       0.3      1.01         0.993  0.391         1.70
22 mu_0       0.4      0.990        1.00   0.527         1.59
23 mu_0       0.5      0.988        0.969  0.559         1.39
24 mu_0       0.6      1.02         1.01   0.662         1.54
25 mu_0       0.7      0.976        0.956  0.673         1.43
26 mu_0       0.8      1.01         0.977  0.516         1.65
27 mu_0       0.9      0.962        0.922  0.292         2.59
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0528     6.21e-27  2.77e-80      4.63
 2 mu         0.2     0.954      9.05e-15  1.66e-54     36.4 
 3 mu         0.3     0.968      2.27e- 8  5.99e-40     17.6 
 4 mu         0.4     0.617      6.60e- 4  1.20e-29     12.2 
 5 mu         0.5     0.806      2.03e- 2  1.11e-21      8.12
 6 mu         0.6     0.937      1.04e- 1  3.31e-15      6.06
 7 mu         0.7     1.29       2.68e- 1  3.53e-18      9.76
 8 mu         0.8     1.96       9.36e- 3  3.63e-28     25.9 
 9 mu         0.9     1.25       2.90e- 8  7.28e-46     35.7 
10 mu_1       0.1     0.0962     4.33e-26  2.62e-79      8.14
11 mu_1       0.2     1.05       3.09e-14  8.19e-54     41.4 
12 mu_1       0.3     0.921      5.05e- 8  1.97e-39     13.3 
13 mu_1       0.4     0.601      1.02e- 3  2.97e-29     12.1 
14 mu_1       0.5     0.832      1.61e- 2  2.19e-21      7.79
15 mu_1       0.6     0.934      1.27e- 1  5.45e-15      6.51
16 mu_1       0.7     1.34       2.29e- 1  8.86e-19     10.8 
17 mu_1       0.8     1.92       7.38e- 3  7.97e-29     25.8 
18 mu_1       0.9     1.28       1.91e- 8  1.42e-46     37.6 
19 mu_0       0.1     0.0479     2.16e-27  1.62e-81      4.24
20 mu_0       0.2     0.930      3.85e-15  2.47e-56     35.2 
21 mu_0       0.3     0.987      1.20e- 8  1.02e-41     19.4 
22 mu_0       0.4     0.628      4.20e- 4  2.39e-31     12.4 
23 mu_0       0.5     0.781      1.26e- 2  2.64e-23      8.44
24 mu_0       0.6     0.942      6.83e- 2  9.85e-17      5.39
25 mu_0       0.7     1.17       3.39e- 1  9.70e-18      7.55
26 mu_0       0.8     2.10       1.01e- 2  1.50e-27     29.3 
27 mu_0       0.9     1.04       1.19e- 7  6.00e-45     25.6 
[1] "Total run time was 378.577 seconds"
