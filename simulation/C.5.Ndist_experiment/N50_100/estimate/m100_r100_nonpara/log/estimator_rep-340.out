
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7487"
[1] "cluster size dist'n: "

 51  53  54  55  56  57  58  60  61  62  63  64  66  67  69  71  72  75  76  77 
  4   2   2   3   1   4   1   2   2   5   2   2   2   5   3   3   2   3   1   3 
 78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  97 100 
  2   2   2   1   5   2   4   4   2   2   2   4   3   2   2   1   3   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05255 0.39327 0.65360 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4518 2969 
[1] "treatment indicator table: "

   0    1 
2617 4870 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3748
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3739
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 428.096 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.309 0.0436
 2 mu         0.1   0.2 0.403 0.0592
 3 mu         0.1   0.3 0.494 0.0862
 4 mu         0.1   0.4 0.538 0.0859
 5 mu         0.1   0.5 0.561 0.0887
 6 mu         0.2   0.1 0.301 0.0243
 7 mu         0.2   0.2 0.402 0.0378
 8 mu         0.2   0.3 0.465 0.0437
 9 mu         0.2   0.4 0.552 0.0712
10 mu         0.2   0.5 0.585 0.0754
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.902        0.553 0.0000000500      5.48
 2 mu         0.2      0.969        0.946 0.00645           2.30
 3 mu         0.3      0.989        0.957 0.319             1.73
 4 mu         0.4      0.997        0.981 0.517             1.68
 5 mu         0.5      0.995        0.996 0.612             1.41
 6 mu         0.6      1.00         1.01  0.571             1.61
 7 mu         0.7      1.02         1.01  0.577             1.48
 8 mu         0.8      1.03         0.999 0.608             1.46
 9 mu         0.9      0.976        0.946 0.349             1.64
10 mu_1       0.1      0.938        0.703 0.000000165       5.46
11 mu_1       0.2      0.962        0.933 0.0109            2.23
12 mu_1       0.3      0.995        0.973 0.372             1.80
13 mu_1       0.4      0.995        0.970 0.549             1.67
14 mu_1       0.5      0.996        0.999 0.613             1.38
15 mu_1       0.6      1.00         1.00  0.580             1.61
16 mu_1       0.7      1.02         1.02  0.578             1.48
17 mu_1       0.8      1.03         0.998 0.601             1.46
18 mu_1       0.9      0.975        0.944 0.348             1.64
19 mu_0       0.1      0.898        0.529 0.0000000372      5.48
20 mu_0       0.2      0.970        0.928 0.00534           2.32
21 mu_0       0.3      0.987        0.954 0.297             1.70
22 mu_0       0.4      0.999        0.997 0.495             1.68
23 mu_0       0.5      0.994        0.987 0.610             1.45
24 mu_0       0.6      1.00         1.00  0.558             1.62
25 mu_0       0.7      1.02         1.01  0.574             1.47
26 mu_0       0.8      1.03         1.00  0.638             1.47
27 mu_0       0.9      0.980        0.956 0.358             1.60
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.144     2.75e-29  3.34e-74     12.3 
 2 mu         0.2      0.711     4.73e-16  1.01e-48     27.2 
 3 mu         0.3      1.22      8.02e- 9  4.82e-34     30.3 
 4 mu         0.4      1.00      2.37e- 4  7.80e-24     12.7 
 5 mu         0.5      1.16      8.76e- 3  3.92e-16     13.7 
 6 mu         0.6      1.13      2.01e- 2  3.79e-10      8.23
 7 mu         0.7      1.06      1.16e- 1  5.26e-16      9.32
 8 mu         0.8      1.38      8.74e- 2  4.09e-26     11.2 
 9 mu         0.9      1.58      1.40e- 6  2.34e-44     18.9 
10 mu_1       0.1      0.238     1.66e-28  3.05e-73     19.4 
11 mu_1       0.2      0.735     1.51e-15  4.61e-48     27.7 
12 mu_1       0.3      1.26      1.73e- 8  1.47e-33     31.1 
13 mu_1       0.4      0.988     3.80e- 4  1.78e-23     11.3 
14 mu_1       0.5      1.17      1.18e- 2  7.17e-16     14.2 
15 mu_1       0.6      1.13      1.89e- 2  4.06e-10      8.80
16 mu_1       0.7      1.06      1.42e- 1  1.79e-16      8.94
17 mu_1       0.8      1.40      8.46e- 2  1.22e-26     10.9 
18 mu_1       0.9      1.58      1.02e- 6  6.18e-45     19.5 
19 mu_0       0.1      0.134     1.21e-29  3.16e-75     11.5 
20 mu_0       0.2      0.705     2.14e-16  1.07e-49     27.0 
21 mu_0       0.3      1.21      4.05e- 9  5.86e-35     29.9 
22 mu_0       0.4      1.01      1.42e- 4  1.11e-24     13.6 
23 mu_0       0.5      1.15      5.27e- 3  6.67e-17     13.2 
24 mu_0       0.6      1.13      1.66e- 2  4.89e-11      7.43
25 mu_0       0.7      1.07      1.27e- 1  1.34e-15     10.2 
26 mu_0       0.8      1.34      5.01e- 2  1.56e-25     12.2 
27 mu_0       0.9      1.57      4.83e- 6  1.78e-43     13.0 
[1] "Total run time was 431.731 seconds"
