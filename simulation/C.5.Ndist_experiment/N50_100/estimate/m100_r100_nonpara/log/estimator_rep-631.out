
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7242"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  66  69  70  72  73 
  1   3   3   3   3   5   3   1   4   5   1   1   2   5   2   3   3   3   1   3 
 74  75  77  78  79  80  81  82  83  84  85  86  87  88  91  92  93  94  96  97 
  2   2   3   3   1   1   3   1   1   1   2   2   1   1   7   1   2   4   1   1 
 98  99 100 
  2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03145 0.33827 0.61208 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4334 2908 
[1] "treatment indicator table: "

   0    1 
2789 4453 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3675
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3567
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 352.186 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.448 0.0787
 2 mu         0.1   0.2 0.546 0.0970
 3 mu         0.1   0.3 0.602 0.114 
 4 mu         0.1   0.4 0.663 0.140 
 5 mu         0.1   0.5 0.664 0.136 
 6 mu         0.2   0.1 0.398 0.0385
 7 mu         0.2   0.2 0.515 0.0637
 8 mu         0.2   0.3 0.579 0.0825
 9 mu         0.2   0.4 0.606 0.0794
10 mu         0.2   0.5 0.620 0.0825
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.979        0.505 0.000000316     12.3 
 2 mu         0.2      1.00         0.978 0.0212           5.03
 3 mu         0.3      1.04         1.02  0.387            2.27
 4 mu         0.4      1.02         1.00  0.592            2.14
 5 mu         0.5      1.01         0.995 0.649            1.46
 6 mu         0.6      0.997        1.00  0.612            1.33
 7 mu         0.7      0.981        0.970 0.507            1.43
 8 mu         0.8      1.00         0.994 0.606            1.40
 9 mu         0.9      0.965        0.931 0.250            2.26
10 mu_1       0.1      0.979        0.673 0.000000964     11.7 
11 mu_1       0.2      1.00         1.03  0.0358           4.05
12 mu_1       0.3      1.04         1.01  0.445            2.44
13 mu_1       0.4      1.02         0.995 0.587            2.11
14 mu_1       0.5      1.01         0.995 0.639            1.45
15 mu_1       0.6      0.996        0.999 0.612            1.36
16 mu_1       0.7      0.981        0.964 0.489            1.45
17 mu_1       0.8      1.00         0.992 0.586            1.40
18 mu_1       0.9      0.963        0.925 0.235            2.30
19 mu_0       0.1      0.979        0.485 0.000000245     12.4 
20 mu_0       0.2      1.00         0.970 0.0173           5.27
21 mu_0       0.3      1.04         1.02  0.354            2.20
22 mu_0       0.4      1.03         0.998 0.595            2.15
23 mu_0       0.5      1.01         0.989 0.660            1.47
24 mu_0       0.6      0.999        1.00  0.613            1.31
25 mu_0       0.7      0.982        0.984 0.547            1.39
26 mu_0       0.8      1.00         0.991 0.646            1.41
27 mu_0       0.9      0.978        0.948 0.358            2.18
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      9.39      2.46e-23  3.72e-85    928.  
 2 mu         0.2      1.15      7.20e-13  4.09e-58     70.9 
 3 mu         0.3      0.899     6.98e- 7  2.52e-42     22.7 
 4 mu         0.4      0.835     4.02e- 3  3.80e-31      7.65
 5 mu         0.5      1.16      7.01e- 2  1.67e-22      6.67
 6 mu         0.6      1.28      3.72e- 1  6.26e-20      9.18
 7 mu         0.7      0.993     2.49e- 1  7.69e-29      7.01
 8 mu         0.8      0.951     3.42e- 3  1.40e-41     14.7 
 9 mu         0.9      1.13      2.84e- 9  1.33e-63     27.6 
10 mu_1       0.1      6.08      1.42e-22  3.68e-84    587.  
11 mu_1       0.2      1.16      2.34e-12  2.02e-57     65.0 
12 mu_1       0.3      0.857     1.40e- 6  8.32e-42     18.9 
13 mu_1       0.4      0.864     6.15e- 3  9.39e-31      7.83
14 mu_1       0.5      1.17      8.50e- 2  3.30e-22      6.83
15 mu_1       0.6      1.27      3.38e- 1  6.61e-21      9.61
16 mu_1       0.7      0.986     2.13e- 1  6.95e-30      7.77
17 mu_1       0.8      0.953     2.64e- 3  1.11e-42     14.2 
18 mu_1       0.9      1.14      1.90e- 9  9.37e-65     28.2 
19 mu_0       0.1      9.76      9.93e-24  4.54e-87    966.  
20 mu_0       0.2      1.15      3.35e-13  5.62e-60     72.4 
21 mu_0       0.3      0.917     3.96e- 7  3.96e-44     24.3 
22 mu_0       0.4      0.815     2.60e- 3  6.95e-33      7.53
23 mu_0       0.5      1.15      4.90e- 2  3.67e-24      6.52
24 mu_0       0.6      1.29      3.49e- 1  1.47e-19      9.14
25 mu_0       0.7      1.01      3.17e- 1  2.40e-28      5.24
26 mu_0       0.8      0.942     6.05e- 3  6.54e-41     16.4 
27 mu_0       0.9      1.04      1.14e- 8  1.25e-62     21.9 
[1] "Total run time was 355.716 seconds"
