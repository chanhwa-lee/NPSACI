
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7669"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  60  61  62  64  66  67  68  69  70  71  72  73 
  1   5   2   2   1   1   5   1   1   1   2   1   7   4   3   1   2   1   3   2 
 75  76  77  78  79  80  81  83  84  85  86  87  88  89  90  92  93  94  95  96 
  1   1   1   3   1   1   4   3   1   1   2   2   4   4   1   3   1   4   2   3 
 97  98  99 100 
  2   2   5   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04077 0.37865 0.63421 1.00000 6.39688 
[1] "event indicator table: "

   0    1 
4621 3048 
[1] "treatment indicator table: "

   0    1 
2608 5061 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3825
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3844
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 473.137 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.439 0.0573
 2 mu         0.1   0.2 0.505 0.0449
 3 mu         0.1   0.3 0.547 0.0523
 4 mu         0.1   0.4 0.574 0.0498
 5 mu         0.1   0.5 0.624 0.0481
 6 mu         0.2   0.1 0.375 0.0304
 7 mu         0.2   0.2 0.480 0.0337
 8 mu         0.2   0.3 0.516 0.0273
 9 mu         0.2   0.4 0.553 0.0272
10 mu         0.2   0.5 0.604 0.0285
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.00         0.840   0.00131      3.61
 2 mu         0.2      1.04         1.02    0.158        2.36
 3 mu         0.3      0.997        0.987   0.212        2.15
 4 mu         0.4      0.992        0.984   0.513        1.58
 5 mu         0.5      0.976        0.947   0.602        1.81
 6 mu         0.6      0.998        1.01    0.617        1.58
 7 mu         0.7      0.999        0.977   0.529        1.77
 8 mu         0.8      1.01         0.975   0.647        1.83
 9 mu         0.9      1.06         1.03    0.457        2.18
10 mu_1       0.1      1.02         0.938   0.00267      3.18
11 mu_1       0.2      1.04         1.01    0.181        2.31
12 mu_1       0.3      0.992        0.987   0.216        2.08
13 mu_1       0.4      0.993        0.992   0.528        1.58
14 mu_1       0.5      0.975        0.938   0.614        1.81
15 mu_1       0.6      0.999        1.03    0.621        1.56
16 mu_1       0.7      1.00         0.979   0.536        1.78
17 mu_1       0.8      1.01         0.976   0.644        1.84
18 mu_1       0.9      1.06         1.03    0.449        2.20
19 mu_0       0.1      1.00         0.825   0.00116      3.65
20 mu_0       0.2      1.05         1.03    0.152        2.37
21 mu_0       0.3      0.999        0.985   0.210        2.18
22 mu_0       0.4      0.991        0.976   0.503        1.58
23 mu_0       0.5      0.978        0.949   0.590        1.80
24 mu_0       0.6      0.996        0.998   0.611        1.61
25 mu_0       0.7      0.997        0.980   0.513        1.75
26 mu_0       0.8      1.01         0.981   0.645        1.82
27 mu_0       0.9      1.05         1.02    0.533        1.97
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0123     5.25e-33  4.06e-89     0.905
 2 mu         0.2     0.768      2.37e-18  2.26e-60    39.8  
 3 mu         0.3     0.914      1.31e-10  1.21e-43    13.2  
 4 mu         0.4     0.854      1.73e- 5  7.55e-32    11.4  
 5 mu         0.5     0.443      6.04e- 3  8.78e-23     5.48 
 6 mu         0.6     0.849      3.11e- 2  1.80e-15     5.36 
 7 mu         0.7     1.38       2.15e- 1  3.46e-22    10.7  
 8 mu         0.8     1.18       1.07e- 1  2.08e-34     8.43 
 9 mu         0.9     1.39       3.46e- 5  4.08e-56    14.9  
10 mu_1       0.1     0.0240     4.20e-32  3.93e-88     1.67 
11 mu_1       0.2     0.843      8.27e-18  1.09e-59    43.0  
12 mu_1       0.3     0.939      2.90e-10  3.93e-43    14.0  
13 mu_1       0.4     0.809      2.94e- 5  1.83e-31     9.99 
14 mu_1       0.5     0.449      7.14e- 3  1.70e-22     5.76 
15 mu_1       0.6     0.886      2.96e- 2  2.90e-15     5.54 
16 mu_1       0.7     1.38       1.72e- 1  9.13e-23    11.0  
17 mu_1       0.8     1.17       8.99e- 2  4.80e-35     8.59 
18 mu_1       0.9     1.39       2.66e- 5  8.37e-57    15.2  
19 mu_0       0.1     0.0110     1.17e-33  1.37e-90     0.819
20 mu_0       0.2     0.749      8.98e-19  8.55e-62    39.0  
21 mu_0       0.3     0.903      6.25e-11  5.26e-45    13.0  
22 mu_0       0.4     0.884      9.26e- 6  3.81e-33    12.4  
23 mu_0       0.5     0.438      5.43e- 3  5.32e-24     5.21 
24 mu_0       0.6     0.793      2.87e- 2  1.36e-16     5.53 
25 mu_0       0.7     1.37       1.81e- 1  9.40e-22    11.4  
26 mu_0       0.8     1.20       1.21e- 1  8.48e-34     7.81 
27 mu_0       0.9     1.35       1.05e- 4  3.32e-55    13.5  
[1] "Total run time was 476.64 seconds"
