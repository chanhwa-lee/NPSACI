
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7765"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  58  59  60  61  62  63  64  65  66  67  69  70  71  72 
  1   4   2   1   1   1   1   3   2   1   2   1   2   3   1   3   4   2   2   1 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  3   1   1   1   3   3   1   4   4   1   3   4   3   1   1   1   3   3   1   3 
 94  95  96  97  98  99 100 
  3   2   1   2   3   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0356  0.3313  0.6104  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4558 3207 
[1] "treatment indicator table: "

   0    1 
3082 4683 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3818
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3947
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 448.188 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.404 0.0708
 2 mu         0.1   0.2 0.488 0.0796
 3 mu         0.1   0.3 0.570 0.0904
 4 mu         0.1   0.4 0.571 0.0775
 5 mu         0.1   0.5 0.610 0.0790
 6 mu         0.2   0.1 0.377 0.0365
 7 mu         0.2   0.2 0.453 0.0364
 8 mu         0.2   0.3 0.533 0.0447
 9 mu         0.2   0.4 0.567 0.0364
10 mu         0.2   0.5 0.610 0.0409
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.970        0.559 0.00000127      4.89
 2 mu         0.2      1.03         0.925 0.0603          2.32
 3 mu         0.3      1.03         1.03  0.416           2.08
 4 mu         0.4      0.996        0.976 0.504           1.54
 5 mu         0.5      1.02         1.03  0.556           1.46
 6 mu         0.6      0.999        0.987 0.593           1.33
 7 mu         0.7      0.967        0.968 0.680           1.68
 8 mu         0.8      0.982        0.998 0.385           1.64
 9 mu         0.9      0.983        0.952 0.195           1.89
10 mu_1       0.1      0.985        0.708 0.00000357      4.59
11 mu_1       0.2      1.02         0.927 0.0891          2.45
12 mu_1       0.3      1.03         1.01  0.453           2.05
13 mu_1       0.4      0.997        0.978 0.513           1.56
14 mu_1       0.5      1.02         1.03  0.564           1.44
15 mu_1       0.6      0.998        0.979 0.599           1.34
16 mu_1       0.7      0.966        0.963 0.685           1.68
17 mu_1       0.8      0.984        0.989 0.376           1.66
18 mu_1       0.9      0.982        0.957 0.184           1.89
19 mu_0       0.1      0.968        0.539 0.00000102      4.92
20 mu_0       0.2      1.03         0.910 0.0531          2.32
21 mu_0       0.3      1.03         1.00  0.400           2.10
22 mu_0       0.4      0.995        0.991 0.499           1.54
23 mu_0       0.5      1.02         1.03  0.548           1.49
24 mu_0       0.6      1.00         0.999 0.583           1.35
25 mu_0       0.7      0.970        0.984 0.663           1.69
26 mu_0       0.8      0.974        0.982 0.419           1.55
27 mu_0       0.9      1.00         0.965 0.166           1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0458     5.13e-26  1.14e-87      2.50
 2 mu         0.2     1.17       1.27e-13  3.17e-59     44.8 
 3 mu         0.3     0.752      7.75e- 7  1.14e-42     16.0 
 4 mu         0.4     1.11       5.12e- 3  5.30e-31     17.5 
 5 mu         0.5     1.15       2.69e- 1  4.93e-22      9.29
 6 mu         0.6     1.19       2.14e- 1  8.40e-15     11.6 
 7 mu         0.7     0.897      9.36e- 2  3.40e-20      9.09
 8 mu         0.8     1.24       7.92e- 4  4.58e-32     14.7 
 9 mu         0.9     1.56       3.66e-10  2.56e-53     47.7 
10 mu_1       0.1     0.0925     3.61e-25  1.10e-86      5.00
11 mu_1       0.2     1.23       3.67e-13  1.54e-58     44.8 
12 mu_1       0.3     0.734      1.54e- 6  3.67e-42     11.9 
13 mu_1       0.4     1.14       5.99e- 3  1.28e-30     17.0 
14 mu_1       0.5     1.14       3.29e- 1  9.56e-22      8.70
15 mu_1       0.6     1.20       1.63e- 1  1.36e-14     12.2 
16 mu_1       0.7     0.886      7.78e- 2  1.03e-20      9.03
17 mu_1       0.8     1.26       6.06e- 4  1.22e-32     14.9 
18 mu_1       0.9     1.57       2.55e-10  6.05e-54     49.1 
19 mu_0       0.1     0.0406     1.69e-26  3.88e-89      2.22
20 mu_0       0.2     1.15       6.68e-14  1.21e-60     44.8 
21 mu_0       0.3     0.760      4.46e- 7  4.97e-44     17.7 
22 mu_0       0.4     1.09       3.48e- 3  2.70e-32     17.8 
23 mu_0       0.5     1.16       2.09e- 1  3.02e-23      9.87
24 mu_0       0.6     1.18       2.62e- 1  6.43e-16     10.7 
25 mu_0       0.7     0.925      9.61e- 2  8.93e-20      9.25
26 mu_0       0.8     1.17       1.33e- 3  1.80e-31     14.1 
27 mu_0       0.9     1.45       1.37e- 9  2.01e-52     35.2 
[1] "Total run time was 451.882 seconds"
