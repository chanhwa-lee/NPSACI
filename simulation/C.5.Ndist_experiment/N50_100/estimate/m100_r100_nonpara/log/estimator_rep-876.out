
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7507"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  69  70  71 
  3   5   1   2   1   3   1   2   1   1   2   1   3   2   3   3   2   2   1   1 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91 
  3   2   3   1   3   3   1   1   2   2   3   2   1   4   1   1   3   2   3   1 
 92  93  94  95  96  97  98  99 100 
  4   2   1   2   1   3   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02867 0.32726 0.60418 1.00000 5.79662 
[1] "event indicator table: "

   0    1 
4434 3073 
[1] "treatment indicator table: "

   0    1 
2897 4610 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3693
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 377.904 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.547 0.115 
 2 mu         0.1   0.2 0.637 0.124 
 3 mu         0.1   0.3 0.677 0.122 
 4 mu         0.1   0.4 0.784 0.152 
 5 mu         0.1   0.5 0.807 0.149 
 6 mu         0.2   0.1 0.453 0.0718
 7 mu         0.2   0.2 0.546 0.0719
 8 mu         0.2   0.3 0.599 0.0678
 9 mu         0.2   0.4 0.673 0.0887
10 mu         0.2   0.5 0.704 0.0829
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.09         0.503 0.00000122      13.9 
 2 mu         0.2      1.06         0.885 0.0112           3.87
 3 mu         0.3      1.06         0.982 0.261            3.26
 4 mu         0.4      1.00         0.992 0.453            1.67
 5 mu         0.5      0.999        0.998 0.579            1.49
 6 mu         0.6      1.00         0.983 0.598            1.43
 7 mu         0.7      0.990        0.973 0.696            1.45
 8 mu         0.8      1.01         1.01  0.466            1.64
 9 mu         0.9      1.07         1.01  0.0550           4.28
10 mu_1       0.1      1.12         0.668 0.00000425       8.23
11 mu_1       0.2      1.06         0.939 0.0198           4.30
12 mu_1       0.3      1.06         0.979 0.237            3.18
13 mu_1       0.4      1.00         0.996 0.441            1.68
14 mu_1       0.5      0.998        1.00  0.592            1.52
15 mu_1       0.6      0.999        0.983 0.612            1.43
16 mu_1       0.7      0.991        0.968 0.693            1.46
17 mu_1       0.8      1.01         1.01  0.460            1.63
18 mu_1       0.9      1.08         1.01  0.0511           4.34
19 mu_0       0.1      1.09         0.478 0.000000883     14.9 
20 mu_0       0.2      1.06         0.877 0.00910          3.77
21 mu_0       0.3      1.07         0.989 0.252            3.30
22 mu_0       0.4      1.01         0.987 0.462            1.66
23 mu_0       0.5      0.999        1.01  0.566            1.45
24 mu_0       0.6      1.00         0.980 0.578            1.43
25 mu_0       0.7      0.987        0.968 0.667            1.43
26 mu_0       0.8      1.02         1.02  0.488            1.68
27 mu_0       0.9      1.03         0.964 0.0900           3.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.564     4.12e-26  7.21e-67     53.0 
 2 mu         0.2      1.26      5.18e-14  1.51e-42     58.6 
 3 mu         0.3      0.728     1.44e- 7  1.10e-28     15.7 
 4 mu         0.4      1.04      6.37e- 4  3.47e-19     10.6 
 5 mu         0.5      1.06      4.20e- 2  2.36e-13      9.57
 6 mu         0.6      1.33      2.23e- 1  9.24e-14     18.1 
 7 mu         0.7      1.44      3.78e- 1  7.58e-22      9.24
 8 mu         0.8      1.49      1.75e- 2  1.76e-34     14.8 
 9 mu         0.9      0.855     7.88e- 8  5.47e-57     19.1 
10 mu_1       0.1      0.778     2.66e-25  6.24e-66     71.6 
11 mu_1       0.2      1.21      1.72e-13  6.52e-42     57.4 
12 mu_1       0.3      0.749     3.10e- 7  3.16e-28     16.9 
13 mu_1       0.4      1.06      1.03e- 3  7.49e-19     11.1 
14 mu_1       0.5      1.07      4.35e- 2  4.72e-13     10.9 
15 mu_1       0.6      1.34      2.71e- 1  2.08e-14     17.1 
16 mu_1       0.7      1.45      3.59e- 1  2.12e-22      9.63
17 mu_1       0.8      1.48      1.40e- 2  4.32e-35     15.0 
18 mu_1       0.9      0.844     5.55e- 8  1.19e-57     18.6 
19 mu_0       0.1      0.540     1.62e-26  0            50.9 
20 mu_0       0.2      1.28      2.17e-14  0            58.9 
21 mu_0       0.3      0.718     7.27e- 8  0            15.2 
22 mu_0       0.4      1.04      4.13e- 4  0            10.2 
23 mu_0       0.5      1.04      3.90e- 2  0            10.0 
24 mu_0       0.6      1.33      1.82e- 1  0            19.5 
25 mu_0       0.7      1.41      2.97e- 1  0             9.57
26 mu_0       0.8      1.52      3.17e- 2  0            14.1 
27 mu_0       0.9      0.963     1.73e- 7  0            23.6 
[1] "Total run time was 381.684 seconds"
