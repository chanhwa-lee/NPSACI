
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7784"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  65  66  67  69  70  71  72 
  2   1   2   2   1   1   1   4   1   5   2   1   1   1   1   3   1   2   2   3 
 74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  3   2   3   2   3   2   1   2   4   2   1   3   2   1   1   2   6   3   1   3 
 95  96  97  98  99 100 
  4   3   3   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04535 0.37381 0.63336 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4555 3229 
[1] "treatment indicator table: "

   0    1 
2976 4808 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3970
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 439.3 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.411 0.106 
 2 mu         0.1   0.2 0.464 0.107 
 3 mu         0.1   0.3 0.552 0.130 
 4 mu         0.1   0.4 0.603 0.143 
 5 mu         0.1   0.5 0.620 0.139 
 6 mu         0.2   0.1 0.356 0.0551
 7 mu         0.2   0.2 0.417 0.0474
 8 mu         0.2   0.3 0.500 0.0646
 9 mu         0.2   0.4 0.547 0.0721
10 mu         0.2   0.5 0.579 0.0655
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.849        0.166 0.00000000140     12.3 
 2 mu         0.2      0.971        0.904 0.00280            2.98
 3 mu         0.3      0.951        0.908 0.312              1.91
 4 mu         0.4      0.986        0.967 0.467              1.98
 5 mu         0.5      1.00         0.962 0.571              1.60
 6 mu         0.6      1.03         1.02  0.604              1.51
 7 mu         0.7      0.997        1.00  0.629              1.54
 8 mu         0.8      0.971        0.980 0.478              1.52
 9 mu         0.9      1.05         1.06  0.383              2.19
10 mu_1       0.1      0.840        0.239 0.00000000478      9.77
11 mu_1       0.2      0.978        0.900 0.00480            3.17
12 mu_1       0.3      0.950        0.906 0.337              1.84
13 mu_1       0.4      0.989        0.970 0.470              1.97
14 mu_1       0.5      1.00         0.964 0.575              1.61
15 mu_1       0.6      1.03         1.02  0.614              1.53
16 mu_1       0.7      0.994        1.00  0.618              1.54
17 mu_1       0.8      0.972        0.982 0.476              1.52
18 mu_1       0.9      1.05         1.06  0.369              2.19
19 mu_0       0.1      0.850        0.155 0.00000000103     12.6 
20 mu_0       0.2      0.969        0.910 0.00230            2.93
21 mu_0       0.3      0.952        0.904 0.297              1.98
22 mu_0       0.4      0.985        0.959 0.465              1.99
23 mu_0       0.5      1.00         0.964 0.567              1.60
24 mu_0       0.6      1.03         1.02  0.589              1.49
25 mu_0       0.7      1.00         1.01  0.655              1.53
26 mu_0       0.8      0.965        0.966 0.489              1.51
27 mu_0       0.9      1.05         1.04  0.361              2.21
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.73      3.75e-28  4.87e-74    370.  
 2 mu         0.2      1.01      2.78e-14  8.25e-49     44.2 
 3 mu         0.3      1.16      1.33e- 7  3.01e-34     60.1 
 4 mu         0.4      0.745     1.07e- 3  4.26e-24      7.31
 5 mu         0.5      0.989     3.03e- 2  2.05e-16      8.10
 6 mu         0.6      0.995     9.41e- 2  3.68e-16      6.42
 7 mu         0.7      0.934     1.72e- 1  1.99e-24      6.59
 8 mu         0.8      1.58      9.40e- 3  2.08e-36     23.3 
 9 mu         0.9      1.05      5.99e- 9  2.54e-57     22.7 
10 mu_1       0.1      4.22      2.41e-27  4.50e-73    416.  
11 mu_1       0.2      0.880     8.41e-14  3.81e-48     24.8 
12 mu_1       0.3      1.13      2.71e- 7  9.27e-34     55.1 
13 mu_1       0.4      0.757     1.30e- 3  9.85e-24      6.65
14 mu_1       0.5      1.00      4.07e- 2  3.80e-16      7.65
15 mu_1       0.6      0.985     8.78e- 2  6.90e-17      6.42
16 mu_1       0.7      0.947     1.76e- 1  3.19e-25      7.06
17 mu_1       0.8      1.58      7.33e- 3  2.92e-37     23.7 
18 mu_1       0.9      1.05      4.25e- 9  3.17e-58     23.3 
19 mu_0       0.1      3.67      1.50e-28  4.11e-75    364.  
20 mu_0       0.2      1.04      1.38e-14  7.85e-50     49.0 
21 mu_0       0.3      1.18      7.40e- 8  3.27e-35     62.3 
22 mu_0       0.4      0.736     9.74e- 4  5.41e-25      7.80
23 mu_0       0.5      0.973     1.99e- 2  3.13e-17      8.55
24 mu_0       0.6      1.01      1.27e- 1  8.17e-16      6.42
25 mu_0       0.7      0.903     1.94e- 1  5.88e-24      6.84
26 mu_0       0.8      1.57      1.59e- 2  9.22e-36     21.8 
27 mu_0       0.9      1.06      2.17e- 8  2.25e-56     23.5 
[1] "Total run time was 442.87 seconds"
