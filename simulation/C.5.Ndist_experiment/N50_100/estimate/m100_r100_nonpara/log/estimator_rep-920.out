
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7415"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  60  61  62  63  64  65  67  68  69  70  72  73 
  1   4   4   2   2   1   4   3   1   1   2   1   1   4   1   3   5   2   3   3 
 74  75  76  77  78  79  80  81  82  83  85  86  87  88  89  91  93  94  95  96 
  4   3   2   3   1   2   5   4   2   1   1   1   1   1   3   3   1   2   3   2 
 97  98 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03101 0.34098 0.60503 1.00000 6.74702 
[1] "event indicator table: "

   0    1 
4406 3009 
[1] "treatment indicator table: "

   0    1 
2660 4755 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3658
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 467.649 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.420 0.0790
 2 mu         0.1   0.2 0.560 0.101 
 3 mu         0.1   0.3 0.582 0.106 
 4 mu         0.1   0.4 0.613 0.127 
 5 mu         0.1   0.5 0.721 0.129 
 6 mu         0.2   0.1 0.325 0.0402
 7 mu         0.2   0.2 0.437 0.0621
 8 mu         0.2   0.3 0.447 0.0469
 9 mu         0.2   0.4 0.493 0.0586
10 mu         0.2   0.5 0.562 0.0704
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.18         0.367 0.000000134     10.7 
 2 mu         0.2      0.890        0.744 0.0160           6.90
 3 mu         0.3      0.957        0.913 0.185            3.11
 4 mu         0.4      1.05         1.06  0.456            1.95
 5 mu         0.5      1.04         1.03  0.547            1.82
 6 mu         0.6      1.00         0.973 0.472            1.70
 7 mu         0.7      1.03         1.01  0.606            1.41
 8 mu         0.8      1.00         0.982 0.489            1.62
 9 mu         0.9      0.978        0.936 0.175            2.79
10 mu_1       0.1      1.12         0.464 0.000000407      8.84
11 mu_1       0.2      0.884        0.761 0.0251           7.27
12 mu_1       0.3      0.970        0.942 0.192            2.66
13 mu_1       0.4      1.06         1.06  0.487            1.92
14 mu_1       0.5      1.03         1.02  0.564            1.79
15 mu_1       0.6      1.00         0.980 0.468            1.72
16 mu_1       0.7      1.03         1.02  0.614            1.41
17 mu_1       0.8      0.999        0.978 0.481            1.62
18 mu_1       0.9      0.978        0.931 0.168            2.81
19 mu_0       0.1      1.19         0.355 0.000000103     11.1 
20 mu_0       0.2      0.891        0.739 0.0137           6.81
21 mu_0       0.3      0.951        0.897 0.182            3.30
22 mu_0       0.4      1.05         1.06  0.430            1.99
23 mu_0       0.5      1.04         1.01  0.531            1.84
24 mu_0       0.6      1.00         0.961 0.478            1.67
25 mu_0       0.7      1.03         1.02  0.586            1.42
26 mu_0       0.8      1.01         0.985 0.517            1.64
27 mu_0       0.9      0.974        0.935 0.242            2.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00158     2.23e-27  1.44e-77     0.141
 2 mu         0.2    0.372       3.11e-15  6.94e-51    11.7  
 3 mu         0.3    1.29        2.10e- 8  1.68e-35    48.8  
 4 mu         0.4    1.09        4.73e- 4  2.60e-25    13.4  
 5 mu         0.5    1.19        4.09e- 2  1.26e-18    11.0  
 6 mu         0.6    1.25        2.53e- 1  3.67e-13    15.3  
 7 mu         0.7    1.14        7.69e- 2  6.16e-14     9.32 
 8 mu         0.8    0.943       1.71e- 2  1.11e-23     9.55 
 9 mu         0.9    2.12        9.96e- 8  1.14e-42    51.9  
10 mu_1       0.1    0.00399     1.62e-26  1.32e-76     0.352
11 mu_1       0.2    0.496       1.00e-14  3.19e-50    14.6  
12 mu_1       0.3    1.26        4.68e- 8  5.15e-35    48.7  
13 mu_1       0.4    1.12        7.77e- 4  6.50e-25    14.3  
14 mu_1       0.5    1.17        4.62e- 2  2.53e-18    11.8  
15 mu_1       0.6    1.26        2.18e- 1  6.12e-13    15.9  
16 mu_1       0.7    1.13        8.86e- 2  2.28e-14     9.78 
17 mu_1       0.8    0.948       1.50e- 2  4.15e-24     9.84 
18 mu_1       0.9    2.17        6.90e- 8  3.80e-43    53.9  
19 mu_0       0.1    0.00132     6.84e-28  0            0.117
20 mu_0       0.2    0.341       1.38e-15  0           10.9  
21 mu_0       0.3    1.29        9.91e- 9  0           48.9  
22 mu_0       0.4    1.08        2.73e- 4  0           12.9  
23 mu_0       0.5    1.20        3.10e- 2  0           10.2  
24 mu_0       0.6    1.23        2.31e- 1  0           14.5  
25 mu_0       0.7    1.17        1.14e- 1  0            8.25 
26 mu_0       0.8    0.922       3.12e- 2  0            8.39 
27 mu_0       0.9    1.72        2.14e- 7  0           33.5  
[1] "Total run time was 471.572 seconds"
