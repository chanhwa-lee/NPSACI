
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7649"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  58  59  60  61  63  65  67  68  69  70  71  72  73  74 
  2   3   2   3   1   1   4   1   2   3   2   3   1   1   1   1   3   2   7   2 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  95 
  2   3   1   1   2   3   3   1   2   1   2   2   5   3   3   3   2   4   1   1 
 97  98  99 100 
  3   3   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02032 0.32149 0.59261 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4635 3014 
[1] "treatment indicator table: "

   0    1 
2870 4779 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3906
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3743
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 403.038 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.520 0.120 
 2 mu         0.1   0.2 0.589 0.125 
 3 mu         0.1   0.3 0.635 0.127 
 4 mu         0.1   0.4 0.669 0.129 
 5 mu         0.1   0.5 0.737 0.142 
 6 mu         0.2   0.1 0.432 0.0569
 7 mu         0.2   0.2 0.515 0.0547
 8 mu         0.2   0.3 0.562 0.0530
 9 mu         0.2   0.4 0.601 0.0545
10 mu         0.2   0.5 0.661 0.0654
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.937        0.468 0.000000233     10.6 
 2 mu         0.2      0.978        0.929 0.0166           3.33
 3 mu         0.3      1.01         0.988 0.249            1.88
 4 mu         0.4      0.992        0.999 0.431            1.71
 5 mu         0.5      0.994        0.989 0.456            1.47
 6 mu         0.6      0.979        0.980 0.544            1.60
 7 mu         0.7      0.997        0.999 0.487            1.43
 8 mu         0.8      1.01         1.02  0.530            1.53
 9 mu         0.9      0.991        0.982 0.361            1.76
10 mu_1       0.1      0.935        0.541 0.000000667      9.82
11 mu_1       0.2      0.983        0.961 0.0239           2.90
12 mu_1       0.3      1.02         0.989 0.274            1.79
13 mu_1       0.4      0.991        0.994 0.428            1.65
14 mu_1       0.5      0.995        0.983 0.472            1.46
15 mu_1       0.6      0.979        0.979 0.542            1.61
16 mu_1       0.7      0.998        1.00  0.490            1.40
17 mu_1       0.8      1.01         1.02  0.523            1.55
18 mu_1       0.9      0.989        0.985 0.349            1.78
19 mu_0       0.1      0.938        0.450 0.000000185     11.0 
20 mu_0       0.2      0.977        0.924 0.0146           3.55
21 mu_0       0.3      1.01         0.992 0.238            1.91
22 mu_0       0.4      0.993        1.00  0.434            1.76
23 mu_0       0.5      0.994        0.993 0.440            1.47
24 mu_0       0.6      0.981        0.973 0.547            1.60
25 mu_0       0.7      0.994        0.999 0.479            1.49
26 mu_0       0.8      1.01         1.01  0.542            1.50
27 mu_0       0.9      1.01         0.997 0.418            1.73
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.335     6.15e-28  3.01e-79     18.8 
 2 mu         0.2      0.957     5.27e-15  9.20e-54     28.5 
 3 mu         0.3      1.37      1.72e- 8  6.54e-39     29.7 
 4 mu         0.4      1.33      1.76e- 4  2.00e-28     20.5 
 5 mu         0.5      1.53      9.49e- 3  2.40e-20     20.8 
 6 mu         0.6      1.16      1.47e- 1  8.26e-14      9.39
 7 mu         0.7      1.38      2.08e- 1  1.97e-20     20.1 
 8 mu         0.8      1.67      1.61e- 2  3.51e-31     27.8 
 9 mu         0.9      1.22      1.65e- 7  3.91e-50     28.5 
10 mu_1       0.1      0.511     4.47e-27  2.94e-78     28.1 
11 mu_1       0.2      0.962     1.84e-14  4.50e-53     30.9 
12 mu_1       0.3      1.35      3.76e- 8  2.13e-38     30.8 
13 mu_1       0.4      1.38      2.86e- 4  4.89e-28     23.1 
14 mu_1       0.5      1.51      9.58e- 3  4.69e-20     18.7 
15 mu_1       0.6      1.15      1.21e- 1  1.06e-13      9.20
16 mu_1       0.7      1.40      2.03e- 1  4.39e-21     20.0 
17 mu_1       0.8      1.67      1.71e- 2  6.83e-32     27.6 
18 mu_1       0.9      1.21      1.21e- 7  6.77e-51     28.9 
19 mu_0       0.1      0.315     1.87e-28  7.69e-81     17.7 
20 mu_0       0.2      0.956     2.00e-15  2.64e-55     30.0 
21 mu_0       0.3      1.38      8.41e- 9  2.15e-40     29.3 
22 mu_0       0.4      1.30      1.03e- 4  7.67e-30     18.8 
23 mu_0       0.5      1.55      1.06e- 2  1.10e-21     22.9 
24 mu_0       0.6      1.18      1.48e- 1  4.75e-15      9.69
25 mu_0       0.7      1.32      1.88e- 1  5.55e-20     20.2 
26 mu_0       0.8      1.67      1.45e- 2  1.48e-30     28.4 
27 mu_0       0.9      1.33      5.58e- 7  3.30e-49     25.7 
[1] "Total run time was 406.631 seconds"
