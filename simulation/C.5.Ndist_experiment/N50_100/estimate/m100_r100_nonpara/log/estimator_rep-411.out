
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7395"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 63 64 65 66 68 69 70 71 72 73 74 75 76 77 
 3  2  2  1  2  2  1  2  1  1  3  1  5  2  5  1  3  3  2  2  2  2  1  3  2  2 
78 79 80 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 
 5  2  2  4  4  2  2  2  2  2  2  1  2  1  3  1  1  3  2  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02804 0.33688 0.60599 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4452 2943 
[1] "treatment indicator table: "

   0    1 
2742 4653 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3689
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3706
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 469.022 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.388 0.0856
 2 mu         0.1   0.2 0.444 0.0717
 3 mu         0.1   0.3 0.553 0.103 
 4 mu         0.1   0.4 0.558 0.0906
 5 mu         0.1   0.5 0.592 0.0815
 6 mu         0.2   0.1 0.385 0.0532
 7 mu         0.2   0.2 0.448 0.0461
 8 mu         0.2   0.3 0.547 0.0613
 9 mu         0.2   0.4 0.567 0.0545
10 mu         0.2   0.5 0.607 0.0492
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.869        0.675  0.000670      4.15
 2 mu         0.2      0.979        0.911  0.252         2.31
 3 mu         0.3      0.976        0.962  0.415         1.68
 4 mu         0.4      0.999        0.985  0.575         1.80
 5 mu         0.5      1.01         1.00   0.460         1.49
 6 mu         0.6      0.995        0.991  0.567         1.40
 7 mu         0.7      0.996        1.00   0.500         1.53
 8 mu         0.8      0.996        0.974  0.536         1.53
 9 mu         0.9      1.01         0.966  0.300         2.54
10 mu_1       0.1      0.888        0.721  0.00161       4.43
11 mu_1       0.2      0.983        0.979  0.304         2.25
12 mu_1       0.3      0.974        0.946  0.414         1.68
13 mu_1       0.4      1.00         0.990  0.552         1.78
14 mu_1       0.5      1.01         0.996  0.476         1.48
15 mu_1       0.6      0.994        0.990  0.571         1.39
16 mu_1       0.7      0.997        1.00   0.498         1.52
17 mu_1       0.8      0.995        0.972  0.533         1.54
18 mu_1       0.9      1.01         0.964  0.301         2.58
19 mu_0       0.1      0.866        0.663  0.000566      4.12
20 mu_0       0.2      0.978        0.915  0.234         2.32
21 mu_0       0.3      0.977        0.968  0.415         1.72
22 mu_0       0.4      0.998        0.983  0.582         1.82
23 mu_0       0.5      1.01         0.998  0.444         1.49
24 mu_0       0.6      0.995        1.00   0.562         1.40
25 mu_0       0.7      0.995        1.00   0.506         1.53
26 mu_0       0.8      1.00         1.00   0.547         1.60
27 mu_0       0.9      1.01         0.957  0.272         2.24
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0971     1.75e-26  2.45e-79      5.38
 2 mu         0.2     0.859      1.60e-14  1.19e-54     22.7 
 3 mu         0.3     0.992      3.29e- 8  3.26e-40     21.2 
 4 mu         0.4     0.935      4.32e- 4  5.74e-30      7.26
 5 mu         0.5     0.942      3.46e- 2  5.07e-22     10.9 
 6 mu         0.6     0.902      7.46e- 2  1.58e-15      6.68
 7 mu         0.7     0.989      1.05e- 1  8.88e-21     13.4 
 8 mu         0.8     1.07       2.83e- 2  4.05e-33      8.26
 9 mu         0.9     1.49       5.17e- 7  3.18e-55     33.7 
10 mu_1       0.1     0.174      1.13e-25  2.45e-78      9.68
11 mu_1       0.2     0.882      5.46e-14  5.93e-54     22.5 
12 mu_1       0.3     1.00       7.50e- 8  1.09e-39     19.6 
13 mu_1       0.4     0.931      7.40e- 4  1.43e-29      7.33
14 mu_1       0.5     0.944      4.52e- 2  1.01e-21     11.3 
15 mu_1       0.6     0.908      5.58e- 2  2.63e-15      6.68
16 mu_1       0.7     0.983      1.03e- 1  2.72e-21     13.6 
17 mu_1       0.8     1.08       2.20e- 2  1.08e-33      8.52
18 mu_1       0.9     1.52       3.50e- 7  7.56e-56     35.2 
19 mu_0       0.1     0.0886     5.57e-27  0             4.90
20 mu_0       0.2     0.853      6.34e-15  0            23.4 
21 mu_0       0.3     0.988      1.49e- 8  0            21.9 
22 mu_0       0.4     0.938      2.27e- 4  0             7.61
23 mu_0       0.5     0.940      2.70e- 2  0            10.5 
24 mu_0       0.6     0.893      5.91e- 2  0             6.68
25 mu_0       0.7     1.00       8.88e- 2  0            12.9 
26 mu_0       0.8     1.03       4.18e- 2  0             7.43
27 mu_0       0.9     1.29       5.91e- 7  0            19.5 
[1] "Total run time was 472.827 seconds"
