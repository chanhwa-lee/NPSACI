
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7446"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  63  64  65  67  68  69  70  71  72 
  3   2   2   1   3   1   2   3   1   3   2   2   2   3   3   4   3   2   1   2 
 73  74  75  77  78  79  81  82  83  84  86  87  88  89  91  92  93  94  95  96 
  5   3   4   3   1   2   3   2   2   5   3   1   1   1   3   1   1   2   2   2 
 97  98  99 100 
  3   1   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03948 0.34455 0.60546 1.00000 5.08927 
[1] "event indicator table: "

   0    1 
4353 3093 
[1] "treatment indicator table: "

   0    1 
3043 4403 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3717
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3729
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 414.927 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.257 0.0463
 2 mu         0.1   0.2 0.294 0.0681
 3 mu         0.1   0.3 0.379 0.0525
 4 mu         0.1   0.4 0.428 0.0546
 5 mu         0.1   0.5 0.513 0.0458
 6 mu         0.2   0.1 0.331 0.0343
 7 mu         0.2   0.2 0.404 0.0317
 8 mu         0.2   0.3 0.483 0.0372
 9 mu         0.2   0.4 0.525 0.0374
10 mu         0.2   0.5 0.563 0.0369
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.899        0.728  0.000321      3.06
 2 mu         0.2      0.989        1.01   0.342         2.61
 3 mu         0.3      0.998        0.966  0.460         1.93
 4 mu         0.4      0.979        0.971  0.433         1.45
 5 mu         0.5      1.00         1.00   0.686         1.59
 6 mu         0.6      0.973        0.965  0.689         1.36
 7 mu         0.7      0.979        0.970  0.617         1.31
 8 mu         0.8      1.01         1.01   0.395         1.51
 9 mu         0.9      1.05         1.03   0.330         2.41
10 mu_1       0.1      0.903        0.875  0.000730      3.12
11 mu_1       0.2      0.998        0.976  0.395         2.64
12 mu_1       0.3      0.995        0.970  0.433         1.94
13 mu_1       0.4      0.980        0.961  0.444         1.46
14 mu_1       0.5      1.00         1.01   0.687         1.57
15 mu_1       0.6      0.971        0.972  0.666         1.37
16 mu_1       0.7      0.981        0.970  0.630         1.31
17 mu_1       0.8      1.01         1.01   0.390         1.52
18 mu_1       0.9      1.06         1.03   0.329         2.44
19 mu_0       0.1      0.899        0.710  0.000275      3.09
20 mu_0       0.2      0.986        1.03   0.325         2.60
21 mu_0       0.3      1.00         0.975  0.472         1.92
22 mu_0       0.4      0.979        0.973  0.425         1.44
23 mu_0       0.5      1.00         1.00   0.676         1.62
24 mu_0       0.6      0.976        0.959  0.694         1.38
25 mu_0       0.7      0.976        0.963  0.586         1.35
26 mu_0       0.8      1.01         1.01   0.413         1.47
27 mu_0       0.9      1.05         1.03   0.338         2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.87      4.89e-25  2.40e-81    133.  
 2 mu         0.2      0.824     9.40e-13  5.21e-55     24.9 
 3 mu         0.3      0.649     8.21e- 7  1.09e-39      9.49
 4 mu         0.4      0.558     2.13e- 3  6.80e-29     11.1 
 5 mu         0.5      1.10      2.56e- 2  1.33e-20      7.81
 6 mu         0.6      1.23      3.83e- 1  1.19e-23      7.82
 7 mu         0.7      1.16      2.64e- 1  2.04e-34      6.78
 8 mu         0.8      1.23      4.17e- 3  6.42e-50     14.7 
 9 mu         0.9      0.548     8.01e- 9  7.49e-77     10.5 
10 mu_1       0.1      1.84      3.29e-24  2.32e-80    119.  
11 mu_1       0.2      0.810     2.75e-12  2.52e-54     24.2 
12 mu_1       0.3      0.620     1.81e- 6  3.53e-39      9.13
13 mu_1       0.4      0.583     2.85e- 3  1.64e-28     11.3 
14 mu_1       0.5      1.13      3.50e- 2  2.57e-20      7.54
15 mu_1       0.6      1.22      3.96e- 1  1.79e-24      8.07
16 mu_1       0.7      1.16      2.31e- 1  2.63e-35      6.94
17 mu_1       0.8      1.22      3.20e- 3  7.23e-51     14.6 
18 mu_1       0.9      0.543     5.51e- 9  7.49e-78     10.3 
19 mu_0       0.1      1.87      1.71e-25  8.78e-83    134.  
20 mu_0       0.2      0.827     4.89e-13  2.15e-56     25.1 
21 mu_0       0.3      0.662     3.97e- 7  5.15e-41      9.65
22 mu_0       0.4      0.541     1.34e- 3  3.74e-30     11.1 
23 mu_0       0.5      1.06      1.63e- 2  8.76e-22      8.34
24 mu_0       0.6      1.24      2.72e- 1  2.72e-23      7.45
25 mu_0       0.7      1.13      2.13e- 1  6.20e-34      6.40
26 mu_0       0.8      1.26      4.84e- 3  2.92e-49     15.3 
27 mu_0       0.9      0.590     2.89e- 8  6.81e-76     12.4 
[1] "Total run time was 419.088 seconds"
