
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7397"
[1] "cluster size dist'n: "

50 51 53 54 55 56 57 58 59 60 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 
 4  2  1  3  4  1  3  1  2  2  3  1  3  3  3  1  4  1  1  2  2  2  1  2  3  2 
78 79 80 81 82 83 84 85 86 87 88 89 90 91 93 94 95 96 97 98 99 
 1  1  2  1  3  2  1  3  2  9  1  1  2  2  3  2  2  1  2  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03144 0.34030 0.61058 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4443 2954 
[1] "treatment indicator table: "

   0    1 
2667 4730 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3604
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3793
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 428.88 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.313 0.0720
 2 mu         0.1   0.2 0.421 0.0653
 3 mu         0.1   0.3 0.439 0.0556
 4 mu         0.1   0.4 0.450 0.0471
 5 mu         0.1   0.5 0.477 0.0493
 6 mu         0.2   0.1 0.348 0.0627
 7 mu         0.2   0.2 0.466 0.0545
 8 mu         0.2   0.3 0.494 0.0425
 9 mu         0.2   0.4 0.517 0.0305
10 mu         0.2   0.5 0.551 0.0306
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.783        0.579 0.000104       3.58
 2 mu         0.2      0.957        0.897 0.149          2.56
 3 mu         0.3      0.961        0.913 0.393          1.78
 4 mu         0.4      0.956        0.964 0.508          1.54
 5 mu         0.5      0.998        0.996 0.526          1.92
 6 mu         0.6      1.02         1.01  0.530          1.92
 7 mu         0.7      0.984        0.976 0.471          1.52
 8 mu         0.8      0.996        0.978 0.547          1.86
 9 mu         0.9      0.984        0.963 0.238          1.78
10 mu_1       0.1      0.806        0.693 0.000301       3.70
11 mu_1       0.2      0.959        0.887 0.118          2.36
12 mu_1       0.3      0.962        0.920 0.401          1.70
13 mu_1       0.4      0.958        0.954 0.532          1.55
14 mu_1       0.5      1.00         1.01  0.533          1.97
15 mu_1       0.6      1.02         1.01  0.527          1.89
16 mu_1       0.7      0.982        0.968 0.466          1.52
17 mu_1       0.8      0.996        0.980 0.543          1.87
18 mu_1       0.9      0.983        0.958 0.228          1.79
19 mu_0       0.1      0.780        0.557 0.0000817      3.57
20 mu_0       0.2      0.957        0.901 0.130          2.61
21 mu_0       0.3      0.960        0.908 0.389          1.81
22 mu_0       0.4      0.955        0.972 0.480          1.54
23 mu_0       0.5      0.995        0.979 0.517          1.88
24 mu_0       0.6      1.02         1.02  0.534          1.96
25 mu_0       0.7      0.987        0.972 0.481          1.60
26 mu_0       0.8      0.993        0.965 0.521          1.82
27 mu_0       0.9      0.993        0.940 0.332          1.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.192     2.22e-27  7.50e-74     19.2 
 2 mu         0.2      0.314     2.12e-15  5.66e-51     26.1 
 3 mu         0.3      0.855     5.71e- 8  1.37e-37     23.7 
 4 mu         0.4      1.36      2.78e- 4  4.28e-28     15.7 
 5 mu         0.5      1.35      3.26e- 2  9.92e-21     27.7 
 6 mu         0.6      1.08      9.33e- 2  1.03e-14     15.6 
 7 mu         0.7      1.05      6.48e- 2  9.54e-22     11.8 
 8 mu         0.8      1.16      1.02e- 2  5.03e-33      9.77
 9 mu         0.9      1.13      4.57e- 7  7.00e-53     13.5 
10 mu_1       0.1      0.288     1.52e-26  7.50e-73     28.8 
11 mu_1       0.2      0.276     6.51e-15  2.83e-50     19.6 
12 mu_1       0.3      0.957     1.30e- 7  4.56e-37     26.1 
13 mu_1       0.4      1.38      2.59e- 4  1.07e-27     16.2 
14 mu_1       0.5      1.33      4.19e- 2  1.98e-20     27.2 
15 mu_1       0.6      1.05      9.32e- 2  1.17e-14     16.1 
16 mu_1       0.7      1.06      6.68e- 2  2.04e-22     12.3 
17 mu_1       0.8      1.16      9.31e- 3  9.42e-34      9.97
18 mu_1       0.9      1.13      3.47e- 7  1.17e-53     13.7 
19 mu_0       0.1      0.181     7.72e-28  0            18.1 
20 mu_0       0.2      0.324     1.03e-15  0            27.7 
21 mu_0       0.3      0.811     2.60e- 8  0            22.7 
22 mu_0       0.4      1.34      1.44e- 4  0            15.4 
23 mu_0       0.5      1.36      2.95e- 2  0            28.1 
24 mu_0       0.6      1.11      7.88e- 2  0            14.8 
25 mu_0       0.7      1.03      6.46e- 2  0            10.6 
26 mu_0       0.8      1.16      1.48e- 2  0            10.1 
27 mu_0       0.9      1.13      2.32e- 8  0            13.0 
[1] "Total run time was 432.734 seconds"
