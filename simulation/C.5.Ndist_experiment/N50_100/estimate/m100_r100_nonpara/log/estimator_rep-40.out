
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7318"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  58  60  61  63  65  66  67  68  69  70  71  72  73  74 
  3   3   3   5   4   4   2   3   3   1   4   2   2   1   1   3   3   3   2   3 
 75  76  77  78  79  81  82  83  84  85  86  88  89  90  92  93  94  95  96  98 
  2   2   1   2   2   3   1   1   3   2   3   3   2   3   2   2   1   3   3   1 
 99 100 
  1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02861 0.33145 0.58697 0.99749 5.80210 
[1] "event indicator table: "

   0    1 
4310 3008 
[1] "treatment indicator table: "

   0    1 
2855 4463 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3567
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3751
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 400.645 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.416 0.0870
 2 mu         0.1   0.2 0.457 0.0872
 3 mu         0.1   0.3 0.517 0.0933
 4 mu         0.1   0.4 0.547 0.0897
 5 mu         0.1   0.5 0.581 0.0936
 6 mu         0.2   0.1 0.387 0.0393
 7 mu         0.2   0.2 0.432 0.0383
 8 mu         0.2   0.3 0.496 0.0428
 9 mu         0.2   0.4 0.549 0.0441
10 mu         0.2   0.5 0.591 0.0528
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.879        0.386 0.00000778      8.37
 2 mu         0.2      1.10         0.996 0.0648          3.83
 3 mu         0.3      1.02         0.978 0.333           2.29
 4 mu         0.4      1.01         0.991 0.493           1.74
 5 mu         0.5      0.979        0.943 0.571           1.52
 6 mu         0.6      0.994        0.997 0.618           1.34
 7 mu         0.7      1.02         1.02  0.529           1.45
 8 mu         0.8      0.966        0.976 0.449           1.29
 9 mu         0.9      0.951        0.930 0.248           1.99
10 mu_1       0.1      0.917        0.583 0.0000221       9.26
11 mu_1       0.2      1.08         1.03  0.0960          3.32
12 mu_1       0.3      1.02         1.01  0.354           2.31
13 mu_1       0.4      1.01         0.993 0.508           1.75
14 mu_1       0.5      0.980        0.949 0.567           1.49
15 mu_1       0.6      0.995        1.00  0.621           1.31
16 mu_1       0.7      1.03         1.02  0.543           1.46
17 mu_1       0.8      0.962        0.969 0.443           1.29
18 mu_1       0.9      0.953        0.928 0.231           2.03
19 mu_0       0.1      0.875        0.362 0.00000618      8.27
20 mu_0       0.2      1.10         1.01  0.0569          3.96
21 mu_0       0.3      1.02         0.958 0.324           2.28
22 mu_0       0.4      1.02         1.00  0.484           1.73
23 mu_0       0.5      0.979        0.944 0.574           1.55
24 mu_0       0.6      0.992        0.983 0.615           1.37
25 mu_0       0.7      1.02         1.02  0.497           1.42
26 mu_0       0.8      0.980        0.992 0.474           1.33
27 mu_0       0.9      0.934        0.916 0.352           1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.339     1.50e-26  4.84e-73     31.5 
 2 mu         0.2      1.23      3.67e-13  4.11e-49     51.9 
 3 mu         0.3      0.996     7.46e- 7  3.37e-35     18.9 
 4 mu         0.4      1.23      4.08e- 3  2.10e-25      9.35
 5 mu         0.5      1.48      9.13e- 2  6.86e-18     27.3 
 6 mu         0.6      1.20      2.18e- 1  7.59e-12      9.90
 7 mu         0.7      1.45      1.83e- 1  3.52e-17     13.4 
 8 mu         0.8      1.09      6.79e- 3  1.06e-27      7.44
 9 mu         0.9      2.71      4.94e- 9  1.35e-46     79.7 
10 mu_1       0.1      0.524     8.56e-26  4.66e-72     47.3 
11 mu_1       0.2      1.25      1.06e-12  1.98e-48     55.6 
12 mu_1       0.3      0.971     1.51e- 6  1.08e-34     16.3 
13 mu_1       0.4      1.26      5.79e- 3  5.05e-25     10.7 
14 mu_1       0.5      1.47      7.27e- 2  1.32e-17     26.3 
15 mu_1       0.6      1.19      2.50e- 1  1.22e-11     10.5 
16 mu_1       0.7      1.47      1.59e- 1  1.12e-17     13.5 
17 mu_1       0.8      1.08      5.19e- 3  2.97e-28      7.20
18 mu_1       0.9      2.80      3.22e- 9  3.35e-47     83.1 
19 mu_0       0.1      0.319     7.19e-27  1.94e-74     29.8 
20 mu_0       0.2      1.23      1.87e-13  1.86e-50     51.0 
21 mu_0       0.3      1.01      4.19e- 7  1.74e-36     21.2 
22 mu_0       0.4      1.21      2.74e- 3  1.26e-26      9.04
23 mu_0       0.5      1.48      6.96e- 2  4.96e-19     28.2 
24 mu_0       0.6      1.22      2.07e- 1  6.86e-13      9.04
25 mu_0       0.7      1.41      2.40e- 1  9.12e-17     13.0 
26 mu_0       0.8      1.15      1.11e- 2  4.13e-27      8.43
27 mu_0       0.9      1.88      1.91e- 8  1.05e-45     48.3 
[1] "Total run time was 404.586 seconds"
