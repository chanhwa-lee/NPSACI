
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7496"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  70  71 
  2   3   4   1   4   1   4   2   1   1   1   2   2   1   2   1   3   1   3   1 
 72  73  74  75  76  77  78  79  81  82  83  84  85  86  87  88  90  91  92  93 
  3   3   3   1   3   2   2   1   2   1   3   2   2   4   3   3   4   1   1   1 
 94  95  96  97  98  99 100 
  3   2   3   1   3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02334 0.32006 0.58720 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4403 3093 
[1] "treatment indicator table: "

   0    1 
2976 4520 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3784
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3712
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 400.307 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.329 0.0438
 2 mu         0.1   0.2 0.444 0.0525
 3 mu         0.1   0.3 0.519 0.0665
 4 mu         0.1   0.4 0.604 0.0768
 5 mu         0.1   0.5 0.616 0.0689
 6 mu         0.2   0.1 0.331 0.0233
 7 mu         0.2   0.2 0.466 0.0507
 8 mu         0.2   0.3 0.504 0.0378
 9 mu         0.2   0.4 0.588 0.0526
10 mu         0.2   0.5 0.606 0.0505
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.909        0.736  0.00104       4.18
 2 mu         0.2      0.958        0.919  0.244         1.94
 3 mu         0.3      1.01         1.01   0.434         1.77
 4 mu         0.4      0.977        0.989  0.625         1.42
 5 mu         0.5      0.994        0.981  0.548         1.39
 6 mu         0.6      1.00         0.997  0.646         1.44
 7 mu         0.7      1.01         1.01   0.570         1.45
 8 mu         0.8      1.03         1.02   0.562         1.81
 9 mu         0.9      1.00         0.957  0.223         2.43
10 mu_1       0.1      0.915        0.806  0.00261       3.90
11 mu_1       0.2      0.966        0.935  0.299         1.95
12 mu_1       0.3      1.01         0.998  0.402         1.77
13 mu_1       0.4      0.976        0.982  0.621         1.44
14 mu_1       0.5      0.995        0.976  0.550         1.39
15 mu_1       0.6      1.00         1.00   0.656         1.45
16 mu_1       0.7      1.01         1.01   0.573         1.44
17 mu_1       0.8      1.03         1.02   0.557         1.83
18 mu_1       0.9      1.00         0.953  0.208         2.47
19 mu_0       0.1      0.909        0.711  0.000870      4.21
20 mu_0       0.2      0.956        0.913  0.230         1.93
21 mu_0       0.3      1.01         1.01   0.448         1.82
22 mu_0       0.4      0.978        0.992  0.597         1.42
23 mu_0       0.5      0.993        0.978  0.546         1.39
24 mu_0       0.6      1.00         0.986  0.630         1.44
25 mu_0       0.7      1.01         1.02   0.563         1.45
26 mu_0       0.8      1.03         1.00   0.582         1.74
27 mu_0       0.9      1.00         0.942  0.358         2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.398     1.93e-23  7.68e-80     26.1 
 2 mu         0.2      0.601     7.64e-13  8.33e-53     22.1 
 3 mu         0.3      0.459     2.07e- 7  3.46e-37      7.45
 4 mu         0.4      0.950     1.33e- 3  2.75e-26      9.81
 5 mu         0.5      0.800     1.40e- 1  5.07e-18      6.44
 6 mu         0.6      1.03      1.59e- 1  1.42e-18      8.61
 7 mu         0.7      1.10      1.85e- 1  1.05e-27      7.09
 8 mu         0.8      1.10      1.07e- 2  5.57e-41      9.63
 9 mu         0.9      1.40      9.78e- 9  3.37e-64     39.0 
10 mu_1       0.1      0.541     1.32e-22  7.13e-79     31.8 
11 mu_1       0.2      0.544     2.65e-12  3.87e-52     21.3 
12 mu_1       0.3      0.506     4.59e- 7  1.07e-36      8.89
13 mu_1       0.4      0.963     2.03e- 3  6.39e-26      8.79
14 mu_1       0.5      0.789     1.51e- 1  9.41e-18      6.04
15 mu_1       0.6      1.05      1.53e- 1  2.90e-19      8.93
16 mu_1       0.7      1.09      2.22e- 1  1.83e-28      7.57
17 mu_1       0.8      1.10      8.50e- 3  8.51e-42      9.95
18 mu_1       0.9      1.44      6.89e- 9  4.57e-65     40.2 
19 mu_0       0.1      0.382     6.73e-24  6.09e-81     25.4 
20 mu_0       0.2      0.616     2.93e-13  7.44e-54     22.3 
21 mu_0       0.3      0.439     1.05e- 7  3.53e-38      6.83
22 mu_0       0.4      0.941     8.65e- 4  3.28e-27     10.5 
23 mu_0       0.5      0.812     9.55e- 2  7.24e-19      6.85
24 mu_0       0.6      0.987     1.24e- 1  3.12e-18      8.75
25 mu_0       0.7      1.13      1.73e- 1  3.06e-27      6.94
26 mu_0       0.8      1.12      1.59e- 2  2.45e-40     10.1 
27 mu_0       0.9      1.09      3.58e- 8  2.96e-63     28.1 
[1] "Total run time was 404.355 seconds"
