
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7491"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70 
  2   2   1   3   2   1   1   2   4   1   3   2   1   4   1   3   1   3   2   2 
 71  72  73  74  75  76  77  78  80  81  82  83  84  86  88  89  90  92  93  94 
  1   3   1   3   4   2   4   2   1   3   5   1   1   3   3   2   1   2   3   1 
 95  96  97  98  99 100 
  1   3   3   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04214 0.36177 0.61942 1.00000 7.24366 
[1] "event indicator table: "

   0    1 
4469 3022 
[1] "treatment indicator table: "

   0    1 
2639 4852 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3620
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3871
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 409.673 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.455 0.175 
 2 mu         0.1   0.2 0.580 0.226 
 3 mu         0.1   0.3 0.702 0.267 
 4 mu         0.1   0.4 0.780 0.306 
 5 mu         0.1   0.5 0.841 0.333 
 6 mu         0.2   0.1 0.277 0.0267
 7 mu         0.2   0.2 0.349 0.0322
 8 mu         0.2   0.3 0.427 0.0460
 9 mu         0.2   0.4 0.467 0.0500
10 mu         0.2   0.5 0.503 0.0588
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.49        0.0267  2.19e-10     59.8 
 2 mu         0.2      0.915       0.715   2.43e- 4      3.36
 3 mu         0.3      0.985       0.890   6.96e- 2      2.93
 4 mu         0.4      0.992       0.927   3.72e- 1      2.25
 5 mu         0.5      0.987       1.01    5.88e- 1      1.54
 6 mu         0.6      0.992       0.953   5.39e- 1      1.95
 7 mu         0.7      1.00        0.980   5.56e- 1      1.62
 8 mu         0.8      0.990       0.984   5.64e- 1      1.42
 9 mu         0.9      0.986       0.951   2.11e- 1      1.75
10 mu_1       0.1      1.35        0.0513  8.59e-10     51.5 
11 mu_1       0.2      0.921       0.744   4.81e- 4      3.40
12 mu_1       0.3      0.981       0.946   9.42e- 2      2.88
13 mu_1       0.4      0.998       0.920   3.76e- 1      2.13
14 mu_1       0.5      0.986       1.00    5.83e- 1      1.52
15 mu_1       0.6      0.993       0.963   5.29e- 1      1.97
16 mu_1       0.7      1.00        0.979   5.60e- 1      1.62
17 mu_1       0.8      0.990       0.987   5.58e- 1      1.42
18 mu_1       0.9      0.985       0.961   2.02e- 1      1.75
19 mu_0       0.1      1.50        0.0232  1.48e-10     60.8 
20 mu_0       0.2      0.914       0.702   1.83e- 4      3.48
21 mu_0       0.3      0.987       0.905   5.90e- 2      2.96
22 mu_0       0.4      0.988       0.930   3.68e- 1      2.33
23 mu_0       0.5      0.989       0.995   5.67e- 1      1.56
24 mu_0       0.6      0.992       0.958   5.55e- 1      1.93
25 mu_0       0.7      1.00        0.985   5.47e- 1      1.61
26 mu_0       0.8      0.990       0.978   5.90e- 1      1.44
27 mu_0       0.9      0.993       0.964   2.61e- 1      1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000193     5.88e-31  1.65e-71    0.0188
 2 mu         0.2   0.351        7.31e-17  3.49e-46   30.7   
 3 mu         0.3   1.49         2.79e- 9  1.12e-31   98.1   
 4 mu         0.4   1.22         1.49e- 4  1.14e-21   35.4   
 5 mu         0.5   1.01         5.83e- 2  3.31e-14    9.59  
 6 mu         0.6   1.21         7.93e- 2  1.84e- 8   10.2   
 7 mu         0.7   1.17         1.69e- 1  2.19e-14   15.9   
 8 mu         0.8   1.33         3.60e- 2  2.89e-24   13.0   
 9 mu         0.9   1.34         1.25e- 7  2.65e-42   23.0   
10 mu_1       0.1   0.000539     3.86e-30  1.46e-70    0.0526
11 mu_1       0.2   0.492        2.50e-16  1.55e-45   42.9   
12 mu_1       0.3   1.50         5.83e- 9  3.31e-31   91.4   
13 mu_1       0.4   1.19         2.54e- 4  2.53e-21   34.0   
14 mu_1       0.5   1.02         6.97e- 2  5.88e-14    9.69  
15 mu_1       0.6   1.21         7.59e- 2  2.43e- 8    9.83  
16 mu_1       0.7   1.16         1.97e- 1  8.51e-15   15.7   
17 mu_1       0.8   1.34         2.89e- 2  9.86e-25   13.4   
18 mu_1       0.9   1.33         8.98e- 8  8.03e-43   23.3   
19 mu_0       0.1   0.000154     2.20e-31  2.08e-72    0.0151
20 mu_0       0.2   0.316        2.89e-17  4.95e-47   27.7   
21 mu_0       0.3   1.49         1.49e- 9  1.81e-32  101.    
22 mu_0       0.4   1.25         7.88e- 5  2.16e-22   36.4   
23 mu_0       0.5   0.997        3.83e- 2  7.52e-15    9.49  
24 mu_0       0.6   1.19         7.94e- 2  5.21e- 9   10.7   
25 mu_0       0.7   1.18         1.52e- 1  5.30e-14   16.2   
26 mu_0       0.8   1.30         6.43e- 2  1.05e-23   11.5   
27 mu_0       0.9   1.44         4.43e- 7  1.93e-41   20.7   
[1] "Total run time was 413.673 seconds"
