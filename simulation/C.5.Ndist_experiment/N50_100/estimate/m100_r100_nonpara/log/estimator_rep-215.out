
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7323"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  70  71 
  6   2   1   3   2   1   4   1   1   1   3   3   1   3   2   3   5   1   2   3 
 72  73  75  76  77  78  79  80  81  82  83  84  85  87  88  89  90  92  93  94 
  1   3   1   2   2   2   2   4   3   1   1   4   1   3   2   2   2   4   1   1 
 95  96  97  98 100 
  2   1   3   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03739 0.36487 0.63014 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4428 2895 
[1] "treatment indicator table: "

   0    1 
2499 4824 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3528
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3795
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 399.34 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.164 0.0550
 2 mu         0.1   0.2 0.162 0.0531
 3 mu         0.1   0.3 0.150 0.0669
 4 mu         0.1   0.4 0.181 0.0604
 5 mu         0.1   0.5 0.274 0.0725
 6 mu         0.2   0.1 0.382 0.0477
 7 mu         0.2   0.2 0.451 0.0483
 8 mu         0.2   0.3 0.470 0.0517
 9 mu         0.2   0.4 0.520 0.0522
10 mu         0.2   0.5 0.609 0.0634
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.394       0.0171  2.35e-10      7.66
 2 mu         0.2      1.03        0.721   1.08e- 3      6.08
 3 mu         0.3      1.04        1.04    1.57e- 1      2.51
 4 mu         0.4      0.989       0.958   5.04e- 1      1.69
 5 mu         0.5      0.993       0.970   5.33e- 1      1.67
 6 mu         0.6      1.00        1.03    5.33e- 1      1.26
 7 mu         0.7      1.01        0.996   6.78e- 1      1.41
 8 mu         0.8      0.991       0.972   4.20e- 1      1.51
 9 mu         0.9      0.960       0.928   2.86e- 1      2.00
10 mu_1       0.1      0.499       0.0369  8.00e-10      6.60
11 mu_1       0.2      1.04        0.781   1.84e- 3      5.08
12 mu_1       0.3      1.04        1.01    1.84e- 1      2.35
13 mu_1       0.4      0.987       0.953   4.96e- 1      1.67
14 mu_1       0.5      0.994       0.980   5.59e- 1      1.65
15 mu_1       0.6      1.00        1.02    5.44e- 1      1.27
16 mu_1       0.7      1.01        0.996   6.81e- 1      1.41
17 mu_1       0.8      0.991       0.972   4.10e- 1      1.50
18 mu_1       0.9      0.960       0.928   2.78e- 1      2.02
19 mu_0       0.1      0.382       0.0149  1.72e-10      7.78
20 mu_0       0.2      1.02        0.721   8.89e- 4      6.33
21 mu_0       0.3      1.04        1.05    1.45e- 1      2.60
22 mu_0       0.4      0.990       0.958   5.05e- 1      1.73
23 mu_0       0.5      0.993       0.973   5.05e- 1      1.68
24 mu_0       0.6      0.999       1.02    5.16e- 1      1.27
25 mu_0       0.7      1.01        1.00    6.72e- 1      1.42
26 mu_0       0.8      0.991       0.961   4.60e- 1      1.55
27 mu_0       0.9      0.964       0.932   3.27e- 1      1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.00117      4.49e-29  7.61e-73    0.105 
 2 mu         0.2   0.423        1.04e-16  2.04e-47   15.3   
 3 mu         0.3   1.70         4.20e- 9  8.54e-33   58.5   
 4 mu         0.4   1.07         3.90e- 5  1.19e-22   20.8   
 5 mu         0.5   1.04         1.56e- 2  5.86e-16   14.0   
 6 mu         0.6   0.982        1.70e- 1  1.05e-10    8.17  
 7 mu         0.7   1.08         2.22e- 1  3.93e-14   11.4   
 8 mu         0.8   1.20         2.48e- 1  3.97e-24    7.72  
 9 mu         0.9   1.41         1.21e- 5  2.04e-42   22.8   
10 mu_1       0.1   0.00290      3.18e-28  6.89e-72    0.259 
11 mu_1       0.2   0.572        3.54e-16  9.24e-47   18.8   
12 mu_1       0.3   1.68         9.23e- 9  2.58e-32   56.5   
13 mu_1       0.4   1.06         6.70e- 5  2.68e-22   22.5   
14 mu_1       0.5   1.04         2.03e- 2  1.12e-15   12.1   
15 mu_1       0.6   0.980        1.68e- 1  1.67e-10    7.72  
16 mu_1       0.7   1.08         2.04e- 1  1.56e-14   11.0   
17 mu_1       0.8   1.20         2.11e- 1  1.38e-24    8.08  
18 mu_1       0.9   1.42         8.80e- 6  6.31e-43   22.9   
19 mu_0       0.1   0.000973     1.33e-29  8.01e-74    0.0883
20 mu_0       0.2   0.385        4.14e-17  2.42e-48   14.4   
21 mu_0       0.3   1.70         1.71e- 9  1.16e-33   59.4   
22 mu_0       0.4   1.08         2.03e- 5  1.14e-23   19.6   
23 mu_0       0.5   1.05         9.43e- 3  4.82e-17   15.8   
24 mu_0       0.6   0.985        1.34e- 1  1.08e-11    8.84  
25 mu_0       0.7   1.07         2.72e- 1  9.47e-14   12.4   
26 mu_0       0.8   1.20         2.16e- 1  1.43e-23    6.58  
27 mu_0       0.9   1.40         4.20e- 5  1.48e-41   21.6   
[1] "Total run time was 403.48 seconds"
