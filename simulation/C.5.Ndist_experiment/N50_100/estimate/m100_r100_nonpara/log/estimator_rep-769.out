
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7612"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70 
  1   1   4   1   5   2   1   1   1   1   1   1   3   1   1   4   2   3   3   1 
 71  72  73  74  75  76  78  79  80  81  82  83  84  85  86  87  88  90  92  93 
  2   2   2   4   1   1   2   1   5   1   2   3   1   4   3   5   1   3   4   1 
 95  96  98  99 100 
  1   2   5   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02426 0.29840 0.57140 0.98637 6.00000 
[1] "event indicator table: "

   0    1 
4380 3232 
[1] "treatment indicator table: "

   0    1 
3168 4444 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3744
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3868
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.332 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.590 0.149 
 2 mu         0.1   0.2 0.665 0.163 
 3 mu         0.1   0.3 0.711 0.174 
 4 mu         0.1   0.4 0.779 0.192 
 5 mu         0.1   0.5 0.820 0.206 
 6 mu         0.2   0.1 0.403 0.0384
 7 mu         0.2   0.2 0.464 0.0361
 8 mu         0.2   0.3 0.493 0.0327
 9 mu         0.2   0.4 0.538 0.0350
10 mu         0.2   0.5 0.571 0.0338
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.23         0.396 0.00000850     26.5 
 2 mu         0.2      0.945        0.874 0.0565          2.92
 3 mu         0.3      0.986        0.976 0.356           1.64
 4 mu         0.4      0.994        0.986 0.240           1.91
 5 mu         0.5      1.00         0.981 0.646           1.79
 6 mu         0.6      1.01         0.996 0.635           1.45
 7 mu         0.7      1.03         1.02  0.613           1.81
 8 mu         0.8      1.02         0.990 0.488           2.31
 9 mu         0.9      1.01         0.927 0.0259          4.26
10 mu_1       0.1      1.06         0.550 0.0000230      12.1 
11 mu_1       0.2      0.955        0.847 0.0785          2.60
12 mu_1       0.3      0.987        0.983 0.357           1.63
13 mu_1       0.4      0.995        0.977 0.252           1.88
14 mu_1       0.5      1.00         0.975 0.640           1.76
15 mu_1       0.6      1.01         1.00  0.652           1.47
16 mu_1       0.7      1.03         1.03  0.600           1.80
17 mu_1       0.8      1.02         0.993 0.467           2.31
18 mu_1       0.9      1.01         0.920 0.0238          4.39
19 mu_0       0.1      1.25         0.377 0.00000688     28.6 
20 mu_0       0.2      0.942        0.888 0.0510          3.00
21 mu_0       0.3      0.985        0.977 0.356           1.65
22 mu_0       0.4      0.994        0.985 0.232           1.93
23 mu_0       0.5      1.01         0.989 0.652           1.82
24 mu_0       0.6      1.01         0.992 0.609           1.42
25 mu_0       0.7      1.03         1.02  0.642           1.82
26 mu_0       0.8      1.02         0.981 0.519           2.31
27 mu_0       0.9      0.999        0.925 0.0446          3.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      4.08      2.44e-25  3.55e-73    331.  
 2 mu         0.2      1.78      6.31e-13  1.90e-47     80.0 
 3 mu         0.3      0.983     2.74e- 6  1.20e-32     12.0 
 4 mu         0.4      1.11      3.94e- 3  1.22e-22     16.2 
 5 mu         0.5      0.884     5.77e- 2  1.85e-15     15.8 
 6 mu         0.6      0.909     5.21e- 2  8.83e-15     13.7 
 7 mu         0.7      0.884     8.36e- 2  3.80e-23      6.17
 8 mu         0.8      1.52      7.48e- 4  1.75e-35     20.1 
 9 mu         0.9      1.76      9.16e-11  2.71e-57     95.7 
10 mu_1       0.1      4.19      1.52e-24  3.22e-72    301.  
11 mu_1       0.2      1.43      1.74e-12  8.62e-47     60.0 
12 mu_1       0.3      1.04      5.20e- 6  3.61e-32     14.4 
13 mu_1       0.4      1.07      5.98e- 3  2.84e-22     14.8 
14 mu_1       0.5      0.890     6.90e- 2  3.44e-15     16.0 
15 mu_1       0.6      0.903     6.30e- 2  1.73e-15     13.9 
16 mu_1       0.7      0.892     7.54e- 2  9.05e-24      6.80
17 mu_1       0.8      1.52      5.58e- 4  3.64e-36     20.1 
18 mu_1       0.9      1.75      6.23e-11  5.02e-58     96.4 
19 mu_0       0.1      4.07      1.06e-25  3.70e-74    334.  
20 mu_0       0.2      1.87      3.53e-13  2.23e-48     85.0 
21 mu_0       0.3      0.956     1.68e- 6  1.60e-33     11.0 
22 mu_0       0.4      1.13      2.69e- 3  1.44e-23     17.2 
23 mu_0       0.5      0.878     4.23e- 2  2.61e-16     15.6 
24 mu_0       0.6      0.919     3.77e- 2  1.84e-14     13.3 
25 mu_0       0.7      0.864     9.69e- 2  1.06e-22      5.27
26 mu_0       0.8      1.50      1.50e- 3  7.29e-35     20.1 
27 mu_0       0.9      1.81      3.55e-10  2.26e-56     89.8 
[1] "Total run time was 401.748 seconds"
