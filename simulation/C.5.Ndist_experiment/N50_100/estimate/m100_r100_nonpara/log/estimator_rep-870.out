
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7293"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  63  65  66  67  68  69  70  71  72 
  4   1   3   6   3   1   2   2   2   3   4   2   2   2   1   1   2   4   3   1 
 73  74  75  76  77  78  80  81  82  84  85  86  87  88  91  92  93  94  95  98 
  1   3   4   3   3   4   2   1   1   4   2   1   1   3   4   3   1   2   2   1 
 99 100 
  2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03102 0.35081 0.61353 1.00000 9.00000 
[1] "event indicator table: "

   0    1 
4305 2988 
[1] "treatment indicator table: "

   0    1 
2677 4616 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3593
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3700
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 387.427 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.488 0.0744
 2 mu         0.1   0.2 0.607 0.0868
 3 mu         0.1   0.3 0.684 0.104 
 4 mu         0.1   0.4 0.739 0.108 
 5 mu         0.1   0.5 0.787 0.119 
 6 mu         0.2   0.1 0.410 0.0529
 7 mu         0.2   0.2 0.510 0.0506
 8 mu         0.2   0.3 0.565 0.0525
 9 mu         0.2   0.4 0.609 0.0509
10 mu         0.2   0.5 0.638 0.0454
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.14         0.759 0.000000596      7.30
 2 mu         0.2      1.01         0.937 0.0206           3.11
 3 mu         0.3      1.04         0.975 0.244            2.59
 4 mu         0.4      1.01         1.01  0.305            1.92
 5 mu         0.5      0.996        0.995 0.541            1.38
 6 mu         0.6      0.987        0.985 0.545            1.39
 7 mu         0.7      1.01         1.00  0.610            1.44
 8 mu         0.8      0.994        0.966 0.633            1.44
 9 mu         0.9      1.01         0.976 0.358            2.14
10 mu_1       0.1      1.15         0.833 0.00000178       8.15
11 mu_1       0.2      1.01         0.960 0.0310           2.28
12 mu_1       0.3      1.03         0.992 0.235            2.47
13 mu_1       0.4      1.01         1.00  0.331            1.88
14 mu_1       0.5      0.995        0.984 0.548            1.36
15 mu_1       0.6      0.989        0.990 0.535            1.40
16 mu_1       0.7      1.01         0.986 0.616            1.45
17 mu_1       0.8      0.993        0.958 0.630            1.43
18 mu_1       0.9      1.01         0.971 0.351            2.15
19 mu_0       0.1      1.14         0.747 0.000000465      7.66
20 mu_0       0.2      1.01         0.925 0.0180           3.34
21 mu_0       0.3      1.04         0.980 0.237            2.64
22 mu_0       0.4      1.01         1.01  0.287            1.94
23 mu_0       0.5      0.997        0.996 0.521            1.39
24 mu_0       0.6      0.985        0.981 0.560            1.38
25 mu_0       0.7      1.01         1.03  0.597            1.45
26 mu_0       0.8      0.996        0.975 0.626            1.46
27 mu_0       0.9      1.01         1.00  0.373            2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.29      5.13e-28  2.51e-71    211.  
 2 mu         0.2      1.45      8.85e-16  9.45e-47     77.3 
 3 mu         0.3      0.662     5.36e- 9  1.34e-32      8.03
 4 mu         0.4      0.656     4.03e- 5  9.15e-23      8.14
 5 mu         0.5      0.843     7.29e- 3  2.35e-15      5.84
 6 mu         0.6      0.886     1.87e- 1  3.11e-14      7.08
 7 mu         0.7      1.09      1.07e- 1  7.61e-22      6.11
 8 mu         0.8      1.11      8.89e- 2  2.32e-34      9.10
 9 mu         0.9      1.40      1.59e- 6  1.28e-56     38.2 
10 mu_1       0.1      2.02      3.64e-27  2.29e-70    173.  
11 mu_1       0.2      1.39      2.95e-15  4.31e-46     73.2 
12 mu_1       0.3      0.632     1.15e- 8  4.07e-32      9.33
13 mu_1       0.4      0.665     6.51e- 5  2.09e-22      7.91
14 mu_1       0.5      0.860     9.01e- 3  4.29e-15      6.18
15 mu_1       0.6      0.881     1.73e- 1  4.24e-15      7.28
16 mu_1       0.7      1.10      9.12e- 2  2.06e-22      6.32
17 mu_1       0.8      1.10      7.48e- 2  5.51e-35      9.15
18 mu_1       0.9      1.41      1.21e- 6  2.70e-57     39.7 
19 mu_0       0.1      2.32      1.65e-28  2.45e-72    215.  
20 mu_0       0.2      1.47      3.69e-16  1.04e-47     78.3 
21 mu_0       0.3      0.674     2.72e- 9  1.68e-33      8.20
22 mu_0       0.4      0.651     3.67e- 5  1.34e-23      8.62
23 mu_0       0.5      0.827     3.97e- 3  4.14e-16      5.49
24 mu_0       0.6      0.894     1.30e- 1  7.13e-14      7.59
25 mu_0       0.7      1.06      1.21e- 1  2.06e-21      5.62
26 mu_0       0.8      1.13      7.84e- 2  9.42e-34      8.89
27 mu_0       0.9      1.35      5.05e- 6  1.04e-55     24.8 
[1] "Total run time was 391.561 seconds"
