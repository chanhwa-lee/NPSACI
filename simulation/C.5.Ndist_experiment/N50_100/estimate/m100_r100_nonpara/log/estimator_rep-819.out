
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7578"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  65  66  67  68  70  71 
  1   3   3   3   1   1   2   1   1   2   4   1   3   3   2   2   1   3   3   1 
 72  73  74  75  76  77  79  80  81  82  84  85  87  88  89  90  91  93  94  95 
  2   1   1   1   4   2   1   4   2   6   3   2   2   4   2   2   1   3   2   5 
 96  98  99 100 
  2   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03493 0.33567 0.60825 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4528 3050 
[1] "treatment indicator table: "

   0    1 
2680 4898 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3694
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3884
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 443.635 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.229 0.0470
 2 mu         0.1   0.2 0.330 0.0732
 3 mu         0.1   0.3 0.333 0.0695
 4 mu         0.1   0.4 0.333 0.0699
 5 mu         0.1   0.5 0.356 0.0749
 6 mu         0.2   0.1 0.347 0.0482
 7 mu         0.2   0.2 0.453 0.0589
 8 mu         0.2   0.3 0.478 0.0525
 9 mu         0.2   0.4 0.500 0.0535
10 mu         0.2   0.5 0.533 0.0582
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.552      0.0103   9.22e-11      7.19
 2 mu         0.2      0.920      0.617    8.70e- 5      4.12
 3 mu         0.3      0.987      0.869    2.55e- 2      3.22
 4 mu         0.4      1.06       1.01     3.22e- 1      2.43
 5 mu         0.5      1.01       1.03     4.89e- 1      1.47
 6 mu         0.6      0.973      0.969    5.98e- 1      1.47
 7 mu         0.7      0.987      0.997    5.69e- 1      1.35
 8 mu         0.8      0.973      0.984    4.66e- 1      1.63
 9 mu         0.9      0.988      0.976    5.01e- 2      2.29
10 mu_1       0.1      0.621      0.0222   3.49e-10      5.30
11 mu_1       0.2      0.931      0.640    1.93e- 4      4.10
12 mu_1       0.3      0.996      0.872    3.82e- 2      3.23
13 mu_1       0.4      1.06       1.01     3.77e- 1      2.30
14 mu_1       0.5      1.01       1.01     5.02e- 1      1.47
15 mu_1       0.6      0.973      0.974    5.95e- 1      1.46
16 mu_1       0.7      0.987      1.00     5.76e- 1      1.35
17 mu_1       0.8      0.973      0.978    4.48e- 1      1.64
18 mu_1       0.9      0.989      0.986    4.71e- 2      2.31
19 mu_0       0.1      0.545      0.00899  6.37e-11      7.40
20 mu_0       0.2      0.917      0.613    6.05e- 5      4.18
21 mu_0       0.3      0.983      0.855    2.00e- 2      3.24
22 mu_0       0.4      1.06       1.01     2.86e- 1      2.52
23 mu_0       0.5      1.02       1.03     4.76e- 1      1.47
24 mu_0       0.6      0.973      0.960    5.96e- 1      1.48
25 mu_0       0.7      0.985      0.985    5.51e- 1      1.35
26 mu_0       0.8      0.973      0.988    5.37e- 1      1.57
27 mu_0       0.9      0.981      0.938    7.75e- 2      2.26
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00335     3.10e-30  5.28e-84     0.228
 2 mu         0.2    0.458       1.72e-16  1.63e-56    25.1  
 3 mu         0.3    1.02        1.80e- 8  1.52e-40    31.2  
 4 mu         0.4    1.58        2.35e- 4  2.56e-29    46.5  
 5 mu         0.5    1.16        5.47e- 2  1.01e-20    10.0  
 6 mu         0.6    1.23        3.43e- 1  8.01e-14     9.28 
 7 mu         0.7    1.36        2.78e- 1  2.10e-13    18.7  
 8 mu         0.8    1.17        4.52e- 2  1.23e-23    15.2  
 9 mu         0.9    1.47        1.15e- 6  1.42e-42    50.3  
10 mu_1       0.1    0.00786     2.07e-29  5.06e-83     0.506
11 mu_1       0.2    0.573       5.61e-16  7.82e-56    31.9  
12 mu_1       0.3    1.03        3.89e- 8  4.84e-40    26.4  
13 mu_1       0.4    1.58        4.01e- 4  6.12e-29    44.7  
14 mu_1       0.5    1.15        6.45e- 2  1.95e-20     9.47 
15 mu_1       0.6    1.24        3.09e- 1  1.28e-13     9.51 
16 mu_1       0.7    1.36        2.55e- 1  9.20e-14    18.9  
17 mu_1       0.8    1.17        3.62e- 2  4.69e-24    15.5  
18 mu_1       0.9    1.48        8.54e- 7  4.84e-43    52.4  
19 mu_0       0.1    0.00285     1.14e-30  2.44e-85     0.197
20 mu_0       0.2    0.429       7.47e-17  8.49e-58    23.5  
21 mu_0       0.3    1.01        9.11e- 9  9.03e-42    33.3  
22 mu_0       0.4    1.57        1.23e- 4  1.77e-30    47.8  
23 mu_0       0.5    1.17        3.71e- 2  8.46e-22    10.6  
24 mu_0       0.6    1.22        3.42e- 1  8.34e-15     8.94 
25 mu_0       0.7    1.37        2.72e- 1  4.86e-13    18.4  
26 mu_0       0.8    1.17        4.34e- 2  4.25e-23    14.3  
27 mu_0       0.9    1.32        3.79e- 6  9.87e-42    32.1  
[1] "Total run time was 447.26 seconds"
