
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7379"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  65  66  67  69  70  71 
  1   2   4   2   3   1   1   4   2   4   1   2   1   1   3   2   5   5   2   3 
 73  74  75  76  77  78  79  80  81  82  83  84  86  87  89  90  91  92  93  95 
  4   3   1   2   1   1   4   1   3   1   2   1   3   2   3   1   4   1   2   1 
 96  97  98  99 100 
  1   1   1   2   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03364 0.32318 0.59016 1.00000 7.62139 
[1] "event indicator table: "

   0    1 
4401 2978 
[1] "treatment indicator table: "

   0    1 
2661 4718 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3692
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3687
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 475.964 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.467 0.117 
 2 mu         0.1   0.2 0.566 0.144 
 3 mu         0.1   0.3 0.626 0.161 
 4 mu         0.1   0.4 0.645 0.163 
 5 mu         0.1   0.5 0.672 0.166 
 6 mu         0.2   0.1 0.519 0.0642
 7 mu         0.2   0.2 0.639 0.0818
 8 mu         0.2   0.3 0.725 0.0919
 9 mu         0.2   0.4 0.755 0.0886
10 mu         0.2   0.5 0.794 0.0869
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.969        0.187  9.44e-12     18.4 
 2 mu         0.2      1.27         0.978  1.28e- 4      7.79
 3 mu         0.3      1.13         1.09   1.22e- 1      2.57
 4 mu         0.4      1.00         0.979  5.24e- 1      1.58
 5 mu         0.5      1.00         0.991  4.59e- 1      1.52
 6 mu         0.6      0.989        0.959  4.38e- 1      2.09
 7 mu         0.7      0.962        0.957  6.14e- 1      1.32
 8 mu         0.8      0.969        0.961  4.62e- 1      1.60
 9 mu         0.9      0.945        0.935  1.34e- 2      2.43
10 mu_1       0.1      1.04         0.326  3.55e-11     12.1 
11 mu_1       0.2      1.24         0.995  2.48e- 4      6.53
12 mu_1       0.3      1.11         1.11   1.64e- 1      2.39
13 mu_1       0.4      0.997        0.981  5.24e- 1      1.54
14 mu_1       0.5      1.00         0.993  4.76e- 1      1.58
15 mu_1       0.6      0.987        0.957  4.25e- 1      2.04
16 mu_1       0.7      0.962        0.958  6.13e- 1      1.32
17 mu_1       0.8      0.968        0.957  4.56e- 1      1.60
18 mu_1       0.9      0.947        0.940  1.21e- 2      2.48
19 mu_0       0.1      0.961        0.171  6.55e-12     19.2 
20 mu_0       0.2      1.28         0.975  9.77e- 5      8.10
21 mu_0       0.3      1.13         1.08   1.04e- 1      2.64
22 mu_0       0.4      1.01         0.980  5.25e- 1      1.60
23 mu_0       0.5      1.00         1.00   4.42e- 1      1.48
24 mu_0       0.6      0.993        0.959  4.57e- 1      2.15
25 mu_0       0.7      0.961        0.953  6.16e- 1      1.32
26 mu_0       0.8      0.974        0.964  4.65e- 1      1.56
27 mu_0       0.9      0.931        0.937  2.51e- 2      1.96
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.121     4.13e-28  3.44e-76     11.2 
 2 mu         0.2      6.06      4.83e-15  1.48e-50    441.  
 3 mu         0.3      1.95      1.33e- 8  1.06e-35     64.3 
 4 mu         0.4      0.913     2.06e- 4  2.71e-25     18.5 
 5 mu         0.5      1.34      2.67e- 2  2.36e-17     25.3 
 6 mu         0.6      1.67      4.22e- 1  3.37e-12     30.6 
 7 mu         0.7      1.40      3.38e- 1  3.58e-20      9.37
 8 mu         0.8      1.16      4.35e- 2  4.22e-32     18.0 
 9 mu         0.9      1.85      2.68e- 7  2.09e-53     67.7 
10 mu_1       0.1      0.245     2.35e-27  3.25e-75     22.8 
11 mu_1       0.2      6.34      1.70e-14  6.99e-50    447.  
12 mu_1       0.3      1.65      2.96e- 8  3.33e-35     43.4 
13 mu_1       0.4      0.914     3.36e- 4  6.41e-25     18.0 
14 mu_1       0.5      1.39      3.31e- 2  4.45e-17     26.7 
15 mu_1       0.6      1.66      4.42e- 1  1.15e-12     31.5 
16 mu_1       0.7      1.38      3.18e- 1  1.05e-20      9.53
17 mu_1       0.8      1.16      3.58e- 2  1.08e-32     18.0 
18 mu_1       0.9      1.90      2.02e- 7  4.75e-54     71.1 
19 mu_0       0.1      0.107     1.98e-28  2.10e-77      9.96
20 mu_0       0.2      5.99      1.80e-15  1.02e-51    440.  
21 mu_0       0.3      2.07      6.32e- 9  8.29e-37     73.3 
22 mu_0       0.4      0.913     1.27e- 4  2.49e-26     18.8 
23 mu_0       0.5      1.29      2.40e- 2  2.59e-18     23.9 
24 mu_0       0.6      1.68      3.45e- 1  6.70e-12     29.2 
25 mu_0       0.7      1.43      3.48e- 1  9.50e-20     10.6 
26 mu_0       0.8      1.15      4.41e- 2  1.68e-31     18.3 
27 mu_0       0.9      1.48      8.59e- 7  1.67e-52     37.2 
[1] "Total run time was 479.886 seconds"
