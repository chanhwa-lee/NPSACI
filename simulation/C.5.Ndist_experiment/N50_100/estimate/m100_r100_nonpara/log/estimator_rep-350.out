
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7443"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  61  62  63  64  65  66  67  68  69  71  72 
  2   3   1   4   6   1   3   3   6   1   2   1   2   1   1   1   1   1   2   3 
 74  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  1   2   2   2   3   2   2   3   3   1   4   3   3   4   2   1   1   2   3   2 
 95  97  98  99 100 
  1   2   1   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04698 0.38447 0.64801 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4533 2910 
[1] "treatment indicator table: "

   0    1 
2544 4899 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3695
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3748
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 397.221 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.219 0.0585
 2 mu         0.1   0.2 0.305 0.0811
 3 mu         0.1   0.3 0.321 0.0599
 4 mu         0.1   0.4 0.322 0.0586
 5 mu         0.1   0.5 0.352 0.0635
 6 mu         0.2   0.1 0.262 0.0668
 7 mu         0.2   0.2 0.372 0.0748
 8 mu         0.2   0.3 0.433 0.0602
 9 mu         0.2   0.4 0.464 0.0735
10 mu         0.2   0.5 0.497 0.0701
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.614        0.166 0.0000000165      4.55
 2 mu         0.2      0.980        0.746 0.00407           5.67
 3 mu         0.3      1.03         0.948 0.284             4.28
 4 mu         0.4      1.01         0.978 0.357             1.80
 5 mu         0.5      1.02         0.991 0.503             1.61
 6 mu         0.6      0.990        0.976 0.656             1.40
 7 mu         0.7      0.967        0.966 0.416             1.93
 8 mu         0.8      0.970        0.941 0.478             2.11
 9 mu         0.9      1.01         0.982 0.407             1.92
10 mu_1       0.1      0.682        0.261 0.0000000617      5.11
11 mu_1       0.2      1.01         0.777 0.00763           6.34
12 mu_1       0.3      1.03         0.937 0.297             4.53
13 mu_1       0.4      1.01         0.974 0.353             1.71
14 mu_1       0.5      1.02         1.00  0.497             1.59
15 mu_1       0.6      0.989        0.978 0.635             1.41
16 mu_1       0.7      0.965        0.956 0.415             1.89
17 mu_1       0.8      0.972        0.940 0.494             2.14
18 mu_1       0.9      1.01         0.986 0.401             1.96
19 mu_0       0.1      0.607        0.154 0.0000000115      4.50
20 mu_0       0.2      0.974        0.741 0.00319           5.50
21 mu_0       0.3      1.03         0.955 0.279             4.18
22 mu_0       0.4      1.01         0.964 0.360             1.91
23 mu_0       0.5      1.02         0.996 0.509             1.65
24 mu_0       0.6      0.990        0.973 0.686             1.42
25 mu_0       0.7      0.974        0.977 0.419             2.01
26 mu_0       0.8      0.960        0.933 0.413             1.99
27 mu_0       0.9      0.993        0.975 0.326             1.65
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.411     1.08e-30  5.53e-80      38.9
 2 mu         0.2      2.34      1.23e-16  1.07e-53     112. 
 3 mu         0.3      1.72      1.40e- 9  1.96e-38      98.3
 4 mu         0.4      0.848     8.28e- 5  1.05e-27      12.0
 5 mu         0.5      1.40      2.16e- 2  1.70e-19      20.2
 6 mu         0.6      3.04      2.15e- 1  6.48e-13      82.9
 7 mu         0.7      1.86      2.35e- 1  5.57e-16      23.7
 8 mu         0.8      1.54      8.74e- 2  8.55e-26      12.9
 9 mu         0.9      1.90      1.30e- 6  2.44e-43      43.3
10 mu_1       0.1      0.706     7.50e-30  5.29e-79      66.1
11 mu_1       0.2      2.28      4.18e-16  5.11e-53     110. 
12 mu_1       0.3      1.63      3.19e- 9  6.26e-38      97.0
13 mu_1       0.4      0.849     1.34e- 4  2.50e-27      11.5
14 mu_1       0.5      1.47      1.69e- 2  3.26e-19      23.2
15 mu_1       0.6      3.06      1.80e- 1  1.03e-12      83.2
16 mu_1       0.7      1.81      2.52e- 1  1.65e-16      21.7
17 mu_1       0.8      1.57      7.95e- 2  2.22e-26      12.7
18 mu_1       0.9      1.87      9.79e- 7  5.64e-44      42.7
19 mu_0       0.1      0.378     3.65e-31  2.67e-81      35.9
20 mu_0       0.2      2.36      4.88e-17  5.81e-55     116. 
21 mu_0       0.3      1.76      6.33e-10  1.22e-39      98.9
22 mu_0       0.4      0.847     4.88e- 5  7.58e-29      12.4
23 mu_0       0.5      1.33      2.23e- 2  1.48e-20      17.1
24 mu_0       0.6      3.00      1.95e- 1  7.04e-14      82.4
25 mu_0       0.7      1.98      1.33e- 1  1.47e-15      29.0
26 mu_0       0.8      1.43      7.33e- 2  3.39e-25      14.1
27 mu_0       0.9      2.16      4.19e- 6  1.93e-42      48.1
[1] "Total run time was 400.44 seconds"
