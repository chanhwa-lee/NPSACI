
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7526"
[1] "cluster size dist'n: "

 50  51  53  55  56  57  58  59  60  62  63  65  66  67  68  69  70  71  72  73 
  2   2   3   2   2   1   2   3   3   3   1   6   3   2   1   2   1   1   3   3 
 74  75  76  77  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94  95 
  2   2   2   2   4   2   2   4   2   2   2   3   3   1   2   2   2   3   2   1 
 96  98  99 100 
  5   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02786 0.32039 0.57561 0.98893 5.69225 
[1] "event indicator table: "

   0    1 
4483 3043 
[1] "treatment indicator table: "

   0    1 
2889 4637 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3856
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3670
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 632.613 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.421 0.105 
 2 mu         0.1   0.2 0.485 0.100 
 3 mu         0.1   0.3 0.517 0.108 
 4 mu         0.1   0.4 0.559 0.107 
 5 mu         0.1   0.5 0.595 0.102 
 6 mu         0.2   0.1 0.365 0.0600
 7 mu         0.2   0.2 0.443 0.0625
 8 mu         0.2   0.3 0.483 0.0711
 9 mu         0.2   0.4 0.517 0.0656
10 mu         0.2   0.5 0.552 0.0583
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.948        0.425 0.00000000405      6.91
 2 mu         0.2      0.952        0.908 0.00366            2.53
 3 mu         0.3      0.955        0.953 0.228              1.95
 4 mu         0.4      1.02         0.992 0.384              1.62
 5 mu         0.5      1.06         1.02  0.620              2.18
 6 mu         0.6      1.02         1.02  0.650              1.44
 7 mu         0.7      1.01         0.991 0.650              1.52
 8 mu         0.8      1.00         0.991 0.446              1.62
 9 mu         0.9      1.10         1.04  0.411              2.77
10 mu_1       0.1      0.968        0.626 0.0000000134       5.56
11 mu_1       0.2      0.935        0.928 0.00608            2.32
12 mu_1       0.3      0.964        0.953 0.225              2.01
13 mu_1       0.4      1.03         0.998 0.397              1.58
14 mu_1       0.5      1.06         1.02  0.643              2.20
15 mu_1       0.6      1.02         1.02  0.644              1.44
16 mu_1       0.7      1.00         0.987 0.630              1.51
17 mu_1       0.8      1.01         0.992 0.454              1.61
18 mu_1       0.9      1.10         1.03  0.403              2.77
19 mu_0       0.1      0.946        0.400 0.00000000301      7.06
20 mu_0       0.2      0.957        0.916 0.00305            2.59
21 mu_0       0.3      0.952        0.946 0.230              1.98
22 mu_0       0.4      1.02         0.986 0.375              1.67
23 mu_0       0.5      1.06         1.01  0.580              2.17
24 mu_0       0.6      1.02         1.03  0.659              1.43
25 mu_0       0.7      1.01         0.993 0.696              1.56
26 mu_0       0.8      0.996        0.985 0.415              1.65
27 mu_0       0.9      1.11         1.07  0.488              2.82
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.234     5.39e-25  8.19e-71     16.9 
 2 mu         0.2      0.877     2.58e-13  1.74e-46     36.5 
 3 mu         0.3      0.545     2.81e- 7  1.88e-32     13.9 
 4 mu         0.4      1.07      1.58e- 3  1.12e-22     37.1 
 5 mu         0.5      0.986     1.67e- 1  1.29e-15     10.5 
 6 mu         0.6      1.45      3.06e- 1  9.76e-16     11.3 
 7 mu         0.7      1.13      2.17e- 1  7.63e-25      6.91
 8 mu         0.8      1.16      7.05e- 3  2.68e-38     31.0 
 9 mu         0.9      1.35      5.74e- 9  4.11e-62     40.5 
10 mu_1       0.1      0.374     3.26e-24  7.55e-70     26.0 
11 mu_1       0.2      0.794     8.42e-13  8.00e-46     31.4 
12 mu_1       0.3      0.563     6.01e- 7  5.76e-32     15.9 
13 mu_1       0.4      1.10      2.03e- 3  2.58e-22     38.4 
14 mu_1       0.5      0.990     2.16e- 1  2.54e-15      8.66
15 mu_1       0.6      1.47      3.55e- 1  2.79e-16     11.9 
16 mu_1       0.7      1.12      1.75e- 1  1.87e-25      7.37
17 mu_1       0.8      1.17      7.57e- 3  5.76e-39     30.9 
18 mu_1       0.9      1.35      4.14e- 9  7.85e-63     40.3 
19 mu_0       0.1      0.219     2.37e-25  0            15.9 
20 mu_0       0.2      0.897     1.12e-13  0            37.8 
21 mu_0       0.3      0.538     1.40e- 7  0            13.0 
22 mu_0       0.4      1.05      1.01e- 3  0            36.2 
23 mu_0       0.5      0.981     1.25e- 1  0            12.3 
24 mu_0       0.6      1.43      2.42e- 1  0            11.4 
25 mu_0       0.7      1.17      2.50e- 1  0             6.82
26 mu_0       0.8      1.12      1.21e- 2  0            31.4 
27 mu_0       0.9      1.40      1.29e- 8  0            42.6 
[1] "Total run time was 638.168 seconds"
