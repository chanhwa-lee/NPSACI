
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7600"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  61  62  63  65  66  67  68  69  70  71  72 
  1   1   2   5   1   2   1   2   1   1   3   3   1   4   3   1   2   2   2   2 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  91  93  94 
  3   2   1   2   8   1   2   2   1   1   3   2   3   1   3   2   4   2   1   5 
 95  96  97  98  99 100 
  2   1   3   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0344  0.3661  0.6170  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4600 3000 
[1] "treatment indicator table: "

   0    1 
2565 5035 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3830
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3770
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 446.904 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.481 0.0945
 2 mu         0.1   0.2 0.610 0.120 
 3 mu         0.1   0.3 0.692 0.138 
 4 mu         0.1   0.4 0.746 0.152 
 5 mu         0.1   0.5 0.807 0.162 
 6 mu         0.2   0.1 0.318 0.0258
 7 mu         0.2   0.2 0.411 0.0385
 8 mu         0.2   0.3 0.470 0.0417
 9 mu         0.2   0.4 0.511 0.0415
10 mu         0.2   0.5 0.559 0.0441
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.39         0.397  8.86e-11     23.7 
 2 mu         0.2      1.03         0.891  5.18e- 4      4.10
 3 mu         0.3      1.02         0.966  1.03e- 1      2.31
 4 mu         0.4      0.992        0.923  2.90e- 1      1.94
 5 mu         0.5      1.01         0.954  4.80e- 1      2.27
 6 mu         0.6      0.970        0.950  5.47e- 1      1.63
 7 mu         0.7      0.980        0.950  5.06e- 1      1.46
 8 mu         0.8      1.01         1.02   5.28e- 1      1.49
 9 mu         0.9      1.03         1.04   4.64e- 1      2.37
10 mu_1       0.1      1.33         0.477  3.08e-10     19.8 
11 mu_1       0.2      1.03         0.916  9.01e- 4      4.04
12 mu_1       0.3      1.01         0.966  1.24e- 1      2.26
13 mu_1       0.4      0.995        0.932  2.91e- 1      1.94
14 mu_1       0.5      1.01         0.957  4.88e- 1      2.23
15 mu_1       0.6      0.970        0.960  5.50e- 1      1.61
16 mu_1       0.7      0.981        0.946  5.18e- 1      1.45
17 mu_1       0.8      1.01         1.02   5.31e- 1      1.50
18 mu_1       0.9      1.03         1.04   4.61e- 1      2.37
19 mu_0       0.1      1.40         0.369  6.43e-11     24.2 
20 mu_0       0.2      1.03         0.882  4.22e- 4      4.11
21 mu_0       0.3      1.02         0.968  9.47e- 2      2.33
22 mu_0       0.4      0.990        0.932  2.88e- 1      1.99
23 mu_0       0.5      1.01         0.959  4.73e- 1      2.31
24 mu_0       0.6      0.971        0.956  5.43e- 1      1.66
25 mu_0       0.7      0.978        0.949  4.76e- 1      1.48
26 mu_0       0.8      1.00         1.01   5.01e- 1      1.48
27 mu_0       0.9      1.03         1.03   4.40e- 1      2.38
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0354     1.77e-29  5.90e-92      3.53
 2 mu         0.2     0.573      6.02e-16  4.15e-63     51.3 
 3 mu         0.3     0.937      3.22e- 9  2.92e-46     18.7 
 4 mu         0.4     1.64       7.14e- 5  2.47e-34     24.5 
 5 mu         0.5     1.61       2.28e- 2  4.13e-25     21.3 
 6 mu         0.6     1.37       1.94e- 1  1.32e-17     15.8 
 7 mu         0.7     1.02       1.09e- 1  2.47e-12      7.71
 8 mu         0.8     1.29       3.96e- 2  3.70e-22     23.5 
 9 mu         0.9     1.42       1.16e- 6  1.93e-40     17.8 
10 mu_1       0.1     0.0735     1.34e-28  5.84e-91      7.32
11 mu_1       0.2     0.621      1.95e-15  2.06e-62     53.3 
12 mu_1       0.3     0.992      7.78e- 9  9.63e-46     19.9 
13 mu_1       0.4     1.65       1.23e- 4  6.11e-34     25.6 
14 mu_1       0.5     1.62       2.01e- 2  8.18e-25     22.6 
15 mu_1       0.6     1.34       1.93e- 1  2.18e-17     14.4 
16 mu_1       0.7     1.02       1.03e- 1  1.13e-12      7.99
17 mu_1       0.8     1.31       3.96e- 2  1.48e-22     25.0 
18 mu_1       0.9     1.42       8.58e- 7  6.85e-41     16.8 
19 mu_0       0.1     0.0311     4.69e-30  6.75e-94      3.11
20 mu_0       0.2     0.561      2.66e-16  5.35e-65     50.8 
21 mu_0       0.3     0.914      1.26e- 9  4.30e-48     18.4 
22 mu_0       0.4     1.63       3.73e- 5  4.24e-36     23.7 
23 mu_0       0.5     1.60       1.68e- 2  8.53e-27     20.0 
24 mu_0       0.6     1.41       1.40e- 1  3.41e-19     17.8 
25 mu_0       0.7     1.03       1.01e- 1  9.10e-13      7.08
26 mu_0       0.8     1.23       5.00e- 2  1.26e-21     17.5 
27 mu_0       0.9     1.45       3.85e- 6  1.31e-39     26.5 
[1] "Total run time was 450.304 seconds"
