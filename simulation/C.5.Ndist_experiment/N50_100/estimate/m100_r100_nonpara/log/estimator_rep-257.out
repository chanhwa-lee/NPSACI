
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7525"
[1] "cluster size dist'n: "

 51  53  54  56  57  59  60  61  62  63  64  65  66  67  68  69  70  71  73  74 
  2   1   3   3   4   1   1   4   5   4   3   1   2   2   1   5   1   1   2   3 
 75  76  77  78  79  80  81  82  83  84  86  87  88  89  90  92  95  96  97  98 
  1   1   1   1   2   1   6   1   1   7   3   4   3   3   3   1   5   1   3   1 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02527 0.32938 0.59143 1.00000 5.32669 
[1] "event indicator table: "

   0    1 
4471 3054 
[1] "treatment indicator table: "

   0    1 
2771 4754 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3640
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3885
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 502.814 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.420 0.0639
 2 mu         0.1   0.2 0.484 0.0771
 3 mu         0.1   0.3 0.565 0.0916
 4 mu         0.1   0.4 0.635 0.0803
 5 mu         0.1   0.5 0.681 0.0870
 6 mu         0.2   0.1 0.364 0.0361
 7 mu         0.2   0.2 0.422 0.0466
 8 mu         0.2   0.3 0.512 0.0469
 9 mu         0.2   0.4 0.588 0.0481
10 mu         0.2   0.5 0.646 0.0659
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.972        0.734   0.00659      3.59
 2 mu         0.2      1.02         0.966   0.332        2.60
 3 mu         0.3      0.942        0.917   0.396        2.02
 4 mu         0.4      0.965        0.964   0.528        1.62
 5 mu         0.5      0.989        0.986   0.553        1.48
 6 mu         0.6      0.986        0.973   0.539        1.51
 7 mu         0.7      0.988        0.980   0.581        1.42
 8 mu         0.8      1.01         0.991   0.651        1.76
 9 mu         0.9      1.05         0.977   0.447        2.13
10 mu_1       0.1      0.991        0.783   0.0126       3.31
11 mu_1       0.2      1.01         0.951   0.355        2.27
12 mu_1       0.3      0.943        0.899   0.393        2.01
13 mu_1       0.4      0.966        0.958   0.549        1.60
14 mu_1       0.5      0.991        0.980   0.533        1.45
15 mu_1       0.6      0.986        0.976   0.550        1.51
16 mu_1       0.7      0.988        0.974   0.560        1.44
17 mu_1       0.8      1.01         0.989   0.646        1.79
18 mu_1       0.9      1.05         0.974   0.442        2.13
19 mu_0       0.1      0.969        0.739   0.00592      3.63
20 mu_0       0.2      1.03         0.974   0.326        2.68
21 mu_0       0.3      0.942        0.911   0.397        2.02
22 mu_0       0.4      0.964        0.962   0.514        1.63
23 mu_0       0.5      0.988        0.983   0.572        1.50
24 mu_0       0.6      0.986        0.977   0.522        1.49
25 mu_0       0.7      0.988        0.971   0.629        1.37
26 mu_0       0.8      1.00         0.976   0.644        1.66
27 mu_0       0.9      1.05         1.01    0.428        2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0423     6.75e-27  1.03e-78      2.66
 2 mu         0.2     0.889      1.05e-14  3.14e-52     33.5 
 3 mu         0.3     0.468      2.28e- 8  6.63e-37      8.58
 4 mu         0.4     0.813      3.24e- 4  2.78e-26      8.11
 5 mu         0.5     0.955      6.63e- 2  1.14e-18      5.23
 6 mu         0.6     1.09       2.12e- 1  3.56e-13      5.53
 7 mu         0.7     1.16       1.29e- 1  1.40e-21      9.48
 8 mu         0.8     0.994      1.07e- 2  3.72e-34      9.38
 9 mu         0.9     1.44       1.23e- 8  1.30e-56     21.2 
10 mu_1       0.1     0.0831     4.49e-26  9.64e-78      5.09
11 mu_1       0.2     0.901      3.53e-14  1.47e-51     32.0 
12 mu_1       0.3     0.476      5.14e- 8  2.07e-36      9.01
13 mu_1       0.4     0.833      5.31e- 4  6.71e-26      7.51
14 mu_1       0.5     0.968      7.08e- 2  2.20e-18      5.33
15 mu_1       0.6     1.09       1.92e- 1  1.21e-13      5.91
16 mu_1       0.7     1.16       1.19e- 1  4.08e-22      9.03
17 mu_1       0.8     0.993      8.67e- 3  9.48e-35      9.44
18 mu_1       0.9     1.46       8.59e- 9  2.94e-57     22.4 
19 mu_0       0.1     0.0378     2.32e-27  7.22e-80      2.39
20 mu_0       0.2     0.886      4.23e-15  2.48e-53     33.9 
21 mu_0       0.3     0.465      1.06e- 8  5.98e-38      8.39
22 mu_0       0.4     0.799      1.86e- 4  1.66e-27      8.50
23 mu_0       0.5     0.941      5.93e- 2  8.14e-20      5.81
24 mu_0       0.6     1.09       2.17e- 1  1.35e-13      5.81
25 mu_0       0.7     1.17       1.66e- 1  3.71e-21     10.5 
26 mu_0       0.8     1.00       1.02e- 2  1.48e-33      9.15
27 mu_0       0.9     1.29       4.61e- 8  1.03e-55     17.2 
[1] "Total run time was 507.224 seconds"
