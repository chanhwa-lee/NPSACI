
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7711"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70  71 
  3   2   1   1   2   2   1   2   2   1   2   1   2   1   3   2   1   1   2   2 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93 
  1   3   2   2   4   2   4   3   1   3   3   5   4   2   3   4   2   1   1   2 
 94  95  96  97  98 100 
  2   2   3   3   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04833 0.39217 0.64313 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4719 2992 
[1] "treatment indicator table: "

   0    1 
2634 5077 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3787
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3924
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 497.369 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.444 0.133 
 2 mu         0.1   0.2 0.550 0.160 
 3 mu         0.1   0.3 0.655 0.175 
 4 mu         0.1   0.4 0.759 0.201 
 5 mu         0.1   0.5 0.822 0.226 
 6 mu         0.2   0.1 0.289 0.0417
 7 mu         0.2   0.2 0.364 0.0370
 8 mu         0.2   0.3 0.450 0.0331
 9 mu         0.2   0.4 0.531 0.0571
10 mu         0.2   0.5 0.582 0.0921
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.30         0.226 0.0000000183     20.0 
 2 mu         0.2      0.959        0.840 0.00200           2.84
 3 mu         0.3      0.957        0.880 0.195             2.19
 4 mu         0.4      0.955        0.952 0.385             2.02
 5 mu         0.5      1.00         0.972 0.569             1.41
 6 mu         0.6      1.03         1.00  0.652             1.53
 7 mu         0.7      0.993        0.979 0.697             1.35
 8 mu         0.8      1.02         1.00  0.636             1.39
 9 mu         0.9      0.988        0.986 0.513             1.90
10 mu_1       0.1      1.21         0.359 0.0000000694     16.5 
11 mu_1       0.2      0.946        0.908 0.00382           2.58
12 mu_1       0.3      0.955        0.895 0.214             2.23
13 mu_1       0.4      0.958        0.952 0.377             1.94
14 mu_1       0.5      1.01         0.979 0.596             1.44
15 mu_1       0.6      1.03         1.01  0.660             1.53
16 mu_1       0.7      0.993        0.986 0.692             1.35
17 mu_1       0.8      1.02         0.993 0.633             1.40
18 mu_1       0.9      0.988        0.982 0.499             1.91
19 mu_0       0.1      1.31         0.211 0.0000000127     20.4 
20 mu_0       0.2      0.963        0.821 0.00154           2.92
21 mu_0       0.3      0.957        0.871 0.168             2.20
22 mu_0       0.4      0.953        0.939 0.377             2.07
23 mu_0       0.5      1.00         0.977 0.542             1.40
24 mu_0       0.6      1.03         0.996 0.641             1.54
25 mu_0       0.7      0.993        0.991 0.708             1.36
26 mu_0       0.8      1.02         0.994 0.649             1.37
27 mu_0       0.9      0.988        1.01  0.511             1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.243     4.53e-31  9.27e-79     24.3 
 2 mu         0.2      1.47      6.76e-17  1.42e-53    139.  
 3 mu         0.3      1.06      5.08e- 9  6.71e-39     39.6 
 4 mu         0.4      1.03      1.76e- 4  1.54e-28     12.5 
 5 mu         0.5      1.12      3.76e- 2  1.48e-20     14.2 
 6 mu         0.6      1.07      2.14e- 1  4.24e-14     12.0 
 7 mu         0.7      1.17      1.93e- 1  3.54e-12      9.70
 8 mu         0.8      1.29      1.55e- 2  7.97e-22     11.0 
 9 mu         0.9      0.655     5.68e- 7  8.32e-40      8.39
10 mu_1       0.1      0.449     2.83e-30  9.05e-78     44.9 
11 mu_1       0.2      1.41      2.19e-16  6.92e-53    129.  
12 mu_1       0.3      1.02      1.06e- 8  2.19e-38     39.1 
13 mu_1       0.4      1.05      2.85e- 4  3.76e-28     14.2 
14 mu_1       0.5      1.11      5.03e- 2  2.89e-20     12.9 
15 mu_1       0.6      1.06      2.13e- 1  6.90e-14     11.3 
16 mu_1       0.7      1.18      2.25e- 1  1.63e-12      9.65
17 mu_1       0.8      1.28      1.39e- 2  3.22e-22     10.7 
18 mu_1       0.9      0.653     4.23e- 7  2.98e-40      8.61
19 mu_0       0.1      0.220     1.89e-31  0            22.0 
20 mu_0       0.2      1.49      3.08e-17  0           142.  
21 mu_0       0.3      1.07      2.40e- 9  0            39.9 
22 mu_0       0.4      1.02      1.03e- 4  0            12.5 
23 mu_0       0.5      1.12      3.17e- 2  0            15.5 
24 mu_0       0.6      1.08      1.84e- 1  0            13.1 
25 mu_0       0.7      1.14      1.66e- 1  0            10.8 
26 mu_0       0.8      1.30      2.43e- 2  0            12.6 
27 mu_0       0.9      0.675     9.94e- 7  0             8.37
[1] "Total run time was 501.926 seconds"
