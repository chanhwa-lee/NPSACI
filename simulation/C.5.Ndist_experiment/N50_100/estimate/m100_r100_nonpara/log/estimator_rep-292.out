
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7450"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  65  66  67  69  70  71  72 
  2   1   3   5   1   3   2   3   3   2   1   3   1   2   1   1   4   4   2   2 
 73  74  75  76  77  79  80  81  82  85  86  87  88  89  91  92  93  94  95  96 
  5   1   3   2   1   2   2   2   3   4   5   1   2   3   1   1   3   1   2   1 
 97  99 100 
  1   3   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.06424 0.41608 0.66997 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4455 2995 
[1] "treatment indicator table: "

   0    1 
2497 4953 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3767
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3683
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 373.75 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.356 0.0767
 2 mu         0.1   0.2 0.420 0.0740
 3 mu         0.1   0.3 0.513 0.0850
 4 mu         0.1   0.4 0.573 0.0877
 5 mu         0.1   0.5 0.615 0.0916
 6 mu         0.2   0.1 0.304 0.0687
 7 mu         0.2   0.2 0.361 0.0591
 8 mu         0.2   0.3 0.448 0.0647
 9 mu         0.2   0.4 0.504 0.0578
10 mu         0.2   0.5 0.541 0.0589
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.00         0.326 0.000000951      7.21
 2 mu         0.2      0.941        0.891 0.0283           2.74
 3 mu         0.3      0.962        0.902 0.401            1.73
 4 mu         0.4      1.00         0.955 0.485            2.23
 5 mu         0.5      1.00         1.01  0.605            1.95
 6 mu         0.6      0.980        0.961 0.493            1.79
 7 mu         0.7      0.989        0.995 0.587            1.50
 8 mu         0.8      1.02         0.978 0.600            1.68
 9 mu         0.9      1.09         1.07  0.318            2.29
10 mu_1       0.1      1.01         0.479 0.00000273       5.72
11 mu_1       0.2      0.944        0.869 0.0423           2.65
12 mu_1       0.3      0.967        0.890 0.444            1.68
13 mu_1       0.4      1.01         0.972 0.513            2.26
14 mu_1       0.5      1.00         0.982 0.597            1.93
15 mu_1       0.6      0.979        0.965 0.504            1.72
16 mu_1       0.7      0.990        0.992 0.576            1.50
17 mu_1       0.8      1.02         0.985 0.608            1.69
18 mu_1       0.9      1.09         1.06  0.323            2.29
19 mu_0       0.1      1.00         0.306 0.000000753      7.37
20 mu_0       0.2      0.940        0.894 0.0248           2.76
21 mu_0       0.3      0.960        0.898 0.382            1.75
22 mu_0       0.4      1.00         0.948 0.466            2.22
23 mu_0       0.5      1.01         1.01  0.612            1.98
24 mu_0       0.6      0.981        0.976 0.476            1.88
25 mu_0       0.7      0.987        0.994 0.612            1.49
26 mu_0       0.8      1.02         0.967 0.553            1.71
27 mu_0       0.9      1.08         1.07  0.272            2.28
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0179     2.32e-30  8.22e-83      1.79
 2 mu         0.2     0.260      5.42e-16  4.01e-55     20.0 
 3 mu         0.3     0.461      5.28e- 9  2.78e-39     13.7 
 4 mu         0.4     0.704      1.07e- 4  8.50e-29     12.0 
 5 mu         0.5     0.895      2.86e- 2  1.02e-20     10.9 
 6 mu         0.6     1.08       2.63e- 1  3.51e-14      8.77
 7 mu         0.7     1.21       3.37e- 1  3.31e-16      8.70
 8 mu         0.8     1.16       3.06e- 2  1.76e-26     10.6 
 9 mu         0.9     1.19       1.20e- 5  5.65e-46     24.9 
10 mu_1       0.1     0.0337     1.50e-29  7.72e-82      3.37
11 mu_1       0.2     0.270      1.68e-15  1.89e-54     18.9 
12 mu_1       0.3     0.495      1.18e- 8  9.05e-39     12.1 
13 mu_1       0.4     0.711      1.74e- 4  2.08e-28     11.1 
14 mu_1       0.5     0.917      4.04e- 2  1.99e-20     11.1 
15 mu_1       0.6     1.09       2.95e- 1  5.71e-14      9.25
16 mu_1       0.7     1.21       3.62e- 1  8.91e-17      9.20
17 mu_1       0.8     1.16       2.68e- 2  5.84e-27     10.9 
18 mu_1       0.9     1.21       9.06e- 6  1.67e-46     25.8 
19 mu_0       0.1     0.0161     9.12e-31  0             1.61
20 mu_0       0.2     0.258      2.24e-16  0            20.3 
21 mu_0       0.3     0.446      2.43e- 9  0            14.3 
22 mu_0       0.4     0.699      5.71e- 5  0            12.6 
23 mu_0       0.5     0.873      1.68e- 2  0            10.6 
24 mu_0       0.6     1.07       2.20e- 1  0             8.05
25 mu_0       0.7     1.21       2.15e- 1  0             9.83
26 mu_0       0.8     1.16       5.09e- 2  0             9.38
27 mu_0       0.9     0.980      3.27e- 5  0            16.8 
[1] "Total run time was 376.989 seconds"
