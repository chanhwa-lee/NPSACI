
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7511"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  65  66  67  68  69  70  71 
  2   3   1   1   5   2   3   3   2   1   1   1   1   1   2   3   2   2   3   4 
 72  73  74  75  77  78  79  80  81  82  83  84  85  86  87  90  91  92  94  95 
  2   3   3   2   1   2   2   2   2   1   3   2   4   4   4   1   1   1   2   3 
 96  97  98  99 100 
  2   2   2   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03343 0.34664 0.61734 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4442 3069 
[1] "treatment indicator table: "

   0    1 
2824 4687 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3819
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3692
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 431.433 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.484 0.0806
 2 mu         0.1   0.2 0.610 0.101 
 3 mu         0.1   0.3 0.687 0.109 
 4 mu         0.1   0.4 0.704 0.104 
 5 mu         0.1   0.5 0.730 0.107 
 6 mu         0.2   0.1 0.373 0.0450
 7 mu         0.2   0.2 0.470 0.0530
 8 mu         0.2   0.3 0.529 0.0565
 9 mu         0.2   0.4 0.551 0.0476
10 mu         0.2   0.5 0.580 0.0462
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.17         0.334 0.00000000425      8.67
 2 mu         0.2      0.983        0.858 0.00527            3.54
 3 mu         0.3      0.994        0.965 0.330              2.44
 4 mu         0.4      1.02         0.997 0.458              1.94
 5 mu         0.5      1.02         1.00  0.474              1.54
 6 mu         0.6      1.01         1.00  0.598              1.51
 7 mu         0.7      0.999        0.999 0.538              1.43
 8 mu         0.8      1.01         1.02  0.616              1.57
 9 mu         0.9      0.995        1.01  0.251              2.00
10 mu_1       0.1      1.13         0.490 0.0000000135       7.82
11 mu_1       0.2      0.976        0.837 0.00858            3.45
12 mu_1       0.3      0.999        0.986 0.368              2.33
13 mu_1       0.4      1.02         0.997 0.484              1.94
14 mu_1       0.5      1.02         1.01  0.475              1.57
15 mu_1       0.6      1.01         1.00  0.599              1.51
16 mu_1       0.7      0.999        1.00  0.536              1.44
17 mu_1       0.8      1.01         1.02  0.617              1.58
18 mu_1       0.9      0.993        1.02  0.245              2.03
19 mu_0       0.1      1.18         0.312 0.00000000323      8.91
20 mu_0       0.2      0.985        0.857 0.00445            3.56
21 mu_0       0.3      0.992        0.949 0.314              2.49
22 mu_0       0.4      1.02         0.982 0.441              1.96
23 mu_0       0.5      1.02         1.01  0.474              1.51
24 mu_0       0.6      1.02         1.01  0.595              1.51
25 mu_0       0.7      0.999        1.00  0.543              1.40
26 mu_0       0.8      1.00         1.01  0.611              1.54
27 mu_0       0.9      1.01         1.02  0.303              1.96
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.977     1.42e-27  1.95e-69     91.4 
 2 mu         0.2      0.599     2.03e-15  3.27e-46     25.6 
 3 mu         0.3      0.666     9.38e- 9  9.11e-33     14.1 
 4 mu         0.4      0.913     1.62e- 4  2.34e-23      8.77
 5 mu         0.5      0.789     2.89e- 2  3.41e-16      6.93
 6 mu         0.6      0.767     1.30e- 1  9.86e-19      4.72
 7 mu         0.7      1.15      2.01e- 1  4.07e-28      7.75
 8 mu         0.8      1.25      3.45e- 2  9.65e-42      9.96
 9 mu         0.9      1.49      1.38e- 6  1.46e-65     26.4 
10 mu_1       0.1      1.20      9.44e-27  1.83e-68    109.  
11 mu_1       0.2      0.572     6.92e-15  1.54e-45     22.5 
12 mu_1       0.3      0.682     2.18e- 8  2.85e-32     11.7 
13 mu_1       0.4      0.921     2.67e- 4  5.51e-23      7.85
14 mu_1       0.5      0.775     3.47e- 2  6.41e-16      7.39
15 mu_1       0.6      0.787     1.03e- 1  1.96e-19      4.87
16 mu_1       0.7      1.15      2.24e- 1  6.96e-29      7.81
17 mu_1       0.8      1.26      3.27e- 2  1.44e-42      9.93
18 mu_1       0.9      1.50      1.02e- 6  1.94e-66     27.1 
19 mu_0       0.1      0.952     5.15e-28  1.30e-70     89.4 
20 mu_0       0.2      0.606     8.06e-16  2.46e-47     26.4 
21 mu_0       0.3      0.658     4.05e- 9  7.84e-34     15.2 
22 mu_0       0.4      0.908     8.62e- 5  2.35e-24      9.38
23 mu_0       0.5      0.804     1.80e- 2  4.11e-17      6.61
24 mu_0       0.6      0.736     1.30e- 1  2.17e-18      4.48
25 mu_0       0.7      1.13      1.31e- 1  1.20e-27      7.62
26 mu_0       0.8      1.23      4.99e- 2  4.25e-41     10.1 
27 mu_0       0.9      1.42      4.66e- 6  1.28e-64     22.6 
[1] "Total run time was 435.419 seconds"
