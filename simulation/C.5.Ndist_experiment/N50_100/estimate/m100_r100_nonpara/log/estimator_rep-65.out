
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7404"
[1] "cluster size dist'n: "

 51  52  53  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71  72 
  6   4   2   5   1   1   2   3   2   2   1   1   1   1   2   3   2   4   2   2 
 73  74  75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  91  92  94 
  1   3   1   3   2   3   3   1   1   2   1   2   2   4   1   3   2   5   3   1 
 95  96  98 100 
  3   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03648 0.35979 0.62024 1.00000 6.54778 
[1] "event indicator table: "

   0    1 
4383 3021 
[1] "treatment indicator table: "

   0    1 
2711 4693 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3736
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3668
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 351.038 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.217 0.0640
 2 mu         0.1   0.2 0.236 0.0744
 3 mu         0.1   0.3 0.238 0.0567
 4 mu         0.1   0.4 0.258 0.0756
 5 mu         0.1   0.5 0.315 0.0853
 6 mu         0.2   0.1 0.297 0.0535
 7 mu         0.2   0.2 0.340 0.0590
 8 mu         0.2   0.3 0.366 0.0420
 9 mu         0.2   0.4 0.399 0.0566
10 mu         0.2   0.5 0.468 0.0672
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.397      0.00978  9.02e-12      9.00
 2 mu         0.2      0.727      0.669    2.47e- 4      5.58
 3 mu         0.3      1.03       0.966    1.16e- 1      3.59
 4 mu         0.4      1.01       1.03     4.36e- 1      1.68
 5 mu         0.5      1.03       1.03     6.88e- 1      1.53
 6 mu         0.6      1.02       1.01     6.79e- 1      1.37
 7 mu         0.7      0.993      0.988    6.02e- 1      1.46
 8 mu         0.8      1.01       0.989    5.73e- 1      1.64
 9 mu         0.9      0.910      0.934    1.13e- 1      2.49
10 mu_1       0.1      0.423      0.0218   3.39e-11      6.66
11 mu_1       0.2      0.770      0.704    4.69e- 4      4.77
12 mu_1       0.3      1.04       0.983    1.54e- 1      3.41
13 mu_1       0.4      1.01       1.01     4.42e- 1      1.71
14 mu_1       0.5      1.03       1.02     7.24e- 1      1.55
15 mu_1       0.6      1.02       1.01     6.74e- 1      1.36
16 mu_1       0.7      0.992      0.982    6.05e- 1      1.47
17 mu_1       0.8      1.01       0.999    5.66e- 1      1.68
18 mu_1       0.9      0.907      0.920    1.05e- 1      2.50
19 mu_0       0.1      0.394      0.00845  6.26e-12      9.26
20 mu_0       0.2      0.716      0.633    1.91e- 4      5.79
21 mu_0       0.3      1.02       0.947    9.92e- 2      3.67
22 mu_0       0.4      1.01       1.02     4.26e- 1      1.67
23 mu_0       0.5      1.03       1.02     6.52e- 1      1.51
24 mu_0       0.6      1.02       1.01     6.85e- 1      1.38
25 mu_0       0.7      0.996      0.998    5.94e- 1      1.46
26 mu_0       0.8      1.00       0.997    6.00e- 1      1.48
27 mu_0       0.9      0.941      0.954    1.82e- 1      2.45
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.0114      3.28e-28  3.74e-80     0.594
 2 mu         0.2    1.11        2.10e-14  8.13e-54    69.2  
 3 mu         0.3    2.06        5.26e- 8  1.71e-38    74.1  
 4 mu         0.4    0.969       3.96e- 4  1.06e-27    19.4  
 5 mu         0.5    1.19        7.13e- 2  2.07e-19    14.1  
 6 mu         0.6    1.26        3.87e- 1  9.86e-13     6.32 
 7 mu         0.7    1.01        3.15e- 1  3.89e-18     7.26 
 8 mu         0.8    1.16        2.26e- 2  8.98e-29     8.12 
 9 mu         0.9    2.12        3.76e- 7  9.01e-48    60.5  
10 mu_1       0.1    0.0262      1.87e-27  3.62e-79     1.49 
11 mu_1       0.2    1.36        6.21e-14  3.93e-53    86.5  
12 mu_1       0.3    2.01        1.22e- 7  5.50e-38    61.7  
13 mu_1       0.4    0.889       6.28e- 4  2.57e-27    16.3  
14 mu_1       0.5    1.24        7.81e- 2  4.01e-19    14.5  
15 mu_1       0.6    1.24        3.59e- 1  1.59e-12     6.27 
16 mu_1       0.7    1.00        2.71e- 1  1.14e-18     7.16 
17 mu_1       0.8    1.19        1.87e- 2  2.30e-29     8.16 
18 mu_1       0.9    2.15        2.62e- 7  2.05e-48    62.2  
19 mu_0       0.1    0.00971     1.56e-28  1.37e-81     0.495
20 mu_0       0.2    1.05        1.07e-14  3.35e-55    64.9  
21 mu_0       0.3    2.08        2.29e- 8  8.04e-40    79.4  
22 mu_0       0.4    1.02        2.46e- 4  5.83e-29    21.4  
23 mu_0       0.5    1.15        5.83e- 2  1.37e-20    13.8  
24 mu_0       0.6    1.29        4.97e- 1  8.12e-14     6.39 
25 mu_0       0.7    1.02        3.48e- 1  1.03e-17     7.87 
26 mu_0       0.8    1.06        4.03e- 2  3.57e-28     7.96 
27 mu_0       0.9    1.91        1.40e- 6  7.17e-47    45.2  
[1] "Total run time was 354.136 seconds"
