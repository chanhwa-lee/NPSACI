
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7502"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70 
  1   5   1   2   2   2   1   4   3   2   1   2   2   1   1   2   2   1   3   2 
 71  72  73  75  76  77  79  80  81  82  83  84  85  86  87  88  89  90  91  92 
  3   1   2   3   3   3   4   1   2   2   1   1   2   3   2   3   2   3   3   1 
 93  94  95  96  97  98  99 100 
  2   1   3   5   1   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02439 0.33133 0.58974 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4400 3102 
[1] "treatment indicator table: "

   0    1 
2993 4509 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3857
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3645
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 392.639 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.336 0.0567
 2 mu         0.1   0.2 0.419 0.0581
 3 mu         0.1   0.3 0.461 0.0623
 4 mu         0.1   0.4 0.502 0.0668
 5 mu         0.1   0.5 0.587 0.0774
 6 mu         0.2   0.1 0.379 0.0398
 7 mu         0.2   0.2 0.499 0.0418
 8 mu         0.2   0.3 0.554 0.0433
 9 mu         0.2   0.4 0.605 0.0431
10 mu         0.2   0.5 0.682 0.0481
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.868        0.699 0.0000000308      8.55
 2 mu         0.2      1.12         1.06  0.00638           3.74
 3 mu         0.3      1.00         1.01  0.308             1.74
 4 mu         0.4      0.988        0.969 0.310             1.69
 5 mu         0.5      1.03         1.02  0.575             1.58
 6 mu         0.6      1.01         0.991 0.589             1.74
 7 mu         0.7      0.989        0.983 0.669             1.55
 8 mu         0.8      0.990        0.997 0.439             1.48
 9 mu         0.9      1.00         0.925 0.164             2.80
10 mu_1       0.1      0.983        0.764 0.0000000997     10.1 
11 mu_1       0.2      1.10         1.03  0.0104            3.65
12 mu_1       0.3      0.997        1.01  0.357             1.80
13 mu_1       0.4      0.990        0.974 0.340             1.65
14 mu_1       0.5      1.03         1.03  0.574             1.60
15 mu_1       0.6      1.01         0.994 0.587             1.76
16 mu_1       0.7      0.988        0.982 0.631             1.57
17 mu_1       0.8      0.991        0.997 0.460             1.50
18 mu_1       0.9      0.997        0.924 0.152             2.83
19 mu_0       0.1      0.855        0.694 0.0000000231      8.38
20 mu_0       0.2      1.13         1.06  0.00537           3.76
21 mu_0       0.3      1.00         1.01  0.287             1.78
22 mu_0       0.4      0.986        0.976 0.291             1.72
23 mu_0       0.5      1.03         1.03  0.576             1.59
24 mu_0       0.6      1.02         0.987 0.592             1.70
25 mu_0       0.7      0.991        0.975 0.668             1.50
26 mu_0       0.8      0.986        1.00  0.355             1.45
27 mu_0       0.9      1.02         0.985 0.219             2.50
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      4.98      3.38e-24  3.60e-81    190.  
 2 mu         0.2      4.35      1.13e-12  4.94e-54    113.  
 3 mu         0.3      0.877     1.16e- 6  2.68e-38     19.6 
 4 mu         0.4      0.853     3.85e- 3  2.90e-27      7.69
 5 mu         0.5      1.19      8.43e- 2  7.69e-19     16.3 
 6 mu         0.6      1.01      2.42e- 1  4.04e-12      5.17
 7 mu         0.7      1.10      1.85e- 1  1.03e-17      8.49
 8 mu         0.8      1.21      1.38e- 2  1.39e-27     10.4 
 9 mu         0.9      1.53      2.66e- 8  3.52e-45     41.8 
10 mu_1       0.1      6.45      2.08e-23  3.41e-80    234.  
11 mu_1       0.2      3.56      3.42e-12  2.34e-53    103.  
12 mu_1       0.3      0.770     2.34e- 6  8.47e-38     18.6 
13 mu_1       0.4      0.884     2.94e- 3  6.88e-27      7.12
14 mu_1       0.5      1.18      9.34e- 2  1.46e-18     16.1 
15 mu_1       0.6      1.03      2.00e- 1  6.39e-12      5.35
16 mu_1       0.7      1.08      2.09e- 1  2.91e-18      8.14
17 mu_1       0.8      1.22      1.40e- 2  3.42e-28     10.5 
18 mu_1       0.9      1.57      1.92e- 8  7.72e-46     44.0 
19 mu_0       0.1      4.82      1.44e-24  2.08e-82    185.  
20 mu_0       0.2      4.54      5.53e-13  3.22e-55    121.  
21 mu_0       0.3      0.922     6.60e- 7  1.99e-39     21.7 
22 mu_0       0.4      0.832     2.41e- 3  2.52e-28      8.07
23 mu_0       0.5      1.19      6.10e- 2  8.01e-20     16.5 
24 mu_0       0.6      0.989     2.79e- 1  5.27e-13      4.90
25 mu_0       0.7      1.14      1.30e- 1  2.76e-17      9.32
26 mu_0       0.8      1.14      1.53e- 2  5.57e-27      9.75
27 mu_0       0.9      1.18      9.38e- 8  2.82e-44     22.8 
[1] "Total run time was 396.026 seconds"
