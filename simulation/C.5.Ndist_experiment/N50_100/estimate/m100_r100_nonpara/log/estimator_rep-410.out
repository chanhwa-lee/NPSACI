
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7245"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  66  67  68  71  72 
  1   2   4   4   2   3   2   2   1   1   3   2   1   5   2   2   3   5   2   2 
 73  74  75  76  77  78  79  80  81  82  83  84  85  87  88  89  91  92  93  95 
  2   5   2   1   2   3   3   4   2   2   2   1   2   2   4   3   2   2   2   2 
 99 100 
  1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03084 0.32792 0.59398 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4219 3026 
[1] "treatment indicator table: "

   0    1 
2755 4490 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3576
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3669
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 367.945 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.453 0.0756
 2 mu         0.1   0.2 0.540 0.0882
 3 mu         0.1   0.3 0.616 0.101 
 4 mu         0.1   0.4 0.652 0.105 
 5 mu         0.1   0.5 0.676 0.107 
 6 mu         0.2   0.1 0.404 0.0383
 7 mu         0.2   0.2 0.479 0.0418
 8 mu         0.2   0.3 0.558 0.0495
 9 mu         0.2   0.4 0.608 0.0492
10 mu         0.2   0.5 0.636 0.0481
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.03         0.354 0.0000000400     11.6 
 2 mu         0.2      1.05         0.968 0.0133            3.38
 3 mu         0.3      0.959        0.929 0.309             2.17
 4 mu         0.4      0.962        0.911 0.518             1.83
 5 mu         0.5      0.992        0.992 0.538             2.06
 6 mu         0.6      0.983        0.970 0.609             1.31
 7 mu         0.7      0.988        0.987 0.592             1.54
 8 mu         0.8      0.991        0.968 0.577             1.57
 9 mu         0.9      1.03         0.999 0.141             1.92
10 mu_1       0.1      1.10         0.543 0.000000130      10.3 
11 mu_1       0.2      1.03         0.961 0.0219            3.20
12 mu_1       0.3      0.957        0.925 0.346             2.13
13 mu_1       0.4      0.963        0.915 0.540             1.90
14 mu_1       0.5      0.994        0.999 0.544             2.01
15 mu_1       0.6      0.982        0.966 0.612             1.31
16 mu_1       0.7      0.988        0.987 0.596             1.54
17 mu_1       0.8      0.992        0.977 0.573             1.58
18 mu_1       0.9      1.03         1.00  0.131             1.93
19 mu_0       0.1      1.02         0.331 0.0000000301     11.8 
20 mu_0       0.2      1.05         0.959 0.0112            3.53
21 mu_0       0.3      0.960        0.911 0.294             2.18
22 mu_0       0.4      0.962        0.904 0.490             1.79
23 mu_0       0.5      0.991        0.991 0.529             2.12
24 mu_0       0.6      0.985        0.976 0.604             1.32
25 mu_0       0.7      0.987        0.981 0.584             1.53
26 mu_0       0.8      0.990        0.940 0.595             1.53
27 mu_0       0.9      1.02         1.01  0.231             1.82
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0274     4.57e-26  2.11e-78      2.04
 2 mu         0.2     0.832      1.95e-13  3.63e-52     34.8 
 3 mu         0.3     1.10       4.70e- 7  5.83e-37     22.9 
 4 mu         0.4     0.861      2.86e- 3  2.66e-26     11.0 
 5 mu         0.5     1.35       1.51e- 1  3.61e-18     20.8 
 6 mu         0.6     1.25       4.80e- 1  8.15e-12     11.7 
 7 mu         0.7     0.990      1.60e- 1  9.79e-17      6.53
 8 mu         0.8     1.35       5.14e- 3  8.45e-27     14.8 
 9 mu         0.9     1.71       1.82e- 9  1.57e-45     33.6 
10 mu_1       0.1     0.0553     2.95e-25  2.00e-77      3.91
11 mu_1       0.2     0.921      5.67e-13  1.72e-51     40.4 
12 mu_1       0.3     1.09       1.03e- 6  1.84e-36     22.1 
13 mu_1       0.4     0.868      4.53e- 3  6.30e-26      9.61
14 mu_1       0.5     1.37       1.62e- 1  6.84e-18     22.3 
15 mu_1       0.6     1.24       4.79e- 1  1.30e-11     10.4 
16 mu_1       0.7     0.985      1.59e- 1  2.68e-17      6.31
17 mu_1       0.8     1.38       4.03e- 3  2.48e-27     15.6 
18 mu_1       0.9     1.72       1.30e- 9  5.04e-46     35.4 
19 mu_0       0.1     0.0243     1.85e-26  1.26e-79      1.83
20 mu_0       0.2     0.810      1.02e-13  2.44e-53     33.4 
21 mu_0       0.3     1.11       2.46e- 7  4.48e-38     23.8 
22 mu_0       0.4     0.857      1.75e- 3  2.39e-27     12.0 
23 mu_0       0.5     1.33       1.24e- 1  3.88e-19     19.4 
24 mu_0       0.6     1.27       5.48e- 1  9.36e-13     13.6 
25 mu_0       0.7     1.00       1.72e- 1  2.64e-16      7.17
26 mu_0       0.8     1.25       8.81e- 3  3.23e-26     11.9 
27 mu_0       0.9     1.65       6.55e- 9  1.11e-44     20.3 
[1] "Total run time was 371.406 seconds"
