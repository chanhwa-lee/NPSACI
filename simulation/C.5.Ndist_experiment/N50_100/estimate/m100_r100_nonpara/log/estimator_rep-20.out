
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7478"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70 
  3   6   1   2   1   3   1   1   3   3   2   2   2   3   2   1   1   1   2   3 
 71  72  73  74  76  77  79  81  82  83  84  85  86  87  88  89  91  94  95  96 
  2   2   1   4   1   2   2   2   3   2   5   2   1   1   1   4   3   3   3   3 
 97  98  99 100 
  2   2   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01484 0.27903 0.54866 0.92116 6.42851 
[1] "event indicator table: "

   0    1 
4438 3040 
[1] "treatment indicator table: "

   0    1 
2925 4553 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3831
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3647
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 979.234 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.408 0.0505
 2 mu         0.1   0.2 0.489 0.0577
 3 mu         0.1   0.3 0.556 0.0655
 4 mu         0.1   0.4 0.615 0.0748
 5 mu         0.1   0.5 0.667 0.0824
 6 mu         0.2   0.1 0.386 0.0326
 7 mu         0.2   0.2 0.478 0.0376
 8 mu         0.2   0.3 0.537 0.0369
 9 mu         0.2   0.4 0.569 0.0351
10 mu         0.2   0.5 0.601 0.0353
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.983        0.516 0.0000000799      5.14
 2 mu         0.2      0.964        0.899 0.00973           2.57
 3 mu         0.3      0.964        0.954 0.401             2.39
 4 mu         0.4      0.978        0.998 0.464             1.56
 5 mu         0.5      1.02         1.01  0.621             1.55
 6 mu         0.6      1.04         1.04  0.537             1.33
 7 mu         0.7      1.01         1.02  0.653             1.33
 8 mu         0.8      0.967        0.960 0.638             1.44
 9 mu         0.9      0.999        0.969 0.252             1.94
10 mu_1       0.1      0.970        0.685 0.000000255       5.05
11 mu_1       0.2      0.973        0.916 0.0159            2.56
12 mu_1       0.3      0.960        0.942 0.370             2.29
13 mu_1       0.4      0.983        0.990 0.500             1.57
14 mu_1       0.5      1.02         1.02  0.621             1.56
15 mu_1       0.6      1.04         1.05  0.536             1.32
16 mu_1       0.7      1.01         1.02  0.647             1.32
17 mu_1       0.8      0.968        0.959 0.640             1.45
18 mu_1       0.9      0.999        0.961 0.247             1.95
19 mu_0       0.1      0.984        0.494 0.0000000605      5.15
20 mu_0       0.2      0.962        0.893 0.00820           2.57
21 mu_0       0.3      0.966        0.957 0.407             2.43
22 mu_0       0.4      0.976        0.987 0.441             1.55
23 mu_0       0.5      1.02         1.02  0.621             1.54
24 mu_0       0.6      1.04         1.04  0.539             1.34
25 mu_0       0.7      1.02         1.02  0.667             1.34
26 mu_0       0.8      0.965        0.954 0.627             1.42
27 mu_0       0.9      1.00         0.965 0.298             1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.91      6.30e-27  2.18e-79    176.  
 2 mu         0.2      0.737     1.67e-14  1.18e-53     28.6 
 3 mu         0.3      1.02      9.49e- 8  1.10e-38     17.0 
 4 mu         0.4      1.03      6.98e- 4  3.86e-28     19.1 
 5 mu         0.5      0.966     1.17e- 2  4.82e-20      7.81
 6 mu         0.6      0.885     1.02e- 1  5.47e-21      6.22
 7 mu         0.7      1.08      1.15e- 1  4.60e-31      7.01
 8 mu         0.8      1.48      2.13e- 2  1.26e-45      8.25
 9 mu         0.9      1.45      2.73e- 7  5.27e-71     29.9 
10 mu_1       0.1      2.08      3.82e-26  2.10e-78    183.  
11 mu_1       0.2      0.678     5.77e-14  5.71e-53     22.6 
12 mu_1       0.3      1.06      2.01e- 7  3.55e-38     15.7 
13 mu_1       0.4      1.02      7.56e- 4  9.32e-28     18.1 
14 mu_1       0.5      0.968     1.41e- 2  9.32e-20      7.96
15 mu_1       0.6      0.882     8.94e- 2  9.50e-22      6.17
16 mu_1       0.7      1.10      1.19e- 1  6.85e-32      7.09
17 mu_1       0.8      1.48      1.66e- 2  1.64e-46      8.50
18 mu_1       0.9      1.43      1.95e- 7  6.10e-72     31.0 
19 mu_0       0.1      1.89      2.75e-27  8.15e-81    175.  
20 mu_0       0.2      0.752     6.49e-15  4.98e-55     30.1 
21 mu_0       0.3      1.00      4.95e- 8  5.31e-40     17.5 
22 mu_0       0.4      1.04      3.90e- 4  2.17e-29     19.8 
23 mu_0       0.5      0.963     9.64e- 3  3.25e-21      7.67
24 mu_0       0.6      0.889     6.91e- 2  1.23e-20      6.28
25 mu_0       0.7      1.02      1.40e- 1  1.37e-30      6.84
26 mu_0       0.8      1.47      3.83e- 2  5.63e-45      8.71
27 mu_0       0.9      1.56      9.69e- 7  4.72e-70     25.4 
[1] "Total run time was 990.658 seconds"
