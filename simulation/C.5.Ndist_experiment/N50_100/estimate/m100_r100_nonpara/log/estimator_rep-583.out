
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7696"
[1] "cluster size dist'n: "

 50  51  54  55  56  57  58  59  60  61  63  64  65  66  67  68  70  72  73  74 
  4   2   2   1   2   1   1   2   1   4   4   2   1   1   4   1   4   1   3   2 
 76  77  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  96  98  99 
  3   3   1   4   2   4   5   2   1   3   1   4   4   2   3   1   1   4   5   3 
100 
  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04114 0.35887 0.62764 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4544 3152 
[1] "treatment indicator table: "

   0    1 
2696 5000 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3874
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3822
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 420.785 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.391 0.0941
 2 mu         0.1   0.2 0.490 0.123 
 3 mu         0.1   0.3 0.531 0.122 
 4 mu         0.1   0.4 0.575 0.132 
 5 mu         0.1   0.5 0.663 0.160 
 6 mu         0.2   0.1 0.430 0.0600
 7 mu         0.2   0.2 0.538 0.0818
 8 mu         0.2   0.3 0.582 0.0674
 9 mu         0.2   0.4 0.645 0.0721
10 mu         0.2   0.5 0.730 0.105 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.827       0.0468 0.000000298     13.6 
 2 mu         0.2      1.09        0.923  0.0228           4.90
 3 mu         0.3      1.03        0.983  0.307            2.20
 4 mu         0.4      1.02        1.00   0.423            2.00
 5 mu         0.5      1.01        0.975  0.644            1.43
 6 mu         0.6      1.01        0.987  0.655            1.47
 7 mu         0.7      1.00        1.01   0.608            1.48
 8 mu         0.8      0.998       0.969  0.532            1.66
 9 mu         0.9      0.953       0.898  0.0931           2.13
10 mu_1       0.1      0.896       0.0916 0.000000919     10.1 
11 mu_1       0.2      1.09        0.911  0.0355           4.96
12 mu_1       0.3      1.02        0.989  0.346            2.14
13 mu_1       0.4      1.01        1.02   0.432            1.93
14 mu_1       0.5      1.01        0.974  0.634            1.45
15 mu_1       0.6      1.01        0.990  0.663            1.45
16 mu_1       0.7      1.00        1.01   0.612            1.51
17 mu_1       0.8      0.997       0.969  0.518            1.66
18 mu_1       0.9      0.951       0.900  0.0882           2.15
19 mu_0       0.1      0.820       0.0412 0.000000229     14.0 
20 mu_0       0.2      1.09        0.954  0.0196           4.89
21 mu_0       0.3      1.03        0.978  0.290            2.22
22 mu_0       0.4      1.02        0.991  0.418            2.05
23 mu_0       0.5      1.01        0.974  0.655            1.48
24 mu_0       0.6      1.02        0.991  0.644            1.51
25 mu_0       0.7      1.00        1.00   0.600            1.39
26 mu_0       0.8      1.00        0.975  0.587            1.68
27 mu_0       0.9      0.964       0.915  0.136            2.28
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00482     7.85e-30  2.57e-80     0.481
 2 mu         0.2    0.454       6.78e-17  1.75e-54    38.3  
 3 mu         0.3    1.10        8.68e-10  6.33e-40    40.1  
 4 mu         0.4    1.22        3.80e- 5  1.27e-29    13.4  
 5 mu         0.5    1.05        1.94e- 2  1.17e-21    10.1  
 6 mu         0.6    1.28        4.19e- 1  3.50e-15     9.81 
 7 mu         0.7    1.71        4.70e- 1  1.02e-14    11.5  
 8 mu         0.8    1.20        9.19e- 2  7.92e-24    11.1  
 9 mu         0.9    3.45        1.63e- 6  2.19e-40    63.6  
10 mu_1       0.1    0.0106      4.71e-29  2.39e-79     1.05 
11 mu_1       0.2    0.529       2.20e-16  8.66e-54    42.0  
12 mu_1       0.3    1.14        2.01e- 9  2.08e-39    40.9  
13 mu_1       0.4    1.21        6.37e- 5  3.14e-29    13.0  
14 mu_1       0.5    1.04        2.47e- 2  2.31e-21     9.20 
15 mu_1       0.6    1.30        4.27e- 1  5.76e-15     9.55 
16 mu_1       0.7    1.70        5.06e- 1  3.19e-15    11.4  
17 mu_1       0.8    1.19        9.08e- 2  2.17e-24    11.5  
18 mu_1       0.9    3.55        1.21e- 6  7.09e-41    65.5  
19 mu_0       0.1    0.00418     3.49e-30  2.02e-81     0.418
20 mu_0       0.2    0.435       2.97e-17  2.61e-56    37.4  
21 mu_0       0.3    1.08        3.75e-10  1.08e-41    39.7  
22 mu_0       0.4    1.23        2.08e- 5  2.52e-31    13.6  
23 mu_0       0.5    1.05        1.27e- 2  2.79e-23    10.9  
24 mu_0       0.6    1.24        3.33e- 1  1.04e-16    10.2  
25 mu_0       0.7    1.71        4.62e- 1  2.65e-14    11.5  
26 mu_0       0.8    1.20        9.94e- 2  3.09e-23     9.66 
27 mu_0       0.9    2.60        5.38e- 6  1.55e-39    46.0  
[1] "Total run time was 424.279 seconds"
