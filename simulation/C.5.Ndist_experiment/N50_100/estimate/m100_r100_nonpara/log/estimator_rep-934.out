
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7415"
[1] "cluster size dist'n: "

 50  51  52  55  56  57  58  59  60  61  62  64  65  66  67  68  69  71  72  73 
  2   4   2   5   1   1   3   2   5   2   1   2   4   3   2   4   3   2   1   2 
 74  75  77  78  79  80  81  83  84  85  86  87  88  90  92  93  94  95  96  97 
  3   1   2   1   1   2   2   2   1   3   4   3   3   5   2   3   2   1   2   1 
 98  99 100 
  2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03077 0.35016 0.60830 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4365 3050 
[1] "treatment indicator table: "

   0    1 
3010 4405 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3689
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3726
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.376 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.598 0.120 
 2 mu         0.1   0.2 0.630 0.100 
 3 mu         0.1   0.3 0.652 0.0895
 4 mu         0.1   0.4 0.699 0.0985
 5 mu         0.1   0.5 0.723 0.103 
 6 mu         0.2   0.1 0.416 0.0622
 7 mu         0.2   0.2 0.461 0.0499
 8 mu         0.2   0.3 0.503 0.0423
 9 mu         0.2   0.4 0.541 0.0429
10 mu         0.2   0.5 0.578 0.0451
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.21         0.682 0.0000000771      7.96
 2 mu         0.2      0.981        0.921 0.0274            2.37
 3 mu         0.3      0.980        0.951 0.458             1.94
 4 mu         0.4      1.01         0.989 0.570             2.39
 5 mu         0.5      1.02         1.01  0.652             1.64
 6 mu         0.6      0.998        0.983 0.675             1.47
 7 mu         0.7      0.995        0.986 0.600             1.52
 8 mu         0.8      0.986        0.988 0.532             1.48
 9 mu         0.9      0.998        0.984 0.0558            2.17
10 mu_1       0.1      1.19         0.791 0.000000233       7.37
11 mu_1       0.2      0.973        0.950 0.0416            2.07
12 mu_1       0.3      0.979        0.929 0.487             1.91
13 mu_1       0.4      1.02         1.00  0.573             2.41
14 mu_1       0.5      1.02         1.02  0.652             1.63
15 mu_1       0.6      0.998        0.986 0.667             1.48
16 mu_1       0.7      0.995        0.987 0.589             1.53
17 mu_1       0.8      0.985        0.995 0.526             1.49
18 mu_1       0.9      0.999        0.991 0.0518            2.21
19 mu_0       0.1      1.21         0.666 0.0000000598      8.03
20 mu_0       0.2      0.983        0.913 0.0238            2.46
21 mu_0       0.3      0.980        0.946 0.445             1.95
22 mu_0       0.4      1.01         0.981 0.568             2.38
23 mu_0       0.5      1.02         1.03  0.642             1.65
24 mu_0       0.6      0.997        0.978 0.673             1.47
25 mu_0       0.7      0.997        0.987 0.627             1.49
26 mu_0       0.8      0.987        0.951 0.555             1.51
27 mu_0       0.9      0.990        0.970 0.0924            1.92
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.31      1.18e-25  2.60e-60    186.  
 2 mu         0.2      0.874     3.27e-13  2.39e-38     25.2 
 3 mu         0.3      1.17      7.64e- 7  7.75e-26     35.6 
 4 mu         0.4      0.851     2.26e- 3  2.86e-17      6.37
 5 mu         0.5      0.906     7.41e- 2  8.02e-12      7.14
 6 mu         0.6      1.30      1.22e- 1  1.43e-18      9.27
 7 mu         0.7      1.20      3.23e- 1  1.37e-27     10.1 
 8 mu         0.8      1.85      8.93e- 3  1.26e-40     15.9 
 9 mu         0.9      1.07      9.62e- 9  2.40e-63     19.8 
10 mu_1       0.1      3.38      7.17e-25  2.24e-59    194.  
11 mu_1       0.2      0.818     9.99e-13  1.03e-37     26.7 
12 mu_1       0.3      1.17      1.55e- 6  2.23e-25     35.9 
13 mu_1       0.4      0.846     3.45e- 3  6.16e-17      6.37
14 mu_1       0.5      0.916     9.07e- 2  1.68e-12      6.75
15 mu_1       0.6      1.32      1.44e- 1  2.49e-19      9.86
16 mu_1       0.7      1.20      3.38e- 1  2.05e-28     10.7 
17 mu_1       0.8      1.87      6.62e- 3  1.65e-41     15.8 
18 mu_1       0.9      1.04      6.27e- 9  2.79e-64     19.4 
19 mu_0       0.1      3.31      5.09e-26  3.98e-61    185.  
20 mu_0       0.2      0.888     1.59e-13  4.12e-39     24.8 
21 mu_0       0.3      1.17      4.29e- 7  1.53e-26     35.5 
22 mu_0       0.4      0.854     1.64e- 3  6.57e-18      6.37
23 mu_0       0.5      0.896     6.65e- 2  1.44e-11      7.53
24 mu_0       0.6      1.27      9.67e- 2  3.19e-18      8.62
25 mu_0       0.7      1.20      2.85e- 1  4.09e-27      8.73
26 mu_0       0.8      1.76      1.77e- 2  5.63e-40     16.4 
27 mu_0       0.9      1.37      3.61e- 8  2.15e-62     23.1 
[1] "Total run time was 421.862 seconds"
