
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7257"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  6   2   3   5   1   1   2   1   2   3   1   1   1   1   2   2   8   1   4   2 
 70  71  72  73  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 
  1   2   3   2   2   4   1   3   3   2   1   1   2   1   2   1   1   1   3   3 
 94  95  96  97  98  99 100 
  1   1   2   1   1   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0524  0.3987  0.6513  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4337 2920 
[1] "treatment indicator table: "

   0    1 
2494 4763 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3706
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3551
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 372.638 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.461 0.0765
 2 mu         0.1   0.2 0.616 0.142 
 3 mu         0.1   0.3 0.671 0.130 
 4 mu         0.1   0.4 0.718 0.128 
 5 mu         0.1   0.5 0.742 0.113 
 6 mu         0.2   0.1 0.400 0.0580
 7 mu         0.2   0.2 0.520 0.0775
 8 mu         0.2   0.3 0.590 0.0748
 9 mu         0.2   0.4 0.645 0.0654
10 mu         0.2   0.5 0.690 0.0642
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.716  1.04e- 9      5.95
 2 mu         0.2      1.10         1.07   1.15e- 3      3.59
 3 mu         0.3      0.982        1.03   2.06e- 1      1.69
 4 mu         0.4      0.970        0.958  3.97e- 1      1.63
 5 mu         0.5      0.991        0.970  6.08e- 1      1.51
 6 mu         0.6      1.02         1.02   5.86e- 1      1.60
 7 mu         0.7      1.01         0.993  6.50e- 1      1.45
 8 mu         0.8      1.01         0.999  7.05e- 1      1.69
 9 mu         0.9      1.02         1.03   3.39e- 1      1.67
10 mu_1       0.1      1.06         0.762  3.83e- 9      4.58
11 mu_1       0.2      1.08         1.10   2.12e- 3      3.26
12 mu_1       0.3      0.979        0.984  2.19e- 1      1.74
13 mu_1       0.4      0.971        0.953  3.89e- 1      1.59
14 mu_1       0.5      0.994        0.971  5.94e- 1      1.48
15 mu_1       0.6      1.02         1.01   5.90e- 1      1.59
16 mu_1       0.7      1.01         0.996  6.55e- 1      1.45
17 mu_1       0.8      1.01         1.00   6.95e- 1      1.71
18 mu_1       0.9      1.02         1.03   3.32e- 1      1.68
19 mu_0       0.1      1.05         0.694  7.35e-10      6.10
20 mu_0       0.2      1.10         1.06   9.04e- 4      3.67
21 mu_0       0.3      0.984        1.01   1.90e- 1      1.67
22 mu_0       0.4      0.969        0.950  4.02e- 1      1.65
23 mu_0       0.5      0.987        0.966  6.23e- 1      1.55
24 mu_0       0.6      1.02         1.02   5.80e- 1      1.62
25 mu_0       0.7      1.01         0.988  6.39e- 1      1.46
26 mu_0       0.8      1.01         0.992  6.63e- 1      1.61
27 mu_0       0.9      1.01         1.00   3.99e- 1      1.54
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.971     1.13e-28  7.82e-95     94.8 
 2 mu         0.2      1.18      2.71e-16  4.41e-65     38.1 
 3 mu         0.3      0.906     2.88e- 9  1.05e-47     15.0 
 4 mu         0.4      0.688     3.26e- 5  2.09e-35     11.0 
 5 mu         0.5      0.851     8.92e- 3  6.86e-26      5.92
 6 mu         0.6      1.11      2.07e- 1  3.79e-18     15.5 
 7 mu         0.7      0.979     1.85e- 1  1.03e-25      7.69
 8 mu         0.8      1.06      6.48e- 2  1.85e-38      8.98
 9 mu         0.9      1.59      2.22e- 5  8.93e-61     25.1 
10 mu_1       0.1      1.25      8.09e-28  7.74e-94    120.  
11 mu_1       0.2      1.13      8.96e-16  2.18e-64     36.6 
12 mu_1       0.3      0.920     6.72e- 9  3.45e-47     16.2 
13 mu_1       0.4      0.670     5.87e- 5  5.18e-35      9.72
14 mu_1       0.5      0.877     8.81e- 3  1.36e-25      5.81
15 mu_1       0.6      1.11      2.44e- 1  6.25e-18     16.0 
16 mu_1       0.7      0.979     1.82e- 1  1.86e-26      7.28
17 mu_1       0.8      1.07      5.30e- 2  2.92e-39      9.41
18 mu_1       0.9      1.59      1.71e- 5  1.26e-61     25.3 
19 mu_0       0.1      0.941     3.52e-29  8.69e-97     92.0 
20 mu_0       0.2      1.19      1.15e-16  5.51e-67     38.5 
21 mu_0       0.3      0.900     1.23e- 9  1.49e-49     14.5 
22 mu_0       0.4      0.700     1.96e- 5  3.49e-37     12.1 
23 mu_0       0.5      0.826     5.96e- 3  1.37e-27      6.03
24 mu_0       0.6      1.12      1.41e- 1  9.46e-20     14.8 
25 mu_0       0.7      0.980     1.71e- 1  2.99e-25      8.65
26 mu_0       0.8      1.01      8.86e- 2  8.07e-38      7.27
27 mu_0       0.9      1.61      6.79e- 5  7.80e-60     23.4 
[1] "Total run time was 376.018 seconds"
