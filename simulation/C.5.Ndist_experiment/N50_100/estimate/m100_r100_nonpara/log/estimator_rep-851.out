
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7383"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  4   1   4   1   2   2   1   3   2   2   1   2   1   1   4   1   4   2   4   2 
 71  72  73  74  75  76  77  78  79  81  82  83  84  85  86  87  88  90  91  92 
  2   4   2   3   3   1   3   1   2   2   2   4   4   1   1   1   1   2   1   2 
 93  94  96  97  98  99 100 
  3   1   2   2   3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02955 0.33832 0.60015 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4338 3045 
[1] "treatment indicator table: "

   0    1 
2810 4573 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3661
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3722
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 384.507 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.315 0.0917
 2 mu         0.1   0.2 0.330 0.0702
 3 mu         0.1   0.3 0.398 0.0962
 4 mu         0.1   0.4 0.402 0.0839
 5 mu         0.1   0.5 0.440 0.0977
 6 mu         0.2   0.1 0.436 0.0883
 7 mu         0.2   0.2 0.517 0.104 
 8 mu         0.2   0.3 0.577 0.121 
 9 mu         0.2   0.4 0.652 0.132 
10 mu         0.2   0.5 0.702 0.145 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.549        0.185  2.63e-10      7.01
 2 mu         0.2      1.28         0.778  1.29e- 3     17.0 
 3 mu         0.3      1.02         0.946  2.06e- 1      4.64
 4 mu         0.4      0.995        0.951  5.67e- 1      2.94
 5 mu         0.5      1.01         1.00   5.55e- 1      1.57
 6 mu         0.6      1.02         1.00   6.71e- 1      1.53
 7 mu         0.7      0.999        0.976  6.31e- 1      1.40
 8 mu         0.8      1.00         1.01   4.82e- 1      1.92
 9 mu         0.9      0.953        0.960  4.49e- 2      2.74
10 mu_1       0.1      0.624        0.245  9.21e-10     11.1 
11 mu_1       0.2      1.29         0.772  2.28e- 3     16.6 
12 mu_1       0.3      1.01         0.952  2.51e- 1      4.49
13 mu_1       0.4      0.997        0.962  5.77e- 1      2.83
14 mu_1       0.5      1.01         1.01   5.66e- 1      1.55
15 mu_1       0.6      1.02         1.00   6.58e- 1      1.53
16 mu_1       0.7      0.997        0.974  6.35e- 1      1.43
17 mu_1       0.8      1.00         1.01   4.69e- 1      1.94
18 mu_1       0.9      0.953        0.957  4.22e- 2      2.80
19 mu_0       0.1      0.540        0.189  1.90e-10      6.55
20 mu_0       0.2      1.27         0.781  1.04e- 3     17.1 
21 mu_0       0.3      1.03         0.937  1.80e- 1      4.78
22 mu_0       0.4      0.994        0.932  5.61e- 1      3.01
23 mu_0       0.5      1.01         0.992  5.45e- 1      1.59
24 mu_0       0.6      1.02         1.00   6.90e- 1      1.52
25 mu_0       0.7      1.00         0.987  6.23e- 1      1.38
26 mu_0       0.8      1.00         1.01   4.88e- 1      1.82
27 mu_0       0.9      0.952        0.910  6.98e- 2      2.45
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      7.89      4.86e-26  3.90e-77    749.  
 2 mu         0.2     10.3       1.01e-14  1.06e-50    315.  
 3 mu         0.3      6.00      1.07e- 8  1.96e-35    166.  
 4 mu         0.4      1.04      1.55e- 4  8.76e-25     16.9 
 5 mu         0.5      0.885     3.89e- 2  1.03e-16     14.5 
 6 mu         0.6      1.16      4.93e- 1  2.18e-13      9.39
 7 mu         0.7      1.72      5.64e- 1  8.81e-21     11.6 
 8 mu         0.8      1.10      4.77e- 2  1.57e-31     12.6 
 9 mu         0.9      1.91      4.11e- 7  2.46e-50     69.1 
10 mu_1       0.1     10.0       3.08e-25  3.62e-76    924.  
11 mu_1       0.2     10.4       3.53e-14  4.91e-50    306.  
12 mu_1       0.3      5.16      2.47e- 8  6.04e-35    132.  
13 mu_1       0.4      0.960     2.52e- 4  2.03e-24     13.6 
14 mu_1       0.5      0.894     4.39e- 2  1.91e-16     15.3 
15 mu_1       0.6      1.19      5.09e- 1  4.48e-14      8.29
16 mu_1       0.7      1.71      5.19e- 1  1.55e-21     11.5 
17 mu_1       0.8      1.10      3.96e- 2  2.42e-32     13.1 
18 mu_1       0.9      1.92      3.06e- 7  3.37e-51     71.2 
19 mu_0       0.1      7.66      1.98e-26  3.16e-78    730.  
20 mu_0       0.2     10.3       3.78e-15  9.66e-52    319.  
21 mu_0       0.3      6.36      5.00e- 9  2.04e-36    181.  
22 mu_0       0.4      1.09      9.00e- 5  1.06e-25     19.8 
23 mu_0       0.5      0.875     2.62e- 2  1.50e-17     13.6 
24 mu_0       0.6      1.11      5.16e- 1  4.78e-13     11.0 
25 mu_0       0.7      1.75      5.57e- 1  2.57e-20     11.8 
26 mu_0       0.8      1.11      7.65e- 2  6.90e-31     10.7 
27 mu_0       0.9      1.83      1.44e- 6  2.16e-49     50.4 
[1] "Total run time was 387.693 seconds"
