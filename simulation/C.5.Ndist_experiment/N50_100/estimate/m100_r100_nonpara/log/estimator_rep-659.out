
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7371"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  68  69  70 
  2   4   2   2   2   2   1   1   2   2   1   2   5   1   3   3   5   2   3   1 
 71  72  73  74  75  76  77  78  79  80  81  82  83  86  88  89  90  91  92  94 
  1   4   1   2   1   4   2   2   1   2   3   3   2   4   1   1   1   2   3   3 
 95  97  98  99 100 
  2   1   1   3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05792 0.40082 0.65235 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4390 2981 
[1] "treatment indicator table: "

   0    1 
2560 4811 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3750
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3621
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 415.037 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.368 0.0563
 2 mu         0.1   0.2 0.475 0.0675
 3 mu         0.1   0.3 0.540 0.0793
 4 mu         0.1   0.4 0.591 0.0831
 5 mu         0.1   0.5 0.605 0.0811
 6 mu         0.2   0.1 0.310 0.0381
 7 mu         0.2   0.2 0.413 0.0444
 8 mu         0.2   0.3 0.469 0.0522
 9 mu         0.2   0.4 0.516 0.0483
10 mu         0.2   0.5 0.542 0.0476
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.07         0.599 0.0000220      6.88
 2 mu         0.2      0.966        0.832 0.0832         2.69
 3 mu         0.3      1.02         0.985 0.324          2.14
 4 mu         0.4      0.971        0.978 0.417          1.82
 5 mu         0.5      0.965        0.967 0.567          1.60
 6 mu         0.6      0.976        0.984 0.600          1.53
 7 mu         0.7      1.03         1.01  0.631          1.60
 8 mu         0.8      1.01         0.993 0.571          1.61
 9 mu         0.9      0.993        0.990 0.437          1.53
10 mu_1       0.1      1.03         0.718 0.0000584      6.67
11 mu_1       0.2      0.974        0.856 0.119          2.60
12 mu_1       0.3      1.01         0.953 0.346          2.17
13 mu_1       0.4      0.969        0.975 0.428          1.78
14 mu_1       0.5      0.965        0.964 0.570          1.58
15 mu_1       0.6      0.979        0.993 0.595          1.51
16 mu_1       0.7      1.03         1.01  0.622          1.60
17 mu_1       0.8      1.01         0.989 0.562          1.60
18 mu_1       0.9      0.993        0.984 0.438          1.53
19 mu_0       0.1      1.07         0.566 0.0000172      6.90
20 mu_0       0.2      0.964        0.831 0.0725         2.77
21 mu_0       0.3      1.02         0.991 0.314          2.13
22 mu_0       0.4      0.972        0.977 0.410          1.84
23 mu_0       0.5      0.966        0.970 0.549          1.63
24 mu_0       0.6      0.972        0.970 0.607          1.56
25 mu_0       0.7      1.03         1.00  0.651          1.61
26 mu_0       0.8      1.02         0.993 0.607          1.63
27 mu_0       0.9      0.988        0.987 0.428          1.53
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.52      2.23e-27  1.58e-70    151.  
 2 mu         0.2      0.717     3.25e-15  1.67e-46     24.2 
 3 mu         0.3      1.12      5.58e- 9  5.09e-33     29.6 
 4 mu         0.4      0.783     6.19e- 5  8.59e-24      7.80
 5 mu         0.5      0.821     1.22e- 2  9.51e-17      7.99
 6 mu         0.6      1.11      4.76e- 2  6.38e-21     15.1 
 7 mu         0.7      1.28      9.57e- 2  2.53e-30     17.0 
 8 mu         0.8      1.54      9.11e- 2  7.91e-44     27.5 
 9 mu         0.9      1.18      2.58e- 5  2.98e-67     11.2 
10 mu_1       0.1      1.24      1.47e-26  1.45e-69    123.  
11 mu_1       0.2      0.869     1.17e-14  7.69e-46     26.9 
12 mu_1       0.3      1.07      1.30e- 8  1.61e-32     26.3 
13 mu_1       0.4      0.776     1.07e- 4  2.04e-23      8.08
14 mu_1       0.5      0.827     1.22e- 2  1.82e-16      8.80
15 mu_1       0.6      1.14      4.83e- 2  8.65e-22     15.7 
16 mu_1       0.7      1.27      9.65e- 2  2.94e-31     16.3 
17 mu_1       0.8      1.55      7.36e- 2  8.04e-45     28.0 
18 mu_1       0.9      1.17      1.96e- 5  2.70e-68     11.5 
19 mu_0       0.1      1.55      8.45e-28  1.39e-71    155.  
20 mu_0       0.2      0.679     1.14e-15  1.66e-47     23.5 
21 mu_0       0.3      1.15      2.40e- 9  3.63e-34     31.0 
22 mu_0       0.4      0.788     3.17e- 5  7.16e-25      7.61
23 mu_0       0.5      0.815     9.37e- 3  7.41e-18      7.19
24 mu_0       0.6      1.08      4.35e- 2  1.47e-20     14.1 
25 mu_0       0.7      1.30      1.08e- 1  7.75e-30     18.4 
26 mu_0       0.8      1.48      7.99e- 2  3.63e-43     25.2 
27 mu_0       0.9      1.29      8.18e- 5  2.74e-66     14.1 
[1] "Total run time was 418.303 seconds"
