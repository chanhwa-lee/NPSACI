
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7406"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  58  60  61  62  63  64  65  66  68  69  70  72  73  74 
  1   5   2   1   1   6   2   1   2   2   2   6   2   2   3   4   3   2   2   3 
 75  77  78  79  80  81  82  83  84  86  87  88  89  91  92  94  95  96  97  98 
  4   5   2   1   1   1   3   1   2   1   4   3   3   5   1   2   1   2   2   2 
 99 100 
  1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0224  0.3210  0.5778  0.9714  6.0000 
[1] "event indicator table: "

   0    1 
4339 3067 
[1] "treatment indicator table: "

   0    1 
2887 4519 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3620
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3786
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 410.176 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.277 0.0545
 2 mu         0.1   0.2 0.334 0.0612
 3 mu         0.1   0.3 0.391 0.0679
 4 mu         0.1   0.4 0.406 0.0734
 5 mu         0.1   0.5 0.498 0.0788
 6 mu         0.2   0.1 0.345 0.0386
 7 mu         0.2   0.2 0.411 0.0317
 8 mu         0.2   0.3 0.470 0.0342
 9 mu         0.2   0.4 0.494 0.0336
10 mu         0.2   0.5 0.582 0.0410
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.780        0.322 0.00000315      6.69
 2 mu         0.2      0.951        0.928 0.0160          2.72
 3 mu         0.3      1.02         0.995 0.302           2.19
 4 mu         0.4      1.00         0.994 0.576           1.58
 5 mu         0.5      0.990        0.979 0.635           1.42
 6 mu         0.6      0.991        0.964 0.644           1.33
 7 mu         0.7      1.01         1.01  0.639           1.45
 8 mu         0.8      1.02         1.01  0.533           1.61
 9 mu         0.9      1.04         1.04  0.163           2.03
10 mu_1       0.1      0.827        0.424 0.0000104       6.70
11 mu_1       0.2      0.973        0.898 0.0270          2.67
12 mu_1       0.3      1.02         0.975 0.361           2.18
13 mu_1       0.4      1.00         0.978 0.609           1.54
14 mu_1       0.5      0.989        0.971 0.628           1.45
15 mu_1       0.6      0.993        0.975 0.651           1.34
16 mu_1       0.7      1.01         1.02  0.640           1.44
17 mu_1       0.8      1.02         1.01  0.536           1.60
18 mu_1       0.9      1.04         1.05  0.152           2.06
19 mu_0       0.1      0.775        0.306 0.00000234      6.76
20 mu_0       0.2      0.946        0.914 0.0133          2.73
21 mu_0       0.3      1.02         0.995 0.277           2.20
22 mu_0       0.4      1.00         0.995 0.554           1.61
23 mu_0       0.5      0.992        0.989 0.642           1.40
24 mu_0       0.6      0.989        0.969 0.634           1.34
25 mu_0       0.7      1.01         1.02  0.615           1.48
26 mu_0       0.8      1.02         1.00  0.521           1.66
27 mu_0       0.9      1.02         1.04  0.206           1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0718     1.67e-27  1.17e-80      6.59
 2 mu         0.2     1.08       5.93e-15  2.54e-54     53.9 
 3 mu         0.3     1.10       7.38e- 8  5.34e-39     16.4 
 4 mu         0.4     0.950      1.46e- 3  3.32e-28      7.90
 5 mu         0.5     1.00       4.07e- 2  6.48e-20      9.82
 6 mu         0.6     0.927      1.71e- 1  2.94e-13      6.50
 7 mu         0.7     1.18       1.24e- 1  2.68e-21      8.68
 8 mu         0.8     1.22       9.03e- 3  2.76e-33      9.29
 9 mu         0.9     1.46       2.02e- 8  1.22e-54     31.6 
10 mu_1       0.1     0.142      1.22e-26  1.13e-79     12.9 
11 mu_1       0.2     1.18       1.72e-14  1.23e-53     52.9 
12 mu_1       0.3     1.06       1.58e- 7  1.72e-38     13.4 
13 mu_1       0.4     0.941      1.95e- 3  8.02e-28      8.50
14 mu_1       0.5     0.998      5.20e- 2  1.25e-19     10.1 
15 mu_1       0.6     0.937      2.13e- 1  9.60e-14      6.50
16 mu_1       0.7     1.18       1.20e- 1  7.49e-22      8.54
17 mu_1       0.8     1.24       7.04e- 3  6.76e-34      9.53
18 mu_1       0.9     1.45       1.40e- 8  2.65e-55     32.1 
19 mu_0       0.1     0.0640     4.97e-28  4.28e-82      5.88
20 mu_0       0.2     1.06       3.11e-15  1.05e-55     54.2 
21 mu_0       0.3     1.12       3.77e- 8  2.51e-40     17.7 
22 mu_0       0.4     0.955      9.49e- 4  1.82e-29      8.08
23 mu_0       0.5     1.01       4.84e- 2  4.27e-21      9.52
24 mu_0       0.6     0.911      1.46e- 1  2.54e-14      6.50
25 mu_0       0.7     1.18       6.88e- 2  7.19e-21      9.02
26 mu_0       0.8     1.16       1.70e- 2  1.11e-32      8.31
27 mu_0       0.9     1.51       7.60e- 8  9.80e-54     27.5 
[1] "Total run time was 413.524 seconds"
