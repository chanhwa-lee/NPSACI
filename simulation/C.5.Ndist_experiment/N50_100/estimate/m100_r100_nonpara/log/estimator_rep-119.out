
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7502"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70 
  2   3   1   1   2   1   2   1   1   3   1   2   1   2   1   4   3   3   1   1 
 71  72  73  74  75  76  77  78  79  80  81  83  84  85  86  88  90  91  92  94 
  4   2   1   8   3   3   3   3   1   2   3   3   1   1   3   4   1   1   4   2 
 95  96  98  99 100 
  5   1   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02796 0.33326 0.58999 1.00000 5.28097 
[1] "event indicator table: "

   0    1 
4398 3104 
[1] "treatment indicator table: "

   0    1 
2760 4742 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3652
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3850
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 410.844 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.572 0.0980
 2 mu         0.1   0.2 0.665 0.116 
 3 mu         0.1   0.3 0.739 0.123 
 4 mu         0.1   0.4 0.780 0.127 
 5 mu         0.1   0.5 0.812 0.133 
 6 mu         0.2   0.1 0.427 0.0641
 7 mu         0.2   0.2 0.501 0.0722
 8 mu         0.2   0.3 0.543 0.0623
 9 mu         0.2   0.4 0.566 0.0539
10 mu         0.2   0.5 0.582 0.0459
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.38         0.317 0.00000000793     13.0 
 2 mu         0.2      1.02         0.999 0.00575            2.62
 3 mu         0.3      0.999        0.956 0.265              2.19
 4 mu         0.4      1.02         0.991 0.518              1.61
 5 mu         0.5      1.01         1.00  0.599              1.53
 6 mu         0.6      0.977        0.966 0.608              1.46
 7 mu         0.7      1.00         0.983 0.627              1.89
 8 mu         0.8      1.01         0.993 0.510              1.63
 9 mu         0.9      1.05         1.01  0.0601             2.33
10 mu_1       0.1      1.38         0.485 0.0000000264      13.0 
11 mu_1       0.2      1.00         0.980 0.00968            2.71
12 mu_1       0.3      1.00         0.966 0.281              2.08
13 mu_1       0.4      1.02         0.992 0.513              1.59
14 mu_1       0.5      1.01         0.994 0.595              1.57
15 mu_1       0.6      0.976        0.960 0.597              1.43
16 mu_1       0.7      1.00         0.984 0.625              1.90
17 mu_1       0.8      1.01         0.994 0.506              1.64
18 mu_1       0.9      1.05         1.02  0.0552             2.35
19 mu_0       0.1      1.38         0.300 0.00000000588     12.9 
20 mu_0       0.2      1.02         0.961 0.00477            2.65
21 mu_0       0.3      0.999        0.961 0.259              2.25
22 mu_0       0.4      1.02         0.989 0.521              1.62
23 mu_0       0.5      1.01         1.00  0.602              1.55
24 mu_0       0.6      0.978        0.970 0.624              1.50
25 mu_0       0.7      0.996        0.971 0.633              1.85
26 mu_0       0.8      1.02         1.00  0.512              1.66
27 mu_0       0.9      1.04         0.976 0.104              2.12
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0474     6.19e-28  2.29e-68      4.54
 2 mu         0.2     0.405      2.68e-15  5.41e-47     16.5 
 3 mu         0.3     1.00       1.10e- 8  1.72e-34     26.0 
 4 mu         0.4     1.01       4.16e- 4  1.28e-25     22.0 
 5 mu         0.5     0.947      2.26e- 2  9.70e-19     10.3 
 6 mu         0.6     1.20       1.85e- 1  4.06e-13     14.1 
 7 mu         0.7     1.05       2.05e- 1  1.24e-16     11.7 
 8 mu         0.8     1.48       8.25e- 3  1.65e-26     22.0 
 9 mu         0.9     1.56       2.17e- 8  2.99e-44     28.4 
10 mu_1       0.1     0.0850     3.67e-27  2.29e-67      8.02
11 mu_1       0.2     0.458      9.24e-15  2.70e-46     14.6 
12 mu_1       0.3     1.05       2.33e- 8  5.73e-34     24.8 
13 mu_1       0.4     0.965      6.58e- 4  3.19e-25     20.4 
14 mu_1       0.5     0.972      3.10e- 2  1.94e-18      9.83
15 mu_1       0.6     1.20       2.23e- 1  6.77e-13     14.0 
16 mu_1       0.7     1.06       1.97e- 1  3.97e-17     12.1 
17 mu_1       0.8     1.50       6.51e- 3  4.65e-27     23.1 
18 mu_1       0.9     1.56       1.48e- 8  7.46e-45     29.0 
19 mu_0       0.1     0.0432     2.79e-28  0             4.16
20 mu_0       0.2     0.392      1.04e-15  0            17.0 
21 mu_0       0.3     0.981      5.78e- 9  0            26.6 
22 mu_0       0.4     1.04       2.54e- 4  0            23.1 
23 mu_0       0.5     0.923      1.76e- 2  0            10.7 
24 mu_0       0.6     1.21       1.58e- 1  0            14.3 
25 mu_0       0.7     1.03       1.70e- 1  0            10.5 
26 mu_0       0.8     1.40       1.52e- 2  0            17.2 
27 mu_0       0.9     1.60       3.68e- 8  0            22.7 
[1] "Total run time was 414.402 seconds"
