
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7483"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  64  65  66  67  69  70  71 
  2   2   3   3   1   1   5   3   1   1   3   1   3   2   2   1   2   1   2   1 
 72  73  74  75  76  77  78  79  82  83  84  85  87  89  90  91  92  93  94  95 
  4   3   1   3   4   3   1   2   3   2   4   2   2   2   4   1   2   5   1   2 
 96  97  99 100 
  5   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02923 0.33431 0.60125 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4535 2948 
[1] "treatment indicator table: "

   0    1 
2545 4938 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3617
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3866
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 519.319 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.268 0.0682
 2 mu         0.1   0.2 0.284 0.0598
 3 mu         0.1   0.3 0.283 0.0537
 4 mu         0.1   0.4 0.280 0.0468
 5 mu         0.1   0.5 0.283 0.0546
 6 mu         0.2   0.1 0.456 0.105 
 7 mu         0.2   0.2 0.517 0.111 
 8 mu         0.2   0.3 0.552 0.117 
 9 mu         0.2   0.4 0.569 0.117 
10 mu         0.2   0.5 0.595 0.127 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.458       0.0718  1.70e-11      3.47
 2 mu         0.2      1.05        0.763   2.71e- 4     19.2 
 3 mu         0.3      1.05        0.941   6.41e- 2      3.59
 4 mu         0.4      1.01        1.01    1.86e- 1      2.08
 5 mu         0.5      0.997       0.975   5.45e- 1      1.62
 6 mu         0.6      1.03        1.01    6.77e- 1      1.45
 7 mu         0.7      1.02        1.01    6.13e- 1      1.55
 8 mu         0.8      0.998       1.00    4.97e- 1      1.39
 9 mu         0.9      0.999       0.992   3.71e- 1      1.74
10 mu_1       0.1      0.511       0.146   6.70e-11      4.83
11 mu_1       0.2      1.08        0.772   5.62e- 4     16.7 
12 mu_1       0.3      1.05        0.951   8.46e- 2      3.19
13 mu_1       0.4      1.01        0.990   1.65e- 1      1.95
14 mu_1       0.5      0.997       0.978   5.84e- 1      1.60
15 mu_1       0.6      1.03        1.01    6.72e- 1      1.45
16 mu_1       0.7      1.02        1.01    6.03e- 1      1.54
17 mu_1       0.8      0.999       0.999   4.92e- 1      1.40
18 mu_1       0.9      0.998       0.995   3.69e- 1      1.76
19 mu_0       0.1      0.452       0.0636  1.15e-11      3.51
20 mu_0       0.2      1.05        0.749   1.92e- 4     19.8 
21 mu_0       0.3      1.05        0.943   5.14e- 2      3.77
22 mu_0       0.4      1.02        1.03    1.99e- 1      2.16
23 mu_0       0.5      0.997       0.969   5.05e- 1      1.68
24 mu_0       0.6      1.03        1.01    6.83e- 1      1.46
25 mu_0       0.7      1.02        1.01    6.37e- 1      1.59
26 mu_0       0.8      0.992       0.997   5.14e- 1      1.42
27 mu_0       0.9      1.01        0.991   3.87e- 1      1.67
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00364     6.47e-28  2.78e-72     0.364
 2 mu         0.2    0.398       2.65e-15  3.73e-47    38.2  
 3 mu         0.3    1.12        4.28e- 8  6.37e-33    53.1  
 4 mu         0.4    1.45        2.42e- 4  2.19e-23    20.6  
 5 mu         0.5    1.69        8.58e- 2  3.98e-16    15.2  
 6 mu         0.6    1.34        3.27e- 1  2.35e-10    10.3  
 7 mu         0.7    1.34        2.40e- 1  6.90e-10    20.5  
 8 mu         0.8    1.23        4.69e- 2  1.77e-18     7.83 
 9 mu         0.9    1.23        2.58e- 6  1.18e-34    18.7  
10 mu_1       0.1    0.00946     4.28e-27  2.51e-71     0.946
11 mu_1       0.2    0.525       8.93e-15  1.68e-46    49.6  
12 mu_1       0.3    1.16        8.57e- 8  2.00e-32    46.0  
13 mu_1       0.4    1.45        4.09e- 4  5.14e-23    18.3  
14 mu_1       0.5    1.69        9.84e- 2  7.48e-16    14.4  
15 mu_1       0.6    1.33        2.75e- 1  3.68e-10    11.5  
16 mu_1       0.7    1.33        2.15e- 1  3.40e-10    19.7  
17 mu_1       0.8    1.23        4.77e- 2  7.61e-19     8.21 
18 mu_1       0.9    1.23        1.96e- 6  4.52e-35    19.5  
19 mu_0       0.1    0.00299     2.44e-28  2.96e-73     0.299
20 mu_0       0.2    0.366       1.08e-15  4.46e-48    35.3  
21 mu_0       0.3    1.10        2.45e- 8  5.42e-34    56.1  
22 mu_0       0.4    1.46        1.31e- 4  2.17e-24    22.5  
23 mu_0       0.5    1.69        5.79e- 2  4.74e-17    16.0  
24 mu_0       0.6    1.37        3.82e- 1  3.49e-11    10.7  
25 mu_0       0.7    1.34        3.05e- 1  1.51e- 9    22.5  
26 mu_0       0.8    1.23        6.39e- 2  5.79e-18     7.94 
27 mu_0       0.9    1.25        8.27e- 6  7.74e-34    12.6  
[1] "Total run time was 523.965 seconds"
