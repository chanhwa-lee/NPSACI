
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7482"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  63  64  65  66  67  68  69  71  72 
  1   2   2   1   1   2   3   5   4   4   1   1   4   1   5   3   2   1   1   4 
 73  74  75  76  77  78  80  81  82  84  86  87  88  89  91  92  93  94  95  96 
  2   1   1   4   1   3   2   2   3   1   3   1   2   4   2   2   1   3   5   4 
 97  98  99 100 
  1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03747 0.35222 0.63185 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4390 3092 
[1] "treatment indicator table: "

   0    1 
2763 4719 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3793
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3689
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.383 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.387 0.105 
 2 mu         0.1   0.2 0.440 0.105 
 3 mu         0.1   0.3 0.482 0.106 
 4 mu         0.1   0.4 0.505 0.109 
 5 mu         0.1   0.5 0.515 0.107 
 6 mu         0.2   0.1 0.480 0.0730
 7 mu         0.2   0.2 0.556 0.0713
 8 mu         0.2   0.3 0.638 0.0726
 9 mu         0.2   0.4 0.673 0.0684
10 mu         0.2   0.5 0.698 0.0624
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.765       0.102  0.000000112       9.58
 2 mu         0.2      1.13        1.05   0.0135            5.05
 3 mu         0.3      1.03        0.974  0.0268            2.57
 4 mu         0.4      1.00        0.980  0.296             1.65
 5 mu         0.5      0.993       0.983  0.538             1.75
 6 mu         0.6      0.998       0.999  0.693             1.42
 7 mu         0.7      0.973       0.951  0.686             1.57
 8 mu         0.8      1.01        1.01   0.576             1.80
 9 mu         0.9      0.969       0.985  0.0292            2.60
10 mu_1       0.1      0.851       0.180  0.000000338       7.98
11 mu_1       0.2      1.13        1.06   0.0208            4.87
12 mu_1       0.3      1.02        0.982  0.0269            2.35
13 mu_1       0.4      1.00        0.984  0.325             1.62
14 mu_1       0.5      0.993       0.984  0.538             1.73
15 mu_1       0.6      0.997       1.00   0.686             1.41
16 mu_1       0.7      0.974       0.956  0.683             1.58
17 mu_1       0.8      1.01        1.00   0.578             1.82
18 mu_1       0.9      0.969       0.982  0.0267            2.69
19 mu_0       0.1      0.755       0.0935 0.0000000868      9.85
20 mu_0       0.2      1.13        1.02   0.0117            5.09
21 mu_0       0.3      1.03        0.977  0.0267            2.67
22 mu_0       0.4      1.01        0.983  0.277             1.67
23 mu_0       0.5      0.993       0.982  0.537             1.76
24 mu_0       0.6      1.00        0.999  0.703             1.42
25 mu_0       0.7      0.973       0.959  0.682             1.55
26 mu_0       0.8      1.01        1.02   0.566             1.75
27 mu_0       0.9      0.968       0.991  0.0521            1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.13      3.54e-26  1.18e-72    101.  
 2 mu         0.2      0.673     1.16e-13  5.62e-48     45.3 
 3 mu         0.3      0.653     1.81e- 7  1.04e-33     17.8 
 4 mu         0.4      1.33      2.07e- 3  9.68e-24     21.4 
 5 mu         0.5      1.21      3.12e- 1  3.58e-16      9.66
 6 mu         0.6      1.49      1.47e- 1  2.58e-15     15.7 
 7 mu         0.7      0.884     2.70e- 1  4.39e-23      4.76
 8 mu         0.8      1.26      1.02e- 2  2.32e-34      8.43
 9 mu         0.9      1.61      1.08e- 8  4.55e-54     37.8 
10 mu_1       0.1      1.39      2.26e-25  1.10e-71    119.  
11 mu_1       0.2      0.534     3.44e-13  2.62e-47     37.8 
12 mu_1       0.3      0.749     3.95e- 7  3.24e-33     17.3 
13 mu_1       0.4      1.33      2.59e- 3  2.26e-23     19.5 
14 mu_1       0.5      1.21      2.48e- 1  6.68e-16      9.05
15 mu_1       0.6      1.49      1.09e- 1  5.08e-16     16.2 
16 mu_1       0.7      0.870     2.41e- 1  7.43e-24      4.78
17 mu_1       0.8      1.28      7.87e- 3  3.44e-35      8.45
18 mu_1       0.9      1.61      7.29e- 9  5.98e-55     38.2 
19 mu_0       0.1      1.10      1.42e-26  8.83e-74     98.8 
20 mu_0       0.2      0.708     5.87e-14  4.74e-49     47.2 
21 mu_0       0.3      0.613     8.92e- 8  1.00e-34     18.0 
22 mu_0       0.4      1.33      1.37e- 3  1.09e-24     22.7 
23 mu_0       0.5      1.21      2.94e- 1  4.83e-17     10.3 
24 mu_0       0.6      1.50      2.02e- 1  5.68e-15     14.9 
25 mu_0       0.7      0.918     2.74e- 1  1.29e-22      5.70
26 mu_0       0.8      1.17      1.03e- 2  1.02e-33      8.32
27 mu_0       0.9      1.59      4.21e- 8  4.01e-53     34.4 
[1] "Total run time was 422.116 seconds"
