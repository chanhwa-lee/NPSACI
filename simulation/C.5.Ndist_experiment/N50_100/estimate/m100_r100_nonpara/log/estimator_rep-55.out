
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7346"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  3   1   3   2   1   2   2   3   5   5   1   2   2   2   3   4   2   1   2   2 
 71  72  73  74  75  77  78  80  81  82  83  85  86  87  89  90  91  92  93  94 
  3   1   1   2   2   2   3   2   1   1   3   2   2   2   2   3   1   2   2   2 
 95  96  97  98  99 100 
  2   3   2   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03406 0.35259 0.61459 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4408 2938 
[1] "treatment indicator table: "

   0    1 
2612 4734 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3551
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3795
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 475.044 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.344 0.0508
 2 mu         0.1   0.2 0.417 0.0514
 3 mu         0.1   0.3 0.459 0.0688
 4 mu         0.1   0.4 0.523 0.0698
 5 mu         0.1   0.5 0.566 0.0835
 6 mu         0.2   0.1 0.351 0.0462
 7 mu         0.2   0.2 0.438 0.0439
 8 mu         0.2   0.3 0.502 0.0474
 9 mu         0.2   0.4 0.540 0.0524
10 mu         0.2   0.5 0.585 0.0712
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.01         0.655 0.00000675      3.95
 2 mu         0.2      1.02         0.953 0.0293          3.18
 3 mu         0.3      1.03         0.977 0.435           1.94
 4 mu         0.4      1.00         0.985 0.526           1.59
 5 mu         0.5      1.02         1.01  0.573           1.46
 6 mu         0.6      1.01         1.02  0.642           1.42
 7 mu         0.7      0.972        0.962 0.713           1.35
 8 mu         0.8      1.00         1.01  0.600           1.52
 9 mu         0.9      1.03         0.966 0.378           2.61
10 mu_1       0.1      1.01         0.743 0.0000196       3.85
11 mu_1       0.2      1.03         1.00  0.0445          3.07
12 mu_1       0.3      1.03         0.970 0.450           1.89
13 mu_1       0.4      1.00         0.986 0.540           1.56
14 mu_1       0.5      1.02         1.02  0.569           1.47
15 mu_1       0.6      1.01         1.02  0.636           1.41
16 mu_1       0.7      0.971        0.960 0.704           1.37
17 mu_1       0.8      1.00         1.01  0.597           1.52
18 mu_1       0.9      1.03         0.958 0.358           2.65
19 mu_0       0.1      1.01         0.654 0.00000532      3.98
20 mu_0       0.2      1.02         0.927 0.0255          3.21
21 mu_0       0.3      1.03         0.986 0.412           1.95
22 mu_0       0.4      1.00         0.979 0.516           1.60
23 mu_0       0.5      1.02         1.01  0.577           1.45
24 mu_0       0.6      1.01         1.02  0.651           1.43
25 mu_0       0.7      0.973        0.964 0.722           1.35
26 mu_0       0.8      0.994        1.00  0.612           1.50
27 mu_0       0.9      1.03         0.990 0.371           2.26
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.63      3.22e-28  1.45e-81    352.  
 2 mu         0.2      0.540     9.87e-16  3.55e-54     46.5 
 3 mu         0.3      0.815     5.40e- 9  2.53e-38     13.4 
 4 mu         0.4      0.892     1.09e- 4  3.13e-27      9.73
 5 mu         0.5      0.842     3.91e- 2  8.64e-19      9.12
 6 mu         0.6      1.06      1.43e- 1  1.67e-24      9.34
 7 mu         0.7      1.24      1.59e- 1  4.28e-35      6.86
 8 mu         0.8      1.10      1.42e- 1  3.04e-50      8.31
 9 mu         0.9      1.46      1.43e- 5  1.99e-76     17.5 
10 mu_1       0.1      2.43      2.07e-27  1.37e-80    225.  
11 mu_1       0.2      0.485     3.35e-15  1.67e-53     38.3 
12 mu_1       0.3      0.898     1.26e- 8  7.91e-38     14.7 
13 mu_1       0.4      0.859     1.83e- 4  7.35e-27      9.46
14 mu_1       0.5      0.854     3.69e- 2  1.62e-18      9.01
15 mu_1       0.6      1.08      1.37e- 1  1.78e-25      9.77
16 mu_1       0.7      1.23      1.68e- 1  3.90e-36      6.91
17 mu_1       0.8      1.10      1.15e- 1  2.43e-51      8.31
18 mu_1       0.9      1.47      1.08e- 5  1.41e-77     18.2 
19 mu_0       0.1      3.77      1.28e-28  9.89e-83    367.  
20 mu_0       0.2      0.554     3.97e-16  2.72e-55     48.5 
21 mu_0       0.3      0.779     2.54e- 9  2.21e-39     12.8 
22 mu_0       0.4      0.914     6.42e- 5  3.19e-28      9.91
23 mu_0       0.5      0.831     2.32e- 2  1.06e-19      9.22
24 mu_0       0.6      1.02      9.69e- 2  3.92e-24      8.69
25 mu_0       0.7      1.25      1.54e- 1  1.33e-34      7.85
26 mu_0       0.8      1.10      1.90e- 1  1.42e-49      8.31
27 mu_0       0.9      1.39      4.55e- 5  1.86e-75     11.3 
[1] "Total run time was 479.095 seconds"
