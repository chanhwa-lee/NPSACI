
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7471"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  58  59  60  61  62  63  65  66  67  69  70  71  72  73 
  2   2   4   3   1   2   3   3   1   3   2   2   2   3   2   1   4   4   1   2 
 74  76  78  80  81  82  83  84  85  86  87  88  90  91  92  93  94  95  96  97 
  3   3   3   2   3   4   1   3   2   4   4   3   2   1   1   3   2   2   2   1 
 98  99 100 
  1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03748 0.35210 0.60840 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4419 3052 
[1] "treatment indicator table: "

   0    1 
2776 4695 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3676
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3795
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 429.869 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.369 0.0781
 2 mu         0.1   0.2 0.477 0.112 
 3 mu         0.1   0.3 0.582 0.135 
 4 mu         0.1   0.4 0.611 0.150 
 5 mu         0.1   0.5 0.673 0.158 
 6 mu         0.2   0.1 0.309 0.0355
 7 mu         0.2   0.2 0.385 0.0387
 8 mu         0.2   0.3 0.475 0.0656
 9 mu         0.2   0.4 0.500 0.0750
10 mu         0.2   0.5 0.552 0.0734
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.20        0.0921 0.000000252     16.5 
 2 mu         0.2      0.984       0.888  0.0143           2.77
 3 mu         0.3      0.975       0.958  0.125            2.01
 4 mu         0.4      0.972       0.954  0.463            1.57
 5 mu         0.5      0.980       0.964  0.600            1.32
 6 mu         0.6      1.01        1.00   0.667            1.56
 7 mu         0.7      1.03        1.02   0.697            1.38
 8 mu         0.8      0.991       1.01   0.517            1.52
 9 mu         0.9      0.988       0.943  0.0109           2.02
10 mu_1       0.1      1.05        0.170  0.000000774     12.4 
11 mu_1       0.2      0.981       0.871  0.0225           2.48
12 mu_1       0.3      0.979       0.974  0.135            2.05
13 mu_1       0.4      0.970       0.940  0.473            1.57
14 mu_1       0.5      0.982       0.970  0.607            1.35
15 mu_1       0.6      1.01        1.00   0.667            1.54
16 mu_1       0.7      1.03        1.03   0.694            1.38
17 mu_1       0.8      0.991       1.02   0.507            1.53
18 mu_1       0.9      0.988       0.943  0.00996          2.06
19 mu_0       0.1      1.21        0.0819 0.000000194     16.9 
20 mu_0       0.2      0.984       0.902  0.0122           2.91
21 mu_0       0.3      0.973       0.963  0.121            2.00
22 mu_0       0.4      0.974       0.945  0.457            1.57
23 mu_0       0.5      0.978       0.963  0.582            1.36
24 mu_0       0.6      1.01        1.01   0.668            1.59
25 mu_0       0.7      1.03        1.02   0.705            1.38
26 mu_0       0.8      0.995       0.998  0.560            1.49
27 mu_0       0.9      0.988       0.971  0.0193           2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0229     2.69e-27  4.63e-84      2.16
 2 mu         0.2     1.49       1.93e-14  4.53e-57    109.  
 3 mu         0.3     1.69       5.13e- 8  2.45e-41     45.7 
 4 mu         0.4     1.22       3.05e- 4  3.16e-30     14.1 
 5 mu         0.5     1.02       5.13e- 2  1.16e-21      8.00
 6 mu         0.6     1.00       3.03e- 1  9.89e-15      5.97
 7 mu         0.7     1.27       3.32e- 1  4.71e-14      6.25
 8 mu         0.8     1.28       3.19e- 2  1.07e-23     18.2 
 9 mu         0.9     1.86       1.91e- 7  3.11e-41     50.4 
10 mu_1       0.1     0.0496     1.71e-26  4.53e-83      4.62
11 mu_1       0.2     1.69       6.04e-14  2.22e-56    116.  
12 mu_1       0.3     1.63       1.15e- 7  7.98e-41     48.4 
13 mu_1       0.4     1.20       5.08e- 4  7.72e-30     11.2 
14 mu_1       0.5     1.00       7.17e- 2  2.26e-21      7.33
15 mu_1       0.6     1.02       3.49e- 1  1.61e-14      5.76
16 mu_1       0.7     1.28       2.95e- 1  1.76e-14      6.29
17 mu_1       0.8     1.27       2.51e- 2  3.52e-24     17.8 
18 mu_1       0.9     1.90       1.39e- 7  9.05e-42     52.8 
19 mu_0       0.1     0.0199     1.04e-27  1.12e-85      1.88
20 mu_0       0.2     1.44       9.06e-15  1.23e-58    107.  
21 mu_0       0.3     1.71       2.41e- 8  7.60e-43     44.6 
22 mu_0       0.4     1.24       1.69e- 4  1.14e-31     16.1 
23 mu_0       0.5     1.03       3.30e- 2  5.02e-23      8.66
24 mu_0       0.6     0.978      3.12e- 1  5.38e-16      6.29
25 mu_0       0.7     1.26       4.37e- 1  1.16e-13      6.17
26 mu_0       0.8     1.30       3.17e- 2  3.97e-23     19.5 
27 mu_0       0.9     1.54       6.63e- 7  2.29e-40     34.7 
[1] "Total run time was 433.322 seconds"
