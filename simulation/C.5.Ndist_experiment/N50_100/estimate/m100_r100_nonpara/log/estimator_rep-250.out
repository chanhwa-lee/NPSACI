
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7673"
[1] "cluster size dist'n: "

 50  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 
  6   2   1   3   2   2   1   2   1   2   1   2   2   2   1   2   2   3   2   1 
 73  74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  1   1   1   3   2   1   1   3   3   6   1   5   2   5   2   1   1   1   4   2 
 94  95  96  97  98  99 100 
  1   1   1   3   3   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02516 0.33318 0.59699 1.00000 5.82980 
[1] "event indicator table: "

   0    1 
4666 3007 
[1] "treatment indicator table: "

   0    1 
2836 4837 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3863
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 33"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3810
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 504.878 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.361 0.0972
 2 mu         0.1   0.2 0.411 0.120 
 3 mu         0.1   0.3 0.468 0.119 
 4 mu         0.1   0.4 0.485 0.142 
 5 mu         0.1   0.5 0.535 0.147 
 6 mu         0.2   0.1 0.363 0.0609
 7 mu         0.2   0.2 0.422 0.0815
 8 mu         0.2   0.3 0.481 0.0719
 9 mu         0.2   0.4 0.508 0.0960
10 mu         0.2   0.5 0.559 0.0969
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.920        0.417  5.15e-14     14.6 
 2 mu         0.2      1.03         0.981  5.79e- 6      6.40
 3 mu         0.3      0.978        0.966  1.60e- 2      2.14
 4 mu         0.4      0.966        0.997  3.38e- 1      1.97
 5 mu         0.5      0.969        0.973  6.46e- 1      1.34
 6 mu         0.6      1.02         0.999  6.37e- 1      1.45
 7 mu         0.7      1.03         1.03   6.64e- 1      1.78
 8 mu         0.8      0.990        0.959  4.54e- 1      1.55
 9 mu         0.9      0.972        0.898  4.05e- 2      2.80
10 mu_1       0.1      0.956        0.507  2.13e-13     10.9 
11 mu_1       0.2      1.01         0.929  1.21e- 5      5.34
12 mu_1       0.3      0.980        0.988  2.28e- 2      1.90
13 mu_1       0.4      0.965        0.990  3.65e- 1      1.94
14 mu_1       0.5      0.971        0.964  6.57e- 1      1.33
15 mu_1       0.6      1.02         1.01   6.33e- 1      1.45
16 mu_1       0.7      1.03         1.02   6.78e- 1      1.77
17 mu_1       0.8      0.989        0.956  4.46e- 1      1.56
18 mu_1       0.9      0.973        0.886  3.71e- 2      2.85
19 mu_0       0.1      0.916        0.394  3.36e-14     15.0 
20 mu_0       0.2      1.04         0.985  4.22e- 6      6.67
21 mu_0       0.3      0.976        0.961  1.31e- 2      2.25
22 mu_0       0.4      0.967        0.998  3.20e- 1      1.99
23 mu_0       0.5      0.967        0.975  6.29e- 1      1.36
24 mu_0       0.6      1.01         1.00   6.42e- 1      1.45
25 mu_0       0.7      1.04         1.03   6.31e- 1      1.80
26 mu_0       0.8      0.993        0.979  4.87e- 1      1.52
27 mu_0       0.9      0.961        0.943  7.10e- 2      2.31
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0977     8.14e-30  1.33e-83      9.51
 2 mu         0.2     1.16       7.80e-17  1.30e-56     89.6 
 3 mu         0.3     1.00       9.03e-10  7.03e-41     23.6 
 4 mu         0.4     0.789      3.32e- 5  9.07e-30      9.99
 5 mu         0.5     0.782      1.03e- 2  3.32e-21     13.1 
 6 mu         0.6     1.13       1.28e- 1  4.79e-15     16.6 
 7 mu         0.7     1.10       6.52e- 1  4.99e-24      6.51
 8 mu         0.8     1.44       2.54e- 2  2.63e-37     22.6 
 9 mu         0.9     0.613      1.97e- 7  8.06e-61     12.5 
10 mu_1       0.1     0.171      6.51e-29  1.30e-82     16.5 
11 mu_1       0.2     1.10       2.80e-16  6.37e-56     77.7 
12 mu_1       0.3     1.03       2.06e- 9  2.29e-40     24.3 
13 mu_1       0.4     0.762      6.00e- 5  2.22e-29      9.11
14 mu_1       0.5     0.814      1.33e- 2  6.50e-21     14.7 
15 mu_1       0.6     1.13       1.57e- 1  1.38e-15     15.5 
16 mu_1       0.7     1.12       6.65e- 1  1.24e-24      7.25
17 mu_1       0.8     1.43       1.94e- 2  5.71e-38     22.0 
18 mu_1       0.9     0.602      1.49e- 7  1.55e-61     13.6 
19 mu_0       0.1     0.0896     2.47e-30  3.22e-85      8.73
20 mu_0       0.2     1.18       2.75e-17  3.54e-58     92.6 
21 mu_0       0.3     0.990      4.08e-10  2.18e-42     23.3 
22 mu_0       0.4     0.807      1.61e- 5  3.29e-31     10.6 
23 mu_0       0.5     0.750      6.71e- 3  1.44e-22     11.6 
24 mu_0       0.6     1.14       1.24e- 1  1.55e-15     18.3 
25 mu_0       0.7     1.06       5.17e- 1  1.37e-23      6.65
26 mu_0       0.8     1.47       4.66e- 2  1.09e-36     24.9 
27 mu_0       0.9     0.707      6.33e- 7  6.67e-60     13.0 
[1] "Total run time was 508.2 seconds"
