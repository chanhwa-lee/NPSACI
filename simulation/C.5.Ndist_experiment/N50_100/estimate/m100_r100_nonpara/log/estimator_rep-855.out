
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7038"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69  70 
  4   4   3   2   1   5   1   3   3   3   5   5   4   3   1   1   1   2   3   2 
 71  73  74  75  76  77  79  80  81  82  83  84  87  89  90  92  93  94  96  97 
  2   1   3   3   1   3   3   2   1   2   3   1   1   1   3   1   2   1   2   2 
 98 100 
  2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04455 0.35573 0.62316 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4105 2933 
[1] "treatment indicator table: "

   0    1 
2689 4349 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3570
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3468
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 384.852 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0530
 2 mu         0.1   0.2 0.450 0.0672
 3 mu         0.1   0.3 0.523 0.0761
 4 mu         0.1   0.4 0.546 0.0804
 5 mu         0.1   0.5 0.640 0.100 
 6 mu         0.2   0.1 0.311 0.0214
 7 mu         0.2   0.2 0.416 0.0282
 8 mu         0.2   0.3 0.498 0.0394
 9 mu         0.2   0.4 0.527 0.0362
10 mu         0.2   0.5 0.606 0.0517
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.921        0.428 0.00000200      7.23
 2 mu         0.2      1.03         0.935 0.0837          2.94
 3 mu         0.3      1.01         1.00  0.403           2.07
 4 mu         0.4      0.999        0.979 0.381           1.70
 5 mu         0.5      1.00         0.991 0.686           1.45
 6 mu         0.6      1.00         0.985 0.653           1.36
 7 mu         0.7      0.999        0.996 0.565           1.40
 8 mu         0.8      1.01         0.987 0.646           1.62
 9 mu         0.9      1.02         0.996 0.441           2.83
10 mu_1       0.1      0.952        0.678 0.00000560      5.16
11 mu_1       0.2      1.03         0.971 0.122           3.04
12 mu_1       0.3      1.01         1.01  0.398           1.93
13 mu_1       0.4      0.999        0.978 0.404           1.67
14 mu_1       0.5      1.00         0.997 0.707           1.40
15 mu_1       0.6      1.00         0.990 0.655           1.38
16 mu_1       0.7      1.00         1.00  0.559           1.39
17 mu_1       0.8      1.01         0.990 0.642           1.62
18 mu_1       0.9      1.02         0.997 0.436           2.87
19 mu_0       0.1      0.917        0.404 0.00000160      7.57
20 mu_0       0.2      1.03         0.918 0.0741          2.92
21 mu_0       0.3      1.01         1.00  0.402           2.13
22 mu_0       0.4      0.999        0.975 0.366           1.72
23 mu_0       0.5      1.00         0.979 0.658           1.50
24 mu_0       0.6      1.00         0.992 0.649           1.32
25 mu_0       0.7      0.997        0.981 0.578           1.41
26 mu_0       0.8      1.01         0.983 0.662           1.59
27 mu_0       0.9      1.01         0.999 0.482           2.45
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.257     2.06e-22  6.48e-85     25.7 
 2 mu         0.2      0.696     7.28e-12  3.57e-58     32.4 
 3 mu         0.3      1.39      1.38e- 6  1.47e-42     43.3 
 4 mu         0.4      1.24      5.50e- 3  1.66e-31     16.1 
 5 mu         0.5      1.20      1.46e- 1  5.82e-23      6.95
 6 mu         0.6      1.31      2.95e- 1  5.19e-16      9.61
 7 mu         0.7      1.04      1.10e- 1  1.84e-17      5.73
 8 mu         0.8      0.880     3.16e- 2  6.35e-29      9.67
 9 mu         0.9      1.44      6.98e- 7  1.14e-49     18.7 
10 mu_1       0.1      0.386     1.28e-21  6.41e-84     38.6 
11 mu_1       0.2      0.733     2.44e-11  1.76e-57     24.9 
12 mu_1       0.3      1.39      2.91e- 6  4.83e-42     40.5 
13 mu_1       0.4      1.25      8.14e- 3  4.09e-31     16.2 
14 mu_1       0.5      1.21      1.61e- 1  1.15e-22      7.55
15 mu_1       0.6      1.31      2.90e- 1  8.55e-16      9.42
16 mu_1       0.7      1.01      1.12e- 1  6.52e-18      5.82
17 mu_1       0.8      0.892     2.49e- 2  1.96e-29      9.59
18 mu_1       0.9      1.43      5.04e- 7  3.12e-50     18.7 
19 mu_0       0.1      0.243     8.19e-23  8.00e-87     24.3 
20 mu_0       0.2      0.687     3.00e-12  4.95e-60     34.4 
21 mu_0       0.3      1.39      7.26e- 7  2.33e-44     44.4 
22 mu_0       0.4      1.24      3.40e- 3  3.07e-33     16.0 
23 mu_0       0.5      1.19      1.51e- 1  1.29e-24      6.99
24 mu_0       0.6      1.30      3.71e- 1  1.44e-17      9.89
25 mu_0       0.7      1.09      8.72e- 2  4.62e-17      5.50
26 mu_0       0.8      0.832     3.96e- 2  2.39e-28      9.97
27 mu_0       0.9      1.52      2.32e- 6  8.55e-49     19.5 
[1] "Total run time was 388.236 seconds"
