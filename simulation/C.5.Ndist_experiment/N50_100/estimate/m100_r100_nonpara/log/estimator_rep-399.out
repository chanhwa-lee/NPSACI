
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7505"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  63  64  65  66  67  68  69  70 
  1   1   3   1   3   1   3   1   1   2   2   2   7   4   2   2   4   1   1   1 
 71  72  73  75  76  77  78  79  81  82  83  84  85  86  87  88  89  91  92  93 
  3   1   4   1   4   1   1   1   2   1   4   1   2   2   2   2   1   5   2   3 
 94  95  96  97  98  99 100 
  2   3   3   1   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04351 0.39211 0.64937 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4487 3018 
[1] "treatment indicator table: "

   0    1 
2624 4881 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3752
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3753
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 661.671 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.421 0.0686
 2 mu         0.1   0.2 0.530 0.0892
 3 mu         0.1   0.3 0.571 0.0751
 4 mu         0.1   0.4 0.639 0.0831
 5 mu         0.1   0.5 0.674 0.0849
 6 mu         0.2   0.1 0.393 0.0734
 7 mu         0.2   0.2 0.482 0.0892
 8 mu         0.2   0.3 0.542 0.0784
 9 mu         0.2   0.4 0.599 0.0745
10 mu         0.2   0.5 0.624 0.0692
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.998        0.793  0.000425      5.29
 2 mu         0.2      1.04         0.982  0.0801        3.31
 3 mu         0.3      0.970        0.938  0.247         2.02
 4 mu         0.4      0.978        0.921  0.367         1.66
 5 mu         0.5      1.00         0.985  0.555         1.53
 6 mu         0.6      1.01         1.02   0.604         1.56
 7 mu         0.7      1.02         1.00   0.690         1.49
 8 mu         0.8      0.991        0.980  0.479         1.71
 9 mu         0.9      0.983        0.901  0.396         1.93
10 mu_1       0.1      0.992        0.795  0.00114       4.97
11 mu_1       0.2      1.03         0.979  0.0686        3.39
12 mu_1       0.3      0.969        0.929  0.285         1.93
13 mu_1       0.4      0.980        0.930  0.360         1.70
14 mu_1       0.5      1.00         0.984  0.554         1.50
15 mu_1       0.6      1.01         1.02   0.617         1.57
16 mu_1       0.7      1.02         1.00   0.683         1.50
17 mu_1       0.8      0.991        0.979  0.483         1.72
18 mu_1       0.9      0.982        0.901  0.387         1.92
19 mu_0       0.1      0.999        0.765  0.000345      5.32
20 mu_0       0.2      1.04         0.992  0.0830        3.28
21 mu_0       0.3      0.971        0.941  0.231         2.06
22 mu_0       0.4      0.977        0.937  0.370         1.63
23 mu_0       0.5      0.999        0.967  0.522         1.57
24 mu_0       0.6      1.01         1.01   0.586         1.53
25 mu_0       0.7      1.03         1.02   0.701         1.47
26 mu_0       0.8      0.991        1.00   0.462         1.68
27 mu_0       0.9      0.987        0.935  0.480         2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.70      5.81e-28  8.37e-78    204.  
 2 mu         0.2      0.560     7.78e-16  7.18e-51     19.7 
 3 mu         0.3      0.830     3.73e- 9  2.28e-35     11.9 
 4 mu         0.4      1.02      5.13e- 5  1.34e-24     18.5 
 5 mu         0.5      1.02      6.28e- 3  1.70e-16     11.8 
 6 mu         0.6      1.17      1.28e- 1  1.31e-23     10.9 
 7 mu         0.7      1.28      1.94e- 1  5.19e-34     19.2 
 8 mu         0.8      1.50      1.04e- 1  6.33e-49     13.0 
 9 mu         0.9      1.50      8.84e- 6  9.33e-75     14.9 
10 mu_1       0.1      2.37      3.74e-27  7.62e-77    152.  
11 mu_1       0.2      0.561     2.53e-15  3.27e-50     20.8 
12 mu_1       0.3      0.876     8.93e- 9  6.93e-35     10.5 
13 mu_1       0.4      1.00      8.34e- 5  3.04e-24     18.8 
14 mu_1       0.5      1.04      8.68e- 3  1.47e-16     11.6 
15 mu_1       0.6      1.16      1.49e- 1  1.62e-24     11.7 
16 mu_1       0.7      1.30      1.61e- 1  5.52e-35     19.9 
17 mu_1       0.8      1.49      1.03e- 1  5.89e-50     13.1 
18 mu_1       0.9      1.50      6.99e- 6  7.72e-76     15.1 
19 mu_0       0.1      2.74      2.30e-28  8.37e-79    210.  
20 mu_0       0.2      0.559     3.41e-16  8.08e-52     19.4 
21 mu_0       0.3      0.811     1.53e- 9  2.94e-36     12.6 
22 mu_0       0.4      1.03      2.65e- 5  2.00e-25     18.3 
23 mu_0       0.5      1.01      3.43e- 3  3.07e-17     11.9 
24 mu_0       0.6      1.18      8.01e- 2  3.02e-23      9.77
25 mu_0       0.7      1.23      1.71e- 1  1.60e-33     17.6 
26 mu_0       0.8      1.53      5.74e- 2  2.93e-48     12.5 
27 mu_0       0.9      1.49      2.55e- 5  8.63e-74     13.4 
[1] "Total run time was 665.603 seconds"
