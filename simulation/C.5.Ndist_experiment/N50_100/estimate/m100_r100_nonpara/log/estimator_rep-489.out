
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7435"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  60  63  64  65  66  67  69  70  71  72  73  75 
  3   2   3   3   3   3   2   2   4   2   2   2   3   3   2   5   1   3   1   2 
 76  77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  93  94  95  96 
  4   1   2   3   1   1   1   6   1   4   1   2   3   1   3   1   2   3   1   1 
 97  98  99 100 
  1   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03304 0.35738 0.62126 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4440 2995 
[1] "treatment indicator table: "

   0    1 
2802 4633 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3609
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3826
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 415.635 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.534 0.130 
 2 mu         0.1   0.2 0.624 0.134 
 3 mu         0.1   0.3 0.664 0.131 
 4 mu         0.1   0.4 0.692 0.127 
 5 mu         0.1   0.5 0.716 0.131 
 6 mu         0.2   0.1 0.448 0.0702
 7 mu         0.2   0.2 0.548 0.0770
 8 mu         0.2   0.3 0.606 0.0791
 9 mu         0.2   0.4 0.632 0.0670
10 mu         0.2   0.5 0.652 0.0678
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.959        0.171 0.0000000949      7.39
 2 mu         0.2      0.989        0.921 0.00676           3.61
 3 mu         0.3      0.969        0.918 0.218             2.06
 4 mu         0.4      0.983        0.948 0.498             1.75
 5 mu         0.5      0.992        0.979 0.647             1.54
 6 mu         0.6      1.01         0.998 0.727             1.58
 7 mu         0.7      1.02         1.03  0.551             1.46
 8 mu         0.8      1.03         1.01  0.537             1.72
 9 mu         0.9      0.976        0.949 0.276             2.26
10 mu_1       0.1      0.899        0.282 0.000000289       5.42
11 mu_1       0.2      0.987        0.951 0.0121            3.43
12 mu_1       0.3      0.969        0.904 0.244             2.11
13 mu_1       0.4      0.985        0.961 0.516             1.69
14 mu_1       0.5      0.992        0.972 0.646             1.52
15 mu_1       0.6      1.01         0.988 0.729             1.58
16 mu_1       0.7      1.02         1.03  0.548             1.49
17 mu_1       0.8      1.03         1.01  0.538             1.73
18 mu_1       0.9      0.976        0.947 0.263             2.30
19 mu_0       0.1      0.966        0.156 0.0000000734      7.77
20 mu_0       0.2      0.989        0.907 0.00542           3.66
21 mu_0       0.3      0.969        0.925 0.207             2.05
22 mu_0       0.4      0.982        0.939 0.486             1.79
23 mu_0       0.5      0.991        0.981 0.645             1.56
24 mu_0       0.6      1.01         0.994 0.708             1.58
25 mu_0       0.7      1.02         1.02  0.558             1.40
26 mu_0       0.8      1.03         1.02  0.532             1.67
27 mu_0       0.9      0.975        0.947 0.292             2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.380     1.63e-27  9.73e-79     35.6 
 2 mu         0.2      0.829     9.91e-15  9.39e-52     38.5 
 3 mu         0.3      0.820     6.82e- 8  3.41e-36     10.0 
 4 mu         0.4      1.13      1.10e- 3  2.33e-25      9.00
 5 mu         0.5      0.860     3.29e- 2  3.57e-17      7.77
 6 mu         0.6      0.949     8.16e- 2  1.59e-12      8.99
 7 mu         0.7      1.65      2.50e- 1  2.37e-19     43.3 
 8 mu         0.8      1.45      4.65e- 2  2.45e-29     10.6 
 9 mu         0.9      1.20      5.75e- 7  6.91e-47     20.6 
10 mu_1       0.1      0.557     9.39e-27  8.95e-78     50.9 
11 mu_1       0.2      0.774     3.15e-14  4.32e-51     37.9 
12 mu_1       0.3      0.866     1.43e- 7  1.05e-35     11.5 
13 mu_1       0.4      1.13      1.76e- 3  5.35e-25      8.23
14 mu_1       0.5      0.835     4.39e- 2  6.56e-17      7.32
15 mu_1       0.6      0.971     6.72e- 2  3.79e-13      9.39
16 mu_1       0.7      1.68      2.22e- 1  4.84e-20     43.9 
17 mu_1       0.8      1.44      3.76e- 2  4.38e-30     10.9 
18 mu_1       0.9      1.20      4.23e- 7  1.10e-47     20.9 
19 mu_0       0.1      0.361     7.70e-28  8.74e-80     33.9 
20 mu_0       0.2      0.842     4.51e-15  9.49e-53     38.6 
21 mu_0       0.3      0.800     3.72e- 8  3.94e-37      9.43
22 mu_0       0.4      1.12      7.13e- 4  3.14e-26      9.69
23 mu_0       0.5      0.885     2.19e- 2  4.51e-18      8.21
24 mu_0       0.6      0.915     5.63e- 2  1.26e-12      8.84
25 mu_0       0.7      1.60      2.05e- 1  6.78e-19     41.9 
26 mu_0       0.8      1.51      5.23e- 2  1.05e-28      9.78
27 mu_0       0.9      1.21      1.94e- 6  5.92e-46     20.1 
[1] "Total run time was 419.453 seconds"
