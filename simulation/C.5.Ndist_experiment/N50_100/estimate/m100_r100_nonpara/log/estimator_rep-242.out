
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7462"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  66  67  68  69  70  71 
  6   1   1   1   2   2   4   1   2   1   4   3   1   2   2   1   2   1   1   1 
 72  73  74  75  76  77  78  79  81  82  83  84  85  86  87  88  89  90  91  92 
  3   2   3   6   4   1   4   2   1   2   1   1   1   2   1   2   2   1   3   4 
 93  94  95  96  97  98  99 100 
  2   2   2   1   2   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05739 0.42101 0.67446 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4379 3083 
[1] "treatment indicator table: "

   0    1 
2570 4892 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3694
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3768
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 397.232 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.307 0.0759
 2 mu         0.1   0.2 0.371 0.0765
 3 mu         0.1   0.3 0.432 0.0906
 4 mu         0.1   0.4 0.456 0.100 
 5 mu         0.1   0.5 0.475 0.0997
 6 mu         0.2   0.1 0.360 0.0547
 7 mu         0.2   0.2 0.449 0.0597
 8 mu         0.2   0.3 0.503 0.0652
 9 mu         0.2   0.4 0.547 0.0707
10 mu         0.2   0.5 0.578 0.0695
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.737       0.0705 0.000000144     10.1 
 2 mu         0.2      0.978       0.699  0.00724          7.31
 3 mu         0.3      1.06        1.04   0.220            5.63
 4 mu         0.4      1.05        0.990  0.536            2.18
 5 mu         0.5      1.05        1.01   0.569            2.01
 6 mu         0.6      1.01        1.01   0.476            1.69
 7 mu         0.7      0.983       0.981  0.564            1.45
 8 mu         0.8      1.01        1.01   0.485            1.56
 9 mu         0.9      1.04        0.994  0.243            1.94
10 mu_1       0.1      0.822       0.149  0.000000448      9.94
11 mu_1       0.2      0.981       0.734  0.0129           6.09
12 mu_1       0.3      1.06        1.03   0.246            5.26
13 mu_1       0.4      1.05        0.990  0.562            2.20
14 mu_1       0.5      1.04        1.01   0.568            2.01
15 mu_1       0.6      1.01        1.01   0.483            1.70
16 mu_1       0.7      0.983       0.973  0.546            1.44
17 mu_1       0.8      1.01        1.01   0.496            1.55
18 mu_1       0.9      1.04        0.990  0.230            1.98
19 mu_0       0.1      0.728       0.0617 0.000000111     10.1 
20 mu_0       0.2      0.977       0.685  0.00582          7.62
21 mu_0       0.3      1.06        1.04   0.208            5.79
22 mu_0       0.4      1.05        0.992  0.516            2.16
23 mu_0       0.5      1.05        1.01   0.569            2.01
24 mu_0       0.6      1.02        1.01   0.467            1.68
25 mu_0       0.7      0.984       0.980  0.588            1.48
26 mu_0       0.8      1.01        0.990  0.444            1.60
27 mu_0       0.9      1.03        1.01   0.340            1.90
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1       1.65     7.27e-30  6.10e-77    164.  
 2 mu         0.2       3.62     1.07e-16  2.62e-51    184.  
 3 mu         0.3       2.10     9.04e-10  1.87e-36     37.6 
 4 mu         0.4       2.17     3.37e- 5  4.81e-26     67.7 
 5 mu         0.5       1.08     7.80e- 3  4.17e-18      9.92
 6 mu         0.6       1.26     9.45e- 2  8.82e-12     14.8 
 7 mu         0.7       1.76     1.46e- 1  5.48e-20     31.2 
 8 mu         0.8       1.30     1.70e- 1  1.90e-32     14.1 
 9 mu         0.9       1.97     8.77e- 6  8.41e-55     35.3 
10 mu_1       0.1       2.43     5.45e-29  5.76e-76    242.  
11 mu_1       0.2       3.44     3.60e-16  1.24e-50    135.  
12 mu_1       0.3       2.04     2.18e- 9  5.89e-36     29.9 
13 mu_1       0.4       2.13     5.95e- 5  1.14e-25     64.3 
14 mu_1       0.5       1.04     8.22e- 3  7.89e-18      9.13
15 mu_1       0.6       1.28     1.10e- 1  3.77e-12     15.2 
16 mu_1       0.7       1.77     1.60e- 1  1.72e-20     32.8 
17 mu_1       0.8       1.28     1.43e- 1  5.24e-33     13.0 
18 mu_1       0.9       1.99     6.67e- 6  2.06e-55     35.6 
19 mu_0       0.1       1.56     2.02e-30  3.72e-78    155.  
20 mu_0       0.2       3.66     4.36e-17  1.80e-52    196.  
21 mu_0       0.3       2.12     3.60e-10  1.47e-37     40.9 
22 mu_0       0.4       2.21     1.65e- 5  4.40e-27     70.0 
23 mu_0       0.5       1.13     6.74e- 3  4.58e-19     10.7 
24 mu_0       0.6       1.23     5.88e- 2  1.21e-12     14.1 
25 mu_0       0.7       1.72     1.82e- 1  1.43e-19     27.3 
26 mu_0       0.8       1.39     2.03e- 1  7.43e-32     18.5 
27 mu_0       0.9       1.84     2.79e- 5  6.56e-54     32.5 
[1] "Total run time was 400.555 seconds"
