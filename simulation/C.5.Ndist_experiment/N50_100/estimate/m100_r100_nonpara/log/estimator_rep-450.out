
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7565"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  5   2   2   2   2   1   2   2   2   2   2   3   2   2   2   1   1   2   1   3 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  87  89  90  91  92  93 
  1   3   3   3   2   1   2   2   2   2   1   3   1   2   4   2   3   2   2   1 
 94  95  96  97  98  99 100 
  2   3   3   2   2   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02615 0.32447 0.60313 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4429 3136 
[1] "treatment indicator table: "

   0    1 
2969 4596 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3846
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 373.226 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.416 0.124 
 2 mu         0.1   0.2 0.473 0.146 
 3 mu         0.1   0.3 0.528 0.175 
 4 mu         0.1   0.4 0.565 0.193 
 5 mu         0.1   0.5 0.591 0.204 
 6 mu         0.2   0.1 0.348 0.0495
 7 mu         0.2   0.2 0.401 0.0437
 8 mu         0.2   0.3 0.446 0.0442
 9 mu         0.2   0.4 0.468 0.0391
10 mu         0.2   0.5 0.494 0.0415
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.08        0.0592 0.0000000179     27.4 
 2 mu         0.2      0.861       0.760  0.00750           3.01
 3 mu         0.3      0.994       0.929  0.288             2.48
 4 mu         0.4      0.994       0.962  0.510             1.82
 5 mu         0.5      0.993       0.979  0.561             1.46
 6 mu         0.6      1.00        0.995  0.615             1.47
 7 mu         0.7      0.989       0.982  0.593             1.40
 8 mu         0.8      1.02        1.02   0.566             1.67
 9 mu         0.9      1.05        0.924  0.107             2.86
10 mu_1       0.1      0.910       0.114  0.0000000555     18.0 
11 mu_1       0.2      0.881       0.745  0.0117            2.89
12 mu_1       0.3      0.996       0.925  0.317             2.32
13 mu_1       0.4      0.994       0.957  0.523             1.80
14 mu_1       0.5      0.994       0.981  0.558             1.49
15 mu_1       0.6      1.00        0.996  0.606             1.47
16 mu_1       0.7      0.989       0.983  0.592             1.41
17 mu_1       0.8      1.02        1.03   0.558             1.70
18 mu_1       0.9      1.05        0.906  0.100             2.89
19 mu_0       0.1      1.10        0.0527 0.0000000138     28.7 
20 mu_0       0.2      0.856       0.757  0.00646           3.04
21 mu_0       0.3      0.993       0.927  0.275             2.55
22 mu_0       0.4      0.994       0.962  0.501             1.84
23 mu_0       0.5      0.992       0.972  0.563             1.43
24 mu_0       0.6      1.01        0.988  0.629             1.48
25 mu_0       0.7      0.988       0.983  0.597             1.38
26 mu_0       0.8      1.02        1.01   0.599             1.58
27 mu_0       0.9      1.04        0.950  0.174             2.61
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000827     7.48e-25  1.02e-66    0.0713
 2 mu         0.2   0.648        1.07e-12  4.27e-44   31.9   
 3 mu         0.3   1.32         1.03e- 6  5.29e-31   43.3   
 4 mu         0.4   1.46         9.28e- 3  7.65e-22   21.7   
 5 mu         0.5   1.78         1.98e- 1  7.13e-15   29.3   
 6 mu         0.6   1.48         5.35e- 1  2.43e- 9   18.1   
 7 mu         0.7   1.23         1.24e- 1  2.79e-15   10.5   
 8 mu         0.8   1.28         2.66e- 3  7.29e-26   12.0   
 9 mu         0.9   2.64         1.85e- 9  4.17e-45   59.9   
10 mu_1       0.1   0.00202      3.96e-24  9.55e-66    0.172 
11 mu_1       0.2   0.822        3.59e-12  2.00e-43   38.4   
12 mu_1       0.3   1.28         1.96e- 6  1.65e-30   37.6   
13 mu_1       0.4   1.51         1.39e- 2  1.79e-21   24.9   
14 mu_1       0.5   1.78         2.53e- 1  1.34e-14   26.8   
15 mu_1       0.6   1.46         4.27e- 1  3.80e- 9   18.0   
16 mu_1       0.7   1.22         9.79e- 2  1.04e-15   10.2   
17 mu_1       0.8   1.29         1.99e- 3  2.38e-26   12.4   
18 mu_1       0.9   2.70         1.29e- 9  1.21e-45   64.3   
19 mu_0       0.1   0.000694     3.91e-25  6.98e-68    0.0602
20 mu_0       0.2   0.605        4.38e-13  3.29e-45   30.3   
21 mu_0       0.3   1.34         6.27e- 7  4.66e-32   45.7   
22 mu_0       0.4   1.42         6.19e- 3  7.87e-23   19.7   
23 mu_0       0.5   1.78         1.55e- 1  8.80e-16   31.8   
24 mu_0       0.6   1.51         6.20e- 1  3.75e-10   18.3   
25 mu_0       0.7   1.24         1.37e- 1  6.87e-15   11.0   
26 mu_0       0.8   1.24         5.35e- 3  2.69e-25   14.1   
27 mu_0       0.9   2.10         6.87e- 9  3.08e-44   35.4   
[1] "Total run time was 376.611 seconds"
