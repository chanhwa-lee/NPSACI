
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7462"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  1   1   2   1   2   2   1   1   5   3   3   2   4   2   2   3   1   1   4   2 
 70  71  72  73  74  75  76  77  78  79  80  81  82  83  85  86  87  88  89  91 
  2   3   1   2   1   2   2   1   1   1   3   2   3   1   1   2   4   4   2   2 
 92  93  94  95  96  97  98  99 100 
  1   2   1   3   3   1   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01943 0.28952 0.56276 0.96974 6.00000 
[1] "event indicator table: "

   0    1 
4379 3083 
[1] "treatment indicator table: "

   0    1 
3017 4445 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3760
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3702
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 412.606 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.345 0.0923
 2 mu         0.1   0.2 0.394 0.116 
 3 mu         0.1   0.3 0.463 0.129 
 4 mu         0.1   0.4 0.471 0.142 
 5 mu         0.1   0.5 0.510 0.148 
 6 mu         0.2   0.1 0.332 0.0251
 7 mu         0.2   0.2 0.411 0.0386
 8 mu         0.2   0.3 0.470 0.0354
 9 mu         0.2   0.4 0.484 0.0428
10 mu         0.2   0.5 0.527 0.0426
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.988        0.381 0.00000155     16.3 
 2 mu         0.2      0.998        1.01  0.0604          2.62
 3 mu         0.3      1.04         1.01  0.479           1.88
 4 mu         0.4      1.03         1.04  0.631           1.48
 5 mu         0.5      1.02         1.02  0.561           1.36
 6 mu         0.6      1.00         0.992 0.638           1.35
 7 mu         0.7      0.980        0.971 0.577           1.43
 8 mu         0.8      0.956        0.948 0.479           1.54
 9 mu         0.9      1.06         1.02  0.0539          2.25
10 mu_1       0.1      1.01         0.496 0.00000444     11.7 
11 mu_1       0.2      0.998        1.01  0.0911          2.11
12 mu_1       0.3      1.04         1.04  0.500           1.77
13 mu_1       0.4      1.03         1.04  0.646           1.47
14 mu_1       0.5      1.02         1.01  0.547           1.35
15 mu_1       0.6      0.999        0.990 0.649           1.38
16 mu_1       0.7      0.980        0.970 0.572           1.45
17 mu_1       0.8      0.956        0.952 0.487           1.55
18 mu_1       0.9      1.07         1.02  0.0499          2.30
19 mu_0       0.1      0.985        0.359 0.00000123     16.9 
20 mu_0       0.2      0.998        0.974 0.0528          2.75
21 mu_0       0.3      1.04         1.01  0.470           1.92
22 mu_0       0.4      1.03         1.04  0.616           1.49
23 mu_0       0.5      1.02         1.02  0.575           1.40
24 mu_0       0.6      1.00         0.994 0.621           1.32
25 mu_0       0.7      0.982        0.973 0.590           1.40
26 mu_0       0.8      0.955        0.938 0.450           1.49
27 mu_0       0.9      1.04         1.01  0.0897          1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0906     1.75e-23  9.95e-76      8.12
 2 mu         0.2     1.40       1.92e-12  2.13e-49     58.3 
 3 mu         0.3     1.12       1.24e- 6  3.02e-34     19.2 
 4 mu         0.4     1.30       5.31e- 3  9.92e-24      9.87
 5 mu         0.5     1.02       1.82e- 1  8.10e-16      6.07
 6 mu         0.6     1.00       2.01e- 1  2.00e-10      5.75
 7 mu         0.7     1.17       3.09e- 1  1.61e-17      7.68
 8 mu         0.8     1.19       3.05e- 3  9.55e-29     14.9 
 9 mu         0.9     0.965      2.54e- 9  5.40e-49     21.7 
10 mu_1       0.1     0.172      1.16e-22  9.04e-75     15.1 
11 mu_1       0.2     1.49       6.19e-12  9.69e-49     54.4 
12 mu_1       0.3     1.08       2.52e- 6  9.13e-34     14.2 
13 mu_1       0.4     1.30       8.37e- 3  2.25e-23     10.3 
14 mu_1       0.5     1.00       2.12e- 1  1.47e-15      5.94
15 mu_1       0.6     1.02       2.10e- 1  1.59e-10      5.84
16 mu_1       0.7     1.17       2.67e- 1  5.44e-18      7.45
17 mu_1       0.8     1.19       2.38e- 3  2.82e-29     15.6 
18 mu_1       0.9     0.978      1.72e- 9  1.42e-49     21.9 
19 mu_0       0.1     0.0815     6.52e-24  1.02e-76      7.34
20 mu_0       0.2     1.37       8.49e-13  2.45e-50     59.3 
21 mu_0       0.3     1.13       6.89e- 7  3.96e-35     21.3 
22 mu_0       0.4     1.31       3.27e- 3  1.52e-24      9.58
23 mu_0       0.5     1.04       1.64e- 1  7.38e-17      6.20
24 mu_0       0.6     0.986      2.08e- 1  1.43e-11      5.60
25 mu_0       0.7     1.16       3.16e- 1  4.10e-17      8.22
26 mu_0       0.8     1.21       4.32e- 3  3.65e-28     12.0 
27 mu_0       0.9     0.850      9.90e- 9  4.12e-48     20.0 
[1] "Total run time was 415.701 seconds"
