
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7620"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  61  62  63  64  65  66  68  69  70  71 
  1   1   1   2   2   3   3   2   3   1   2   1   1   2   4   1   3   1   1   2 
 72  73  74  75  76  78  79  80  81  82  83  84  85  87  88  89  90  91  92  93 
  1   2   4   2   3   3   4   4   1   3   1   4   2   2   2   1   2   2   4   2 
 94  95  96  97  99 100 
  1   4   2   3   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04454 0.36947 0.63426 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4509 3111 
[1] "treatment indicator table: "

   0    1 
2865 4755 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3863
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 390.763 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.378 0.0745
 2 mu         0.1   0.2 0.431 0.0763
 3 mu         0.1   0.3 0.498 0.0848
 4 mu         0.1   0.4 0.523 0.0826
 5 mu         0.1   0.5 0.577 0.100 
 6 mu         0.2   0.1 0.354 0.0508
 7 mu         0.2   0.2 0.409 0.0434
 8 mu         0.2   0.3 0.473 0.0439
 9 mu         0.2   0.4 0.498 0.0349
10 mu         0.2   0.5 0.555 0.0508
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.961        0.411 0.000000183     11.2 
 2 mu         0.2      1.00         0.937 0.0145           3.73
 3 mu         0.3      1.04         1.03  0.175            2.16
 4 mu         0.4      1.00         1.00  0.394            2.12
 5 mu         0.5      0.974        0.956 0.433            1.58
 6 mu         0.6      0.975        0.950 0.602            1.43
 7 mu         0.7      0.971        0.940 0.629            1.63
 8 mu         0.8      0.984        0.986 0.525            1.56
 9 mu         0.9      0.979        0.971 0.299            1.88
10 mu_1       0.1      0.947        0.596 0.000000528      6.52
11 mu_1       0.2      0.999        0.972 0.0210           3.46
12 mu_1       0.3      1.04         1.02  0.188            2.01
13 mu_1       0.4      0.997        0.994 0.411            2.12
14 mu_1       0.5      0.975        0.951 0.449            1.61
15 mu_1       0.6      0.974        0.955 0.611            1.44
16 mu_1       0.7      0.972        0.930 0.630            1.67
17 mu_1       0.8      0.985        0.980 0.525            1.55
18 mu_1       0.9      0.978        0.971 0.295            1.89
19 mu_0       0.1      0.963        0.388 0.000000145     11.7 
20 mu_0       0.2      1.00         0.910 0.0129           3.80
21 mu_0       0.3      1.03         1.01  0.170            2.22
22 mu_0       0.4      1.01         1.01  0.382            2.11
23 mu_0       0.5      0.973        0.939 0.418            1.55
24 mu_0       0.6      0.977        0.950 0.589            1.42
25 mu_0       0.7      0.971        0.952 0.609            1.54
26 mu_0       0.8      0.980        0.981 0.523            1.58
27 mu_0       0.9      0.986        0.964 0.330            1.76
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.167     2.28e-28  6.06e-79     14.9 
 2 mu         0.2      1.20      4.02e-15  5.21e-54     63.2 
 3 mu         0.3      0.519     2.69e- 8  1.88e-39      8.86
 4 mu         0.4      1.11      5.82e- 4  3.78e-29     26.1 
 5 mu         0.5      1.39      3.40e- 2  3.48e-21     12.2 
 6 mu         0.6      0.971     1.27e- 1  1.04e-14      6.72
 7 mu         0.7      1.01      1.50e- 1  3.88e-23     12.9 
 8 mu         0.8      1.08      3.33e- 2  1.19e-35      7.96
 9 mu         0.9      0.952     8.19e- 7  9.21e-58     23.1 
10 mu_1       0.1      0.282     1.35e-27  5.99e-78     24.6 
11 mu_1       0.2      1.11      1.45e-14  2.57e-53     52.1 
12 mu_1       0.3      0.546     5.47e- 8  6.20e-39      8.66
13 mu_1       0.4      1.15      5.48e- 4  9.34e-29     25.0 
14 mu_1       0.5      1.39      2.94e- 2  6.88e-21     11.5 
15 mu_1       0.6      0.951     1.53e- 1  3.30e-15      6.44
16 mu_1       0.7      1.01      1.61e- 1  9.13e-24     12.8 
17 mu_1       0.8      1.08      2.64e- 2  2.45e-36      8.40
18 mu_1       0.9      0.943     6.27e- 7  1.69e-58     22.9 
19 mu_0       0.1      0.154     1.04e-28  8.02e-81     13.8 
20 mu_0       0.2      1.22      1.40e-15  7.75e-56     66.0 
21 mu_0       0.3      0.508     1.49e- 8  3.20e-41      8.95
22 mu_0       0.4      1.09      4.38e- 4  7.50e-31     26.8 
23 mu_0       0.5      1.39      2.36e- 2  8.29e-23     12.9 
24 mu_0       0.6      1.00      9.67e- 2  3.09e-16      7.15
25 mu_0       0.7      0.989     1.41e- 1  1.08e-22     13.3 
26 mu_0       0.8      1.08      6.06e- 2  4.97e-35      8.69
27 mu_0       0.9      1.03      2.54e- 6  7.69e-57     25.0 
[1] "Total run time was 393.871 seconds"
