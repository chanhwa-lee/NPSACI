
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7392"
[1] "cluster size dist'n: "

50 52 53 54 55 56 57 58 60 61 62 63 64 65 66 67 68 69 72 73 74 75 76 77 78 79 
 1  3  2  4  2  3  1  3  2  3  2  2  3  3  1  2  1  2  2  4  4  2  6  2  3  5 
80 82 83 84 85 88 89 90 91 92 93 94 95 96 97 98 99 
 1  2  2  4  2  2  3  1  1  1  1  2  1  1  3  2  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02985 0.34170 0.60808 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4332 3060 
[1] "treatment indicator table: "

   0    1 
2865 4527 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3668
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3724
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 360.802 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.354 0.132 
 2 mu         0.1   0.2 0.386 0.137 
 3 mu         0.1   0.3 0.464 0.144 
 4 mu         0.1   0.4 0.522 0.157 
 5 mu         0.1   0.5 0.574 0.169 
 6 mu         0.2   0.1 0.256 0.0309
 7 mu         0.2   0.2 0.331 0.0494
 8 mu         0.2   0.3 0.395 0.0325
 9 mu         0.2   0.4 0.452 0.0338
10 mu         0.2   0.5 0.488 0.0332
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.925       0.0931 0.00000670     29.2 
 2 mu         0.2      0.864       0.784  0.0268          3.16
 3 mu         0.3      0.983       0.943  0.231           1.99
 4 mu         0.4      1.00        0.981  0.619           1.90
 5 mu         0.5      0.983       0.969  0.650           1.56
 6 mu         0.6      1.01        0.988  0.714           1.41
 7 mu         0.7      1.00        0.978  0.663           1.99
 8 mu         0.8      0.990       0.979  0.327           1.52
 9 mu         0.9      1.03        0.934  0.145           2.73
10 mu_1       0.1      0.838       0.166  0.0000202      20.7 
11 mu_1       0.2      0.889       0.814  0.0407          3.26
12 mu_1       0.3      0.986       0.949  0.264           2.06
13 mu_1       0.4      1.00        0.965  0.630           1.85
14 mu_1       0.5      0.983       0.976  0.652           1.57
15 mu_1       0.6      1.01        0.992  0.708           1.41
16 mu_1       0.7      0.999       0.978  0.659           1.98
17 mu_1       0.8      0.991       0.979  0.317           1.54
18 mu_1       0.9      1.03        0.937  0.141           2.73
19 mu_0       0.1      0.934       0.0849 0.00000520     30.2 
20 mu_0       0.2      0.858       0.764  0.0233          3.14
21 mu_0       0.3      0.981       0.945  0.217           1.95
22 mu_0       0.4      1.00        0.984  0.611           1.94
23 mu_0       0.5      0.983       0.969  0.647           1.55
24 mu_0       0.6      1.01        0.993  0.685           1.41
25 mu_0       0.7      1.00        0.982  0.672           2.02
26 mu_0       0.8      0.986       0.966  0.366           1.56
27 mu_0       0.9      1.02        0.968  0.180           2.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.26      2.03e-24  9.92e-69    223.  
 2 mu         0.2      1.07      5.50e-13  2.63e-46     53.6 
 3 mu         0.3      1.48      1.01e- 6  2.84e-33     66.7 
 4 mu         0.4      0.772     2.14e- 3  4.19e-24     10.4 
 5 mu         0.5      1.03      5.45e- 2  4.50e-17     10.3 
 6 mu         0.6      0.888     3.03e- 1  3.52e-21      7.02
 7 mu         0.7      1.05      1.94e- 1  1.60e-30      8.63
 8 mu         0.8      1.25      6.73e- 3  6.55e-44     11.3 
 9 mu         0.9      0.731     1.07e- 8  4.39e-67     15.4 
10 mu_1       0.1      1.66      1.24e-23  9.54e-68    159.  
11 mu_1       0.2      1.20      1.68e-12  1.27e-45     53.6 
12 mu_1       0.3      1.42      2.11e- 6  9.10e-33     64.4 
13 mu_1       0.4      0.761     3.34e- 3  1.01e-23     10.9 
14 mu_1       0.5      1.05      5.40e- 2  8.66e-17     10.1 
15 mu_1       0.6      0.880     3.09e- 1  4.19e-22      6.40
16 mu_1       0.7      1.06      1.73e- 1  1.63e-31      8.81
17 mu_1       0.8      1.27      6.21e- 3  5.85e-45     12.2 
18 mu_1       0.9      0.706     7.81e- 9  3.49e-68     14.7 
19 mu_0       0.1      2.33      8.75e-25  4.24e-70    230.  
20 mu_0       0.2      1.04      2.68e-13  1.27e-47     53.6 
21 mu_0       0.3      1.51      5.37e- 7  1.56e-34     67.8 
22 mu_0       0.4      0.779     1.34e- 3  2.69e-25     10.7 
23 mu_0       0.5      1.02      5.20e- 2  3.46e-18     10.7 
24 mu_0       0.6      0.900     2.85e- 1  8.18e-21      7.95
25 mu_0       0.7      1.03      1.91e- 1  4.94e-30      8.22
26 mu_0       0.8      1.20      1.23e- 2  3.04e-43     10.7 
27 mu_0       0.9      0.957     3.66e- 8  4.08e-66     21.8 
[1] "Total run time was 364.691 seconds"
