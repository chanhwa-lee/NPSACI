
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7213"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  68  69  70 
  4   1   3   3   5   1   3   1   1   1   4   5   2   1   1   4   6   2   2   1 
 71  72  74  76  77  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94 
  3   4   1   1   3   1   1   2   3   3   2   3   2   1   2   1   2   1   1   1 
 95  96  97  98  99 100 
  1   4   2   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03574 0.37148 0.63402 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4309 2904 
[1] "treatment indicator table: "

   0    1 
2680 4533 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3557
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3656
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 348.341 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.453 0.0848
 2 mu         0.1   0.2 0.520 0.0786
 3 mu         0.1   0.3 0.527 0.0731
 4 mu         0.1   0.4 0.611 0.0871
 5 mu         0.1   0.5 0.660 0.0984
 6 mu         0.2   0.1 0.386 0.0435
 7 mu         0.2   0.2 0.466 0.0480
 8 mu         0.2   0.3 0.500 0.0439
 9 mu         0.2   0.4 0.563 0.0489
10 mu         0.2   0.5 0.652 0.0729
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.961        0.494 0.00000000153      5.21
 2 mu         0.2      0.943        0.803 0.00466            2.38
 3 mu         0.3      0.977        0.955 0.400              2.00
 4 mu         0.4      1.04         1.03  0.390              1.95
 5 mu         0.5      1.03         1.04  0.604              1.42
 6 mu         0.6      1.01         1.01  0.608              1.54
 7 mu         0.7      1.01         1.03  0.667              1.54
 8 mu         0.8      1.00         1.00  0.525              1.52
 9 mu         0.9      0.921        0.908 0.0927             2.11
10 mu_1       0.1      0.994        0.518 0.00000000507      5.97
11 mu_1       0.2      0.940        0.854 0.00783            2.38
12 mu_1       0.3      0.987        0.968 0.452              2.07
13 mu_1       0.4      1.04         1.04  0.412              1.84
14 mu_1       0.5      1.03         1.05  0.587              1.45
15 mu_1       0.6      1.01         1.02  0.613              1.51
16 mu_1       0.7      1.01         1.03  0.664              1.55
17 mu_1       0.8      1.00         1.01  0.512              1.50
18 mu_1       0.9      0.919        0.910 0.0860             2.16
19 mu_0       0.1      0.957        0.492 0.00000000114      5.21
20 mu_0       0.2      0.944        0.803 0.00387            2.41
21 mu_0       0.3      0.973        0.953 0.376              1.97
22 mu_0       0.4      1.04         1.03  0.374              2.02
23 mu_0       0.5      1.03         1.06  0.589              1.43
24 mu_0       0.6      1.01         1.00  0.600              1.58
25 mu_0       0.7      1.01         1.02  0.674              1.53
26 mu_0       0.8      1.01         1.01  0.551              1.58
27 mu_0       0.9      0.938        0.931 0.154              1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.15      4.34e-27  9.64e-78     54.2 
 2 mu         0.2      0.453     6.64e-15  8.27e-51     19.0 
 3 mu         0.3      0.990     7.09e- 8  2.63e-35     48.6 
 4 mu         0.4      1.27      2.31e- 4  1.54e-24     20.9 
 5 mu         0.5      1.06      2.06e- 2  1.59e-16      6.82
 6 mu         0.6      0.890     7.90e- 2  1.38e-16      5.44
 7 mu         0.7      0.896     7.13e- 2  7.16e-24      7.94
 8 mu         0.8      1.04      1.69e- 2  2.53e-34      6.55
 9 mu         0.9      2.21      1.50e- 6  1.98e-52    148.  
10 mu_1       0.1      1.17      3.09e-26  8.78e-77     50.0 
11 mu_1       0.2      0.405     2.07e-14  3.76e-50     12.4 
12 mu_1       0.3      1.07      1.43e- 7  7.98e-35     52.6 
13 mu_1       0.4      1.26      3.62e- 4  3.50e-24     17.0 
14 mu_1       0.5      1.06      2.81e- 2  3.10e-16      6.41
15 mu_1       0.6      0.869     8.67e- 2  1.75e-17      5.78
16 mu_1       0.7      0.911     6.06e- 2  7.75e-25      7.81
17 mu_1       0.8      1.04      1.35e- 2  2.40e-35      6.62
18 mu_1       0.9      2.22      1.05e- 6  1.66e-53    151.  
19 mu_0       0.1      1.15      1.47e-27  9.64e-79     55.6 
20 mu_0       0.2      0.465     3.30e-15  9.31e-52     20.6 
21 mu_0       0.3      0.955     4.01e- 8  3.38e-36     46.8 
22 mu_0       0.4      1.27      1.33e- 4  2.31e-25     23.5 
23 mu_0       0.5      1.06      1.31e- 2  8.97e-18      7.22
24 mu_0       0.6      0.922     5.22e- 2  3.20e-16      5.96
25 mu_0       0.7      0.860     7.41e- 2  2.21e-23      8.48
26 mu_0       0.8      1.03      2.42e- 2  1.17e-33      6.26
27 mu_0       0.9      2.07      5.55e- 6  1.83e-51    125.  
[1] "Total run time was 351.495 seconds"
