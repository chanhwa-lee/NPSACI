
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7467"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  61  62  63  64  65  66  67  68  70  71  72 
  3   2   3   3   3   1   2   1   2   2   4   1   4   2   4   3   1   1   1   1 
 73  74  75  76  77  78  79  80  81  82  83  85  86  87  88  89  90  91  93  94 
  3   2   1   1   4   2   4   2   5   1   1   1   2   2   2   4   2   1   1   3 
 95  97  98  99 100 
  2   3   2   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02784 0.30706 0.56980 0.97501 6.00000 
[1] "event indicator table: "

   0    1 
4375 3092 
[1] "treatment indicator table: "

   0    1 
3070 4397 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3762
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3705
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 409.232 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.378 0.0889
 2 mu         0.1   0.2 0.433 0.0783
 3 mu         0.1   0.3 0.439 0.0713
 4 mu         0.1   0.4 0.484 0.0986
 5 mu         0.1   0.5 0.503 0.0948
 6 mu         0.2   0.1 0.448 0.0711
 7 mu         0.2   0.2 0.514 0.0558
 8 mu         0.2   0.3 0.549 0.0462
 9 mu         0.2   0.4 0.622 0.0696
10 mu         0.2   0.5 0.650 0.0624
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.821        0.605 0.0000000248     10.7 
 2 mu         0.2      1.06         1.02  0.00384           3.92
 3 mu         0.3      0.979        0.950 0.270             3.11
 4 mu         0.4      0.938        0.933 0.399             1.96
 5 mu         0.5      0.981        0.961 0.498             1.71
 6 mu         0.6      0.990        0.989 0.543             1.55
 7 mu         0.7      0.980        0.969 0.538             1.61
 8 mu         0.8      1.01         0.993 0.327             1.74
 9 mu         0.9      1.01         0.987 0.0332            2.40
10 mu_1       0.1      0.877        0.617 0.0000000853      9.91
11 mu_1       0.2      1.05         0.970 0.00674           4.11
12 mu_1       0.3      0.972        0.949 0.325             2.71
13 mu_1       0.4      0.940        0.932 0.390             1.97
14 mu_1       0.5      0.983        0.960 0.514             1.72
15 mu_1       0.6      0.991        0.986 0.565             1.54
16 mu_1       0.7      0.980        0.980 0.544             1.60
17 mu_1       0.8      1.01         0.993 0.329             1.74
18 mu_1       0.9      1.01         0.984 0.0305            2.38
19 mu_0       0.1      0.814        0.603 0.0000000180     10.8 
20 mu_0       0.2      1.06         1.02  0.00312           3.95
21 mu_0       0.3      0.982        0.952 0.246             3.28
22 mu_0       0.4      0.938        0.928 0.405             1.95
23 mu_0       0.5      0.979        0.961 0.483             1.71
24 mu_0       0.6      0.990        0.990 0.511             1.58
25 mu_0       0.7      0.979        0.977 0.524             1.62
26 mu_0       0.8      1.00         0.995 0.321             1.72
27 mu_0       0.9      1.02         0.989 0.0570            2.51
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      8.33      3.05e-23  3.84e-73    714.  
 2 mu         0.2      2.36      5.18e-12  1.83e-48     94.6 
 3 mu         0.3      1.15      4.18e- 6  3.39e-34     27.6 
 4 mu         0.4      1.78      9.16e- 3  3.15e-24     43.5 
 5 mu         0.5      1.52      1.95e- 1  1.17e-16     13.6 
 6 mu         0.6      1.55      2.54e- 1  7.24e-17     15.8 
 7 mu         0.7      1.53      1.49e- 1  1.10e-25     14.3 
 8 mu         0.8      1.01      3.88e- 3  1.74e-38      8.52
 9 mu         0.9      0.952     3.84e- 9  7.47e-61     24.7 
10 mu_1       0.1      9.84      1.85e-22  3.58e-72    830.  
11 mu_1       0.2      1.89      1.58e-11  8.53e-48     72.6 
12 mu_1       0.3      1.23      8.35e- 6  1.05e-33     28.5 
13 mu_1       0.4      1.78      1.40e- 2  7.34e-24     44.4 
14 mu_1       0.5      1.51      2.16e- 1  2.17e-16     12.9 
15 mu_1       0.6      1.56      2.56e- 1  1.43e-17     15.6 
16 mu_1       0.7      1.52      1.20e- 1  1.83e-26     14.6 
17 mu_1       0.8      0.989     2.83e- 3  2.53e-39      8.38
18 mu_1       0.9      0.978     2.54e- 9  9.65e-62     26.9 
19 mu_0       0.1      8.17      1.33e-23  0           701.  
20 mu_0       0.2      2.48      2.52e-12  0           105.  
21 mu_0       0.3      1.12      2.39e- 6  0            27.2 
22 mu_0       0.4      1.77      6.04e- 3  0            42.9 
23 mu_0       0.5      1.52      1.79e- 1  0            14.2 
24 mu_0       0.6      1.54      3.09e- 1  0            16.2 
25 mu_0       0.7      1.56      2.17e- 1  0            13.8 
26 mu_0       0.8      1.10      6.06e- 3  0            10.3 
27 mu_0       0.9      0.717     3.54e- 9  0            18.2 
[1] "Total run time was 412.814 seconds"
