
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7420"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70 
  2   2   2   1   1   2   4   1   3   3   4   1   2   3   2   3   3   1   1   2 
 72  73  74  75  76  77  78  79  80  81  82  83  85  86  88  89  90  91  92  93 
  3   3   1   4   1   3   1   2   2   1   5   2   3   2   3   1   1   3   3   2 
 94  96  97  99 100 
  1   2   3   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02491 0.31295 0.58487 0.97957 6.00000 
[1] "event indicator table: "

   0    1 
4276 3144 
[1] "treatment indicator table: "

   0    1 
2854 4566 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3791
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3629
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 572.811 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.379 0.0962
 2 mu         0.1   0.2 0.453 0.104 
 3 mu         0.1   0.3 0.490 0.112 
 4 mu         0.1   0.4 0.530 0.112 
 5 mu         0.1   0.5 0.593 0.128 
 6 mu         0.2   0.1 0.416 0.0446
 7 mu         0.2   0.2 0.517 0.0506
 8 mu         0.2   0.3 0.586 0.0703
 9 mu         0.2   0.4 0.638 0.0680
10 mu         0.2   0.5 0.685 0.0742
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.828        0.132 0.00000150     15.5 
 2 mu         0.2      1.04         0.896 0.0211          4.03
 3 mu         0.3      0.997        0.949 0.367           2.30
 4 mu         0.4      0.969        0.965 0.440           1.69
 5 mu         0.5      0.973        0.968 0.554           1.47
 6 mu         0.6      0.998        1.01  0.735           1.33
 7 mu         0.7      1.03         1.05  0.556           1.54
 8 mu         0.8      1.02         1.01  0.542           1.63
 9 mu         0.9      1.01         0.960 0.130           2.10
10 mu_1       0.1      0.908        0.234 0.00000450     13.6 
11 mu_1       0.2      1.04         0.896 0.0357          3.84
12 mu_1       0.3      0.991        0.938 0.408           2.27
13 mu_1       0.4      0.968        0.954 0.410           1.63
14 mu_1       0.5      0.975        0.965 0.590           1.45
15 mu_1       0.6      0.999        1.02  0.723           1.34
16 mu_1       0.7      1.03         1.04  0.553           1.52
17 mu_1       0.8      1.02         1.00  0.529           1.64
18 mu_1       0.9      1.01         0.959 0.123           2.14
19 mu_0       0.1      0.819        0.120 0.00000115     15.7 
20 mu_0       0.2      1.04         0.894 0.0175          4.08
21 mu_0       0.3      0.999        0.946 0.350           2.32
22 mu_0       0.4      0.969        0.960 0.460           1.74
23 mu_0       0.5      0.970        0.968 0.518           1.49
24 mu_0       0.6      0.996        1.00  0.741           1.32
25 mu_0       0.7      1.03         1.04  0.564           1.58
26 mu_0       0.8      1.03         1.02  0.587           1.58
27 mu_0       0.9      1.01         0.976 0.195           2.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0786     9.86e-25  6.75e-78      5.90
 2 mu         0.2     1.53       5.14e-13  1.03e-52     58.8 
 3 mu         0.3     0.984      4.30e- 7  4.89e-38     20.6 
 4 mu         0.4     1.15       1.59e- 3  1.12e-27     10.5 
 5 mu         0.5     1.20       4.28e- 2  1.08e-19     16.8 
 6 mu         0.6     0.886      1.84e- 1  2.96e-14      7.21
 7 mu         0.7     1.17       2.04e- 1  5.60e-23      7.60
 8 mu         0.8     1.36       8.23e- 3  5.79e-36     17.2 
 9 mu         0.9     1.78       2.29e- 8  4.49e-59     47.8 
10 mu_1       0.1     0.151      6.59e-24  6.60e-77     11.0 
11 mu_1       0.2     1.58       1.62e-12  5.04e-52     61.9 
12 mu_1       0.3     0.965      8.95e- 7  1.59e-37     17.5 
13 mu_1       0.4     1.16       2.11e- 3  2.74e-27     10.7 
14 mu_1       0.5     1.19       3.61e- 2  2.11e-19     16.1 
15 mu_1       0.6     0.879      2.13e- 1  9.46e-15      6.53
16 mu_1       0.7     1.19       1.94e- 1  1.53e-23      8.24
17 mu_1       0.8     1.36       6.67e- 3  1.39e-36     17.9 
18 mu_1       0.9     1.81       1.63e- 8  9.57e-60     48.9 
19 mu_0       0.1     0.0706     3.63e-25  1.75e-79      5.33
20 mu_0       0.2     1.51       2.38e-13  3.00e-54     58.1 
21 mu_0       0.3     0.992      2.30e- 7  1.62e-39     21.9 
22 mu_0       0.4     1.15       9.98e- 4  4.35e-29     10.3 
23 mu_0       0.5     1.21       6.08e- 2  5.01e-21     17.5 
24 mu_0       0.6     0.897      1.90e- 1  1.80e-14      8.23
25 mu_0       0.7     1.12       2.43e- 1  1.51e-22      6.13
26 mu_0       0.8     1.39       1.45e- 2  2.34e-35     14.4 
27 mu_0       0.9     1.53       8.34e- 8  3.63e-58     38.0 
[1] "Total run time was 578.671 seconds"
