
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7400"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  70 
  2   1   1   1   1   2   1   2   3   3   1   6   2   2   3   1   2   3   2   4 
 71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 
  1   2   3   2   2   2   5   2   3   1   2   1   1   2   1   5   3   1   3   3 
 91  92  94  97  99 100 
  3   2   2   1   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04704 0.37773 0.63336 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4379 3021 
[1] "treatment indicator table: "

   0    1 
2607 4793 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3691
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3709
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 384.011 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.595 0.264 
 2 mu         0.1   0.2 0.684 0.310 
 3 mu         0.1   0.3 0.750 0.357 
 4 mu         0.1   0.4 0.854 0.402 
 5 mu         0.1   0.5 0.885 0.429 
 6 mu         0.2   0.1 0.382 0.104 
 7 mu         0.2   0.2 0.433 0.0796
 8 mu         0.2   0.3 0.455 0.0649
 9 mu         0.2   0.4 0.525 0.0781
10 mu         0.2   0.5 0.536 0.0749
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.47       0.00642  1.41e-10     70.7 
 2 mu         0.2      0.900      0.755    3.66e- 4      5.88
 3 mu         0.3      0.956      0.881    7.39e- 2      2.51
 4 mu         0.4      0.995      0.936    2.98e- 1      5.15
 5 mu         0.5      0.981      0.963    4.33e- 1      1.81
 6 mu         0.6      1.00       1.04     5.35e- 1      1.42
 7 mu         0.7      0.956      0.968    5.83e- 1      1.52
 8 mu         0.8      0.971      0.984    2.74e- 1      1.57
 9 mu         0.9      0.981      1.00     6.80e- 2      2.55
10 mu_1       0.1      0.971      0.0139   4.81e-10     22.0 
11 mu_1       0.2      0.926      0.742    6.80e- 4      5.93
12 mu_1       0.3      0.955      0.860    9.37e- 2      2.59
13 mu_1       0.4      0.994      0.929    3.13e- 1      5.17
14 mu_1       0.5      0.983      0.967    4.57e- 1      1.63
15 mu_1       0.6      1.00       1.03     5.28e- 1      1.40
16 mu_1       0.7      0.954      0.960    5.88e- 1      1.53
17 mu_1       0.8      0.971      0.986    2.68e- 1      1.60
18 mu_1       0.9      0.981      0.999    6.48e- 2      2.58
19 mu_0       0.1      1.52       0.00559  1.04e-10     76.3 
20 mu_0       0.2      0.894      0.742    2.87e- 4      5.87
21 mu_0       0.3      0.957      0.889    6.55e- 2      2.63
22 mu_0       0.4      0.995      0.911    2.87e- 1      5.14
23 mu_0       0.5      0.979      0.949    4.09e- 1      2.00
24 mu_0       0.6      1.00       1.03     5.24e- 1      1.46
25 mu_0       0.7      0.959      0.959    5.71e- 1      1.49
26 mu_0       0.8      0.969      0.967    3.00e- 1      1.52
27 mu_0       0.9      0.979      1.01     9.60e- 2      2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0774     1.46e-29  7.68e-76      6.80
 2 mu         0.2     0.712      7.40e-16  3.29e-49     42.8 
 3 mu         0.3     0.888      7.54e- 9  6.98e-34     28.4 
 4 mu         0.4     1.99       1.89e- 4  3.06e-23     81.2 
 5 mu         0.5     1.69       2.92e- 2  3.13e-15     31.0 
 6 mu         0.6     1.20       2.84e- 1  6.31e-10      9.16
 7 mu         0.7     1.33       3.48e- 1  5.39e-16     16.1 
 8 mu         0.8     1.64       4.53e- 2  5.53e-25     15.6 
 9 mu         0.9     4.16       6.15e- 7  6.31e-41    154.  
10 mu_1       0.1     0.141      9.87e-29  6.98e-75     12.2 
11 mu_1       0.2     0.686      2.48e-15  1.50e-48     38.3 
12 mu_1       0.3     0.999      1.76e- 8  2.12e-33     30.2 
13 mu_1       0.4     2.04       3.20e- 4  6.96e-23     84.6 
14 mu_1       0.5     1.63       3.03e- 2  5.69e-15     25.8 
15 mu_1       0.6     1.20       3.35e- 1  1.88e-10     10.3 
16 mu_1       0.7     1.33       3.51e- 1  1.38e-16     15.5 
17 mu_1       0.8     1.66       3.97e- 2  1.24e-25     16.7 
18 mu_1       0.9     4.26       4.46e- 7  1.26e-41    163.  
19 mu_0       0.1     0.0703     5.28e-30  7.76e-77      6.20
20 mu_0       0.2     0.718      3.05e-16  3.74e-50     43.9 
21 mu_0       0.3     0.840      3.25e- 9  9.07e-35     27.6 
22 mu_0       0.4     1.96       1.01e- 4  4.64e-24     78.9 
23 mu_0       0.5     1.75       2.02e- 2  5.69e-16     36.1 
24 mu_0       0.6     1.19       2.92e- 1  7.55e-11      8.85
25 mu_0       0.7     1.34       3.09e- 1  1.48e-15     17.6 
26 mu_0       0.8     1.56       4.89e- 2  2.27e-24     14.0 
27 mu_0       0.9     3.24       2.14e- 6  5.18e-40    137.  
[1] "Total run time was 387.464 seconds"
