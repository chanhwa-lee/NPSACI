
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7693"
[1] "cluster size dist'n: "

 50  51  52  55  56  57  58  59  60  61  62  63  64  66  67  68  69  71  72  73 
  2   2   2   2   1   1   2   2   3   3   2   1   1   1   2   2   3   4   4   2 
 74  75  76  77  78  79  80  81  82  83  85  86  88  89  90  91  92  93  94  95 
  2   2   2   2   2   2   3   1   2   4   3   1   4   3   2   5   3   1   1   3 
 96  97  98 100 
  1   3   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01687 0.29143 0.55807 0.93291 6.00000 
[1] "event indicator table: "

   0    1 
4551 3142 
[1] "treatment indicator table: "

   0    1 
3071 4622 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3957
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3736
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 419.162 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.400 0.115 
 2 mu         0.1   0.2 0.452 0.133 
 3 mu         0.1   0.3 0.492 0.149 
 4 mu         0.1   0.4 0.602 0.160 
 5 mu         0.1   0.5 0.647 0.170 
 6 mu         0.2   0.1 0.457 0.0654
 7 mu         0.2   0.2 0.531 0.0581
 8 mu         0.2   0.3 0.591 0.0507
 9 mu         0.2   0.4 0.683 0.0642
10 mu         0.2   0.5 0.731 0.0666
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.06        0.0755 0.000000220     24.3 
 2 mu         0.2      1.21        1.04   0.00775          3.43
 3 mu         0.3      1.05        1.00   0.295            2.41
 4 mu         0.4      1.01        0.966  0.436            1.78
 5 mu         0.5      1.01        1.02   0.608            1.34
 6 mu         0.6      0.993       1.01   0.627            1.41
 7 mu         0.7      0.984       0.974  0.605            1.28
 8 mu         0.8      1.02        1.04   0.477            1.79
 9 mu         0.9      1.02        1.03   0.0402           2.50
10 mu_1       0.1      1.18        0.148  0.000000649     19.5 
11 mu_1       0.2      1.19        1.04   0.0118           3.32
12 mu_1       0.3      1.05        1.01   0.324            2.36
13 mu_1       0.4      1.01        0.957  0.421            1.77
14 mu_1       0.5      1.01        1.01   0.621            1.35
15 mu_1       0.6      0.993       1.01   0.611            1.40
16 mu_1       0.7      0.984       0.974  0.619            1.30
17 mu_1       0.8      1.03        1.05   0.465            1.78
18 mu_1       0.9      1.02        1.02   0.0372           2.56
19 mu_0       0.1      1.05        0.0675 0.000000173     24.9 
20 mu_0       0.2      1.22        1.04   0.00673          3.48
21 mu_0       0.3      1.06        0.995  0.283            2.43
22 mu_0       0.4      1.01        0.970  0.447            1.79
23 mu_0       0.5      1.01        1.01   0.595            1.33
24 mu_0       0.6      0.994       1.01   0.648            1.42
25 mu_0       0.7      0.984       0.972  0.571            1.29
26 mu_0       0.8      1.02        1.03   0.525            1.82
27 mu_0       0.9      1.01        1.08   0.0670           2.12
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00168     2.10e-26  2.43e-58    0.103 
 2 mu         0.2    1.22        2.09e-13  2.79e-36   75.7   
 3 mu         0.3    1.90        1.03e- 6  7.96e-24  126.    
 4 mu         0.4    0.886       5.85e- 3  2.12e-15    9.79  
 5 mu         0.5    1.10        1.43e- 1  2.65e- 9   17.8   
 6 mu         0.6    0.929       1.86e- 1  3.82e-10    9.37  
 7 mu         0.7    1.04        1.96e- 1  1.36e-17    8.09  
 8 mu         0.8    1.45        3.41e- 4  5.37e-29   14.0   
 9 mu         0.9    0.491       2.25e-11  1.08e-49   20.2   
10 mu_1       0.1    0.00418     1.34e-25  2.01e-57    0.257 
11 mu_1       0.2    1.56        5.99e-13  1.15e-35   98.0   
12 mu_1       0.3    1.70        2.20e- 6  2.19e-23  109.    
13 mu_1       0.4    0.920       8.51e- 3  4.37e-15   11.6   
14 mu_1       0.5    1.09        1.67e- 1  4.38e- 9   16.9   
15 mu_1       0.6    0.921       1.86e- 1  1.62e-10    9.73  
16 mu_1       0.7    1.06        1.99e- 1  4.97e-18    8.40  
17 mu_1       0.8    1.45        2.51e- 4  1.71e-29   13.8   
18 mu_1       0.9    0.469       1.39e-11  3.06e-50   19.6   
19 mu_0       0.1    0.00140     8.46e-27  4.70e-59    0.0856
20 mu_0       0.2    1.14        1.12e-13  6.07e-37   70.2   
21 mu_0       0.3    1.99        5.28e- 7  1.98e-24  133.    
22 mu_0       0.4    0.864       4.07e- 3  6.13e-16    8.57  
23 mu_0       0.5    1.11        9.62e- 2  9.23e-10   18.7   
24 mu_0       0.6    0.941       2.11e- 1  7.11e-10    8.82  
25 mu_0       0.7    1.00        1.80e- 1  3.39e-17    7.35  
26 mu_0       0.8    1.45        6.99e- 4  2.00e-28   14.8   
27 mu_0       0.9    0.686       1.00e-10  8.05e-49   26.1   
[1] "Total run time was 422.386 seconds"
