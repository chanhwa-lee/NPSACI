
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7291"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  61  62  63  64  65  66  67  68  69  71  72 
  2   2   2   3   3   4   1   3   5   1   3   1   2   3   3   2   5   4   2   1 
 73  74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  91  92  93  95 
  2   3   3   2   1   2   1   1   1   2   1   3   3   1   2   4   2   3   2   3 
 96  97  98 100 
  2   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03629 0.35413 0.61195 1.00000 6.38746 
[1] "event indicator table: "

   0    1 
4314 2977 
[1] "treatment indicator table: "

   0    1 
2570 4721 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3829
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3462
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 411.927 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.429 0.106 
 2 mu         0.1   0.2 0.473 0.106 
 3 mu         0.1   0.3 0.632 0.138 
 4 mu         0.1   0.4 0.675 0.152 
 5 mu         0.1   0.5 0.727 0.160 
 6 mu         0.2   0.1 0.343 0.0541
 7 mu         0.2   0.2 0.421 0.0676
 8 mu         0.2   0.3 0.530 0.0597
 9 mu         0.2   0.4 0.579 0.0774
10 mu         0.2   0.5 0.634 0.0810
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.06         0.371 0.000000657     13.3 
 2 mu         0.2      1.04         0.896 0.0267           6.34
 3 mu         0.3      0.954        0.972 0.264            2.33
 4 mu         0.4      0.975        0.939 0.443            1.71
 5 mu         0.5      0.981        0.982 0.527            1.56
 6 mu         0.6      1.00         0.984 0.618            1.67
 7 mu         0.7      0.972        0.956 0.610            1.50
 8 mu         0.8      0.998        0.975 0.623            1.57
 9 mu         0.9      1.00         0.973 0.318            1.86
10 mu_1       0.1      1.01         0.517 0.00000186      10.9 
11 mu_1       0.2      1.04         0.891 0.0432           5.94
12 mu_1       0.3      0.950        0.960 0.258            2.02
13 mu_1       0.4      0.979        0.948 0.438            1.71
14 mu_1       0.5      0.981        0.981 0.517            1.56
15 mu_1       0.6      1.00         0.988 0.606            1.68
16 mu_1       0.7      0.971        0.960 0.606            1.51
17 mu_1       0.8      0.999        0.977 0.625            1.59
18 mu_1       0.9      1.00         0.968 0.316            1.86
19 mu_0       0.1      1.07         0.368 0.000000523     13.5 
20 mu_0       0.2      1.04         0.916 0.0226           6.43
21 mu_0       0.3      0.955        0.968 0.266            2.46
22 mu_0       0.4      0.972        0.936 0.447            1.71
23 mu_0       0.5      0.981        0.988 0.537            1.56
24 mu_0       0.6      1.00         0.976 0.629            1.71
25 mu_0       0.7      0.973        0.957 0.618            1.50
26 mu_0       0.8      0.995        0.955 0.564            1.52
27 mu_0       0.9      1.00         0.971 0.340            1.83
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.713     1.94e-28  2.48e-87     70.6 
 2 mu         0.2      1.15      8.02e-16  1.94e-59     44.8 
 3 mu         0.3      0.906     2.73e- 8  3.53e-43     27.7 
 4 mu         0.4      1.05      6.98e- 4  1.08e-31     17.6 
 5 mu         0.5      1.69      2.42e- 2  7.72e-23     26.8 
 6 mu         0.6      1.22      2.22e- 1  1.14e-15      8.30
 7 mu         0.7      1.11      4.99e- 2  4.71e-19     14.4 
 8 mu         0.8      1.16      1.38e- 2  5.53e-31     29.3 
 9 mu         0.9      1.24      4.27e- 7  1.95e-52     25.0 
10 mu_1       0.1      0.898     1.31e-27  2.42e-86     88.2 
11 mu_1       0.2      1.19      2.72e-15  9.49e-59     50.8 
12 mu_1       0.3      0.861     5.58e- 8  1.15e-42     23.8 
13 mu_1       0.4      1.11      6.40e- 4  2.64e-31     16.1 
14 mu_1       0.5      1.69      3.03e- 2  1.51e-22     26.8 
15 mu_1       0.6      1.19      2.45e- 1  1.86e-15      8.04
16 mu_1       0.7      1.11      6.06e- 2  1.53e-19     14.8 
17 mu_1       0.8      1.16      1.09e- 2  1.57e-31     29.8 
18 mu_1       0.9      1.24      2.98e- 7  4.92e-53     25.1 
19 mu_0       0.1      0.692     6.90e-29  5.79e-89     68.6 
20 mu_0       0.2      1.14      3.27e-16  5.10e-61     43.3 
21 mu_0       0.3      0.925     1.51e- 8  1.06e-44     29.3 
22 mu_0       0.4      1.01      4.26e- 4  3.79e-33     18.6 
23 mu_0       0.5      1.69      2.30e- 2  3.25e-24     26.8 
24 mu_0       0.6      1.26      1.80e- 1  6.01e-17      9.02
25 mu_0       0.7      1.11      6.75e- 2  1.22e-18     13.7 
26 mu_0       0.8      1.13      2.16e- 2  2.14e-30     27.2 
27 mu_0       0.9      1.19      1.59e- 6  1.51e-51     24.1 
[1] "Total run time was 415.881 seconds"
