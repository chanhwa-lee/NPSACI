
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7512"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  63  64  65  66  67  68  69  70  71 
  4   2   1   1   5   2   1   1   4   2   3   1   3   2   3   3   2   2   3   1 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  87  88  89  90  91  92 
  1   1   1   2   1   1   1   1   1   4   3   2   3   2   1   2   2   2   7   2 
 93  94  95  97  98  99 100 
  1   1   1   4   1   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03997 0.38101 0.63467 1.00000 7.87456 
[1] "event indicator table: "

   0    1 
4514 2998 
[1] "treatment indicator table: "

   0    1 
2703 4809 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3822
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3690
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 391.619 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.529 0.103 
 2 mu         0.1   0.2 0.729 0.143 
 3 mu         0.1   0.3 0.847 0.169 
 4 mu         0.1   0.4 0.911 0.172 
 5 mu         0.1   0.5 0.976 0.178 
 6 mu         0.2   0.1 0.365 0.0523
 7 mu         0.2   0.2 0.478 0.0600
 8 mu         0.2   0.3 0.560 0.0750
 9 mu         0.2   0.4 0.603 0.0759
10 mu         0.2   0.5 0.655 0.0847
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.47         0.500 0.0000000361     14.0 
 2 mu         0.2      1.02         0.944 0.00964           3.40
 3 mu         0.3      0.976        0.925 0.212             3.02
 4 mu         0.4      0.961        0.959 0.458             1.69
 5 mu         0.5      1.00         1.00  0.478             1.60
 6 mu         0.6      0.995        0.999 0.514             1.51
 7 mu         0.7      0.995        0.966 0.621             1.69
 8 mu         0.8      0.982        0.960 0.562             1.64
 9 mu         0.9      1.03         1.03  0.278             2.05
10 mu_1       0.1      1.42         0.730 0.000000116      15.1 
11 mu_1       0.2      1.00         0.925 0.0156            3.63
12 mu_1       0.3      0.977        0.934 0.183             2.92
13 mu_1       0.4      0.962        0.952 0.471             1.67
14 mu_1       0.5      1.00         1.00  0.486             1.60
15 mu_1       0.6      0.995        1.00  0.532             1.51
16 mu_1       0.7      0.995        0.966 0.620             1.71
17 mu_1       0.8      0.983        0.953 0.559             1.67
18 mu_1       0.9      1.03         1.03  0.280             2.04
19 mu_0       0.1      1.48         0.476 0.0000000272     14.2 
20 mu_0       0.2      1.03         0.941 0.00815           3.34
21 mu_0       0.3      0.975        0.956 0.225             3.06
22 mu_0       0.4      0.960        0.954 0.423             1.70
23 mu_0       0.5      1.00         1.00  0.471             1.61
24 mu_0       0.6      0.996        1.01  0.484             1.52
25 mu_0       0.7      0.995        0.972 0.622             1.63
26 mu_0       0.8      0.980        0.953 0.574             1.51
27 mu_0       0.9      1.02         0.990 0.256             2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.94      2.09e-30  6.16e-73    181.  
 2 mu         0.2      1.92      3.32e-16  5.22e-47     68.3 
 3 mu         0.3      0.967     2.81e- 9  3.76e-32     35.9 
 4 mu         0.4      1.26      8.12e- 5  6.82e-22     32.0 
 5 mu         0.5      0.804     1.54e- 2  3.10e-14     10.6 
 6 mu         0.6      1.06      8.96e- 2  1.18e-12     11.1 
 7 mu         0.7      1.06      2.31e- 1  4.06e-21      9.81
 8 mu         0.8      1.34      5.65e- 2  8.22e-34     10.5 
 9 mu         0.9      1.43      9.03e- 7  1.61e-56     30.1 
10 mu_1       0.1      2.39      1.57e-29  5.48e-72    217.  
11 mu_1       0.2      1.66      1.14e-15  2.32e-46     71.7 
12 mu_1       0.3      1.01      6.24e- 9  1.12e-31     41.4 
13 mu_1       0.4      1.23      1.35e- 4  1.52e-21     27.7 
14 mu_1       0.5      0.803     1.66e- 2  5.51e-14     11.2 
15 mu_1       0.6      1.07      9.75e- 2  4.13e-13     11.4 
16 mu_1       0.7      1.06      2.02e- 1  1.22e-21     10.5 
17 mu_1       0.8      1.34      4.56e- 2  2.16e-34     10.5 
18 mu_1       0.9      1.41      6.36e- 7  3.76e-57     30.1 
19 mu_0       0.1      1.89      5.69e-31  7.61e-74    177.  
20 mu_0       0.2      1.99      1.29e-16  7.25e-48     71.5 
21 mu_0       0.3      0.949     1.34e- 9  5.97e-33     33.6 
22 mu_0       0.4      1.28      4.57e- 5  1.26e-22     34.9 
23 mu_0       0.5      0.805     1.04e- 2  6.88e-15     12.3 
24 mu_0       0.6      1.04      5.97e- 2  2.33e-12     10.7 
25 mu_0       0.7      1.03      2.07e- 1  1.07e-20      8.30
26 mu_0       0.8      1.34      1.00e- 1  3.25e-33     10.6 
27 mu_0       0.9      1.56      3.30e- 6  1.27e-55     29.7 
[1] "Total run time was 394.645 seconds"
