
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7454"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  59  60  62  63  64  65  66  67  68  69  70  71  72  73 
  3   3   4   4   2   1   1   2   3   4   1   1   3   3   2   1   1   1   5   2 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  93  94  95 
  1   2   3   2   3   1   1   7   3   4   4   3   1   1   1   2   2   2   1   1 
 96  97  98 100 
  2   2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02601 0.30587 0.58553 1.00000 5.36436 
[1] "event indicator table: "

   0    1 
4343 3111 
[1] "treatment indicator table: "

   0    1 
2932 4522 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3569
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3885
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 564.285 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.391 0.106 
 2 mu         0.1   0.2 0.410 0.0687
 3 mu         0.1   0.3 0.464 0.0709
 4 mu         0.1   0.4 0.544 0.112 
 5 mu         0.1   0.5 0.548 0.101 
 6 mu         0.2   0.1 0.375 0.0435
 7 mu         0.2   0.2 0.469 0.0364
 8 mu         0.2   0.3 0.538 0.0354
 9 mu         0.2   0.4 0.595 0.0443
10 mu         0.2   0.5 0.616 0.0411
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.736        0.339 0.0000699      4.58
 2 mu         0.2      1.02         0.934 0.126          3.19
 3 mu         0.3      1.06         1.03  0.498          2.66
 4 mu         0.4      0.994        0.993 0.509          1.70
 5 mu         0.5      0.997        0.984 0.666          1.57
 6 mu         0.6      0.984        0.974 0.606          1.33
 7 mu         0.7      0.979        0.954 0.648          1.44
 8 mu         0.8      0.980        0.972 0.541          1.51
 9 mu         0.9      0.956        0.949 0.251          1.65
10 mu_1       0.1      0.701        0.464 0.000171       2.67
11 mu_1       0.2      1.05         0.942 0.178          3.16
12 mu_1       0.3      1.06         1.02  0.466          2.48
13 mu_1       0.4      0.993        0.996 0.510          1.68
14 mu_1       0.5      0.996        0.988 0.657          1.57
15 mu_1       0.6      0.984        0.985 0.605          1.36
16 mu_1       0.7      0.979        0.950 0.653          1.42
17 mu_1       0.8      0.980        0.974 0.541          1.52
18 mu_1       0.9      0.955        0.940 0.250          1.66
19 mu_0       0.1      0.740        0.319 0.0000587      4.81
20 mu_0       0.2      1.02         0.927 0.113          3.20
21 mu_0       0.3      1.07         1.02  0.491          2.74
22 mu_0       0.4      0.995        0.991 0.508          1.70
23 mu_0       0.5      0.998        0.986 0.665          1.57
24 mu_0       0.6      0.985        0.979 0.606          1.30
25 mu_0       0.7      0.978        0.967 0.639          1.47
26 mu_0       0.8      0.981        0.971 0.542          1.50
27 mu_0       0.9      0.964        0.974 0.257          1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.849     1.23e-27  8.42e-80     77.3 
 2 mu         0.2      1.36      4.00e-15  9.14e-53     36.1 
 3 mu         0.3      1.00      1.06e- 8  3.80e-37     18.7 
 4 mu         0.4      0.618     3.50e- 4  3.02e-26     10.3 
 5 mu         0.5      0.636     3.26e- 2  5.56e-18      3.91
 6 mu         0.6      1.10      1.49e- 1  3.74e-13      9.11
 7 mu         0.7      1.29      3.64e- 1  9.15e-21     12.2 
 8 mu         0.8      0.927     1.46e- 2  3.18e-33      5.48
 9 mu         0.9      0.869     6.24e- 8  1.40e-55     12.2 
10 mu_1       0.1      0.878     8.03e-27  7.82e-79     74.4 
11 mu_1       0.2      1.35      1.46e-14  4.25e-52     33.1 
12 mu_1       0.3      0.965     2.25e- 8  1.18e-36     16.8 
13 mu_1       0.4      0.606     4.25e- 4  7.01e-26     10.7 
14 mu_1       0.5      0.651     4.49e- 2  1.03e-17      4.14
15 mu_1       0.6      1.13      1.50e- 1  1.07e-13      8.77
16 mu_1       0.7      1.29      3.57e- 1  2.52e-21     12.2 
17 mu_1       0.8      0.908     1.46e- 2  8.74e-34      5.40
18 mu_1       0.9      0.879     4.55e- 8  3.43e-56     12.5 
19 mu_0       0.1      0.846     5.38e-28  6.68e-81     77.7 
20 mu_0       0.2      1.36      1.35e-15  8.16e-54     36.9 
21 mu_0       0.3      1.02      5.49e- 9  3.87e-38     19.7 
22 mu_0       0.4      0.626     2.16e- 4  3.60e-27     10.1 
23 mu_0       0.5      0.621     2.02e- 2  7.94e-19      4.24
24 mu_0       0.6      1.06      1.33e- 1  7.76e-13      9.63
25 mu_0       0.7      1.29      3.09e- 1  2.38e-20     12.3 
26 mu_0       0.8      1.00      1.41e- 2  1.24e-32      5.92
27 mu_0       0.9      0.781     2.15e- 7  1.09e-54     11.7 
[1] "Total run time was 569.472 seconds"
