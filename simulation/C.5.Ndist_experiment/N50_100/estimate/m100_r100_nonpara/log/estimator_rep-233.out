
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7459"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  70  71  72 
  2   3   5   1   1   2   3   1   4   2   4   2   3   2   2   3   2   1   2   1 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  88  89  90  91  93  94 
  2   1   1   2   2   1   1   3   2   3   2   3   3   1   2   1   1   1   4   5 
 95  96  97  98  99 100 
  4   2   3   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03486 0.33476 0.59469 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4438 3021 
[1] "treatment indicator table: "

   0    1 
2741 4718 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3697
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3762
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 428.051 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.157 0.0658
 2 mu         0.1   0.2 0.250 0.0612
 3 mu         0.1   0.3 0.322 0.0837
 4 mu         0.1   0.4 0.410 0.117 
 5 mu         0.1   0.5 0.401 0.116 
 6 mu         0.2   0.1 0.288 0.0618
 7 mu         0.2   0.2 0.412 0.0523
 8 mu         0.2   0.3 0.510 0.0750
 9 mu         0.2   0.4 0.615 0.109 
10 mu         0.2   0.5 0.622 0.107 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.492      0.00897  3.83e-14      5.03
 2 mu         0.2      0.909      0.653    7.95e- 6      4.39
 3 mu         0.3      1.02       0.933    2.15e- 2      3.26
 4 mu         0.4      0.987      0.968    4.83e- 1      1.96
 5 mu         0.5      0.999      0.986    5.57e- 1      1.42
 6 mu         0.6      1.00       0.985    6.68e- 1      1.70
 7 mu         0.7      0.997      0.976    6.75e- 1      1.51
 8 mu         0.8      0.990      0.969    5.83e- 1      1.49
 9 mu         0.9      0.990      0.997    2.50e- 1      2.22
10 mu_1       0.1      0.610      0.0190   1.52e-13      6.15
11 mu_1       0.2      0.914      0.706    1.59e- 5      3.79
12 mu_1       0.3      1.02       0.950    2.97e- 2      3.20
13 mu_1       0.4      0.986      0.959    4.44e- 1      1.93
14 mu_1       0.5      1.00       0.980    5.73e- 1      1.42
15 mu_1       0.6      1.00       0.983    6.83e- 1      1.69
16 mu_1       0.7      0.996      0.971    6.70e- 1      1.52
17 mu_1       0.8      0.990      0.956    5.77e- 1      1.47
18 mu_1       0.9      0.992      0.999    2.46e- 1      2.23
19 mu_0       0.1      0.479      0.00774  2.56e-14      4.90
20 mu_0       0.2      0.908      0.644    5.95e- 6      4.54
21 mu_0       0.3      1.02       0.928    1.81e- 2      3.28
22 mu_0       0.4      0.987      0.960    4.94e- 1      1.99
23 mu_0       0.5      0.998      0.988    5.31e- 1      1.43
24 mu_0       0.6      1.00       0.977    6.46e- 1      1.71
25 mu_0       0.7      0.998      0.990    6.86e- 1      1.50
26 mu_0       0.8      0.992      0.970    6.04e- 1      1.57
27 mu_0       0.9      0.973      0.969    2.89e- 1      2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.25      1.58e-28  1.96e-71     87.5 
 2 mu         0.2      1.45      8.27e-16  4.15e-46     67.9 
 3 mu         0.3      0.891     2.37e- 8  1.33e-31     31.4 
 4 mu         0.4      1.20      5.12e- 4  1.36e-21     16.0 
 5 mu         0.5      1.11      6.75e- 2  3.94e-14      7.01
 6 mu         0.6      1.18      3.98e- 1  8.48e-17      6.94
 7 mu         0.7      1.11      2.58e- 1  5.56e-26      7.03
 8 mu         0.8      1.17      8.45e- 3  1.97e-39      7.90
 9 mu         0.9      0.808     2.66e- 8  4.23e-63     15.6 
10 mu_1       0.1      1.79      9.66e-28  1.74e-70    123.  
11 mu_1       0.2      1.22      2.72e-15  1.84e-45     47.8 
12 mu_1       0.3      0.923     5.11e- 8  3.94e-31     29.6 
13 mu_1       0.4      1.19      6.75e- 4  3.01e-21     15.2 
14 mu_1       0.5      1.12      7.02e- 2  6.99e-14      6.46
15 mu_1       0.6      1.17      4.10e- 1  2.08e-17      6.47
16 mu_1       0.7      1.11      2.71e- 1  1.17e-26      6.83
17 mu_1       0.8      1.18      6.49e- 3  3.62e-40      8.30
18 mu_1       0.9      0.795     1.97e- 8  6.93e-64     15.8 
19 mu_0       0.1      1.19      6.63e-29  2.47e-72     83.5 
20 mu_0       0.2      1.51      3.53e-16  5.89e-47     72.9 
21 mu_0       0.3      0.878     1.19e- 8  2.16e-32     32.1 
22 mu_0       0.4      1.21      3.23e- 4  2.57e-22     16.6 
23 mu_0       0.5      1.09      4.59e- 2  8.95e-15      7.57
24 mu_0       0.6      1.20      3.33e- 1  1.81e-16      7.65
25 mu_0       0.7      1.10      2.69e- 1  1.58e-25      7.61
26 mu_0       0.8      1.14      1.63e- 2  8.39e-39      6.97
27 mu_0       0.9      0.921     8.89e- 8  3.61e-62     13.8 
[1] "Total run time was 435.53 seconds"
