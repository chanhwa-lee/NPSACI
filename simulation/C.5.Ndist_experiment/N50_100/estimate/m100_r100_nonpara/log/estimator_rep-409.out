
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7548"
[1] "cluster size dist'n: "

 51  53  55  56  57  58  59  60  61  62  63  64  65  68  69  71  72  73  74  76 
  4   2   3   1   2   1   1   2   5   2   1   6   6   2   4   3   3   1   1   3 
 77  78  79  81  82  83  84  85  86  87  90  91  92  93  94  95  96  97  98  99 
  4   1   3   2   1   2   1   5   1   2   1   4   2   2   1   1   3   4   1   5 
100 
  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01989 0.32173 0.59486 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4422 3126 
[1] "treatment indicator table: "

   0    1 
2866 4682 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3886
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3662
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 450.718 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.298 0.0883
 2 mu         0.1   0.2 0.322 0.0995
 3 mu         0.1   0.3 0.326 0.109 
 4 mu         0.1   0.4 0.399 0.121 
 5 mu         0.1   0.5 0.421 0.133 
 6 mu         0.2   0.1 0.386 0.0413
 7 mu         0.2   0.2 0.448 0.0483
 8 mu         0.2   0.3 0.492 0.0546
 9 mu         0.2   0.4 0.576 0.0611
10 mu         0.2   0.5 0.595 0.0684
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.648      0.00590  8.51e-15     12.6 
 2 mu         0.2      1.09       0.620    5.44e- 6      5.97
 3 mu         0.3      1.09       1.01     1.99e- 2      5.01
 4 mu         0.4      1.00       0.958    2.02e- 1      1.85
 5 mu         0.5      1.01       1.01     6.92e- 1      1.64
 6 mu         0.6      0.991      0.978    6.18e- 1      1.33
 7 mu         0.7      0.973      0.994    5.89e- 1      1.57
 8 mu         0.8      1.03       1.02     3.45e- 1      1.82
 9 mu         0.9      0.985      0.989    5.28e- 2      2.79
10 mu_1       0.1      0.703      0.0137   3.43e-14     13.0 
11 mu_1       0.2      1.13       0.759    1.10e- 5      5.60
12 mu_1       0.3      1.07       1.01     2.70e- 2      4.43
13 mu_1       0.4      1.00       0.952    2.21e- 1      1.84
14 mu_1       0.5      1.01       1.00     7.04e- 1      1.59
15 mu_1       0.6      0.990      0.970    6.15e- 1      1.35
16 mu_1       0.7      0.974      0.991    5.70e- 1      1.57
17 mu_1       0.8      1.03       1.02     3.39e- 1      1.80
18 mu_1       0.9      0.986      0.990    4.79e- 2      2.86
19 mu_0       0.1      0.642      0.00500  5.65e-15     12.8 
20 mu_0       0.2      1.08       0.608    4.06e- 6      6.06
21 mu_0       0.3      1.10       1.01     1.69e- 2      5.26
22 mu_0       0.4      1.00       0.952    1.88e- 1      1.86
23 mu_0       0.5      1.01       0.999    6.79e- 1      1.68
24 mu_0       0.6      0.994      0.987    6.23e- 1      1.31
25 mu_0       0.7      0.971      0.980    6.03e- 1      1.57
26 mu_0       0.8      1.03       1.02     3.72e- 1      1.87
27 mu_0       0.9      0.972      0.980    9.63e- 2      2.39
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.00118      9.25e-27  5.31e-77    0.0934
 2 mu         0.2   0.488        1.14e-13  7.21e-52   23.3   
 3 mu         0.3   1.77         1.72e- 7  2.99e-37   78.6   
 4 mu         0.4   1.27         1.57e- 3  5.88e-27   34.8   
 5 mu         0.5   0.934        8.96e- 2  4.70e-19   16.8   
 6 mu         0.6   1.09         1.60e- 1  1.08e-12    9.60  
 7 mu         0.7   0.933        1.13e- 1  2.35e-16    8.05  
 8 mu         0.8   0.913        1.31e- 2  4.70e-27    8.61  
 9 mu         0.9   1.01         5.54e- 8  2.13e-46   17.4   
10 mu_1       0.1   0.00291      6.10e-26  5.12e-76    0.230 
11 mu_1       0.2   0.623        3.74e-13  3.48e-51   28.5   
12 mu_1       0.3   1.85         3.46e- 7  9.62e-37   86.5   
13 mu_1       0.4   1.17         2.45e- 3  1.42e-26   28.7   
14 mu_1       0.5   0.964        1.08e- 1  9.08e-19   18.0   
15 mu_1       0.6   1.09         1.93e- 1  1.74e-12    9.19  
16 mu_1       0.7   0.924        1.12e- 1  8.20e-17    7.81  
17 mu_1       0.8   0.920        1.05e- 2  1.44e-27    8.24  
18 mu_1       0.9   1.01         4.05e- 8  5.77e-47   17.7   
19 mu_0       0.1   0.000984     3.70e-27  2.03e-78    0.0782
20 mu_0       0.2   0.455        4.91e-14  3.11e-53   22.0   
21 mu_0       0.3   1.74         9.78e- 8  1.47e-38   75.3   
22 mu_0       0.4   1.33         9.83e- 4  3.38e-28   38.9   
23 mu_0       0.5   0.904        6.36e- 2  3.24e-20   15.6   
24 mu_0       0.6   1.09         1.31e- 1  9.30e-14   11.1   
25 mu_0       0.7   0.953        1.03e- 1  5.91e-16    9.03  
26 mu_0       0.8   0.885        1.34e- 2  1.78e-26   10.1   
27 mu_0       0.9   0.981        1.89e- 7  1.61e-45   15.5   
[1] "Total run time was 454.631 seconds"
