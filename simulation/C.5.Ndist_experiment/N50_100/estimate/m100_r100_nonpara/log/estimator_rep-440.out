
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7532"
[1] "cluster size dist'n: "

 50  51  52  54  56  58  59  60  61  63  64  65  66  67  68  69  70  71  72  73 
  2   3   3   4   2   2   2   3   2   1   5   2   3   1   3   1   2   2   2   1 
 74  75  77  78  79  80  81  82  83  84  85  86  87  88  89  92  93  94  96  97 
  1   1   5   2   2   4   1   2   2   4   1   2   1   5   1   1   5   1   3   5 
 99 100 
  3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04318 0.36059 0.61689 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4501 3031 
[1] "treatment indicator table: "

   0    1 
2804 4728 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3860
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3672
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 459.098 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.203 0.0637
 2 mu         0.1   0.2 0.256 0.0689
 3 mu         0.1   0.3 0.335 0.0805
 4 mu         0.1   0.4 0.364 0.0923
 5 mu         0.1   0.5 0.382 0.0964
 6 mu         0.2   0.1 0.394 0.0662
 7 mu         0.2   0.2 0.498 0.0798
 8 mu         0.2   0.3 0.616 0.0964
 9 mu         0.2   0.4 0.674 0.107 
10 mu         0.2   0.5 0.725 0.118 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.661      0.00831  3.52e-10     11.3 
 2 mu         0.2      1.25       0.737    1.36e- 3     18.6 
 3 mu         0.3      1.06       0.983    2.33e- 1      2.77
 4 mu         0.4      1.04       0.984    4.71e- 1      2.17
 5 mu         0.5      1.02       1.02     5.27e- 1      1.50
 6 mu         0.6      1.00       0.996    6.37e- 1      1.45
 7 mu         0.7      0.983      0.966    6.67e- 1      1.45
 8 mu         0.8      1.01       1.04     3.21e- 1      1.45
 9 mu         0.9      0.921      0.926    7.16e- 3      2.04
10 mu_1       0.1      0.795      0.0180   1.17e- 9      9.68
11 mu_1       0.2      1.22       0.775    2.28e- 3     15.1 
12 mu_1       0.3      1.04       0.981    2.78e- 1      2.57
13 mu_1       0.4      1.05       1.02     4.89e- 1      2.10
14 mu_1       0.5      1.02       1.02     5.22e- 1      1.51
15 mu_1       0.6      1.00       0.990    6.35e- 1      1.45
16 mu_1       0.7      0.984      0.974    6.77e- 1      1.43
17 mu_1       0.8      1.01       1.04     2.99e- 1      1.45
18 mu_1       0.9      0.918      0.926    6.12e- 3      2.08
19 mu_0       0.1      0.646      0.00724  2.60e-10     11.5 
20 mu_0       0.2      1.25       0.716    1.13e- 3     19.4 
21 mu_0       0.3      1.06       0.993    2.13e- 1      2.85
22 mu_0       0.4      1.04       0.984    4.59e- 1      2.21
23 mu_0       0.5      1.03       1.03     5.32e- 1      1.50
24 mu_0       0.6      1.01       0.995    6.39e- 1      1.44
25 mu_0       0.7      0.981      0.948    6.45e- 1      1.49
26 mu_0       0.8      1.01       1.02     4.11e- 1      1.52
27 mu_0       0.9      0.946      0.933    1.65e- 2      1.66
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.604     8.41e-27  1.33e-76     57.9 
 2 mu         0.2      1.80      3.82e-14  3.21e-50     78.9 
 3 mu         0.3      1.07      6.53e- 8  5.19e-35     40.9 
 4 mu         0.4      1.22      7.97e- 4  1.99e-24     26.4 
 5 mu         0.5      1.12      2.29e- 2  1.95e-16     12.0 
 6 mu         0.6      1.11      4.19e- 1  1.42e-13      8.34
 7 mu         0.7      1.39      3.53e- 1  2.88e-21      9.70
 8 mu         0.8      1.04      1.90e- 2  1.52e-32      8.64
 9 mu         0.9      1.26      1.60e- 8  2.12e-52     39.0 
10 mu_1       0.1      0.918     5.90e-26  1.22e-75     86.9 
11 mu_1       0.2      1.74      1.14e-13  1.47e-49     59.2 
12 mu_1       0.3      0.999     1.46e- 7  1.59e-34     35.7 
13 mu_1       0.4      1.24      6.55e- 4  4.57e-24     27.4 
14 mu_1       0.5      1.11      2.73e- 2  3.58e-16     11.7 
15 mu_1       0.6      1.10      4.50e- 1  3.55e-14      8.34
16 mu_1       0.7      1.41      3.33e- 1  6.18e-22     10.0 
17 mu_1       0.8      1.02      1.58e- 2  2.85e-33      8.91
18 mu_1       0.9      1.29      1.19e- 8  3.53e-53     40.5 
19 mu_0       0.1      0.569     2.79e-27  1.22e-77     54.7 
20 mu_0       0.2      1.81      1.52e-14  3.31e-51     83.8 
21 mu_0       0.3      1.09      3.25e- 8  6.11e-36     43.2 
22 mu_0       0.4      1.20      4.48e- 4  2.74e-25     25.7 
23 mu_0       0.5      1.12      1.73e- 2  3.22e-17     12.3 
24 mu_0       0.6      1.12      3.27e- 1  3.02e-13      8.34
25 mu_0       0.7      1.35      4.51e- 1  8.17e-21      9.00
26 mu_0       0.8      1.13      3.17e- 2  6.46e-32     10.2 
27 mu_0       0.9      1.01      5.31e- 8  1.80e-51     25.6 
[1] "Total run time was 462.762 seconds"
