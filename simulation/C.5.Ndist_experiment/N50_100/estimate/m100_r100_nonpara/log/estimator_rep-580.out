
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7446"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  2   1   1   2   1   3   5   5   1   1   3   3   1   3   1   1   3   3   1   2 
 71  72  73  74  76  77  78  79  81  82  83  84  85  86  87  88  89  90  91  92 
  2   2   1   2   2   8   1   1   2   2   1   2   1   3   3   2   5   2   1   2 
 93  94  96  97  99 100 
  2   2   2   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03115 0.34535 0.60126 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4441 3005 
[1] "treatment indicator table: "

   0    1 
2656 4790 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3694
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3752
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 425.853 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est    se
   <chr>    <dbl> <dbl> <dbl> <dbl>
 1 mu         0.1   0.1 0.467 0.132
 2 mu         0.1   0.2 0.570 0.148
 3 mu         0.1   0.3 0.593 0.140
 4 mu         0.1   0.4 0.611 0.136
 5 mu         0.1   0.5 0.639 0.133
 6 mu         0.2   0.1 0.505 0.126
 7 mu         0.2   0.2 0.627 0.140
 8 mu         0.2   0.3 0.665 0.131
 9 mu         0.2   0.4 0.694 0.127
10 mu         0.2   0.5 0.733 0.123
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.844       0.0853  2.72e-11      7.08
 2 mu         0.2      1.08        0.794   3.97e- 4      8.20
 3 mu         0.3      0.985       0.909   1.45e- 1      2.84
 4 mu         0.4      0.966       0.920   4.99e- 1      2.10
 5 mu         0.5      1.01        0.992   6.07e- 1      1.62
 6 mu         0.6      1.01        0.989   4.91e- 1      1.48
 7 mu         0.7      1.03        1.01    6.38e- 1      1.61
 8 mu         0.8      1.00        0.964   4.21e- 1      1.90
 9 mu         0.9      0.948       0.974   3.61e- 2      2.37
10 mu_1       0.1      0.923       0.157   9.51e-11      8.61
11 mu_1       0.2      1.07        0.860   7.01e- 4      7.52
12 mu_1       0.3      0.975       0.936   1.78e- 1      2.58
13 mu_1       0.4      0.969       0.934   5.31e- 1      2.09
14 mu_1       0.5      1.01        0.996   6.24e- 1      1.62
15 mu_1       0.6      1.01        0.996   4.82e- 1      1.48
16 mu_1       0.7      1.03        1.01    6.32e- 1      1.62
17 mu_1       0.8      0.999       0.963   4.11e- 1      1.89
18 mu_1       0.9      0.947       0.979   3.27e- 2      2.43
19 mu_0       0.1      0.835       0.0778  1.97e-11      6.97
20 mu_0       0.2      1.09        0.783   3.21e- 4      8.37
21 mu_0       0.3      0.989       0.891   1.31e- 1      3.04
22 mu_0       0.4      0.965       0.909   4.77e- 1      2.10
23 mu_0       0.5      1.01        0.982   5.89e- 1      1.63
24 mu_0       0.6      1.01        0.988   5.04e- 1      1.48
25 mu_0       0.7      1.03        1.01    6.50e- 1      1.60
26 mu_0       0.8      1.00        0.966   4.62e- 1      1.92
27 mu_0       0.9      0.963       0.974   6.14e- 2      1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    120.        1.89e-27  2.62e-69  11991.  
 2 mu         0.2      0.561     6.07e-15  2.47e-45     51.1 
 3 mu         0.3      0.636     3.34e- 8  1.56e-31     14.4 
 4 mu         0.4      1.09      2.79e- 4  5.99e-22     29.5 
 5 mu         0.5      0.886     8.90e- 2  9.85e-15      9.26
 6 mu         0.6      1.25      3.67e- 1  7.48e-17      9.35
 7 mu         0.7      1.47      2.72e- 1  1.20e-24     18.7 
 8 mu         0.8      1.61      7.11e- 2  9.61e-36     24.0 
 9 mu         0.9      2.14      9.36e- 7  7.41e-55     56.7 
10 mu_1       0.1     53.7       1.25e-26  2.39e-68   5369.  
11 mu_1       0.2      0.187     1.91e-14  1.13e-44     11.4 
12 mu_1       0.3      0.722     7.29e- 8  4.73e-31     16.5 
13 mu_1       0.4      1.07      4.66e- 4  1.36e-21     28.6 
14 mu_1       0.5      0.907     9.36e- 2  1.79e-14     10.1 
15 mu_1       0.6      1.26      3.14e- 1  5.58e-18      9.04
16 mu_1       0.7      1.47      2.33e- 1  7.66e-26     19.2 
17 mu_1       0.8      1.62      5.76e- 2  5.38e-37     23.7 
18 mu_1       0.9      2.13      6.60e- 7  3.69e-56     56.5 
19 mu_0       0.1    127.        6.55e-28  2.62e-70  12726.  
20 mu_0       0.2      0.654     2.60e-15  2.78e-46     61.0 
21 mu_0       0.3      0.599     1.65e- 8  2.00e-32     13.4 
22 mu_0       0.4      1.11      1.55e- 4  8.97e-23     30.0 
23 mu_0       0.5      0.865     6.33e- 2  1.77e-15      8.47
24 mu_0       0.6      1.23      2.90e- 1  1.79e-16      9.82
25 mu_0       0.7      1.47      3.17e- 1  3.81e-24     18.0 
26 mu_0       0.8      1.58      1.11e- 1  4.59e-35     25.5 
27 mu_0       0.9      2.30      3.47e- 6  7.08e-54     57.6 
[1] "Total run time was 429.278 seconds"
