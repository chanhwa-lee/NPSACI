
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7333"
[1] "cluster size dist'n: "

 50  51  53  54  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  2   1   6   4   2   5   1   2   2   3   1   4   2   2   1   1   1   4   1   1 
 72  73  74  75  76  77  78  80  81  82  83  84  85  86  87  89  90  91  93  94 
  5   2   1   1   1   3   4   1   3   1   3   2   1   3   3   4   2   2   1   2 
 95  97  98  99 100 
  2   1   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03581 0.35290 0.61850 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4288 3045 
[1] "treatment indicator table: "

   0    1 
2715 4618 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3573
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3760
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 451.03 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.381 0.0487
 2 mu         0.1   0.2 0.510 0.0674
 3 mu         0.1   0.3 0.578 0.0807
 4 mu         0.1   0.4 0.647 0.0925
 5 mu         0.1   0.5 0.697 0.0919
 6 mu         0.2   0.1 0.358 0.0287
 7 mu         0.2   0.2 0.468 0.0393
 8 mu         0.2   0.3 0.533 0.0475
 9 mu         0.2   0.4 0.606 0.0559
10 mu         0.2   0.5 0.653 0.0514
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.07         0.424 0.000000442      7.34
 2 mu         0.2      1.05         0.938 0.0365           3.09
 3 mu         0.3      1.03         1.06  0.397            2.15
 4 mu         0.4      1.01         1.02  0.505            1.51
 5 mu         0.5      1.02         0.993 0.585            1.43
 6 mu         0.6      0.998        0.988 0.579            1.33
 7 mu         0.7      0.974        0.967 0.614            1.39
 8 mu         0.8      0.997        1.00  0.594            1.41
 9 mu         0.9      0.972        0.928 0.411            1.97
10 mu_1       0.1      1.04         0.613 0.00000126       5.37
11 mu_1       0.2      1.04         0.962 0.0532           3.05
12 mu_1       0.3      1.03         1.04  0.406            2.03
13 mu_1       0.4      1.01         1.01  0.507            1.50
14 mu_1       0.5      1.02         1.01  0.592            1.44
15 mu_1       0.6      0.996        0.983 0.578            1.33
16 mu_1       0.7      0.974        0.968 0.615            1.39
17 mu_1       0.8      0.998        0.995 0.586            1.44
18 mu_1       0.9      0.971        0.920 0.405            1.97
19 mu_0       0.1      1.07         0.400 0.000000352      7.56
20 mu_0       0.2      1.05         0.934 0.0323           3.10
21 mu_0       0.3      1.03         1.06  0.392            2.20
22 mu_0       0.4      1.01         1.02  0.504            1.52
23 mu_0       0.5      1.02         0.991 0.578            1.44
24 mu_0       0.6      1.00         0.990 0.580            1.35
25 mu_0       0.7      0.974        0.962 0.610            1.39
26 mu_0       0.8      0.993        1.00  0.628            1.44
27 mu_0       0.9      0.980        0.951 0.459            2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0904     9.19e-27  3.27e-89      7.29
 2 mu         0.2     0.937      2.96e-14  1.82e-60     47.2 
 3 mu         0.3     1.04       1.13e- 7  9.78e-44     23.2 
 4 mu         0.4     0.933      8.01e- 4  6.08e-32     13.6 
 5 mu         0.5     0.879      7.80e- 2  7.07e-23      7.33
 6 mu         0.6     1.04       6.27e- 1  1.45e-15      8.70
 7 mu         0.7     1.42       2.44e- 1  1.70e-21     14.0 
 8 mu         0.8     1.09       2.09e- 2  1.53e-33     14.8 
 9 mu         0.9     1.28       1.04e- 7  6.00e-55     19.5 
10 mu_1       0.1     0.172      5.84e-26  3.17e-88     13.8 
11 mu_1       0.2     0.930      9.79e-14  8.81e-60     44.5 
12 mu_1       0.3     1.07       2.43e- 7  3.16e-43     24.9 
13 mu_1       0.4     0.917      9.45e- 4  1.47e-31     13.5 
14 mu_1       0.5     0.884      9.35e- 2  1.37e-22      7.74
15 mu_1       0.6     1.06       6.36e- 1  2.34e-15      8.41
16 mu_1       0.7     1.42       2.42e- 1  4.53e-22     15.1 
17 mu_1       0.8     1.08       1.76e- 2  3.57e-34     14.0 
18 mu_1       0.9     1.28       7.50e- 8  1.24e-55     20.1 
19 mu_0       0.1     0.0814     3.72e-27  1.10e-90      6.57
20 mu_0       0.2     0.939      1.26e-14  6.89e-62     47.8 
21 mu_0       0.3     1.03       5.74e- 8  4.23e-45     22.4 
22 mu_0       0.4     0.945      4.57e- 4  3.07e-33     13.7 
23 mu_0       0.5     0.875      5.85e- 2  4.29e-24      6.93
24 mu_0       0.6     1.01       5.40e- 1  1.10e-16      9.14
25 mu_0       0.7     1.42       2.34e- 1  4.60e-21     11.5 
26 mu_0       0.8     1.11       2.94e- 2  6.22e-33     18.2 
27 mu_0       0.9     1.32       3.69e- 7  4.88e-54     17.2 
[1] "Total run time was 454.835 seconds"
