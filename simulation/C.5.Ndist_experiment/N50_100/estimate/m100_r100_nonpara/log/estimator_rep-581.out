
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7696"
[1] "cluster size dist'n: "

50 52 53 54 55 56 57 58 59 62 63 64 65 66 67 69 70 71 72 73 74 75 76 77 78 79 
 1  3  3  1  1  2  2  2  1  1  1  1  4  2  5  1  3  2  1  1  3  4  4  4  1  3 
80 81 83 84 85 86 87 88 89 91 92 93 94 95 96 97 98 99 
 2  1  2  1  2  2  1  2  6  5  5  2  3  1  1  2  3  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02149 0.31984 0.57993 0.96748 7.00000 
[1] "event indicator table: "

   0    1 
4547 3149 
[1] "treatment indicator table: "

   0    1 
3106 4590 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3893
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3803
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 431.741 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.337 0.0674
 2 mu         0.1   0.2 0.420 0.0906
 3 mu         0.1   0.3 0.504 0.0956
 4 mu         0.1   0.4 0.601 0.0860
 5 mu         0.1   0.5 0.646 0.100 
 6 mu         0.2   0.1 0.350 0.0345
 7 mu         0.2   0.2 0.434 0.0441
 8 mu         0.2   0.3 0.495 0.0454
 9 mu         0.2   0.4 0.569 0.0382
10 mu         0.2   0.5 0.614 0.0474
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.04         0.159 0.00000000514     10.4 
 2 mu         0.2      1.02         0.903 0.00313            2.73
 3 mu         0.3      1.03         1.02  0.311              1.75
 4 mu         0.4      1.01         0.984 0.479              1.77
 5 mu         0.5      1.02         1.02  0.623              1.52
 6 mu         0.6      0.991        0.970 0.612              1.45
 7 mu         0.7      0.969        0.974 0.616              1.42
 8 mu         0.8      0.952        0.905 0.450              1.59
 9 mu         0.9      0.919        0.899 0.0297             2.93
10 mu_1       0.1      1.04         0.272 0.0000000169       8.88
11 mu_1       0.2      1.02         0.931 0.00523            2.41
12 mu_1       0.3      1.03         1.02  0.372              1.74
13 mu_1       0.4      1.01         0.980 0.488              1.77
14 mu_1       0.5      1.02         1.02  0.634              1.50
15 mu_1       0.6      0.989        0.965 0.621              1.47
16 mu_1       0.7      0.968        0.972 0.610              1.44
17 mu_1       0.8      0.953        0.901 0.441              1.61
18 mu_1       0.9      0.917        0.898 0.0270             2.89
19 mu_0       0.1      1.03         0.148 0.00000000384     10.6 
20 mu_0       0.2      1.02         0.904 0.00261            2.82
21 mu_0       0.3      1.03         1.02  0.285              1.78
22 mu_0       0.4      1.01         1.00  0.472              1.77
23 mu_0       0.5      1.02         1.02  0.612              1.54
24 mu_0       0.6      0.993        0.978 0.598              1.40
25 mu_0       0.7      0.973        0.977 0.630              1.38
26 mu_0       0.8      0.947        0.925 0.488              1.54
27 mu_0       0.9      0.934        0.852 0.0539             3.35
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.531     8.36e-24  5.73e-66     37.3 
 2 mu         0.2      1.48      3.52e-12  6.75e-43     51.2 
 3 mu         0.3      1.23      2.70e- 6  1.26e-29     51.7 
 4 mu         0.4      0.969     5.43e- 3  2.04e-20     19.0 
 5 mu         0.5      1.11      1.77e- 1  1.72e-13      6.75
 6 mu         0.6      1.25      6.11e- 1  2.43e-15     17.7 
 7 mu         0.7      1.12      1.46e- 1  4.41e-24     12.2 
 8 mu         0.8      1.30      1.01e- 3  6.01e-37     16.6 
 9 mu         0.9      1.32      6.42e-10  1.16e-59     38.2 
10 mu_1       0.1      0.798     4.93e-23  5.20e-65     54.0 
11 mu_1       0.2      1.38      1.06e-11  3.06e-42     41.3 
12 mu_1       0.3      1.24      5.12e- 6  3.81e-29     55.3 
13 mu_1       0.4      0.947     6.94e- 3  4.63e-20     15.3 
14 mu_1       0.5      1.14      2.04e- 1  3.12e-13      6.81
15 mu_1       0.6      1.25      5.11e- 1  6.53e-16     17.1 
16 mu_1       0.7      1.11      1.52e- 1  1.02e-24     12.4 
17 mu_1       0.8      1.31      7.24e- 4  1.21e-37     16.5 
18 mu_1       0.9      1.31      4.19e-10  2.09e-60     39.0 
19 mu_0       0.1      0.502     3.81e-24  5.92e-67     35.4 
20 mu_0       0.2      1.50      1.67e-12  7.85e-44     53.6 
21 mu_0       0.3      1.23      1.66e- 6  1.67e-30     50.1 
22 mu_0       0.4      0.983     3.40e- 3  3.17e-21     21.5 
23 mu_0       0.5      1.09      1.63e- 1  3.20e-14      6.85
24 mu_0       0.6      1.25      5.57e- 1  5.09e-15     18.6 
25 mu_0       0.7      1.14      1.97e- 1  1.23e-23     11.6 
26 mu_0       0.8      1.26      2.13e- 3  2.52e-36     16.8 
27 mu_0       0.9      1.39      2.65e- 9  9.76e-59     33.4 
[1] "Total run time was 435.318 seconds"
