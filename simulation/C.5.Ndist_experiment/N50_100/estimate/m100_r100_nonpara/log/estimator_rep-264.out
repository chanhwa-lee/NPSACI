
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7802"
[1] "cluster size dist'n: "

 51  53  54  55  56  58  59  60  61  62  63  64  66  67  68  69  70  72  73  74 
  1   5   2   1   1   1   4   1   2   1   1   1   1   2   5   3   3   3   1   5 
 75  76  79  80  81  82  83  86  88  89  90  91  92  93  94  95  96  98  99 100 
  3   2   4   3   3   1   4   3   2   1   5   1   2   2   1   2   2   5   4   6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03016 0.32490 0.58896 0.99350 6.00000 
[1] "event indicator table: "

   0    1 
4579 3223 
[1] "treatment indicator table: "

   0    1 
3090 4712 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3725
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 4077
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 456.531 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.457 0.0451
 2 mu         0.1   0.2 0.533 0.0451
 3 mu         0.1   0.3 0.588 0.0464
 4 mu         0.1   0.4 0.633 0.0490
 5 mu         0.1   0.5 0.647 0.0500
 6 mu         0.2   0.1 0.365 0.0238
 7 mu         0.2   0.2 0.452 0.0305
 8 mu         0.2   0.3 0.509 0.0313
 9 mu         0.2   0.4 0.540 0.0294
10 mu         0.2   0.5 0.563 0.0286
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.13         0.947   0.00245      3.35
 2 mu         0.2      0.985        0.951   0.0264       1.90
 3 mu         0.3      1.01         0.973   0.410        1.86
 4 mu         0.4      0.991        0.992   0.577        1.57
 5 mu         0.5      1.02         1.01    0.620        1.50
 6 mu         0.6      1.03         1.02    0.597        1.42
 7 mu         0.7      1.02         0.994   0.652        1.55
 8 mu         0.8      1.03         0.999   0.456        1.64
 9 mu         0.9      0.990        0.919   0.212        3.02
10 mu_1       0.1      1.08         0.962   0.00526      3.24
11 mu_1       0.2      0.992        0.990   0.0286       1.84
12 mu_1       0.3      1.01         0.962   0.432        1.84
13 mu_1       0.4      0.990        0.972   0.570        1.53
14 mu_1       0.5      1.03         1.03    0.615        1.51
15 mu_1       0.6      1.02         1.01    0.569        1.42
16 mu_1       0.7      1.02         0.996   0.652        1.56
17 mu_1       0.8      1.03         1.01    0.454        1.65
18 mu_1       0.9      0.988        0.924   0.203        3.06
19 mu_0       0.1      1.13         0.937   0.00214      3.38
20 mu_0       0.2      0.984        0.938   0.0258       1.94
21 mu_0       0.3      1.01         0.974   0.400        1.87
22 mu_0       0.4      0.991        1.00    0.582        1.60
23 mu_0       0.5      1.02         1.01    0.625        1.50
24 mu_0       0.6      1.03         1.03    0.637        1.41
25 mu_0       0.7      1.02         0.996   0.650        1.53
26 mu_0       0.8      1.03         1.01    0.462        1.61
27 mu_0       0.9      1.01         0.946   0.291        2.66
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.987     7.91e-25  3.93e-85     55.6 
 2 mu         0.2      0.711     3.90e-13  8.65e-57     17.2 
 3 mu         0.3      0.929     9.79e- 7  2.37e-40     16.6 
 4 mu         0.4      0.977     1.81e- 3  8.13e-29     11.3 
 5 mu         0.5      1.21      3.66e- 2  5.26e-20      9.91
 6 mu         0.6      1.28      2.71e- 1  9.23e-18      8.32
 7 mu         0.7      1.24      1.57e- 1  4.27e-26      6.77
 8 mu         0.8      1.20      3.84e- 3  3.91e-38      9.79
 9 mu         0.9      2.71      8.33e-10  4.24e-59     70.8 
10 mu_1       0.1      1.15      4.45e-24  3.74e-84     56.3 
11 mu_1       0.2      0.678     1.25e-12  4.11e-56     15.1 
12 mu_1       0.3      0.939     2.04e- 6  7.52e-40     17.5 
13 mu_1       0.4      0.993     1.31e- 3  1.93e-28     10.7 
14 mu_1       0.5      1.22      3.85e- 2  9.98e-20      9.69
15 mu_1       0.6      1.28      2.33e- 1  1.56e-18      8.43
16 mu_1       0.7      1.24      1.63e- 1  6.18e-27      7.22
17 mu_1       0.8      1.20      3.04e- 3  4.94e-39     10.6 
18 mu_1       0.9      2.79      5.23e-10  4.78e-60     72.2 
19 mu_0       0.1      0.969     3.85e-25  2.19e-86     55.5 
20 mu_0       0.2      0.720     1.73e-13  5.40e-58     18.7 
21 mu_0       0.3      0.925     5.25e- 7  1.70e-41     16.3 
22 mu_0       0.4      0.966     1.09e- 3  6.77e-30     11.8 
23 mu_0       0.5      1.20      3.63e- 2  5.26e-21     10.1 
24 mu_0       0.6      1.28      2.00e- 1  2.07e-17      8.15
25 mu_0       0.7      1.24      1.46e- 1  1.28e-25      6.80
26 mu_0       0.8      1.19      3.22e- 3  1.76e-37      9.22
27 mu_0       0.9      2.08      3.62e- 9  3.81e-58     57.8 
[1] "Total run time was 459.769 seconds"
