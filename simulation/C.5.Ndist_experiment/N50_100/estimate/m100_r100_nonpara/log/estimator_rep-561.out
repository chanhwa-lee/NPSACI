
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7416"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  65  66  67  68  69  70  71 
  6   1   2   1   1   3   3   1   4   2   2   1   4   3   1   3   1   4   1   1 
 72  73  74  75  76  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  2   4   1   2   5   1   2   3   3   1   4   1   2   2   1   2   2   2   2   2 
 95  96  97  98  99 100 
  1   2   4   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02712 0.34713 0.59761 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4490 2926 
[1] "treatment indicator table: "

   0    1 
2642 4774 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3655
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3761
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 367.656 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.609 0.101 
 2 mu         0.1   0.2 0.737 0.119 
 3 mu         0.1   0.3 0.818 0.130 
 4 mu         0.1   0.4 0.894 0.145 
 5 mu         0.1   0.5 0.955 0.153 
 6 mu         0.2   0.1 0.410 0.0601
 7 mu         0.2   0.2 0.496 0.0649
 8 mu         0.2   0.3 0.547 0.0650
 9 mu         0.2   0.4 0.596 0.0750
10 mu         0.2   0.5 0.639 0.0802
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.43         0.351 0.00000153     12.9 
 2 mu         0.2      0.966        0.848 0.0248          3.47
 3 mu         0.3      0.933        0.893 0.207           2.06
 4 mu         0.4      0.980        0.991 0.436           1.56
 5 mu         0.5      0.997        0.999 0.498           1.68
 6 mu         0.6      1.01         1.02  0.474           1.41
 7 mu         0.7      0.993        0.984 0.661           1.43
 8 mu         0.8      0.965        0.931 0.494           1.71
 9 mu         0.9      1.07         1.01  0.0686          4.73
10 mu_1       0.1      1.43         0.524 0.00000482     13.7 
11 mu_1       0.2      0.937        0.871 0.0395          3.19
12 mu_1       0.3      0.937        0.926 0.236           2.01
13 mu_1       0.4      0.984        0.984 0.442           1.54
14 mu_1       0.5      0.997        0.997 0.517           1.66
15 mu_1       0.6      1.01         1.01  0.481           1.41
16 mu_1       0.7      0.991        0.979 0.659           1.44
17 mu_1       0.8      0.966        0.924 0.494           1.73
18 mu_1       0.9      1.07         1.00  0.0637          4.87
19 mu_0       0.1      1.43         0.331 0.00000117     12.8 
20 mu_0       0.2      0.973        0.844 0.0211          3.54
21 mu_0       0.3      0.931        0.883 0.194           2.08
22 mu_0       0.4      0.977        0.986 0.422           1.57
23 mu_0       0.5      0.997        0.993 0.480           1.70
24 mu_0       0.6      1.01         1.02  0.464           1.43
25 mu_0       0.7      0.997        0.992 0.649           1.43
26 mu_0       0.8      0.962        0.925 0.491           1.64
27 mu_0       0.9      1.05         0.989 0.112           3.45
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0660     3.26e-28  3.37e-75      6.60
 2 mu         0.2     0.395      4.19e-15  3.62e-50     16.0 
 3 mu         0.3     1.07       3.20e- 8  1.15e-35     21.6 
 4 mu         0.4     0.808      3.01e- 4  1.66e-25      7.57
 5 mu         0.5     0.750      4.12e- 2  9.23e-18      8.74
 6 mu         0.6     0.983      1.26e- 1  4.31e-14      8.84
 7 mu         0.7     1.19       2.29e- 1  7.66e-22      8.80
 8 mu         0.8     1.35       8.59e- 2  3.08e-33     13.5 
 9 mu         0.9     0.953      1.44e- 6  2.41e-53     15.9 
10 mu_1       0.1     0.105      1.91e-27  3.18e-74     10.5 
11 mu_1       0.2     0.445      1.46e-14  1.71e-49     19.1 
12 mu_1       0.3     1.12       6.75e- 8  3.62e-35     22.5 
13 mu_1       0.4     0.779      3.57e- 4  3.92e-25      8.13
14 mu_1       0.5     0.750      4.25e- 2  1.74e-17      8.08
15 mu_1       0.6     1.00       1.30e- 1  1.14e-14      8.62
16 mu_1       0.7     1.19       2.45e- 1  1.74e-22      8.38
17 mu_1       0.8     1.35       8.34e- 2  6.09e-34     14.0 
18 mu_1       0.9     0.953      1.04e- 6  4.24e-54     15.9 
19 mu_0       0.1     0.0617     1.50e-28  2.11e-76      6.17
20 mu_0       0.2     0.383      1.61e-15  2.54e-51     16.8 
21 mu_0       0.3     1.06       1.48e- 8  9.23e-37     21.2 
22 mu_0       0.4     0.827      1.76e- 4  1.56e-26      8.58
23 mu_0       0.5     0.751      2.98e- 2  1.04e-18      9.39
24 mu_0       0.6     0.954      1.17e- 1  9.07e-14      9.16
25 mu_0       0.7     1.19       1.58e- 1  2.15e-21      9.78
26 mu_0       0.8     1.32       6.64e- 2  1.29e-32     11.2 
27 mu_0       0.9     0.959      5.02e- 6  2.03e-52     15.6 
[1] "Total run time was 370.829 seconds"
