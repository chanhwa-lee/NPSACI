
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7427"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  63  64  65  66  67  68  69  70 
  1   2   2   2   2   3   2   3   1   1   4   3   3   1   3   3   3   3   1   1 
 71  72  74  75  76  77  78  79  80  81  82  83  84  85  86  88  89  90  92  94 
  1   3   2   2   3   3   1   1   7   1   2   3   2   2   1   2   1   3   1   1 
 95  96  98  99 100 
  2   3   3   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03106 0.31620 0.58803 0.99460 5.00000 
[1] "event indicator table: "

   0    1 
4415 3012 
[1] "treatment indicator table: "

   0    1 
2896 4531 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3756
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3671
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 400.205 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.388 0.0350
 2 mu         0.1   0.2 0.445 0.0390
 3 mu         0.1   0.3 0.518 0.0446
 4 mu         0.1   0.4 0.589 0.0583
 5 mu         0.1   0.5 0.612 0.0680
 6 mu         0.2   0.1 0.371 0.0372
 7 mu         0.2   0.2 0.455 0.0407
 8 mu         0.2   0.3 0.518 0.0402
 9 mu         0.2   0.4 0.584 0.0566
10 mu         0.2   0.5 0.624 0.0577
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.819  0.000120      4.09
 2 mu         0.2      0.995        0.985  0.157         2.52
 3 mu         0.3      0.996        0.961  0.302         2.14
 4 mu         0.4      1.03         1.02   0.259         2.49
 5 mu         0.5      0.981        0.958  0.281         1.86
 6 mu         0.6      1.02         1.00   0.559         1.50
 7 mu         0.7      1.03         1.04   0.589         1.55
 8 mu         0.8      0.998        0.998  0.492         1.56
 9 mu         0.9      1.01         0.969  0.375         2.34
10 mu_1       0.1      1.00         0.806  0.000282      3.48
11 mu_1       0.2      0.993        1.01   0.192         2.15
12 mu_1       0.3      0.997        0.965  0.298         2.18
13 mu_1       0.4      1.03         1.02   0.255         2.49
14 mu_1       0.5      0.981        0.950  0.290         1.85
15 mu_1       0.6      1.02         1.01   0.553         1.46
16 mu_1       0.7      1.03         1.03   0.582         1.56
17 mu_1       0.8      0.997        0.998  0.493         1.56
18 mu_1       0.9      1.01         0.974  0.369         2.40
19 mu_0       0.1      1.02         0.830  0.000102      4.16
20 mu_0       0.2      0.995        0.957  0.148         2.67
21 mu_0       0.3      0.996        0.963  0.304         2.13
22 mu_0       0.4      1.03         1.02   0.261         2.49
23 mu_0       0.5      0.982        0.957  0.271         1.88
24 mu_0       0.6      1.02         0.998  0.541         1.55
25 mu_0       0.7      1.03         1.05   0.592         1.54
26 mu_0       0.8      1.01         0.996  0.489         1.57
27 mu_0       0.9      1.00         0.973  0.436         2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.70      1.59e-25  2.50e-79     132. 
 2 mu         0.2      1.46      1.93e-13  2.72e-52      89.7
 3 mu         0.3      0.693     7.75e- 7  1.13e-36      13.6
 4 mu         0.4      0.761     2.37e- 3  8.99e-26      10.7
 5 mu         0.5      1.28      6.88e- 2  1.65e-17      15.0
 6 mu         0.6      1.43      1.36e- 1  3.79e-20      20.4
 7 mu         0.7      1.18      8.81e- 2  1.26e-28      18.2
 8 mu         0.8      1.20      1.12e- 3  1.02e-40      16.4
 9 mu         0.9      1.57      7.39e-10  1.38e-61      35.9
10 mu_1       0.1      1.25      9.39e-25  2.33e-78      71.1
11 mu_1       0.2      1.43      6.40e-13  1.26e-51      87.0
12 mu_1       0.3      0.673     1.50e- 6  3.49e-36      10.4
13 mu_1       0.4      0.795     2.78e- 3  2.09e-25      10.6
14 mu_1       0.5      1.31      7.69e- 2  3.07e-17      14.4
15 mu_1       0.6      1.41      1.37e- 1  3.42e-21      20.0
16 mu_1       0.7      1.19      7.15e- 2  9.74e-30      19.1
17 mu_1       0.8      1.20      8.37e- 4  6.86e-42      16.4
18 mu_1       0.9      1.58      4.68e-10  8.27e-63      37.0
19 mu_0       0.1      1.75      7.28e-26  1.99e-80     138. 
20 mu_0       0.2      1.47      8.10e-14  2.43e-53      90.4
21 mu_0       0.3      0.702     4.64e- 7  1.15e-37      15.0
22 mu_0       0.4      0.739     1.42e- 3  1.07e-26      10.7
23 mu_0       0.5      1.25      6.62e- 2  2.36e-18      15.6
24 mu_0       0.6      1.46      1.42e- 1  8.97e-20      20.9
25 mu_0       0.7      1.15      9.26e- 2  3.98e-28      15.9
26 mu_0       0.8      1.23      2.24e- 3  4.80e-40      16.8
27 mu_0       0.9      1.43      3.17e- 9  1.30e-60      25.6
[1] "Total run time was 404.062 seconds"
