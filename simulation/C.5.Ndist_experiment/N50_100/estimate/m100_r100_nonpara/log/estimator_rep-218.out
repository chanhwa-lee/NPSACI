
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7361"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  59  60  61  62  63  65  66  67  68  69  70  71  72 
  1   5   2   1   4   1   3   3   3   4   3   1   1   5   1   3   1   2   1   3 
 73  74  75  76  77  78  80  82  83  85  86  88  89  90  91  92  93  94  95  97 
  2   1   5   4   4   3   2   1   2   3   3   1   3   1   1   2   2   1   4   2 
 98  99 100 
  2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03986 0.37260 0.63099 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4347 3014 
[1] "treatment indicator table: "

   0    1 
2722 4639 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3612
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3749
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 371.506 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.256 0.0880
 2 mu         0.1   0.2 0.332 0.104 
 3 mu         0.1   0.3 0.417 0.109 
 4 mu         0.1   0.4 0.467 0.119 
 5 mu         0.1   0.5 0.487 0.125 
 6 mu         0.2   0.1 0.266 0.0407
 7 mu         0.2   0.2 0.348 0.0461
 8 mu         0.2   0.3 0.439 0.0329
 9 mu         0.2   0.4 0.498 0.0392
10 mu         0.2   0.5 0.530 0.0371
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.858       0.101  0.00000000603     13.0 
 2 mu         0.2      1.00        0.971  0.00606            2.47
 3 mu         0.3      0.993       0.978  0.255              2.40
 4 mu         0.4      1.01        0.968  0.355              1.92
 5 mu         0.5      0.990       0.976  0.618              1.52
 6 mu         0.6      1.01        0.995  0.615              1.48
 7 mu         0.7      1.02        1.02   0.645              1.37
 8 mu         0.8      1.01        0.997  0.515              1.65
 9 mu         0.9      1.00        0.962  0.229              2.40
10 mu_1       0.1      0.871       0.185  0.0000000191       9.66
11 mu_1       0.2      1.01        0.969  0.00978            2.45
12 mu_1       0.3      0.996       0.974  0.299              2.34
13 mu_1       0.4      1.01        0.969  0.397              1.87
14 mu_1       0.5      0.992       0.982  0.631              1.50
15 mu_1       0.6      1.01        0.992  0.612              1.48
16 mu_1       0.7      1.02        1.02   0.654              1.39
17 mu_1       0.8      1.01        1.00   0.513              1.63
18 mu_1       0.9      1.00        0.958  0.215              2.44
19 mu_0       0.1      0.856       0.0914 0.00000000458     13.4 
20 mu_0       0.2      1.00        0.953  0.00513            2.56
21 mu_0       0.3      0.992       0.974  0.235              2.42
22 mu_0       0.4      1.01        0.973  0.327              1.96
23 mu_0       0.5      0.987       0.988  0.604              1.54
24 mu_0       0.6      1.01        1.00   0.619              1.47
25 mu_0       0.7      1.02        1.03   0.625              1.32
26 mu_0       0.8      1.01        0.988  0.522              1.72
27 mu_0       0.9      1.00        0.974  0.356              2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0673     1.06e-26  1.12e-75      6.72
 2 mu         0.2     1.07       2.66e-14  4.26e-50     83.5 
 3 mu         0.3     1.27       1.22e- 7  2.66e-35     26.3 
 4 mu         0.4     1.27       5.77e- 4  5.87e-25     13.4 
 5 mu         0.5     1.01       9.02e- 2  4.24e-17      7.27
 6 mu         0.6     1.09       2.31e- 1  7.17e-11     10.4 
 7 mu         0.7     1.26       2.63e- 1  1.53e-18     12.9 
 8 mu         0.8     1.12       3.36e- 2  2.35e-30      7.40
 9 mu         0.9     1.64       1.62e- 7  1.05e-51     35.4 
10 mu_1       0.1     0.126      7.04e-26  1.04e-74     12.5 
11 mu_1       0.2     1.10       8.98e-14  1.99e-49     77.9 
12 mu_1       0.3     1.31       2.42e- 7  8.30e-35     24.4 
13 mu_1       0.4     1.26       9.45e- 4  1.37e-24     12.1 
14 mu_1       0.5     0.985      1.19e- 1  7.93e-17      7.17
15 mu_1       0.6     1.12       2.16e- 1  3.59e-11      9.96
16 mu_1       0.7     1.25       2.24e- 1  5.31e-19     12.8 
17 mu_1       0.8     1.12       2.75e- 2  7.11e-31      7.33
18 mu_1       0.9     1.66       1.12e- 7  2.82e-52     35.7 
19 mu_0       0.1     0.0608     3.95e-27  8.09e-77      6.07
20 mu_0       0.2     1.07       1.10e-14  3.47e-51     84.9 
21 mu_0       0.3     1.26       6.36e- 8  2.48e-36     27.1 
22 mu_0       0.4     1.28       3.32e- 4  6.38e-26     14.3 
23 mu_0       0.5     1.03       6.53e- 2  5.53e-18      7.47
24 mu_0       0.6     1.05       2.22e- 1  1.17e-11     11.0 
25 mu_0       0.7     1.29       3.01e- 1  3.87e-18     13.1 
26 mu_0       0.8     1.11       3.91e- 2  8.88e-30      9.36
27 mu_0       0.9     1.48       6.05e- 7  7.94e-51     32.5 
[1] "Total run time was 374.709 seconds"
