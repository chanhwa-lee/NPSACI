
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7466"
[1] "cluster size dist'n: "

 50  51  53  54  56  57  59  60  61  62  63  64  65  66  67  68  69  70  71  72 
  2   3   1   4   2   4   1   3   2   2   4   2   1   2   4   1   4   3   2   2 
 73  74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  91  92  95  96 
  2   1   2   2   1   1   2   2   2   1   2   1   4   5   5   3   1   1   1   4 
 97  98 100 
  3   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04572 0.36901 0.63558 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4373 3093 
[1] "treatment indicator table: "

   0    1 
2797 4669 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3806
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3660
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 366.463 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.298 0.110 
 2 mu         0.1   0.2 0.372 0.140 
 3 mu         0.1   0.3 0.414 0.157 
 4 mu         0.1   0.4 0.452 0.150 
 5 mu         0.1   0.5 0.515 0.163 
 6 mu         0.2   0.1 0.280 0.0562
 7 mu         0.2   0.2 0.360 0.0749
 8 mu         0.2   0.3 0.415 0.0822
 9 mu         0.2   0.4 0.453 0.0688
10 mu         0.2   0.5 0.510 0.0769
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.892       0.0674 0.00000277     15.1 
 2 mu         0.2      0.942       0.817  0.0146          3.93
 3 mu         0.3      1.02        0.982  0.248           2.11
 4 mu         0.4      1.05        1.04   0.548           2.02
 5 mu         0.5      1.02        1.00   0.604           1.72
 6 mu         0.6      1.00        1.01   0.564           1.44
 7 mu         0.7      0.986       0.961  0.670           1.53
 8 mu         0.8      0.987       0.996  0.387           1.58
 9 mu         0.9      1.03        0.962  0.123           2.67
10 mu_1       0.1      0.873       0.131  0.00000798     11.3 
11 mu_1       0.2      0.961       0.882  0.0240          3.78
12 mu_1       0.3      1.03        0.972  0.292           2.05
13 mu_1       0.4      1.05        1.05   0.546           1.98
14 mu_1       0.5      1.02        1.01   0.604           1.73
15 mu_1       0.6      1.00        1.00   0.565           1.44
16 mu_1       0.7      0.987       0.962  0.681           1.55
17 mu_1       0.8      0.986       0.994  0.381           1.56
18 mu_1       0.9      1.03        0.959  0.114           2.73
19 mu_0       0.1      0.894       0.0603 0.00000208     15.6 
20 mu_0       0.2      0.937       0.803  0.0123          3.97
21 mu_0       0.3      1.02        0.977  0.229           2.14
22 mu_0       0.4      1.05        1.03   0.549           2.04
23 mu_0       0.5      1.03        1.00   0.605           1.72
24 mu_0       0.6      1.00        1.02   0.563           1.45
25 mu_0       0.7      0.985       0.969  0.639           1.47
26 mu_0       0.8      0.990       0.981  0.414           1.65
27 mu_0       0.9      1.01        0.998  0.198           2.42
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00130     1.64e-25  1.74e-68     0.119
 2 mu         0.2    0.523       4.14e-13  4.61e-45    23.3  
 3 mu         0.3    1.21        1.12e- 6  1.48e-31    46.3  
 4 mu         0.4    1.55        2.57e- 3  3.72e-22    21.5  
 5 mu         0.5    1.57        7.55e- 2  4.70e-15    14.2  
 6 mu         0.6    1.20        3.19e- 1  1.84e-10     6.71 
 7 mu         0.7    1.15        1.24e- 1  1.46e-17    19.0  
 8 mu         0.8    1.18        9.73e- 3  2.95e-28    13.3  
 9 mu         0.9    3.94        1.05e- 8  1.87e-47    91.9  
10 mu_1       0.1    0.00289     8.93e-25  1.60e-67     0.263
11 mu_1       0.2    0.643       1.19e-12  2.12e-44    25.8  
12 mu_1       0.3    1.20        2.26e- 6  4.52e-31    41.8  
13 mu_1       0.4    1.60        4.01e- 3  8.55e-22    21.4  
14 mu_1       0.5    1.56        7.52e- 2  8.64e-15    13.3  
15 mu_1       0.6    1.17        3.86e- 1  6.77e-11     6.77 
16 mu_1       0.7    1.16        1.00e- 1  4.62e-18    19.4  
17 mu_1       0.8    1.20        7.38e- 3  8.14e-29    13.8  
18 mu_1       0.9    4.00        7.42e- 9  4.59e-48    94.7  
19 mu_0       0.1    0.00112     7.49e-26  1.57e-69     0.103
20 mu_0       0.2    0.492       2.21e-13  4.69e-46    22.7  
21 mu_0       0.3    1.21        6.28e- 7  1.72e-32    48.2  
22 mu_0       0.4    1.52        1.61e- 3  5.05e-23    21.6  
23 mu_0       0.5    1.58        7.85e- 2  7.66e-16    15.1  
24 mu_0       0.6    1.25        2.27e- 1  3.58e-10     7.12 
25 mu_0       0.7    1.14        1.80e- 1  3.80e-17    18.0  
26 mu_0       0.8    1.10        1.91e- 2  1.15e-27    11.6  
27 mu_0       0.9    3.40        3.79e- 8  1.46e-46    66.6  
[1] "Total run time was 369.689 seconds"
