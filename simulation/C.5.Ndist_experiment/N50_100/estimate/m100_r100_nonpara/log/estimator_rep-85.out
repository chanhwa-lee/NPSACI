
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7395"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70  71 
  2   4   1   2   3   1   1   1   2   3   3   3   4   4   1   2   2   1   1   3 
 72  73  74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  91  94  95 
  2   3   3   1   2   1   3   5   1   5   1   1   3   4   1   4   2   2   2   3 
 96  97  98  99 100 
  2   2   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04203 0.38499 0.62494 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4467 2928 
[1] "treatment indicator table: "

   0    1 
2469 4926 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3676
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 416.411 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.440 0.117 
 2 mu         0.1   0.2 0.573 0.144 
 3 mu         0.1   0.3 0.657 0.168 
 4 mu         0.1   0.4 0.691 0.191 
 5 mu         0.1   0.5 0.722 0.211 
 6 mu         0.2   0.1 0.303 0.0529
 7 mu         0.2   0.2 0.406 0.0456
 8 mu         0.2   0.3 0.465 0.0541
 9 mu         0.2   0.4 0.475 0.0731
10 mu         0.2   0.5 0.487 0.0936
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.42        0.0703 0.0000000233     24.6 
 2 mu         0.2      1.04        0.818  0.00526           3.64
 3 mu         0.3      1.07        1.04   0.120             2.15
 4 mu         0.4      1.04        1.03   0.396             2.24
 5 mu         0.5      0.966       0.951  0.523             1.66
 6 mu         0.6      0.993       0.963  0.561             1.55
 7 mu         0.7      0.999       1.01   0.653             1.59
 8 mu         0.8      0.992       1.00   0.590             1.52
 9 mu         0.9      1.02        1.02   0.514             1.84
10 mu_1       0.1      1.33        0.130  0.0000000751     16.5 
11 mu_1       0.2      1.02        0.904  0.00859           3.06
12 mu_1       0.3      1.08        1.08   0.144             2.12
13 mu_1       0.4      1.04        1.02   0.383             2.12
14 mu_1       0.5      0.964       0.947  0.557             1.64
15 mu_1       0.6      0.994       0.963  0.561             1.55
16 mu_1       0.7      1.00        1.01   0.646             1.58
17 mu_1       0.8      0.992       1.00   0.581             1.52
18 mu_1       0.9      1.02        1.01   0.508             1.86
19 mu_0       0.1      1.43        0.0637 0.0000000175     25.5 
20 mu_0       0.2      1.05        0.848  0.00442           3.78
21 mu_0       0.3      1.06        0.992  0.109             2.17
22 mu_0       0.4      1.05        1.04   0.406             2.31
23 mu_0       0.5      0.968       0.968  0.488             1.67
24 mu_0       0.6      0.990       0.959  0.561             1.56
25 mu_0       0.7      0.999       0.999  0.642             1.62
26 mu_0       0.8      0.994       0.992  0.615             1.53
27 mu_0       0.9      1.00        0.992  0.416             1.72
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1  0.000122      1.16e-30  1.49e-93   0.00695
 2 mu         0.2  0.213         3.90e-17  1.18e-64   5.70   
 3 mu         0.3  1.70          1.24e- 9  9.51e-48  40.7    
 4 mu         0.4  1.67          4.59e- 5  9.38e-36  76.3    
 5 mu         0.5  1.41          2.24e- 2  1.89e-26  33.0    
 6 mu         0.6  1.17          2.33e- 1  7.53e-19  20.9    
 7 mu         0.7  1.29          2.45e- 1  9.55e-14  14.1    
 8 mu         0.8  1.20          6.27e- 2  6.39e-24  13.7    
 9 mu         0.9  1.05          4.78e- 6  1.17e-42  28.9    
10 mu_1       0.1  0.000367      7.99e-30  1.49e-92   0.0206 
11 mu_1       0.2  0.321         1.32e-16  5.92e-64   8.69   
12 mu_1       0.3  1.77          2.74e- 9  3.17e-47  43.0    
13 mu_1       0.4  1.65          7.77e- 5  2.35e-35  81.8    
14 mu_1       0.5  1.41          2.91e- 2  3.77e-26  28.7    
15 mu_1       0.6  1.16          2.30e- 1  1.26e-18  19.0    
16 mu_1       0.7  1.30          2.61e- 1  4.02e-14  14.6    
17 mu_1       0.8  1.20          5.01e- 2  2.36e-24  13.5    
18 mu_1       0.9  1.05          3.63e- 6  3.84e-43  28.9    
19 mu_0       0.1  0.0000947     4.04e-31  0          0.00543
20 mu_0       0.2  0.186         1.59e-17  0          4.95   
21 mu_0       0.3  1.67          5.72e-10  0         39.8    
22 mu_0       0.4  1.68          2.31e- 5  0         72.7    
23 mu_0       0.5  1.42          1.49e- 2  0         37.7    
24 mu_0       0.6  1.18          2.46e- 1  0         23.9    
25 mu_0       0.7  1.29          3.07e- 1  0         12.9    
26 mu_0       0.8  1.21          7.89e- 2  0         14.4    
27 mu_0       0.9  1.05          8.98e- 6  0         29.3    
[1] "Total run time was 419.93 seconds"
