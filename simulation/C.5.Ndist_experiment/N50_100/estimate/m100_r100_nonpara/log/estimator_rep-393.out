
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7562"
[1] "cluster size dist'n: "

51 52 53 54 55 56 58 59 60 61 62 63 64 66 67 68 69 70 71 72 73 74 76 77 78 79 
 1  2  1  1  3  1  3  1  4  2  4  1  3  2  3  1  3  5  2  3  3  2  2  5  1  2 
80 81 84 85 86 87 88 89 90 91 92 93 95 98 99 
 1  2  3  1  4  5  1  2  2  2  2  2  3  7  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03934 0.35556 0.61141 1.00000 6.92783 
[1] "event indicator table: "

   0    1 
4451 3111 
[1] "treatment indicator table: "

   0    1 
2921 4641 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3781
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3781
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 453.584 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.396 0.0932
 2 mu         0.1   0.2 0.547 0.0960
 3 mu         0.1   0.3 0.624 0.111 
 4 mu         0.1   0.4 0.670 0.107 
 5 mu         0.1   0.5 0.717 0.115 
 6 mu         0.2   0.1 0.277 0.0316
 7 mu         0.2   0.2 0.384 0.0320
 8 mu         0.2   0.3 0.438 0.0364
 9 mu         0.2   0.4 0.482 0.0380
10 mu         0.2   0.5 0.525 0.0386
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.07         0.606 0.00000284      5.24
 2 mu         0.2      0.958        0.963 0.0587          2.57
 3 mu         0.3      1.02         1.00  0.288           1.90
 4 mu         0.4      1.01         1.00  0.568           1.64
 5 mu         0.5      1.03         1.01  0.633           1.63
 6 mu         0.6      1.01         0.990 0.635           1.54
 7 mu         0.7      0.968        0.959 0.592           1.39
 8 mu         0.8      0.988        0.983 0.452           1.53
 9 mu         0.9      1.00         0.981 0.111           2.02
10 mu_1       0.1      1.05         0.607 0.00000777      5.52
11 mu_1       0.2      0.972        0.925 0.0810          2.21
12 mu_1       0.3      1.02         1.00  0.287           1.94
13 mu_1       0.4      1.01         0.989 0.598           1.69
14 mu_1       0.5      1.03         1.03  0.651           1.59
15 mu_1       0.6      1.00         0.996 0.619           1.52
16 mu_1       0.7      0.968        0.966 0.588           1.40
17 mu_1       0.8      0.989        0.995 0.459           1.55
18 mu_1       0.9      1.00         0.978 0.113           2.04
19 mu_0       0.1      1.07         0.609 0.00000229      5.21
20 mu_0       0.2      0.954        0.927 0.0532          2.66
21 mu_0       0.3      1.02         1.00  0.288           1.91
22 mu_0       0.4      1.01         1.00  0.548           1.62
23 mu_0       0.5      1.03         1.00  0.616           1.67
24 mu_0       0.6      1.01         0.992 0.634           1.55
25 mu_0       0.7      0.968        0.953 0.603           1.40
26 mu_0       0.8      0.983        0.971 0.424           1.44
27 mu_0       0.9      1.03         0.994 0.0933          2.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.31      3.11e-27  2.43e-83    104.  
 2 mu         0.2      1.50      3.75e-14  3.76e-56     32.9 
 3 mu         0.3      0.881     1.00e- 7  2.33e-40     19.8 
 4 mu         0.4      0.847     3.71e- 4  2.95e-29     19.3 
 5 mu         0.5      0.768     3.42e- 2  9.36e-21      6.95
 6 mu         0.6      1.20      9.09e- 2  1.92e-16      8.46
 7 mu         0.7      1.34      2.38e- 1  5.19e-25     11.9 
 8 mu         0.8      1.40      3.60e- 2  1.60e-37     12.1 
 9 mu         0.9      0.734     8.41e- 8  1.74e-59     14.5 
10 mu_1       0.1      1.66      1.89e-26  2.33e-82    126.  
11 mu_1       0.2      1.42      1.18e-13  1.80e-55     29.5 
12 mu_1       0.3      0.844     2.08e- 7  7.45e-40     18.9 
13 mu_1       0.4      0.834     5.22e- 4  7.06e-29     17.8 
14 mu_1       0.5      0.791     4.63e- 2  1.79e-20      7.30
15 mu_1       0.6      1.22      8.87e- 2  4.40e-17      8.06
16 mu_1       0.7      1.32      2.59e- 1  1.02e-25     11.9 
17 mu_1       0.8      1.42      2.90e- 2  2.76e-38     12.5 
18 mu_1       0.9      0.715     6.39e- 8  2.67e-60     14.9 
19 mu_0       0.1      1.28      1.36e-27  1.14e-84    102.  
20 mu_0       0.2      1.52      1.74e-14  1.98e-57     36.2 
21 mu_0       0.3      0.897     5.10e- 8  1.40e-41     20.2 
22 mu_0       0.4      0.855     1.96e- 4  2.07e-30     20.3 
23 mu_0       0.5      0.746     2.21e- 2  7.88e-22      6.61
24 mu_0       0.6      1.18      9.68e- 2  4.13e-16      9.06
25 mu_0       0.7      1.37      2.12e- 1  1.49e-24     12.1 
26 mu_0       0.8      1.32      6.41e- 2  6.90e-37     10.5 
27 mu_0       0.9      0.907     2.66e- 7  1.50e-58     11.3 
[1] "Total run time was 457.24 seconds"
