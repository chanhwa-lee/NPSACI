
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7455"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71 
  2   1   1   2   1   2   3   2   2   2   2   6   1   3   1   2   3   5   4   3 
 72  73  74  75  79  80  81  82  83  84  86  87  89  91  92  93  94  95  96  97 
  5   1   2   3   5   3   1   3   2   1   1   3   2   2   3   2   1   1   1   1 
 98  99 100 
  2   4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02804 0.34092 0.61049 1.00000 9.00000 
[1] "event indicator table: "

   0    1 
4482 2973 
[1] "treatment indicator table: "

   0    1 
2645 4810 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3701
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3754
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 350.412 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.325 0.0472
 2 mu         0.1   0.2 0.374 0.0611
 3 mu         0.1   0.3 0.467 0.0837
 4 mu         0.1   0.4 0.498 0.0687
 5 mu         0.1   0.5 0.509 0.0665
 6 mu         0.2   0.1 0.335 0.0218
 7 mu         0.2   0.2 0.387 0.0331
 8 mu         0.2   0.3 0.476 0.0543
 9 mu         0.2   0.4 0.510 0.0322
10 mu         0.2   0.5 0.527 0.0302
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.866        0.275 0.000000484      5.37
 2 mu         0.2      0.933        0.899 0.0353           2.00
 3 mu         0.3      0.992        0.969 0.363            1.88
 4 mu         0.4      0.978        0.954 0.533            1.47
 5 mu         0.5      1.00         0.998 0.521            1.55
 6 mu         0.6      1.01         0.991 0.654            1.71
 7 mu         0.7      0.996        0.994 0.552            1.44
 8 mu         0.8      1.00         1.01  0.664            1.38
 9 mu         0.9      1.01         0.967 0.236            2.25
10 mu_1       0.1      0.896        0.409 0.00000144       4.94
11 mu_1       0.2      0.943        0.903 0.0531           1.90
12 mu_1       0.3      0.991        0.976 0.361            1.82
13 mu_1       0.4      0.980        0.958 0.548            1.45
14 mu_1       0.5      1.00         1.01  0.526            1.56
15 mu_1       0.6      1.01         1.00  0.663            1.74
16 mu_1       0.7      0.996        0.996 0.551            1.44
17 mu_1       0.8      1.00         1.00  0.655            1.38
18 mu_1       0.9      1.01         0.964 0.228            2.26
19 mu_0       0.1      0.862        0.261 0.000000379      5.41
20 mu_0       0.2      0.931        0.900 0.0309           2.02
21 mu_0       0.3      0.992        0.976 0.364            1.90
22 mu_0       0.4      0.977        0.965 0.517            1.48
23 mu_0       0.5      1.00         0.995 0.515            1.54
24 mu_0       0.6      1.01         0.987 0.641            1.67
25 mu_0       0.7      0.997        0.998 0.554            1.42
26 mu_0       0.8      1.00         1.01  0.657            1.35
27 mu_0       0.9      1.01         0.983 0.306            2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0280     2.68e-30  2.15e-84      2.72
 2 mu         0.2     0.445      4.70e-17  2.11e-57     21.4 
 3 mu         0.3     0.961      8.29e-10  1.14e-41     16.5 
 4 mu         0.4     1.18       3.23e- 5  1.47e-30     18.0 
 5 mu         0.5     0.731      1.51e- 2  5.37e-22     14.2 
 6 mu         0.6     0.852      1.11e- 1  4.60e-15      8.80
 7 mu         0.7     1.39       2.83e- 1  1.87e-17     15.4 
 8 mu         0.8     1.16       8.66e- 2  4.32e-27      9.14
 9 mu         0.9     1.38       6.56e- 6  3.47e-44     16.4 
10 mu_1       0.1     0.0511     2.02e-29  2.11e-83      4.92
11 mu_1       0.2     0.485      1.60e-16  1.03e-56     24.1 
12 mu_1       0.3     1.03       1.89e- 9  3.71e-41     13.4 
13 mu_1       0.4     1.13       5.38e- 5  3.59e-30     18.1 
14 mu_1       0.5     0.733      1.67e- 2  1.05e-21     14.5 
15 mu_1       0.6     0.868      1.40e- 1  7.50e-15      9.39
16 mu_1       0.7     1.40       3.39e- 1  4.82e-18     16.0 
17 mu_1       0.8     1.16       8.99e- 2  9.76e-28      9.20
18 mu_1       0.9     1.38       4.83e- 6  6.96e-45     16.8 
19 mu_0       0.1     0.0255     7.42e-31  5.20e-86      2.48
20 mu_0       0.2     0.435      1.86e-17  5.73e-59     21.9 
21 mu_0       0.3     0.929      3.76e-10  3.53e-43     17.8 
22 mu_0       0.4     1.21       1.79e- 5  5.32e-32     17.9 
23 mu_0       0.5     0.730      9.37e- 3  2.34e-23     13.8 
24 mu_0       0.6     0.827      7.57e- 2  2.50e-16      7.92
25 mu_0       0.7     1.37       1.81e- 1  5.10e-17     14.0 
26 mu_0       0.8     1.15       1.04e- 1  1.77e-26      8.89
27 mu_0       0.9     1.40       2.22e- 5  2.84e-43     18.8 
[1] "Total run time was 353.899 seconds"
