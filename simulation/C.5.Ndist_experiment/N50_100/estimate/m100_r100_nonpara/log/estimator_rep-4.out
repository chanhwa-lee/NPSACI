
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7379"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  59  61  62  63  64  65  66  67  68  69  71  72  73  74 
  2   2   5   3   1   3   4   2   1   3   4   1   5   3   2   4   3   3   1   5 
 75  76  77  79  80  81  82  83  84  85  86  87  88  90  91  92  93  94  95  97 
  2   1   2   1   2   1   2   1   1   1   3   3   3   1   2   3   2   4   2   1 
 98  99 100 
  2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04102 0.37409 0.62309 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4446 2933 
[1] "treatment indicator table: "

   0    1 
2502 4877 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3617
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3762
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 420.188 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.451 0.140 
 2 mu         0.1   0.2 0.501 0.167 
 3 mu         0.1   0.3 0.558 0.189 
 4 mu         0.1   0.4 0.606 0.195 
 5 mu         0.1   0.5 0.621 0.211 
 6 mu         0.2   0.1 0.408 0.0986
 7 mu         0.2   0.2 0.434 0.0860
 8 mu         0.2   0.3 0.483 0.0893
 9 mu         0.2   0.4 0.527 0.0756
10 mu         0.2   0.5 0.533 0.0731
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.11       0.00840  4.47e-11     29.5 
 2 mu         0.2      0.998      0.721    3.25e- 4      7.46
 3 mu         0.3      0.914      0.910    1.21e- 1      2.26
 4 mu         0.4      0.979      0.934    3.66e- 1      1.85
 5 mu         0.5      0.986      0.962    5.81e- 1      1.48
 6 mu         0.6      1.00       0.991    6.21e- 1      1.41
 7 mu         0.7      1.03       1.02     6.52e- 1      1.48
 8 mu         0.8      1.01       1.01     5.62e- 1      1.62
 9 mu         0.9      1.02       0.980    2.45e- 1      2.29
10 mu_1       0.1      1.12       0.0200   1.63e-10     25.7 
11 mu_1       0.2      0.977      0.750    6.04e- 4      6.68
12 mu_1       0.3      0.913      0.904    1.54e- 1      2.16
13 mu_1       0.4      0.985      0.938    3.99e- 1      1.79
14 mu_1       0.5      0.985      0.967    5.65e- 1      1.47
15 mu_1       0.6      1.00       0.994    6.27e- 1      1.41
16 mu_1       0.7      1.02       1.03     6.35e- 1      1.50
17 mu_1       0.8      1.01       1.01     5.48e- 1      1.65
18 mu_1       0.9      1.02       0.972    2.31e- 1      2.30
19 mu_0       0.1      1.11       0.00707  3.16e-11     29.9 
20 mu_0       0.2      1.00       0.711    2.56e- 4      7.66
21 mu_0       0.3      0.914      0.901    1.08e- 1      2.30
22 mu_0       0.4      0.975      0.920    3.44e- 1      1.89
23 mu_0       0.5      0.988      0.964    5.98e- 1      1.49
24 mu_0       0.6      0.997      0.997    5.88e- 1      1.42
25 mu_0       0.7      1.03       1.03     6.40e- 1      1.50
26 mu_0       0.8      1.01       1.01     6.17e- 1      1.53
27 mu_0       0.9      1.03       0.990    2.79e- 1      2.40
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.507     7.81e-29  4.61e-71     31.1 
 2 mu         0.2      1.82      3.02e-16  5.50e-47     96.7 
 3 mu         0.3      0.782     1.73e- 9  4.53e-33     33.3 
 4 mu         0.4      0.525     4.28e- 5  2.37e-23      8.88
 5 mu         0.5      1.20      2.68e- 2  5.61e-16     31.1 
 6 mu         0.6      1.37      3.78e- 1  2.23e-11     15.8 
 7 mu         0.7      1.48      5.65e- 1  3.39e-18     11.8 
 8 mu         0.8      1.43      1.93e- 1  3.05e-28      9.57
 9 mu         0.9      5.10      6.38e- 6  5.44e-46    340.  
10 mu_1       0.1      0.864     5.25e-28  4.29e-70     51.2 
11 mu_1       0.2      1.60      1.08e-15  2.56e-46     79.4 
12 mu_1       0.3      0.742     3.97e- 9  1.40e-32     32.6 
13 mu_1       0.4      0.536     7.31e- 5  5.51e-23      7.44
14 mu_1       0.5      1.24      3.62e- 2  1.04e-15     31.5 
15 mu_1       0.6      1.37      3.53e- 1  6.10e-12     14.6 
16 mu_1       0.7      1.49      6.12e- 1  7.96e-19     11.9 
17 mu_1       0.8      1.44      1.67e- 1  6.27e-29      9.80
18 mu_1       0.9      5.13      4.98e- 6  9.93e-47    345.  
19 mu_0       0.1      0.467     2.85e-29  3.53e-72     28.9 
20 mu_0       0.2      1.88      1.06e-16  4.74e-48    101.  
21 mu_0       0.3      0.799     7.22e-10  4.46e-34     33.6 
22 mu_0       0.4      0.517     2.35e- 5  2.72e-24     10.0 
23 mu_0       0.5      1.15      1.71e- 2  7.73e-17     30.7 
24 mu_0       0.6      1.37      3.71e- 1  4.65e-11     17.7 
25 mu_0       0.7      1.48      4.35e- 1  9.44e-18     11.5 
26 mu_0       0.8      1.37      2.93e- 1  1.27e-27      8.64
27 mu_0       0.9      4.86      1.89e- 5  4.54e-45    295.  
[1] "Total run time was 424.583 seconds"
