
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7624"
[1] "cluster size dist'n: "

 51  52  53  54  56  58  59  60  61  63  64  66  67  68  69  70  72  74  75  76 
  2   3   3   1   1   2   3   2   5   1   5   4   5   2   1   1   3   1   2   2 
 77  78  79  80  81  82  84  86  87  88  89  90  91  92  93  94  95  96  97  98 
  1   4   3   1   1   4   2   3   1   5   2   2   1   3   2   2   2   4   1   2 
 99 100 
  4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04186 0.35473 0.60913 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4615 3009 
[1] "treatment indicator table: "

   0    1 
2611 5013 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3856
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3768
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 409.136 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.424 0.102 
 2 mu         0.1   0.2 0.512 0.122 
 3 mu         0.1   0.3 0.567 0.129 
 4 mu         0.1   0.4 0.614 0.145 
 5 mu         0.1   0.5 0.641 0.156 
 6 mu         0.2   0.1 0.351 0.0635
 7 mu         0.2   0.2 0.426 0.0673
 8 mu         0.2   0.3 0.469 0.0611
 9 mu         0.2   0.4 0.512 0.0697
10 mu         0.2   0.5 0.533 0.0726
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.06        0.0210 0.0000000118      11.8 
 2 mu         0.2      0.897       0.726  0.0101             4.72
 3 mu         0.3      0.997       0.976  0.0845             2.93
 4 mu         0.4      0.953       0.921  0.455              1.78
 5 mu         0.5      0.964       0.953  0.434              1.61
 6 mu         0.6      0.998       0.978  0.550              1.91
 7 mu         0.7      1.01        0.987  0.665              1.72
 8 mu         0.8      0.996       0.982  0.513              1.76
 9 mu         0.9      0.997       0.960  0.344              1.92
10 mu_1       0.1      1.07        0.0419 0.0000000378      13.4 
11 mu_1       0.2      0.906       0.739  0.0165             4.58
12 mu_1       0.3      1.00        0.943  0.0744             3.06
13 mu_1       0.4      0.951       0.917  0.471              1.78
14 mu_1       0.5      0.966       0.955  0.462              1.57
15 mu_1       0.6      0.999       0.971  0.552              1.93
16 mu_1       0.7      1.01        0.978  0.668              1.69
17 mu_1       0.8      0.996       0.988  0.515              1.75
18 mu_1       0.9      0.997       0.968  0.331              1.96
19 mu_0       0.1      1.06        0.0187 0.00000000893     11.6 
20 mu_0       0.2      0.895       0.707  0.00849            4.75
21 mu_0       0.3      0.995       0.971  0.0889             2.87
22 mu_0       0.4      0.954       0.918  0.433              1.78
23 mu_0       0.5      0.961       0.962  0.406              1.64
24 mu_0       0.6      0.997       0.970  0.546              1.88
25 mu_0       0.7      1.01        0.999  0.658              1.79
26 mu_0       0.8      0.996       0.984  0.505              1.82
27 mu_0       0.9      1.00        0.970  0.368              1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.345     1.81e-28  4.66e-72     33.5 
 2 mu         0.2      1.68      3.05e-15  6.24e-47    108.  
 3 mu         0.3      1.24      3.48e- 8  1.74e-32     74.2 
 4 mu         0.4      1.38      3.56e- 4  1.81e-22     74.1 
 5 mu         0.5      1.71      8.37e- 2  6.07e-15     56.9 
 6 mu         0.6      1.53      3.23e- 1  3.61e- 9     29.5 
 7 mu         0.7      0.927     2.60e- 1  2.60e-12      6.04
 8 mu         0.8      0.991     2.97e- 2  3.46e-20     13.3 
 9 mu         0.9      1.59      2.17e- 7  2.02e-34     20.0 
10 mu_1       0.1      0.602     1.25e-27  4.21e-71     58.0 
11 mu_1       0.2      1.62      1.08e-14  2.82e-46     93.7 
12 mu_1       0.3      1.26      7.19e- 8  5.25e-32     86.3 
13 mu_1       0.4      1.36      5.76e- 4  4.10e-22     64.6 
14 mu_1       0.5      1.74      1.08e- 1  1.10e-14     60.1 
15 mu_1       0.6      1.50      3.69e- 1  5.75e- 9     25.9 
16 mu_1       0.7      0.909     2.88e- 1  8.63e-13      6.22
17 mu_1       0.8      1.00      2.82e- 2  1.05e-20     13.6 
18 mu_1       0.9      1.59      1.56e- 7  5.45e-35     20.0 
19 mu_0       0.1      0.317     6.22e-29  4.95e-73     30.8 
20 mu_0       0.2      1.70      1.12e-15  7.47e-48    112.  
21 mu_0       0.3      1.23      1.80e- 8  2.38e-33     69.0 
22 mu_0       0.4      1.40      2.09e- 4  2.89e-23     80.4 
23 mu_0       0.5      1.67      5.91e- 2  1.16e-15     53.8 
24 mu_0       0.6      1.58      2.77e- 1  4.11e-10     34.8 
25 mu_0       0.7      0.968     2.46e- 1  6.58e-12      5.61
26 mu_0       0.8      0.945     4.42e- 2  1.31e-19     11.9 
27 mu_0       0.9      1.59      7.74e- 7  1.53e-33     20.2 
[1] "Total run time was 412.252 seconds"
