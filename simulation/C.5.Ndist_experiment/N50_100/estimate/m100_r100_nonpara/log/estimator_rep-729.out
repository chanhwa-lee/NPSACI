
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7440"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  69  70  71 
  1   2   2   1   2   5   2   2   1   3   1   1   4   4   2   1   4   1   3   3 
 73  74  75  76  77  79  80  81  83  84  86  87  88  89  90  91  93  94  95  96 
  4   1   2   2   3   7   2   3   3   1   2   3   1   1   1   2   2   1   2   3 
 97  98 100 
  2   5   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03694 0.35286 0.62479 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4383 3057 
[1] "treatment indicator table: "

   0    1 
2795 4645 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3688
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3752
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.995 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.417 0.0857
 2 mu         0.1   0.2 0.532 0.116 
 3 mu         0.1   0.3 0.565 0.100 
 4 mu         0.1   0.4 0.630 0.0774
 5 mu         0.1   0.5 0.694 0.0850
 6 mu         0.2   0.1 0.393 0.0642
 7 mu         0.2   0.2 0.459 0.0571
 8 mu         0.2   0.3 0.478 0.0360
 9 mu         0.2   0.4 0.500 0.0286
10 mu         0.2   0.5 0.533 0.0292
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.14         0.783 0.0000456      5.83
 2 mu         0.2      0.966        0.909 0.119          2.82
 3 mu         0.3      1.00         1.03  0.266          2.04
 4 mu         0.4      0.992        0.927 0.490          1.57
 5 mu         0.5      0.956        0.944 0.557          1.40
 6 mu         0.6      0.999        1.01  0.577          1.39
 7 mu         0.7      1.03         1.02  0.645          1.38
 8 mu         0.8      1.02         0.983 0.578          1.62
 9 mu         0.9      0.914        0.940 0.107          1.82
10 mu_1       0.1      1.08         0.808 0.000116       4.55
11 mu_1       0.2      0.958        0.892 0.127          2.51
12 mu_1       0.3      1.00         1.02  0.284          2.04
13 mu_1       0.4      0.986        0.924 0.477          1.57
14 mu_1       0.5      0.957        0.940 0.572          1.40
15 mu_1       0.6      1.00         1.01  0.579          1.38
16 mu_1       0.7      1.03         1.02  0.648          1.38
17 mu_1       0.8      1.01         0.976 0.569          1.61
18 mu_1       0.9      0.914        0.938 0.103          1.82
19 mu_0       0.1      1.15         0.761 0.0000378      5.98
20 mu_0       0.2      0.968        0.918 0.110          2.90
21 mu_0       0.3      0.999        1.03  0.259          2.05
22 mu_0       0.4      0.995        0.934 0.498          1.58
23 mu_0       0.5      0.955        0.944 0.541          1.40
24 mu_0       0.6      0.997        1.00  0.573          1.41
25 mu_0       0.7      1.02         1.00  0.636          1.40
26 mu_0       0.8      1.03         0.989 0.616          1.63
27 mu_0       0.9      0.914        0.898 0.139          1.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.81      1.38e-25  1.93e-69    108.  
 2 mu         0.2      0.814     8.62e-14  3.23e-45     39.9 
 3 mu         0.3      0.741     8.44e- 8  2.67e-31     22.3 
 4 mu         0.4      0.918     1.77e- 4  1.17e-21     13.2 
 5 mu         0.5      0.904     4.04e- 2  2.01e-14      7.73
 6 mu         0.6      1.02      1.11e- 1  1.13e-20      7.75
 7 mu         0.7      1.38      1.95e- 1  1.48e-30     24.4 
 8 mu         0.8      1.45      5.20e- 2  6.94e-45     23.4 
 9 mu         0.9      1.06      8.60e- 7  6.56e-70     14.5 
10 mu_1       0.1      1.68      9.01e-25  1.74e-68     99.3 
11 mu_1       0.2      0.902     2.97e-13  1.46e-44     46.6 
12 mu_1       0.3      0.700     1.89e- 7  8.03e-31     17.4 
13 mu_1       0.4      0.939     3.11e- 4  2.64e-21     14.3 
14 mu_1       0.5      0.903     5.50e- 2  3.62e-14      7.85
15 mu_1       0.6      1.03      8.97e- 2  2.17e-21      7.79
16 mu_1       0.7      1.39      1.65e- 1  2.43e-31     25.3 
17 mu_1       0.8      1.45      4.71e- 2  9.94e-46     23.8 
18 mu_1       0.9      1.05      6.38e- 7  8.35e-71     14.8 
19 mu_0       0.1      1.83      5.33e-26  2.12e-70    109.  
20 mu_0       0.2      0.792     3.36e-14  4.00e-46     38.2 
21 mu_0       0.3      0.759     3.94e- 8  3.78e-32     24.4 
22 mu_0       0.4      0.904     8.75e- 5  1.93e-22     12.4 
23 mu_0       0.5      0.906     2.67e- 2  3.98e-15      8.72
24 mu_0       0.6      0.996     1.01e- 1  2.51e-20      7.69
25 mu_0       0.7      1.37      2.38e- 1  4.38e-30     22.2 
26 mu_0       0.8      1.46      4.04e- 2  3.07e-44     21.8 
27 mu_0       0.9      1.08      2.86e- 6  5.80e-69     13.1 
[1] "Total run time was 402.28 seconds"
