
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7668"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71 
  2   3   2   2   1   2   3   1   1   1   2   1   1   6   1   5   1   3   1   1 
 72  75  76  77  78  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
  3   1   2   4   2   2   1   3   6   2   1   2   2   2   1   1   6   2   2   3 
 96  97  98  99 100 
  2   1   2   1   6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04639 0.37548 0.64714 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4556 3112 
[1] "treatment indicator table: "

   0    1 
2846 4822 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3863
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3805
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 420.76 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.373 0.0568
 2 mu         0.1   0.2 0.431 0.0570
 3 mu         0.1   0.3 0.503 0.0700
 4 mu         0.1   0.4 0.535 0.0713
 5 mu         0.1   0.5 0.581 0.0784
 6 mu         0.2   0.1 0.339 0.0272
 7 mu         0.2   0.2 0.413 0.0281
 8 mu         0.2   0.3 0.478 0.0351
 9 mu         0.2   0.4 0.517 0.0350
10 mu         0.2   0.5 0.561 0.0413
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.871        0.466 0.0000501      6.94
 2 mu         0.2      0.934        0.852 0.107          2.43
 3 mu         0.3      0.985        0.960 0.236          2.27
 4 mu         0.4      0.994        0.952 0.379          1.86
 5 mu         0.5      1.03         1.02  0.603          1.67
 6 mu         0.6      1.00         0.976 0.583          1.87
 7 mu         0.7      0.999        0.971 0.606          1.60
 8 mu         0.8      0.976        0.939 0.503          1.86
 9 mu         0.9      0.962        0.923 0.429          1.79
10 mu_1       0.1      0.885        0.536 0.000125       6.88
11 mu_1       0.2      0.942        0.828 0.118          2.50
12 mu_1       0.3      0.992        0.941 0.265          2.30
13 mu_1       0.4      0.992        0.965 0.379          1.76
14 mu_1       0.5      1.04         1.03  0.591          1.73
15 mu_1       0.6      0.999        0.974 0.584          1.86
16 mu_1       0.7      0.999        0.972 0.615          1.59
17 mu_1       0.8      0.976        0.944 0.498          1.87
18 mu_1       0.9      0.961        0.921 0.434          1.83
19 mu_0       0.1      0.869        0.444 0.0000418      7.22
20 mu_0       0.2      0.932        0.857 0.104          2.41
21 mu_0       0.3      0.982        0.971 0.224          2.26
22 mu_0       0.4      0.995        0.954 0.379          1.93
23 mu_0       0.5      1.03         1.01  0.615          1.61
24 mu_0       0.6      1.01         0.979 0.581          1.88
25 mu_0       0.7      0.999        0.966 0.583          1.60
26 mu_0       0.8      0.975        0.972 0.521          1.84
27 mu_0       0.9      0.971        0.919 0.389          1.59
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.105      5.92e-30  1.42e-70      8.74
 2 mu         0.2     0.843      9.86e-17  2.67e-45     23.6 
 3 mu         0.3     2.10       9.08e-10  7.49e-31     63.2 
 4 mu         0.4     1.07       2.84e- 5  3.93e-21     17.1 
 5 mu         0.5     0.732      3.46e- 3  5.67e-15     16.9 
 6 mu         0.6     0.841      2.39e- 2  7.68e-13      9.20
 7 mu         0.7     1.18       1.06e- 1  5.36e-21      7.31
 8 mu         0.8     1.16       1.85e- 1  3.21e-33      7.75
 9 mu         0.9     1.23       1.08e- 5  4.47e-55     20.5 
10 mu_1       0.1     0.167      4.37e-29  1.24e-69     13.0 
11 mu_1       0.2     0.957      3.39e-16  1.17e-44     24.5 
12 mu_1       0.3     2.11       2.05e- 9  2.19e-30     66.0 
13 mu_1       0.4     0.992      4.86e- 5  9.41e-21     13.4 
14 mu_1       0.5     0.737      5.04e- 3  1.08e-14     17.7 
15 mu_1       0.6     0.854      2.32e- 2  2.67e-13      9.31
16 mu_1       0.7     1.19       1.08e- 1  1.59e-21      7.36
17 mu_1       0.8     1.17       1.65e- 1  8.35e-34      7.72
18 mu_1       0.9     1.22       8.52e- 6  1.04e-55     20.7 
19 mu_0       0.1     0.0981     1.73e-30  1.93e-71      8.26
20 mu_0       0.2     0.815      3.18e-17  4.09e-46     23.4 
21 mu_0       0.3     2.10       4.19e-10  1.31e-31     62.0 
22 mu_0       0.4     1.12       1.40e- 5  2.85e-22     19.6 
23 mu_0       0.5     0.727      2.00e- 3  4.93e-16     16.1 
24 mu_0       0.6     0.823      1.97e- 2  1.52e-12      9.04
25 mu_0       0.7     1.15       8.10e- 2  1.41e-20      7.70
26 mu_0       0.8     1.16       2.20e- 1  1.27e-32      7.86
27 mu_0       0.9     1.30       3.11e- 5  3.54e-54     18.6 
[1] "Total run time was 423.992 seconds"
