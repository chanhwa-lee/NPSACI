
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7321"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  68  69  70 
  1   2   4   2   2   2   3   1   3   6   1   1   1   6   2   3   2   2   5   3 
 73  74  76  77  78  79  80  82  83  84  86  87  88  89  90  91  93  94  95  96 
  1   2   4   1   1   1   1   1   3   3   4   3   2   2   4   1   3   1   2   2 
 97  98  99 100 
  2   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0205  0.2915  0.5648  0.9800  5.0000 
[1] "event indicator table: "

   0    1 
4374 2947 
[1] "treatment indicator table: "

   0    1 
2797 4524 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3612
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3709
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 386.428 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.491 0.108 
 2 mu         0.1   0.2 0.561 0.137 
 3 mu         0.1   0.3 0.639 0.146 
 4 mu         0.1   0.4 0.667 0.152 
 5 mu         0.1   0.5 0.712 0.185 
 6 mu         0.2   0.1 0.434 0.0451
 7 mu         0.2   0.2 0.520 0.0526
 8 mu         0.2   0.3 0.599 0.0557
 9 mu         0.2   0.4 0.616 0.0499
10 mu         0.2   0.5 0.649 0.0609
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.12         0.460 0.0000388     19.4 
 2 mu         0.2      1.05         0.938 0.112          3.02
 3 mu         0.3      1.05         1.06  0.345          2.05
 4 mu         0.4      1.06         1.02  0.352          2.20
 5 mu         0.5      1.04         1.03  0.555          1.79
 6 mu         0.6      1.01         0.989 0.613          1.68
 7 mu         0.7      0.978        0.961 0.643          1.74
 8 mu         0.8      0.979        0.987 0.390          1.77
 9 mu         0.9      0.971        0.939 0.265          2.18
10 mu_1       0.1      1.13         0.594 0.0000945     17.6 
11 mu_1       0.2      1.05         0.961 0.145          2.90
12 mu_1       0.3      1.05         1.05  0.358          1.98
13 mu_1       0.4      1.06         1.03  0.352          2.27
14 mu_1       0.5      1.04         1.03  0.556          1.71
15 mu_1       0.6      1.00         0.987 0.626          1.69
16 mu_1       0.7      0.977        0.965 0.641          1.73
17 mu_1       0.8      0.978        0.987 0.379          1.78
18 mu_1       0.9      0.970        0.933 0.267          2.17
19 mu_0       0.1      1.12         0.446 0.0000326     19.5 
20 mu_0       0.2      1.04         0.952 0.103          3.05
21 mu_0       0.3      1.05         1.08  0.339          2.08
22 mu_0       0.4      1.06         1.02  0.351          2.15
23 mu_0       0.5      1.04         1.02  0.555          1.87
24 mu_0       0.6      1.01         0.996 0.593          1.66
25 mu_0       0.7      0.978        0.954 0.649          1.74
26 mu_0       0.8      0.980        0.987 0.432          1.73
27 mu_0       0.9      0.982        0.943 0.245          2.27
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.539     1.89e-25  2.81e-80      52.7
 2 mu         0.2      1.81      1.55e-13  1.72e-54      76.1
 3 mu         0.3      1.95      1.97e- 7  1.83e-39      48.0
 4 mu         0.4      2.31      1.77e- 3  7.47e-29      85.5
 5 mu         0.5      1.69      8.24e- 2  1.12e-20      27.7
 6 mu         0.6      1.71      1.55e- 1  4.62e-14      20.2
 7 mu         0.7      1.42      2.13e- 1  3.48e-21      39.5
 8 mu         0.8      1.20      1.30e- 2  1.06e-33      12.2
 9 mu         0.9      2.13      4.21e- 8  4.15e-56     102. 
10 mu_1       0.1      0.756     1.19e-24  2.74e-79      73.0
11 mu_1       0.2      1.97      4.88e-13  8.39e-54      89.2
12 mu_1       0.3      1.95      4.32e- 7  5.96e-39      44.5
13 mu_1       0.4      2.27      2.28e- 3  1.83e-28      81.4
14 mu_1       0.5      1.66      9.44e- 2  2.19e-20      27.4
15 mu_1       0.6      1.73      1.61e- 1  7.53e-14      22.6
16 mu_1       0.7      1.40      2.24e- 1  1.05e-21      37.9
17 mu_1       0.8      1.20      9.96e- 3  2.80e-34      12.6
18 mu_1       0.9      2.14      2.78e- 8  9.78e-57     101. 
19 mu_0       0.1      0.514     7.73e-26  7.09e-82      50.5
20 mu_0       0.2      1.77      7.23e-14  4.88e-56      72.9
21 mu_0       0.3      1.95      9.65e- 8  5.94e-41      52.5
22 mu_0       0.4      2.33      1.16e- 3  2.83e-30      88.2
23 mu_0       0.5      1.73      5.65e- 2  5.09e-22      28.1
24 mu_0       0.6      1.69      1.53e- 1  2.63e-15      16.6
25 mu_0       0.7      1.48      1.73e- 1  9.13e-21      43.4
26 mu_0       0.8      1.18      2.00e- 2  4.16e-33      10.8
27 mu_0       0.9      2.06      1.54e- 7  3.27e-55     110. 
[1] "Total run time was 390.3 seconds"
