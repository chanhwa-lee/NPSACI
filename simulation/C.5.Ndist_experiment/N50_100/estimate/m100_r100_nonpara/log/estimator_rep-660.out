
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7460"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  65  66  68  69  70  71 
  1   1   1   3   2   1   4   3   3   2   5   2   2   1   1   1   1   4   3   3 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  90  92  93  94 
  2   5   3   2   1   2   3   1   3   1   2   1   1   2   4   2   3   3   1   2 
 95  96  97  98  99 100 
  3   1   1   1   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04016 0.36486 0.62115 1.00000 6.73576 
[1] "event indicator table: "

   0    1 
4452 3008 
[1] "treatment indicator table: "

   0    1 
2842 4618 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3691
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3769
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 360.332 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.367 0.0648
 2 mu         0.1   0.2 0.506 0.0727
 3 mu         0.1   0.3 0.549 0.0697
 4 mu         0.1   0.4 0.569 0.0582
 5 mu         0.1   0.5 0.567 0.0544
 6 mu         0.2   0.1 0.349 0.0415
 7 mu         0.2   0.2 0.447 0.0456
 8 mu         0.2   0.3 0.489 0.0445
 9 mu         0.2   0.4 0.510 0.0387
10 mu         0.2   0.5 0.547 0.0391
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.968        0.910   0.00885      2.97
 2 mu         0.2      0.996        0.956   0.210        2.25
 3 mu         0.3      0.999        0.962   0.305        1.60
 4 mu         0.4      1.00         0.980   0.538        1.62
 5 mu         0.5      0.988        0.968   0.557        1.59
 6 mu         0.6      0.984        0.984   0.611        1.47
 7 mu         0.7      1.01         0.996   0.635        1.63
 8 mu         0.8      0.992        0.970   0.549        1.59
 9 mu         0.9      1.02         0.995   0.382        1.88
10 mu_1       0.1      0.959        0.913   0.0167       2.15
11 mu_1       0.2      0.994        0.954   0.253        2.16
12 mu_1       0.3      1.00         0.960   0.321        1.61
13 mu_1       0.4      1.00         0.972   0.535        1.60
14 mu_1       0.5      0.987        0.961   0.534        1.58
15 mu_1       0.6      0.985        0.984   0.587        1.45
16 mu_1       0.7      1.02         0.993   0.622        1.63
17 mu_1       0.8      0.991        0.972   0.535        1.59
18 mu_1       0.9      1.02         1.00    0.384        1.89
19 mu_0       0.1      0.969        0.929   0.00798      3.06
20 mu_0       0.2      0.997        0.948   0.200        2.28
21 mu_0       0.3      0.999        0.963   0.298        1.65
22 mu_0       0.4      1.00         0.989   0.540        1.66
23 mu_0       0.5      0.989        0.976   0.581        1.60
24 mu_0       0.6      0.982        0.979   0.648        1.51
25 mu_0       0.7      1.01         1.00    0.649        1.64
26 mu_0       0.8      0.995        0.990   0.605        1.59
27 mu_0       0.9      1.03         0.994   0.360        1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.441     2.57e-26  1.87e-83     41.0 
 2 mu         0.2      0.421     3.42e-14  1.82e-55     10.6 
 3 mu         0.3      1.16      1.87e- 7  2.92e-39     19.2 
 4 mu         0.4      0.901     1.72e- 3  3.90e-28      8.28
 5 mu         0.5      1.02      4.23e- 2  1.03e-19      9.68
 6 mu         0.6      1.21      1.51e- 1  1.61e-15     16.1 
 7 mu         0.7      1.09      3.88e- 2  9.33e-22      7.35
 8 mu         0.8      1.02      4.23e- 3  1.27e-30     10.6 
 9 mu         0.9      1.30      2.19e- 8  3.40e-51     17.6 
10 mu_1       0.1      0.208     1.83e-25  1.76e-82     15.5 
11 mu_1       0.2      0.503     1.07e-13  8.58e-55     10.7 
12 mu_1       0.3      1.18      3.77e- 7  9.16e-39     19.1 
13 mu_1       0.4      0.885     2.67e- 3  9.25e-28      9.39
14 mu_1       0.5      1.03      4.01e- 2  1.96e-19      8.78
15 mu_1       0.6      1.22      1.61e- 1  1.01e-16     16.1 
16 mu_1       0.7      1.08      3.12e- 2  5.03e-23      7.16
17 mu_1       0.8      1.02      4.05e- 3  6.01e-32     10.5 
18 mu_1       0.9      1.31      1.51e- 8  9.45e-52     18.3 
19 mu_0       0.1      0.466     8.50e-27  0            43.8 
20 mu_0       0.2      0.400     1.61e-14  0            11.0 
21 mu_0       0.3      1.16      1.06e- 7  0            19.2 
22 mu_0       0.4      0.912     1.07e- 3  0             8.44
23 mu_0       0.5      1.02      3.10e- 2  0            10.6 
24 mu_0       0.6      1.19      9.67e- 2  0            16.1 
25 mu_0       0.7      1.11      5.00e- 2  0             7.82
26 mu_0       0.8      1.02      4.86e- 3  0            10.9 
27 mu_0       0.9      1.21      6.70e- 8  0            13.1 
[1] "Total run time was 363.394 seconds"
