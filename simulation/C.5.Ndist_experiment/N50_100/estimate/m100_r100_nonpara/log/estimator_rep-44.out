
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7410"
[1] "cluster size dist'n: "

 52  53  54  55  56  57  58  59  61  62  63  64  65  67  68  69  70  71  72  73 
  2   2   6   1   1   3   1   3   1   2   2   6   3   4   3   3   1   3   5   2 
 74  75  76  78  79  80  82  83  84  86  88  89  90  91  92  94  95  97  98  99 
  4   2   2   2   3   2   2   3   1   1   4   1   1   2   2   2   1   1   4   2 
100 
  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0221  0.3128  0.5655  0.9752  5.0000 
[1] "event indicator table: "

   0    1 
4354 3056 
[1] "treatment indicator table: "

   0    1 
2890 4520 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3627
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3783
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 499.464 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.488 0.0661
 2 mu         0.1   0.2 0.561 0.0727
 3 mu         0.1   0.3 0.596 0.0762
 4 mu         0.1   0.4 0.669 0.0838
 5 mu         0.1   0.5 0.722 0.0893
 6 mu         0.2   0.1 0.382 0.0305
 7 mu         0.2   0.2 0.464 0.0340
 8 mu         0.2   0.3 0.492 0.0321
 9 mu         0.2   0.4 0.548 0.0340
10 mu         0.2   0.5 0.599 0.0357
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.09         0.916 0.0000653      9.73
 2 mu         0.2      0.982        0.930 0.118          3.22
 3 mu         0.3      1.01         1.00  0.467          1.85
 4 mu         0.4      1.00         0.958 0.482          1.70
 5 mu         0.5      1.01         0.984 0.571          1.56
 6 mu         0.6      1.02         1.03  0.613          1.63
 7 mu         0.7      0.998        0.971 0.631          1.69
 8 mu         0.8      0.974        0.971 0.549          1.45
 9 mu         0.9      1.00         0.982 0.304          1.74
10 mu_1       0.1      1.04         0.903 0.000174       6.95
11 mu_1       0.2      0.990        0.954 0.168          3.34
12 mu_1       0.3      1.01         1.01  0.501          1.74
13 mu_1       0.4      0.998        0.945 0.465          1.78
14 mu_1       0.5      1.01         0.992 0.593          1.61
15 mu_1       0.6      1.02         1.02  0.620          1.63
16 mu_1       0.7      0.998        0.972 0.636          1.67
17 mu_1       0.8      0.974        0.963 0.546          1.44
18 mu_1       0.9      1.00         0.972 0.292          1.75
19 mu_0       0.1      1.10         0.888 0.0000532     10.0 
20 mu_0       0.2      0.980        0.919 0.105          3.19
21 mu_0       0.3      1.01         0.993 0.452          1.89
22 mu_0       0.4      1.00         0.966 0.493          1.64
23 mu_0       0.5      1.00         0.975 0.549          1.56
24 mu_0       0.6      1.02         1.02  0.601          1.68
25 mu_0       0.7      0.999        0.974 0.621          1.74
26 mu_0       0.8      0.975        0.962 0.549          1.47
27 mu_0       0.9      1.00         0.979 0.316          1.73
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.65      8.89e-25  7.22e-87    101.  
 2 mu         0.2      0.611     1.93e-13  1.79e-58     22.3 
 3 mu         0.3      1.45      1.88e- 7  5.60e-42     40.3 
 4 mu         0.4      1.46      1.50e- 3  2.24e-30     25.1 
 5 mu         0.5      0.874     5.60e- 2  1.74e-21      9.48
 6 mu         0.6      1.07      7.39e- 2  2.70e-17      8.34
 7 mu         0.7      1.28      7.62e- 2  3.86e-25     13.0 
 8 mu         0.8      1.47      4.52e- 3  2.05e-36     59.7 
 9 mu         0.9      0.976     2.31e- 8  5.64e-56     15.2 
10 mu_1       0.1      1.71      5.91e-24  6.93e-86     84.5 
11 mu_1       0.2      0.505     6.25e-13  8.57e-58     14.5 
12 mu_1       0.3      1.58      4.05e- 7  1.79e-41     42.7 
13 mu_1       0.4      1.41      1.54e- 3  5.37e-30     25.6 
14 mu_1       0.5      0.857     7.43e- 2  3.33e-21      9.61
15 mu_1       0.6      1.10      9.24e- 2  3.75e-18      8.78
16 mu_1       0.7      1.27      6.13e- 2  4.60e-26     12.9 
17 mu_1       0.8      1.47      3.48e- 3  2.14e-37     60.1 
18 mu_1       0.9      0.972     1.61e- 8  5.23e-57     15.8 
19 mu_0       0.1      1.65      3.30e-25  3.24e-88    103.  
20 mu_0       0.2      0.637     8.51e-14  9.02e-60     24.3 
21 mu_0       0.3      1.40      9.59e- 8  3.23e-43     39.2 
22 mu_0       0.4      1.50      1.14e- 3  1.51e-31     24.8 
23 mu_0       0.5      0.892     4.79e- 2  1.40e-22      9.35
24 mu_0       0.6      1.01      5.91e- 2  6.18e-17      7.68
25 mu_0       0.7      1.31      7.31e- 2  1.18e-24     13.3 
26 mu_0       0.8      1.45      8.66e- 3  9.41e-36     57.9 
27 mu_0       0.9      1.01      8.60e- 8  5.17e-55     10.6 
[1] "Total run time was 503.136 seconds"
