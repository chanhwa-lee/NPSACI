
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7589"
[1] "cluster size dist'n: "

 50  51  52  55  56  57  58  59  60  61  62  63  64  65  66  67  68  70  71  72 
  1   1   2   2   1   4   4   2   3   3   3   4   1   1   2   1   1   1   1   2 
 73  74  75  77  78  79  80  81  82  83  84  85  86  87  88  89  91  92  93  94 
  4   2   1   2   4   2   3   5   2   1   2   2   2   3   2   2   3   1   3   2 
 95  96  97  98  99 100 
  3   1   2   2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03665 0.37473 0.62808 1.00000 6.55274 
[1] "event indicator table: "

   0    1 
4474 3115 
[1] "treatment indicator table: "

   0    1 
2895 4694 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3707
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3882
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 363.726 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.325 0.0731
 2 mu         0.1   0.2 0.369 0.0703
 3 mu         0.1   0.3 0.425 0.0827
 4 mu         0.1   0.4 0.428 0.0749
 5 mu         0.1   0.5 0.474 0.0872
 6 mu         0.2   0.1 0.340 0.0391
 7 mu         0.2   0.2 0.421 0.0384
 8 mu         0.2   0.3 0.489 0.0479
 9 mu         0.2   0.4 0.521 0.0427
10 mu         0.2   0.5 0.550 0.0464
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.700        0.285  0.000163      6.52
 2 mu         0.2      0.950        0.822  0.210         2.65
 3 mu         0.3      0.961        0.903  0.234         2.14
 4 mu         0.4      0.984        0.982  0.503         1.69
 5 mu         0.5      1.00         0.988  0.648         1.65
 6 mu         0.6      1.02         1.03   0.619         1.39
 7 mu         0.7      1.01         0.994  0.590         1.58
 8 mu         0.8      1.00         0.972  0.593         1.67
 9 mu         0.9      0.994        0.945  0.121         2.31
10 mu_1       0.1      0.756        0.436  0.000389      6.88
11 mu_1       0.2      0.945        0.813  0.213         2.57
12 mu_1       0.3      0.966        0.919  0.271         2.10
13 mu_1       0.4      0.983        0.983  0.515         1.64
14 mu_1       0.5      1.00         0.985  0.658         1.66
15 mu_1       0.6      1.02         1.02   0.613         1.39
16 mu_1       0.7      1.01         0.986  0.589         1.60
17 mu_1       0.8      1.00         0.969  0.590         1.67
18 mu_1       0.9      0.993        0.943  0.125         2.35
19 mu_0       0.1      0.694        0.272  0.000138      6.66
20 mu_0       0.2      0.951        0.822  0.194         2.67
21 mu_0       0.3      0.958        0.891  0.217         2.16
22 mu_0       0.4      0.984        0.981  0.495         1.72
23 mu_0       0.5      0.999        0.987  0.639         1.63
24 mu_0       0.6      1.02         1.02   0.628         1.39
25 mu_0       0.7      1.01         0.991  0.592         1.54
26 mu_0       0.8      0.999        0.977  0.597         1.69
27 mu_0       0.9      0.997        0.933  0.0864        2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0292     3.50e-27  1.17e-72      1.85
 2 mu         0.2     0.837      2.04e-14  1.76e-47     21.3 
 3 mu         0.3     1.00       4.08e- 8  5.61e-33     13.1 
 4 mu         0.4     0.588      8.16e- 4  6.81e-23      8.77
 5 mu         0.5     0.576      3.62e- 2  2.73e-15      4.85
 6 mu         0.6     1.27       2.63e- 1  2.95e-12     11.5 
 7 mu         0.7     1.26       4.43e- 1  1.11e-19      7.39
 8 mu         0.8     1.30       5.53e- 3  9.97e-31     16.4 
 9 mu         0.9     1.29       1.79e- 8  1.81e-51     34.9 
10 mu_1       0.1     0.0580     2.41e-26  1.07e-71      3.70
11 mu_1       0.2     0.945      6.60e-14  8.03e-47     21.3 
12 mu_1       0.3     0.952      8.55e- 8  1.71e-32     11.8 
13 mu_1       0.4     0.565      1.27e- 3  1.56e-22      8.94
14 mu_1       0.5     0.603      4.13e- 2  5.00e-15      4.61
15 mu_1       0.6     1.29       2.64e- 1  9.36e-13     11.8 
16 mu_1       0.7     1.27       3.90e- 1  3.02e-20      7.60
17 mu_1       0.8     1.28       4.35e- 3  2.37e-31     16.8 
18 mu_1       0.9     1.29       1.18e- 8  4.78e-52     35.5 
19 mu_0       0.1     0.0260     1.23e-27  1.11e-73      1.64
20 mu_0       0.2     0.810      8.86e-15  1.89e-48     21.3 
21 mu_0       0.3     1.02       2.16e- 8  6.89e-34     13.6 
22 mu_0       0.4     0.603      4.94e- 4  9.76e-24      8.66
23 mu_0       0.5     0.549      2.23e- 2  4.70e-16      5.11
24 mu_0       0.6     1.24       1.87e- 1  5.97e-12     11.1 
25 mu_0       0.7     1.24       5.67e- 1  2.99e-19      7.02
26 mu_0       0.8     1.35       1.06e- 2  4.04e-30     14.9 
27 mu_0       0.9     1.31       7.21e- 8  1.38e-50     30.1 
[1] "Total run time was 366.915 seconds"
