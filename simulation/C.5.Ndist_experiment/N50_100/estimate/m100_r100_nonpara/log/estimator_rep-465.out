
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7392"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70 
  3   2   3   2   1   3   1   2   3   1   1   1   3   1   3   2   1   1   2   1 
 71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 
  5   3   1   1   5   2   3   3   2   6   3   2   3   2   1   3   1   1   1   1 
 91  92  93  94  95  96  97  98  99 100 
  2   1   1   2   1   1   2   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02279 0.31089 0.57582 0.98016 5.84191 
[1] "event indicator table: "

   0    1 
4351 3041 
[1] "treatment indicator table: "

   0    1 
2898 4494 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3730
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3662
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 354.474 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.422 0.0717
 2 mu         0.1   0.2 0.478 0.0603
 3 mu         0.1   0.3 0.559 0.0657
 4 mu         0.1   0.4 0.621 0.0781
 5 mu         0.1   0.5 0.660 0.0838
 6 mu         0.2   0.1 0.399 0.0378
 7 mu         0.2   0.2 0.476 0.0320
 8 mu         0.2   0.3 0.547 0.0386
 9 mu         0.2   0.4 0.582 0.0378
10 mu         0.2   0.5 0.627 0.0417
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.941        0.578   0.00127      6.96
 2 mu         0.2      1.01         0.868   0.167        2.87
 3 mu         0.3      0.993        0.922   0.258        2.08
 4 mu         0.4      0.978        0.939   0.482        1.69
 5 mu         0.5      0.964        0.960   0.545        1.32
 6 mu         0.6      1.01         1.02    0.621        1.59
 7 mu         0.7      1.00         1.00    0.665        1.53
 8 mu         0.8      0.954        0.934   0.510        1.64
 9 mu         0.9      1.03         0.995   0.323        2.43
10 mu_1       0.1      0.953        0.722   0.00280      6.21
11 mu_1       0.2      1.01         0.893   0.223        3.10
12 mu_1       0.3      0.993        0.928   0.285        1.97
13 mu_1       0.4      0.977        0.944   0.484        1.67
14 mu_1       0.5      0.964        0.961   0.541        1.31
15 mu_1       0.6      1.01         1.02    0.615        1.60
16 mu_1       0.7      1.00         0.994   0.663        1.51
17 mu_1       0.8      0.955        0.932   0.510        1.65
18 mu_1       0.9      1.03         1.00    0.319        2.43
19 mu_0       0.1      0.940        0.580   0.00110      7.04
20 mu_0       0.2      1.01         0.862   0.154        2.81
21 mu_0       0.3      0.993        0.921   0.246        2.13
22 mu_0       0.4      0.979        0.941   0.481        1.71
23 mu_0       0.5      0.963        0.961   0.550        1.33
24 mu_0       0.6      1.01         1.03    0.614        1.57
25 mu_0       0.7      1.01         1.02    0.671        1.59
26 mu_0       0.8      0.954        0.929   0.496        1.62
27 mu_0       0.9      1.02         0.997   0.300        2.42
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.524     1.96e-24  6.57e-81     28.8 
 2 mu         0.2      1.31      2.24e-13  1.43e-54     37.9 
 3 mu         0.3      0.773     2.53e- 7  3.00e-39     15.9 
 4 mu         0.4      0.987     1.59e- 3  1.86e-28      9.60
 5 mu         0.5      1.14      1.94e- 2  3.64e-20     10.7 
 6 mu         0.6      1.06      6.30e- 2  1.45e-16     10.9 
 7 mu         0.7      1.15      1.89e- 1  1.39e-24      8.22
 8 mu         0.8      1.59      1.88e- 2  3.27e-36     13.8 
 9 mu         0.9      1.38      1.74e- 7  1.60e-56     26.4 
10 mu_1       0.1      0.711     1.12e-23  6.35e-80     33.2 
11 mu_1       0.2      1.28      7.14e-13  6.90e-54     35.1 
12 mu_1       0.3      0.740     5.24e- 7  9.66e-39     14.0 
13 mu_1       0.4      1.03      2.47e- 3  4.51e-28      9.78
14 mu_1       0.5      1.13      1.90e- 2  7.04e-20     10.0 
15 mu_1       0.6      1.06      7.36e- 2  2.79e-17     10.4 
16 mu_1       0.7      1.16      1.53e- 1  2.29e-25      8.28
17 mu_1       0.8      1.60      1.50e- 2  4.72e-37     13.5 
18 mu_1       0.9      1.38      1.22e- 7  2.05e-57     27.3 
19 mu_0       0.1      0.503     9.29e-25  2.41e-82     28.3 
20 mu_0       0.2      1.32      1.01e-13  5.88e-56     40.0 
21 mu_0       0.3      0.787     1.35e- 7  1.41e-40     16.7 
22 mu_0       0.4      0.958     9.93e- 4  1.02e-29      9.90
23 mu_0       0.5      1.15      1.38e- 2  2.40e-21     11.4 
24 mu_0       0.6      1.05      5.10e- 2  3.21e-16     11.7 
25 mu_0       0.7      1.14      1.90e- 1  4.10e-24      8.30
26 mu_0       0.8      1.56      3.43e- 2  1.45e-35     14.8 
27 mu_0       0.9      1.38      6.43e- 7  1.42e-55     21.8 
[1] "Total run time was 357.657 seconds"
