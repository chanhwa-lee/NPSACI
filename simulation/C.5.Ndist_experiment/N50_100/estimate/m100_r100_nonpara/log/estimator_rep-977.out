
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7481"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  1   4   4   2   2   1   2   1   2   5   1   3   2   6   1   1   1   3   1   2 
 72  74  76  77  78  79  81  82  83  84  85  86  87  88  90  92  93  94  95  96 
  2   2   2   1   2   1   5   2   2   3   4   3   2   3   1   2   4   1   1   3 
 97  98  99 100 
  3   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02598 0.32371 0.57589 0.98243 6.00000 
[1] "event indicator table: "

   0    1 
4367 3114 
[1] "treatment indicator table: "

   0    1 
3042 4439 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3670
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3811
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 427.603 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.309 0.0473
 2 mu         0.1   0.2 0.424 0.0683
 3 mu         0.1   0.3 0.457 0.0737
 4 mu         0.1   0.4 0.483 0.0689
 5 mu         0.1   0.5 0.575 0.0923
 6 mu         0.2   0.1 0.270 0.0188
 7 mu         0.2   0.2 0.352 0.0363
 8 mu         0.2   0.3 0.405 0.0361
 9 mu         0.2   0.4 0.438 0.0256
10 mu         0.2   0.5 0.514 0.0456
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.949        0.324 0.000000327      5.69
 2 mu         0.2      0.912        0.876 0.0273           3.22
 3 mu         0.3      0.960        0.956 0.143            1.81
 4 mu         0.4      0.998        1.03  0.423            1.42
 5 mu         0.5      0.986        0.978 0.575            1.57
 6 mu         0.6      1.02         1.02  0.680            1.39
 7 mu         0.7      1.03         1.01  0.666            1.48
 8 mu         0.8      1.01         0.988 0.524            2.02
 9 mu         0.9      1.06         0.974 0.148            2.82
10 mu_1       0.1      0.919        0.508 0.000000929      5.33
11 mu_1       0.2      0.910        0.915 0.0398           2.95
12 mu_1       0.3      0.964        0.987 0.181            1.74
13 mu_1       0.4      0.999        1.03  0.431            1.44
14 mu_1       0.5      0.986        0.976 0.585            1.59
15 mu_1       0.6      1.02         1.02  0.683            1.42
16 mu_1       0.7      1.03         1.01  0.668            1.46
17 mu_1       0.8      1.01         0.988 0.512            2.01
18 mu_1       0.9      1.06         0.976 0.149            2.84
19 mu_0       0.1      0.952        0.303 0.000000260      5.84
20 mu_0       0.2      0.913        0.862 0.0242           3.28
21 mu_0       0.3      0.958        0.958 0.127            1.84
22 mu_0       0.4      0.998        1.03  0.418            1.41
23 mu_0       0.5      0.987        0.973 0.566            1.55
24 mu_0       0.6      1.01         1.01  0.675            1.36
25 mu_0       0.7      1.03         1.01  0.662            1.54
26 mu_0       0.8      1.01         0.993 0.550            2.05
27 mu_0       0.9      1.05         0.960 0.137            2.59
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.187     2.88e-23  2.09e-71      7.29
 2 mu         0.2      1.26      3.31e-12  2.49e-47     45.4 
 3 mu         0.3      0.943     7.56e- 7  2.05e-33     14.2 
 4 mu         0.4      1.15      2.63e- 3  1.07e-23     12.4 
 5 mu         0.5      1.08      1.03e- 1  2.54e-16      9.21
 6 mu         0.6      0.986     1.48e- 1  6.44e-16      7.69
 7 mu         0.7      1.21      1.29e- 1  1.17e-24      7.16
 8 mu         0.8      1.60      4.10e- 3  1.59e-37     16.1 
 9 mu         0.9      1.73      7.67e- 9  3.09e-60     42.6 
10 mu_1       0.1      0.331     1.68e-22  1.94e-70     13.1 
11 mu_1       0.2      1.22      1.11e-11  1.16e-46     41.6 
12 mu_1       0.3      0.982     1.68e- 6  6.36e-33     16.3 
13 mu_1       0.4      1.11      4.36e- 3  2.50e-23     11.9 
14 mu_1       0.5      1.10      1.21e- 1  4.73e-16      9.10
15 mu_1       0.6      0.985     1.34e- 1  1.73e-16      7.48
16 mu_1       0.7      1.23      1.09e- 1  2.69e-25      7.44
17 mu_1       0.8      1.61      3.17e- 3  3.22e-38     16.2 
18 mu_1       0.9      1.72      5.15e- 9  5.53e-61     41.8 
19 mu_0       0.1      0.171     1.34e-23  1.60e-72      6.67
20 mu_0       0.2      1.27      1.36e-12  2.15e-48     46.4 
21 mu_0       0.3      0.927     3.75e- 7  2.02e-34     13.3 
22 mu_0       0.4      1.17      1.47e- 3  1.23e-24     13.5 
23 mu_0       0.5      1.07      8.48e- 2  3.50e-17      9.33
24 mu_0       0.6      0.988     1.29e- 1  1.35e-15      8.01
25 mu_0       0.7      1.16      1.56e- 1  3.27e-24      8.08
26 mu_0       0.8      1.60      7.78e- 3  6.69e-37     15.9 
27 mu_0       0.9      1.80      3.03e- 8  2.59e-59     49.1 
[1] "Total run time was 430.852 seconds"
