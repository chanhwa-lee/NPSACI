
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7564"
[1] "cluster size dist'n: "

 50  52  54  55  56  57  59  60  61  62  63  64  65  66  67  68  69  70  71  72 
  2   2   3   3   1   4   2   2   1   1   2   2   3   1   2   2   2   1   2   3 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  91  92  93  94 
  2   1   4   1   3   7   3   3   2   1   2   1   1   4   1   1   6   1   1   3 
 95  96  97  98 100 
  1   2   1   4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02029 0.30595 0.58738 0.99866 6.00000 
[1] "event indicator table: "

   0    1 
4421 3143 
[1] "treatment indicator table: "

   0    1 
2963 4601 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3678
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3886
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 1389.834 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.387 0.0563
 2 mu         0.1   0.2 0.485 0.0692
 3 mu         0.1   0.3 0.588 0.0722
 4 mu         0.1   0.4 0.619 0.0752
 5 mu         0.1   0.5 0.632 0.0732
 6 mu         0.2   0.1 0.402 0.0406
 7 mu         0.2   0.2 0.460 0.0346
 8 mu         0.2   0.3 0.530 0.0396
 9 mu         0.2   0.4 0.589 0.0432
10 mu         0.2   0.5 0.608 0.0485
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.906        0.606 0.0000109       5.33
 2 mu         0.2      0.958        0.911 0.0497          4.01
 3 mu         0.3      0.994        0.983 0.361           2.14
 4 mu         0.4      0.995        0.957 0.264           1.87
 5 mu         0.5      1.00         0.984 0.433           1.83
 6 mu         0.6      0.994        0.966 0.522           1.67
 7 mu         0.7      0.983        0.961 0.499           1.52
 8 mu         0.8      0.935        0.919 0.372           1.88
 9 mu         0.9      1.03         0.954 0.0164          2.36
10 mu_1       0.1      0.925        0.575 0.0000297       5.51
11 mu_1       0.2      0.965        0.933 0.0689          3.90
12 mu_1       0.3      0.993        0.993 0.389           2.07
13 mu_1       0.4      0.996        0.961 0.241           1.88
14 mu_1       0.5      1.00         0.991 0.472           1.79
15 mu_1       0.6      0.995        0.966 0.521           1.65
16 mu_1       0.7      0.981        0.953 0.510           1.52
17 mu_1       0.8      0.935        0.924 0.362           1.89
18 mu_1       0.9      1.03         0.947 0.0151          2.42
19 mu_0       0.1      0.904        0.582 0.00000883      5.31
20 mu_0       0.2      0.956        0.897 0.0449          4.04
21 mu_0       0.3      0.995        0.977 0.349           2.17
22 mu_0       0.4      0.994        0.939 0.279           1.86
23 mu_0       0.5      1.01         0.990 0.394           1.87
24 mu_0       0.6      0.992        0.960 0.524           1.71
25 mu_0       0.7      0.988        0.946 0.474           1.51
26 mu_0       0.8      0.934        0.916 0.395           1.84
27 mu_0       0.9      1.01         0.946 0.0280          2.38
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1       1.57     2.64e-26  2.37e-72     132. 
 2 mu         0.2       1.62     6.30e-14  3.18e-47      37.8
 3 mu         0.3       1.63     2.94e- 7  8.86e-33      35.2
 4 mu         0.4       2.01     7.24e- 4  9.22e-23      77.0
 5 mu         0.5       1.47     1.10e- 2  3.09e-15      29.3
 6 mu         0.6       1.44     2.02e- 1  6.68e-16      13.7
 7 mu         0.7       1.60     1.34e- 1  6.40e-24      20.7
 8 mu         0.8       1.55     2.19e- 2  1.51e-35      15.7
 9 mu         0.9       1.73     1.48e- 7  7.37e-56      28.2
10 mu_1       0.1       1.88     1.60e-25  2.14e-71     153. 
11 mu_1       0.2       1.67     2.07e-13  1.44e-46      45.3
12 mu_1       0.3       1.66     5.83e- 7  2.67e-32      29.3
13 mu_1       0.4       1.98     4.79e- 4  2.09e-22      77.7
14 mu_1       0.5       1.47     1.48e- 2  5.58e-15      23.7
15 mu_1       0.6       1.42     2.07e- 1  1.28e-16      12.5
16 mu_1       0.7       1.60     1.22e- 1  1.06e-24      20.5
17 mu_1       0.8       1.57     1.74e- 2  2.17e-36      15.9
18 mu_1       0.9       1.72     1.08e- 7  9.45e-57      27.8
19 mu_0       0.1       1.53     1.15e-26  2.52e-73     130. 
20 mu_0       0.2       1.61     2.69e-14  3.80e-48      36.8
21 mu_0       0.3       1.62     1.70e- 7  1.21e-33      37.9
22 mu_0       0.4       2.04     4.18e- 4  1.47e-23      76.5
23 mu_0       0.5       1.47     6.91e- 3  5.91e-16      34.9
24 mu_0       0.6       1.47     1.82e- 1  1.48e-15      15.4
25 mu_0       0.7       1.60     1.39e- 1  1.89e-23      21.1
26 mu_0       0.8       1.46     3.40e- 2  6.66e-35      14.9
27 mu_0       0.9       1.86     5.08e- 7  6.52e-55      34.0
[1] "Total run time was 1394.21 seconds"
