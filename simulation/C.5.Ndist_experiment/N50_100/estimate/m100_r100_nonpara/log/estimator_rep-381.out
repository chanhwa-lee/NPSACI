
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7472"
[1] "cluster size dist'n: "

50 51 52 54 56 57 58 59 60 61 63 64 65 66 67 68 69 70 71 73 75 76 77 78 79 81 
 1  5  4  4  1  1  1  1  3  3  1  3  3  3  2  3  3  5  2  1  1  2  2  3  1  3 
82 84 85 86 87 88 89 90 91 92 93 96 97 98 99 
 3  2  2  3  1  2  3  4  4  1  1  1  4  3  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0267  0.3311  0.6094  1.0000  5.0000 
[1] "event indicator table: "

   0    1 
4433 3039 
[1] "treatment indicator table: "

   0    1 
2891 4581 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3791
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3681
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 462.623 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.487 0.0827
 2 mu         0.1   0.2 0.602 0.0854
 3 mu         0.1   0.3 0.675 0.0836
 4 mu         0.1   0.4 0.704 0.0781
 5 mu         0.1   0.5 0.724 0.0712
 6 mu         0.2   0.1 0.359 0.0282
 7 mu         0.2   0.2 0.468 0.0371
 8 mu         0.2   0.3 0.548 0.0507
 9 mu         0.2   0.4 0.582 0.0475
10 mu         0.2   0.5 0.607 0.0465
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.08         0.931   0.00119      5.46
 2 mu         0.2      0.999        0.953   0.183        2.29
 3 mu         0.3      1.00         0.998   0.425        1.64
 4 mu         0.4      1.05         1.04    0.472        1.95
 5 mu         0.5      1.01         1.01    0.519        1.97
 6 mu         0.6      1.01         1.02    0.587        1.49
 7 mu         0.7      0.975        0.967   0.558        1.78
 8 mu         0.8      0.971        0.962   0.544        1.51
 9 mu         0.9      0.982        0.974   0.269        2.55
10 mu_1       0.1      1.07         0.957   0.00253      5.76
11 mu_1       0.2      0.997        0.937   0.205        2.29
12 mu_1       0.3      1.01         1.00    0.455        1.63
13 mu_1       0.4      1.05         1.04    0.472        1.96
14 mu_1       0.5      1.01         1.02    0.513        1.97
15 mu_1       0.6      1.01         1.02    0.593        1.52
16 mu_1       0.7      0.973        0.963   0.544        1.77
17 mu_1       0.8      0.971        0.961   0.522        1.52
18 mu_1       0.9      0.982        0.969   0.262        2.61
19 mu_0       0.1      1.09         0.923   0.00104      5.42
20 mu_0       0.2      0.999        0.947   0.178        2.29
21 mu_0       0.3      1.00         0.991   0.413        1.67
22 mu_0       0.4      1.05         1.03    0.473        1.94
23 mu_0       0.5      1.01         1.01    0.526        1.97
24 mu_0       0.6      1.01         1.01    0.569        1.45
25 mu_0       0.7      0.981        0.981   0.590        1.80
26 mu_0       0.8      0.971        0.953   0.520        1.46
27 mu_0       0.9      0.981        0.954   0.319        2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.486     2.63e-27  3.27e-83     48.1 
 2 mu         0.2      0.544     4.56e-15  1.60e-55     11.6 
 3 mu         0.3      0.982     2.22e- 8  1.71e-39     14.1 
 4 mu         0.4      0.843     4.39e- 4  2.82e-28      9.19
 5 mu         0.5      1.06      1.27e- 2  9.72e-20      9.85
 6 mu         0.6      1.04      1.66e- 1  9.01e-21      7.70
 7 mu         0.7      1.10      1.25e- 1  8.84e-31      7.17
 8 mu         0.8      1.27      6.69e- 3  2.76e-45     27.3 
 9 mu         0.9      1.53      2.69e- 8  1.30e-70     46.5 
10 mu_1       0.1      0.557     1.52e-26  3.07e-82     54.6 
11 mu_1       0.2      0.644     1.57e-14  7.51e-55     14.8 
12 mu_1       0.3      0.955     4.59e- 8  5.35e-39     12.3 
13 mu_1       0.4      0.867     6.83e- 4  6.62e-28      9.05
14 mu_1       0.5      1.05      1.38e- 2  1.83e-19      9.34
15 mu_1       0.6      1.05      1.44e- 1  1.70e-21      8.21
16 mu_1       0.7      1.09      1.51e- 1  1.43e-31      7.66
17 mu_1       0.8      1.29      5.09e- 3  3.91e-46     27.7 
18 mu_1       0.9      1.53      1.85e- 8  1.64e-71     46.8 
19 mu_0       0.1      0.478     1.23e-27  2.20e-84     47.4 
20 mu_0       0.2      0.518     1.79e-15  1.21e-56     10.8 
21 mu_0       0.3      0.994     1.21e- 8  1.48e-40     15.0 
22 mu_0       0.4      0.827     2.77e- 4  2.85e-29      9.28
23 mu_0       0.5      1.07      1.22e- 2  1.18e-20     10.4 
24 mu_0       0.6      1.03      1.70e- 1  2.00e-20      7.82
25 mu_0       0.7      1.11      6.63e- 2  2.61e-30      7.23
26 mu_0       0.8      1.21      8.72e- 3  1.22e-44     25.3 
27 mu_0       0.9      1.52      1.05e- 7  1.15e-69     43.6 
[1] "Total run time was 466.345 seconds"
