
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7452"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70 
  2   2   2   1   3   2   2   3   4   1   2   4   5   2   2   2   1   2   1   2 
 71  72  73  76  78  79  80  81  82  83  84  85  86  89  90  91  92  93  94  96 
  2   3   3   2   1   3   2   2   1   1   2   1   4   3   5   3   2   3   3   1 
 97  98  99 100 
  1   1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02411 0.29413 0.57179 0.94787 7.00000 
[1] "event indicator table: "

   0    1 
4385 3067 
[1] "treatment indicator table: "

   0    1 
3074 4378 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3742
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3710
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 383.602 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.470 0.0870
 2 mu         0.1   0.2 0.585 0.107 
 3 mu         0.1   0.3 0.698 0.125 
 4 mu         0.1   0.4 0.764 0.136 
 5 mu         0.1   0.5 0.798 0.141 
 6 mu         0.2   0.1 0.366 0.0247
 7 mu         0.2   0.2 0.458 0.0330
 8 mu         0.2   0.3 0.557 0.0450
 9 mu         0.2   0.4 0.608 0.0481
10 mu         0.2   0.5 0.639 0.0483
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.25         0.269 0.00000141     13.5 
 2 mu         0.2      1.05         0.971 0.0471          2.66
 3 mu         0.3      0.994        0.984 0.196           1.78
 4 mu         0.4      0.985        0.991 0.468           1.55
 5 mu         0.5      1.01         0.996 0.670           1.49
 6 mu         0.6      1.02         1.01  0.519           1.43
 7 mu         0.7      1.01         1.02  0.695           1.41
 8 mu         0.8      0.994        0.968 0.544           1.69
 9 mu         0.9      0.913        0.830 0.0667          2.60
10 mu_1       0.1      1.26         0.438 0.00000412     13.5 
11 mu_1       0.2      1.04         0.988 0.0704          2.48
12 mu_1       0.3      0.990        0.991 0.212           1.86
13 mu_1       0.4      0.986        0.994 0.453           1.57
14 mu_1       0.5      1.01         1.00  0.683           1.50
15 mu_1       0.6      1.02         1.00  0.534           1.44
16 mu_1       0.7      1.01         1.01  0.683           1.42
17 mu_1       0.8      0.993        0.972 0.535           1.67
18 mu_1       0.9      0.911        0.829 0.0616          2.64
19 mu_0       0.1      1.25         0.250 0.00000111     13.5 
20 mu_0       0.2      1.05         0.942 0.0413          2.71
21 mu_0       0.3      0.995        0.980 0.189           1.74
22 mu_0       0.4      0.984        0.988 0.477           1.54
23 mu_0       0.5      1.01         0.995 0.658           1.48
24 mu_0       0.6      1.02         1.01  0.495           1.42
25 mu_0       0.7      1.02         1.02  0.694           1.41
26 mu_0       0.8      0.998        0.971 0.577           1.75
27 mu_0       0.9      0.936        0.862 0.113           2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.325     7.39e-23  1.88e-70     32.1 
 2 mu         0.2      0.925     4.48e-12  7.08e-46     36.0 
 3 mu         0.3      0.703     2.19e- 6  1.00e-31     13.6 
 4 mu         0.4      0.832     4.79e- 3  5.76e-22      9.01
 5 mu         0.5      1.05      1.66e- 1  1.19e-14      9.47
 6 mu         0.6      1.03      4.48e- 1  1.57e-10      9.98
 7 mu         0.7      1.36      3.96e- 1  5.93e-17     13.2 
 8 mu         0.8      1.05      9.77e- 3  3.53e-27     12.8 
 9 mu         0.9      1.34      5.45e- 9  1.59e-45     69.5 
10 mu_1       0.1      0.483     4.45e-22  1.71e-69     47.3 
11 mu_1       0.2      0.912     1.46e-11  3.23e-45     32.3 
12 mu_1       0.3      0.688     4.76e- 6  3.05e-31     12.0 
13 mu_1       0.4      0.867     5.73e- 3  1.31e-21      9.98
14 mu_1       0.5      1.04      2.02e- 1  2.16e-14      9.16
15 mu_1       0.6      1.05      3.68e- 1  3.86e-11      9.50
16 mu_1       0.7      1.36      3.31e- 1  1.86e-17     13.7 
17 mu_1       0.8      1.05      7.89e- 3  9.67e-28     13.6 
18 mu_1       0.9      1.33      3.98e- 9  3.88e-46     70.5 
19 mu_0       0.1      0.308     3.27e-23  1.84e-71     30.4 
20 mu_0       0.2      0.928     1.95e-12  7.78e-47     38.3 
21 mu_0       0.3      0.709     1.08e- 6  1.26e-32     14.3 
22 mu_0       0.4      0.809     4.14e- 3  8.54e-23      8.36
23 mu_0       0.5      1.05      1.18e- 1  2.11e-15      9.77
24 mu_0       0.6      1.01      3.66e- 1  3.35e-10     10.7 
25 mu_0       0.7      1.36      3.19e- 1  1.54e-16     12.0 
26 mu_0       0.8      1.04      1.73e- 2  1.38e-26      9.72
27 mu_0       0.9      1.41      1.87e- 8  1.24e-44     61.1 
[1] "Total run time was 387.426 seconds"
