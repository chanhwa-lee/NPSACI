
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7735"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  59  60  61  62  64  65  67  68  70  71  73  75  76 
  2   1   1   1   4   1   3   3   1   1   2   1   2   1   5   2   2   4   2   6 
 77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  94  95  96  97  98 
  1   3   7   2   1   6   3   2   3   1   2   1   1   2   3   2   1   1   6   2 
 99 100 
  3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02198 0.31234 0.58625 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4589 3146 
[1] "treatment indicator table: "

   0    1 
3055 4680 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3907
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3828
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 438.79 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.425 0.0474
 2 mu         0.1   0.2 0.556 0.0677
 3 mu         0.1   0.3 0.634 0.0755
 4 mu         0.1   0.4 0.726 0.0866
 5 mu         0.1   0.5 0.750 0.0842
 6 mu         0.2   0.1 0.336 0.0295
 7 mu         0.2   0.2 0.429 0.0311
 8 mu         0.2   0.3 0.492 0.0307
 9 mu         0.2   0.4 0.571 0.0395
10 mu         0.2   0.5 0.605 0.0373
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.18         0.725 0.0000145      7.17
 2 mu         0.2      0.989        0.929 0.192          2.28
 3 mu         0.3      0.998        0.962 0.322          1.80
 4 mu         0.4      0.975        0.985 0.460          1.50
 5 mu         0.5      1.01         0.994 0.607          1.58
 6 mu         0.6      1.00         0.986 0.671          1.79
 7 mu         0.7      1.00         0.976 0.556          1.90
 8 mu         0.8      1.01         0.989 0.597          1.68
 9 mu         0.9      1.03         1.00  0.214          2.41
10 mu_1       0.1      1.13         0.898 0.0000381      5.79
11 mu_1       0.2      0.990        0.965 0.256          2.24
12 mu_1       0.3      0.995        0.969 0.328          1.81
13 mu_1       0.4      0.978        0.972 0.457          1.44
14 mu_1       0.5      1.01         0.993 0.627          1.58
15 mu_1       0.6      1.00         0.985 0.646          1.78
16 mu_1       0.7      1.00         0.961 0.565          1.89
17 mu_1       0.8      1.01         0.989 0.602          1.70
18 mu_1       0.9      1.03         1.01  0.208          2.45
19 mu_0       0.1      1.19         0.704 0.0000119      7.33
20 mu_0       0.2      0.989        0.934 0.175          2.29
21 mu_0       0.3      1.00         0.967 0.320          1.81
22 mu_0       0.4      0.973        0.988 0.463          1.54
23 mu_0       0.5      1.01         0.993 0.587          1.59
24 mu_0       0.6      1.00         0.990 0.700          1.80
25 mu_0       0.7      1.00         0.975 0.533          1.92
26 mu_0       0.8      1.01         1.00  0.579          1.61
27 mu_0       0.9      1.03         1.01  0.264          2.09
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0325     9.47e-25  3.73e-70      2.36
 2 mu         0.2     0.940      4.44e-13  7.04e-47     50.0 
 3 mu         0.3     1.12       1.21e- 6  2.24e-33     41.7 
 4 mu         0.4     1.06       4.19e- 3  6.73e-24     11.0 
 5 mu         0.5     1.17       9.48e- 2  1.18e-16      8.58
 6 mu         0.6     1.31       2.41e- 1  1.60e-14     12.4 
 7 mu         0.7     1.01       1.27e- 1  2.60e-23      6.46
 8 mu         0.8     1.26       4.45e- 3  2.35e-36     11.1 
 9 mu         0.9     1.32       1.22e- 9  1.62e-59     22.9 
10 mu_1       0.1     0.0629     5.27e-24  3.55e-69      4.33
11 mu_1       0.2     0.986      1.40e-12  3.35e-46     45.9 
12 mu_1       0.3     1.12       2.47e- 6  7.11e-33     43.0 
13 mu_1       0.4     1.08       6.49e- 3  1.60e-23     11.5 
14 mu_1       0.5     1.18       9.88e- 2  2.24e-16      9.60
15 mu_1       0.6     1.29       2.19e- 1  4.90e-15     12.5 
16 mu_1       0.7     1.01       1.02e- 1  6.81e-24      6.69
17 mu_1       0.8     1.27       3.36e- 3  5.39e-37     11.5 
18 mu_1       0.9     1.32       8.23e-10  3.31e-60     23.5 
19 mu_0       0.1     0.0291     4.67e-25  2.02e-71      2.14
20 mu_0       0.2     0.929      2.05e-13  4.29e-48     51.0 
21 mu_0       0.3     1.12       6.50e- 7  1.56e-34     41.2 
22 mu_0       0.4     1.05       2.75e- 3  5.47e-25     10.7 
23 mu_0       0.5     1.15       7.35e- 2  1.15e-17      7.55
24 mu_0       0.6     1.33       2.50e- 1  3.27e-14     12.1 
25 mu_0       0.7     0.997      1.60e- 1  7.07e-23      6.00
26 mu_0       0.8     1.24       6.46e- 3  9.59e-36     10.8 
27 mu_0       0.9     1.37       4.81e- 9  1.32e-58     18.4 
[1] "Total run time was 443.233 seconds"
