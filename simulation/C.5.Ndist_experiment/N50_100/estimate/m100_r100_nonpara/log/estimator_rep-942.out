
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7465"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  63  64  65  67  68  69  70  71 
  3   1   1   1   1   5   3   3   1   1   3   1   4   2   4   3   3   2   3   4 
 72  73  74  75  77  78  79  80  81  84  85  86  88  89  90  91  92  94  95  96 
  1   2   1   2   1   1   3   4   2   2   1   2   3   3   1   1   4   3   5   1 
 97  98  99 100 
  5   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03773 0.35882 0.61091 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4315 3150 
[1] "treatment indicator table: "

   0    1 
2907 4558 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3585
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3880
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 417.875 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.324 0.0409
 2 mu         0.1   0.2 0.452 0.0648
 3 mu         0.1   0.3 0.545 0.0805
 4 mu         0.1   0.4 0.607 0.0868
 5 mu         0.1   0.5 0.632 0.0809
 6 mu         0.2   0.1 0.287 0.0321
 7 mu         0.2   0.2 0.372 0.0343
 8 mu         0.2   0.3 0.449 0.0477
 9 mu         0.2   0.4 0.508 0.0539
10 mu         0.2   0.5 0.546 0.0521
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.907        0.737  0.000124      4.62
 2 mu         0.2      0.931        0.900  0.245         2.16
 3 mu         0.3      0.919        0.926  0.201         1.97
 4 mu         0.4      0.916        0.932  0.384         1.44
 5 mu         0.5      0.963        0.933  0.650         1.69
 6 mu         0.6      1.01         1.02   0.508         1.53
 7 mu         0.7      1.05         1.07   0.594         1.51
 8 mu         0.8      1.05         1.02   0.560         1.77
 9 mu         0.9      1.00         0.976  0.355         1.77
10 mu_1       0.1      0.845        0.725  0.000324      4.12
11 mu_1       0.2      0.942        0.918  0.255         2.02
12 mu_1       0.3      0.917        0.921  0.212         1.89
13 mu_1       0.4      0.918        0.921  0.390         1.47
14 mu_1       0.5      0.967        0.925  0.662         1.70
15 mu_1       0.6      1.01         1.02   0.508         1.55
16 mu_1       0.7      1.05         1.07   0.588         1.52
17 mu_1       0.8      1.05         1.02   0.558         1.75
18 mu_1       0.9      1.00         0.973  0.348         1.78
19 mu_0       0.1      0.914        0.707  0.000102      4.84
20 mu_0       0.2      0.928        0.905  0.242         2.21
21 mu_0       0.3      0.920        0.913  0.196         2.00
22 mu_0       0.4      0.915        0.918  0.380         1.42
23 mu_0       0.5      0.960        0.939  0.638         1.68
24 mu_0       0.6      1.01         1.01   0.508         1.50
25 mu_0       0.7      1.05         1.07   0.602         1.49
26 mu_0       0.8      1.06         1.02   0.550         1.82
27 mu_0       0.9      1.01         1.02   0.340         1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.20      5.23e-28  6.73e-79     59.4 
 2 mu         0.2      0.456     3.81e-15  2.06e-52     12.0 
 3 mu         0.3      0.822     9.93e- 9  4.34e-37     17.1 
 4 mu         0.4      1.16      5.08e- 5  2.26e-26     17.0 
 5 mu         0.5      0.969     4.79e- 3  3.20e-18     11.1 
 6 mu         0.6      0.718     6.00e- 2  2.41e-17      6.04
 7 mu         0.7      1.23      1.48e- 1  2.41e-26     12.4 
 8 mu         0.8      1.13      4.04e- 2  1.68e-39     17.2 
 9 mu         0.9      1.25      3.97e- 7  1.28e-62     18.0 
10 mu_1       0.1      0.858     3.06e-27  6.31e-78     56.2 
11 mu_1       0.2      0.424     1.31e-14  9.63e-52     10.1 
12 mu_1       0.3      0.894     2.34e- 8  1.35e-36     18.1 
13 mu_1       0.4      1.16      8.73e- 5  5.30e-26     15.2 
14 mu_1       0.5      0.947     5.43e- 3  5.99e-18     11.4 
15 mu_1       0.6      0.723     6.73e- 2  2.37e-18      6.68
16 mu_1       0.7      1.25      1.35e- 1  4.87e-27     12.7 
17 mu_1       0.8      1.12      3.43e- 2  2.96e-40     17.7 
18 mu_1       0.9      1.26      2.83e- 7  2.02e-63     17.7 
19 mu_0       0.1      1.24      2.41e-28  4.73e-80     64.7 
20 mu_0       0.2      0.464     1.50e-15  1.62e-53     13.2 
21 mu_0       0.3      0.791     4.15e- 9  3.91e-38     16.7 
22 mu_0       0.4      1.17      2.65e- 5  2.38e-27     18.1 
23 mu_0       0.5      0.991     2.71e- 3  4.04e-19     10.8 
24 mu_0       0.6      0.709     4.63e- 2  5.17e-17      5.09
25 mu_0       0.7      1.17      8.69e- 2  6.90e-26     11.9 
26 mu_0       0.8      1.19      4.07e- 2  7.21e-39     15.3 
27 mu_0       0.9      1.21      1.43e- 6  1.10e-61     20.4 
[1] "Total run time was 421.374 seconds"
