
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7695"
[1] "cluster size dist'n: "

 50  52  54  55  56  57  58  59  60  61  62  63  65  67  68  69  70  71  72  73 
  1   1   3   1   3   3   1   2   5   1   1   1   2   1   2   1   2   2   4   3 
 74  75  76  77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  93  94 
  2   3   3   3   2   2   1   2   2   4   3   4   3   2   2   2   2   2   2   4 
 96  97  98 100 
  3   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04551 0.38523 0.64031 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4608 3087 
[1] "treatment indicator table: "

   0    1 
2747 4948 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3944
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3751
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 369.198 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.429 0.0913
 2 mu         0.1   0.2 0.522 0.0858
 3 mu         0.1   0.3 0.590 0.0886
 4 mu         0.1   0.4 0.621 0.0882
 5 mu         0.1   0.5 0.655 0.0925
 6 mu         0.2   0.1 0.388 0.0685
 7 mu         0.2   0.2 0.458 0.0577
 8 mu         0.2   0.3 0.527 0.0527
 9 mu         0.2   0.4 0.566 0.0456
10 mu         0.2   0.5 0.601 0.0471
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.02         0.331 0.000000111       6.69
 2 mu         0.2      0.998        0.903 0.0107            2.82
 3 mu         0.3      0.944        0.949 0.364             1.58
 4 mu         0.4      0.969        0.972 0.526             1.55
 5 mu         0.5      0.988        1.02  0.585             1.29
 6 mu         0.6      1.00         0.993 0.675             1.63
 7 mu         0.7      1.05         1.02  0.684             1.56
 8 mu         0.8      1.04         1.04  0.505             1.74
 9 mu         0.9      0.961        0.895 0.285             2.93
10 mu_1       0.1      0.952        0.486 0.000000336       7.45
11 mu_1       0.2      1.01         0.915 0.0169            2.75
12 mu_1       0.3      0.942        0.945 0.360             1.51
13 mu_1       0.4      0.971        0.970 0.525             1.56
14 mu_1       0.5      0.989        1.02  0.572             1.29
15 mu_1       0.6      1.00         0.991 0.664             1.65
16 mu_1       0.7      1.05         1.03  0.673             1.57
17 mu_1       0.8      1.04         1.04  0.493             1.73
18 mu_1       0.9      0.959        0.890 0.274             3.00
19 mu_0       0.1      1.03         0.310 0.0000000859      6.60
20 mu_0       0.2      0.996        0.917 0.00914           2.85
21 mu_0       0.3      0.946        0.953 0.366             1.62
22 mu_0       0.4      0.967        0.970 0.493             1.54
23 mu_0       0.5      0.986        1.02  0.598             1.30
24 mu_0       0.6      1.00         0.990 0.691             1.60
25 mu_0       0.7      1.04         1.02  0.709             1.52
26 mu_0       0.8      1.04         1.04  0.555             1.77
27 mu_0       0.9      0.982        0.963 0.370             2.35
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00273     1.59e-28  1.52e-74     0.271
 2 mu         0.2    0.266       6.91e-16  1.63e-48    22.1  
 3 mu         0.3    0.687       8.52e- 9  1.53e-33    15.9  
 4 mu         0.4    0.856       1.10e- 4  3.78e-23     7.39 
 5 mu         0.5    0.854       2.64e- 2  2.47e-15     7.31 
 6 mu         0.6    0.900       8.57e- 2  3.08e- 9    10.2  
 7 mu         0.7    1.08        3.55e- 1  6.06e-11     5.09 
 8 mu         0.8    1.69        8.61e- 2  7.97e-19    12.7  
 9 mu         0.9    1.41        9.61e- 7  3.90e-34    36.8  
10 mu_1       0.1    0.00648     1.18e-27  1.38e-73     0.642
11 mu_1       0.2    0.330       2.24e-15  7.38e-48    26.3  
12 mu_1       0.3    0.708       2.00e- 8  4.63e-33    12.6  
13 mu_1       0.4    0.866       1.78e- 4  8.57e-23     7.58 
14 mu_1       0.5    0.839       3.73e- 2  4.48e-15     7.40 
15 mu_1       0.6    0.915       8.81e- 2  4.66e- 9    10.7  
16 mu_1       0.7    1.09        4.03e- 1  2.11e-11     5.20 
17 mu_1       0.8    1.69        7.24e- 2  2.96e-19    13.0  
18 mu_1       0.9    1.42        7.17e- 7  1.41e-34    37.1  
19 mu_0       0.1    0.00231     4.55e-29  1.56e-75     0.229
20 mu_0       0.2    0.250       3.03e-16  1.89e-49    21.1  
21 mu_0       0.3    0.678       3.92e- 9  2.03e-34    17.3  
22 mu_0       0.4    0.849       6.02e- 5  5.84e-24     7.68 
23 mu_0       0.5    0.869       1.74e- 2  4.59e-16     7.22 
24 mu_0       0.6    0.879       9.38e- 2  7.15e-10     9.35 
25 mu_0       0.7    1.05        2.88e- 1  1.42e-10     6.02 
26 mu_0       0.8    1.66        1.28e- 1  2.80e-18    11.5  
27 mu_0       0.9    1.38        2.95e- 6  2.63e-33    34.2  
[1] "Total run time was 372.331 seconds"
