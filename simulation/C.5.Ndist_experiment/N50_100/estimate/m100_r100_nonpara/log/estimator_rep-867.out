
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7605"
[1] "cluster size dist'n: "

 50  51  52  55  56  57  58  59  61  62  63  64  65  66  67  68  69  70  71  72 
  2   2   1   2   4   2   2   2   2   3   1   3   1   2   1   3   4   3   2   3 
 73  74  75  76  77  78  80  81  82  83  84  85  86  87  88  89  91  92  93  94 
  1   1   1   3   3   1   2   2   3   1   3   2   5   1   1   3   2   3   2   3 
 95  96  97  98  99 100 
  3   3   1   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02572 0.31015 0.58226 0.97819 6.00000 
[1] "event indicator table: "

   0    1 
4464 3141 
[1] "treatment indicator table: "

   0    1 
3007 4598 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3821
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3784
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 380.317 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.314 0.0656
 2 mu         0.1   0.2 0.421 0.0589
 3 mu         0.1   0.3 0.502 0.0684
 4 mu         0.1   0.4 0.549 0.0742
 5 mu         0.1   0.5 0.601 0.0806
 6 mu         0.2   0.1 0.336 0.0425
 7 mu         0.2   0.2 0.417 0.0366
 8 mu         0.2   0.3 0.498 0.0420
 9 mu         0.2   0.4 0.552 0.0461
10 mu         0.2   0.5 0.597 0.0467
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.975        0.627 0.00000188      5.17
 2 mu         0.2      0.989        0.895 0.0385          2.61
 3 mu         0.3      1.03         0.996 0.398           1.80
 4 mu         0.4      0.978        0.958 0.449           1.54
 5 mu         0.5      0.966        0.975 0.637           1.35
 6 mu         0.6      0.995        0.989 0.594           1.37
 7 mu         0.7      1.01         0.998 0.639           1.63
 8 mu         0.8      0.995        0.993 0.582           1.40
 9 mu         0.9      1.04         1.01  0.335           2.36
10 mu_1       0.1      0.990        0.719 0.00000567      4.57
11 mu_1       0.2      0.990        0.892 0.0597          2.64
12 mu_1       0.3      1.03         0.996 0.376           1.73
13 mu_1       0.4      0.974        0.967 0.460           1.48
14 mu_1       0.5      0.968        0.975 0.628           1.33
15 mu_1       0.6      0.996        0.997 0.595           1.40
16 mu_1       0.7      1.01         0.997 0.644           1.63
17 mu_1       0.8      0.995        0.994 0.586           1.40
18 mu_1       0.9      1.04         1.01  0.325           2.36
19 mu_0       0.1      0.973        0.600 0.00000146      5.33
20 mu_0       0.2      0.988        0.889 0.0332          2.60
21 mu_0       0.3      1.03         0.988 0.408           1.83
22 mu_0       0.4      0.981        0.954 0.441           1.58
23 mu_0       0.5      0.964        0.969 0.645           1.36
24 mu_0       0.6      0.993        0.991 0.591           1.34
25 mu_0       0.7      1.01         0.989 0.629           1.64
26 mu_0       0.8      0.992        0.984 0.564           1.46
27 mu_0       0.9      1.04         1.02  0.330           2.31
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.103      6.71e-26  1.68e-69      7.01
 2 mu         0.2     0.919      4.22e-13  1.57e-45     30.6 
 3 mu         0.3     1.03       2.83e- 7  2.22e-32     18.5 
 4 mu         0.4     0.936      1.02e- 3  3.75e-23      9.45
 5 mu         0.5     1.03       4.09e- 2  4.20e-16      9.86
 6 mu         0.6     1.09       2.52e- 1  8.83e-14      6.77
 7 mu         0.7     1.28       2.08e- 1  5.17e-22      8.91
 8 mu         0.8     1.13       1.28e- 2  3.11e-34      7.96
 9 mu         0.9     1.57       5.52e- 9  6.09e-56     25.8 
10 mu_1       0.1     0.175      3.84e-25  1.46e-68     11.2 
11 mu_1       0.2     0.919      1.24e-12  7.46e-45     30.1 
12 mu_1       0.3     1.05       5.91e- 7  7.04e-32     16.0 
13 mu_1       0.4     0.928      6.60e- 4  8.91e-23      8.35
14 mu_1       0.5     1.04       5.39e- 2  7.97e-16     10.6 
15 mu_1       0.6     1.09       2.73e- 1  2.72e-14      6.08
16 mu_1       0.7     1.29       1.82e- 1  1.36e-22      9.04
17 mu_1       0.8     1.13       1.03e- 2  7.18e-35      8.51
18 mu_1       0.9     1.57       3.83e- 9  1.25e-56     26.3 
19 mu_0       0.1     0.0949     3.19e-26  2.46e-70      6.54
20 mu_0       0.2     0.920      1.97e-13  9.81e-47     30.7 
21 mu_0       0.3     1.01       1.51e- 7  1.59e-33     19.6 
22 mu_0       0.4     0.942      9.72e- 4  3.13e-24     10.2 
23 mu_0       0.5     1.01       3.33e- 2  4.20e-17      9.10
24 mu_0       0.6     1.08       3.07e- 1  1.80e-13      7.82
25 mu_0       0.7     1.27       2.47e- 1  1.41e-21      8.60
26 mu_0       0.8     1.12       1.47e- 2  1.27e-33      7.95
27 mu_0       0.9     1.60       2.07e- 8  4.97e-55     21.5 
[1] "Total run time was 383.585 seconds"
