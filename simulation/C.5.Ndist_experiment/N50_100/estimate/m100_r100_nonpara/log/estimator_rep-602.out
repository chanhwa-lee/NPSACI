
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7608"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  64  66  67  68  70  71  72  73 
  3   1   1   2   1   1   2   2   5   3   1   4   3   2   3   1   3   3   3   1 
 74  75  77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  93  94  95 
  3   1   2   4   2   2   2   1   3   2   1   2   3   1   4   3   2   1   3   4 
 96  97  99 100 
  2   2   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04449 0.38611 0.64229 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4494 3114 
[1] "treatment indicator table: "

   0    1 
2734 4874 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3947
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3661
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 389.969 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.261 0.0480
 2 mu         0.1   0.2 0.336 0.0645
 3 mu         0.1   0.3 0.400 0.108 
 4 mu         0.1   0.4 0.395 0.112 
 5 mu         0.1   0.5 0.497 0.111 
 6 mu         0.2   0.1 0.332 0.0259
 7 mu         0.2   0.2 0.425 0.0393
 8 mu         0.2   0.3 0.490 0.0808
 9 mu         0.2   0.4 0.506 0.0910
10 mu         0.2   0.5 0.617 0.0756
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.692        0.164 0.0000000177      8.42
 2 mu         0.2      0.966        1.03  0.00645           3.66
 3 mu         0.3      1.01         0.989 0.288             2.74
 4 mu         0.4      0.988        0.980 0.398             1.78
 5 mu         0.5      1.04         1.02  0.600             1.89
 6 mu         0.6      1.03         1.03  0.635             1.48
 7 mu         0.7      0.987        1.01  0.656             1.41
 8 mu         0.8      0.977        0.982 0.403             1.62
 9 mu         0.9      1.01         0.980 0.307             2.33
10 mu_1       0.1      0.777        0.285 0.0000000558      8.75
11 mu_1       0.2      0.964        0.975 0.0111            3.00
12 mu_1       0.3      1.01         0.966 0.336             2.76
13 mu_1       0.4      0.991        0.989 0.418             1.75
14 mu_1       0.5      1.04         1.02  0.607             1.96
15 mu_1       0.6      1.03         1.02  0.631             1.42
16 mu_1       0.7      0.985        1.00  0.643             1.40
17 mu_1       0.8      0.977        0.981 0.403             1.63
18 mu_1       0.9      1.01         0.981 0.303             2.34
19 mu_0       0.1      0.682        0.150 0.0000000135      8.39
20 mu_0       0.2      0.967        0.995 0.00529           3.83
21 mu_0       0.3      1.01         0.996 0.268             2.73
22 mu_0       0.4      0.986        0.975 0.385             1.81
23 mu_0       0.5      1.04         1.01  0.593             1.83
24 mu_0       0.6      1.03         1.03  0.641             1.58
25 mu_0       0.7      0.991        1.01  0.684             1.44
26 mu_0       0.8      0.977        0.980 0.403             1.56
27 mu_0       0.9      1.01         0.980 0.346             2.37
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.741     1.00e-30  3.97e-77     74.0 
 2 mu         0.2      0.556     3.57e-17  9.59e-52     24.1 
 3 mu         0.3      1.59      2.55e- 9  5.22e-37     29.6 
 4 mu         0.4      1.14      6.33e- 5  1.17e-26     13.6 
 5 mu         0.5      1.04      3.79e- 2  9.78e-19     10.3 
 6 mu         0.6      1.09      2.38e- 1  4.79e-18      9.50
 7 mu         0.7      1.45      2.94e- 1  2.31e-27     19.0 
 8 mu         0.8      1.25      6.77e- 2  6.25e-41     14.0 
 9 mu         0.9      1.98      5.45e- 7  1.06e-64     42.0 
10 mu_1       0.1      0.958     7.21e-30  3.79e-76     95.5 
11 mu_1       0.2      0.596     1.10e-16  4.58e-51     30.6 
12 mu_1       0.3      1.63      5.26e- 9  1.66e-36     30.8 
13 mu_1       0.4      1.10      1.11e- 4  2.80e-26     14.2 
14 mu_1       0.5      1.04      3.75e- 2  1.87e-18      9.77
15 mu_1       0.6      1.10      2.64e- 1  1.03e-18      9.95
16 mu_1       0.7      1.45      2.65e- 1  4.26e-28     19.4 
17 mu_1       0.8      1.26      5.69e- 2  1.01e-41     15.1 
18 mu_1       0.9      1.95      3.91e- 7  1.52e-65     42.2 
19 mu_0       0.1      0.717     3.13e-31  1.98e-78     71.6 
20 mu_0       0.2      0.546     1.57e-17  5.39e-53     23.7 
21 mu_0       0.3      1.57      1.32e- 9  3.35e-38     31.6 
22 mu_0       0.4      1.17      3.14e- 5  8.80e-28     14.5 
23 mu_0       0.5      1.04      3.04e- 2  8.79e-20     10.8 
24 mu_0       0.6      1.06      2.68e- 1  1.04e-17      8.81
25 mu_0       0.7      1.44      2.47e- 1  6.70e-27     18.1 
26 mu_0       0.8      1.21      1.11e- 1  2.72e-40      9.64
27 mu_0       0.9      2.16      1.93e- 6  9.26e-64     40.3 
[1] "Total run time was 393.119 seconds"
