
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7356"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70 
  1   5   3   1   1   1   5   2   3   3   2   2   3   1   1   2   1   4   4   1 
 71  72  73  74  75  76  77  78  79  80  81  83  84  86  87  88  89  90  91  93 
  3   3   3   1   1   2   1   1   2   2   2   2   2   2   2   1   2   4   1   2 
 94  95  96  97  98 100 
  3   2   2   3   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03197 0.33642 0.60466 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4285 3071 
[1] "treatment indicator table: "

   0    1 
2863 4493 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3460
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3896
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 455.59 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.494 0.0993
 2 mu         0.1   0.2 0.628 0.130 
 3 mu         0.1   0.3 0.675 0.136 
 4 mu         0.1   0.4 0.712 0.141 
 5 mu         0.1   0.5 0.735 0.143 
 6 mu         0.2   0.1 0.367 0.0490
 7 mu         0.2   0.2 0.454 0.0665
 8 mu         0.2   0.3 0.488 0.0686
 9 mu         0.2   0.4 0.523 0.0614
10 mu         0.2   0.5 0.544 0.0515
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.19         0.687  5.69e-10     17.2 
 2 mu         0.2      0.933        0.918  1.96e- 3      3.86
 3 mu         0.3      0.976        0.948  2.64e- 1      2.27
 4 mu         0.4      0.985        0.979  4.60e- 1      1.63
 5 mu         0.5      0.987        0.980  6.07e- 1      1.45
 6 mu         0.6      0.994        0.990  6.38e- 1      1.37
 7 mu         0.7      1.01         0.996  5.93e- 1      1.72
 8 mu         0.8      1.00         0.972  5.67e- 1      1.47
 9 mu         0.9      1.01         0.985  2.55e- 1      2.00
10 mu_1       0.1      1.21         0.781  1.93e- 9     14.9 
11 mu_1       0.2      0.922        0.911  3.34e- 3      3.55
12 mu_1       0.3      0.982        0.944  2.43e- 1      2.20
13 mu_1       0.4      0.984        0.980  4.61e- 1      1.58
14 mu_1       0.5      0.987        0.977  6.03e- 1      1.46
15 mu_1       0.6      0.995        0.989  6.28e- 1      1.37
16 mu_1       0.7      1.01         0.988  5.98e- 1      1.73
17 mu_1       0.8      1.00         0.972  5.62e- 1      1.49
18 mu_1       0.9      1.01         0.979  2.54e- 1      2.03
19 mu_0       0.1      1.19         0.653  4.18e-10     17.4 
20 mu_0       0.2      0.935        0.919  1.61e- 3      3.94
21 mu_0       0.3      0.973        0.950  2.47e- 1      2.30
22 mu_0       0.4      0.985        0.972  4.58e- 1      1.66
23 mu_0       0.5      0.988        0.985  6.11e- 1      1.45
24 mu_0       0.6      0.993        0.975  6.53e- 1      1.36
25 mu_0       0.7      1.01         0.994  5.81e- 1      1.70
26 mu_0       0.8      1.00         0.985  5.88e- 1      1.43
27 mu_0       0.9      1.01         0.970  2.65e- 1      1.96
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.49      4.79e-26  4.64e-73    127.  
 2 mu         0.2      4.80      1.10e-13  3.94e-48    161.  
 3 mu         0.3      1.82      1.18e- 6  9.56e-34     43.3 
 4 mu         0.4      0.999     6.45e- 3  1.02e-23     19.2 
 5 mu         0.5      1.22      1.10e- 1  3.92e-16      7.86
 6 mu         0.6      1.14      2.77e- 1  3.68e-10      7.38
 7 mu         0.7      1.03      1.93e- 1  9.16e-15      7.62
 8 mu         0.8      1.39      1.23e- 3  2.32e-23     11.3 
 9 mu         0.9      1.47      1.01e- 9  3.35e-39     26.6 
10 mu_1       0.1      2.27      2.79e-25  4.28e-72    181.  
11 mu_1       0.2      4.64      3.22e-13  1.82e-47    158.  
12 mu_1       0.3      1.54      2.25e- 6  2.94e-33     36.1 
13 mu_1       0.4      0.983     7.77e- 3  2.34e-23     19.2 
14 mu_1       0.5      1.23      9.80e- 2  7.23e-16      7.86
15 mu_1       0.6      1.13      2.30e- 1  5.66e-10      7.50
16 mu_1       0.7      1.03      1.74e- 1  1.87e-15      7.56
17 mu_1       0.8      1.41      8.91e- 4  5.89e-24     11.7 
18 mu_1       0.9      1.45      6.61e-10  7.56e-40     26.5 
19 mu_0       0.1      1.41      1.77e-26  3.97e-74    121.  
20 mu_0       0.2      4.84      5.72e-14  3.78e-49    162.  
21 mu_0       0.3      1.94      7.26e- 7  1.05e-34     46.4 
22 mu_0       0.4      1.01      4.06e- 3  1.30e-24     19.2 
23 mu_0       0.5      1.20      1.18e- 1  6.03e-17      7.86
24 mu_0       0.6      1.16      2.90e- 1  7.08e-11      7.21
25 mu_0       0.7      1.02      1.47e- 1  2.62e-14      7.76
26 mu_0       0.8      1.32      2.61e- 3  9.25e-23     10.1 
27 mu_0       0.9      1.63      4.13e- 9  2.67e-38     27.2 
[1] "Total run time was 459.149 seconds"
