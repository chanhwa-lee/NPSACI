
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7338"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  68  70  71 
  1   3   3   1   1   2   2   3   3   4   3   1   3   1   4   1   3   3   4   1 
 73  74  76  77  78  79  80  81  83  84  85  87  88  89  92  93  95  96  97  98 
  2   3   2   2   5   3   3   3   4   2   2   3   1   3   1   4   1   4   1   2 
 99 100 
  1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04077 0.37438 0.62238 1.00000 6.19339 
[1] "event indicator table: "

   0    1 
4369 2969 
[1] "treatment indicator table: "

   0    1 
2639 4699 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3715
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3623
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 434.386 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.356 0.0990
 2 mu         0.1   0.2 0.424 0.0982
 3 mu         0.1   0.3 0.465 0.108 
 4 mu         0.1   0.4 0.511 0.132 
 5 mu         0.1   0.5 0.503 0.122 
 6 mu         0.2   0.1 0.380 0.0898
 7 mu         0.2   0.2 0.463 0.0841
 8 mu         0.2   0.3 0.518 0.0953
 9 mu         0.2   0.4 0.566 0.120 
10 mu         0.2   0.5 0.569 0.109 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.730       0.0447  1.40e-10      8.09
 2 mu         0.2      0.930       0.696   8.45e- 4      6.46
 3 mu         0.3      1.02        0.998   2.06e- 1      2.91
 4 mu         0.4      1.04        0.976   3.44e- 1      2.24
 5 mu         0.5      0.996       0.966   5.75e- 1      1.44
 6 mu         0.6      1.00        0.984   7.07e- 1      1.42
 7 mu         0.7      0.984       0.981   6.53e- 1      1.46
 8 mu         0.8      0.992       0.980   4.92e- 1      1.46
 9 mu         0.9      1.05        1.03    3.77e- 1      2.42
10 mu_1       0.1      0.742       0.0926  5.35e-10      7.01
11 mu_1       0.2      0.938       0.682   1.62e- 3      5.44
12 mu_1       0.3      1.04        1.01    2.51e- 1      3.09
13 mu_1       0.4      1.03        0.992   3.61e- 1      2.09
14 mu_1       0.5      0.997       0.975   5.87e- 1      1.47
15 mu_1       0.6      1.00        0.998   6.96e- 1      1.43
16 mu_1       0.7      0.983       0.978   6.55e- 1      1.48
17 mu_1       0.8      0.993       0.982   4.80e- 1      1.48
18 mu_1       0.9      1.06        1.03    3.60e- 1      2.42
19 mu_0       0.1      0.729       0.0394  9.59e-11      8.21
20 mu_0       0.2      0.928       0.681   6.51e- 4      6.72
21 mu_0       0.3      1.02        0.957   1.87e- 1      2.83
22 mu_0       0.4      1.04        0.978   3.33e- 1      2.33
23 mu_0       0.5      0.995       0.965   5.64e- 1      1.41
24 mu_0       0.6      1.00        0.997   7.09e- 1      1.42
25 mu_0       0.7      0.987       0.988   6.50e- 1      1.41
26 mu_0       0.8      0.987       0.972   5.07e- 1      1.39
27 mu_0       0.9      1.05        1.01    3.16e- 1      2.37
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.192     7.75e-29  4.65e-71     19.2 
 2 mu         0.2      0.722     5.71e-16  1.34e-45     61.9 
 3 mu         0.3      0.967     2.15e- 9  1.89e-32     20.2 
 4 mu         0.4      1.44      5.02e- 5  3.20e-23     28.0 
 5 mu         0.5      1.24      3.34e- 2  3.57e-16     21.6 
 6 mu         0.6      1.05      3.47e- 1  1.52e-10      6.58
 7 mu         0.7      1.37      2.37e- 1  4.82e-13     16.0 
 8 mu         0.8      0.949     2.94e- 2  7.31e-22      9.07
 9 mu         0.9      1.33      1.44e- 7  6.02e-38     23.5 
10 mu_1       0.1      0.332     5.14e-28  4.05e-70     33.1 
11 mu_1       0.2      0.680     2.02e-15  6.35e-45     53.6 
12 mu_1       0.3      1.04      5.04e- 9  5.99e-32     24.1 
13 mu_1       0.4      1.42      8.39e- 5  7.59e-23     25.1 
14 mu_1       0.5      1.23      3.88e- 2  6.79e-16     20.1 
15 mu_1       0.6      1.05      3.29e- 1  2.41e-10      6.98
16 mu_1       0.7      1.37      2.11e- 1  1.85e-13     15.6 
17 mu_1       0.8      0.947     2.90e- 2  2.46e-22      8.50
18 mu_1       0.9      1.33      1.02e- 7  1.80e-38     23.9 
19 mu_0       0.1      0.176     2.90e-29  6.72e-72     17.6 
20 mu_0       0.2      0.732     2.08e-16  8.35e-47     64.0 
21 mu_0       0.3      0.935     9.10e-10  1.35e-33     18.5 
22 mu_0       0.4      1.45      2.77e- 5  2.66e-24     30.0 
23 mu_0       0.5      1.25      2.24e- 2  3.57e-17     23.2 
24 mu_0       0.6      1.04      3.26e- 1  1.91e-11      5.99
25 mu_0       0.7      1.37      2.24e- 1  1.17e-12     16.8 
26 mu_0       0.8      0.959     4.84e- 2  2.67e-21     11.3 
27 mu_0       0.9      1.29      5.27e- 7  4.40e-37     19.6 
[1] "Total run time was 437.93 seconds"
