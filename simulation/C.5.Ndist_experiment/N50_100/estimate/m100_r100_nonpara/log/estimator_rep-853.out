
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7470"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  63  64  67  68  69  70  71  72 
  2   5   3   2   4   1   2   3   3   4   1   1   1   2   4   1   1   1   1   4 
 73  74  75  76  77  78  80  81  82  85  87  88  89  90  91  92  95  96  97  98 
  1   1   4   2   2   3   6   1   1   1   4   2   2   1   2   4   3   3   1   2 
 99 100 
  4   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04155 0.36762 0.62103 1.00000 7.48461 
[1] "event indicator table: "

   0    1 
4425 3045 
[1] "treatment indicator table: "

   0    1 
2724 4746 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3677
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3793
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 405.884 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.467 0.0733
 2 mu         0.1   0.2 0.543 0.0820
 3 mu         0.1   0.3 0.611 0.0977
 4 mu         0.1   0.4 0.655 0.0974
 5 mu         0.1   0.5 0.686 0.108 
 6 mu         0.2   0.1 0.379 0.0336
 7 mu         0.2   0.2 0.446 0.0298
 8 mu         0.2   0.3 0.506 0.0374
 9 mu         0.2   0.4 0.557 0.0394
10 mu         0.2   0.5 0.577 0.0434
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.20         0.677  8.86e-10     12.6 
 2 mu         0.2      1.05         0.981  2.51e- 3      3.05
 3 mu         0.3      1.04         1.01   3.69e- 1      1.89
 4 mu         0.4      1.03         0.995  6.50e- 1      1.77
 5 mu         0.5      0.990        1.00   5.88e- 1      1.54
 6 mu         0.6      0.998        0.988  6.62e- 1      1.53
 7 mu         0.7      0.998        1.00   4.64e- 1      1.46
 8 mu         0.8      1.00         0.994  5.63e- 1      1.60
 9 mu         0.9      0.981        1.00   1.69e- 1      2.44
10 mu_1       0.1      1.18         0.806  2.91e- 9     10.3 
11 mu_1       0.2      1.03         0.976  4.23e- 3      2.72
12 mu_1       0.3      1.05         1.02   4.30e- 1      1.92
13 mu_1       0.4      1.03         0.989  6.49e- 1      1.76
14 mu_1       0.5      0.989        1.00   5.83e- 1      1.55
15 mu_1       0.6      0.999        0.997  6.62e- 1      1.53
16 mu_1       0.7      0.998        0.999  4.49e- 1      1.47
17 mu_1       0.8      1.00         0.993  5.49e- 1      1.62
18 mu_1       0.9      0.979        1.00   1.59e- 1      2.47
19 mu_0       0.1      1.21         0.673  6.61e-10     12.8 
20 mu_0       0.2      1.06         0.973  2.08e- 3      3.13
21 mu_0       0.3      1.04         1.00   3.44e- 1      1.88
22 mu_0       0.4      1.04         1.00   6.25e- 1      1.77
23 mu_0       0.5      0.991        0.998  5.93e- 1      1.53
24 mu_0       0.6      0.997        0.988  6.62e- 1      1.53
25 mu_0       0.7      0.998        1.01   4.99e- 1      1.44
26 mu_0       0.8      0.999        0.998  5.66e- 1      1.56
27 mu_0       0.9      0.994        1.01   2.56e- 1      2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000195     1.30e-24  2.90e-83    0.0187
 2 mu         0.2   0.182        1.19e-13  2.83e-55   10.6   
 3 mu         0.3   0.814        2.01e- 7  4.53e-39   14.9   
 4 mu         0.4   0.688        1.21e- 3  9.97e-28    7.59  
 5 mu         0.5   1.02         1.28e- 1  4.30e-19    7.30  
 6 mu         0.6   1.14         2.32e- 1  3.13e-12    8.64  
 7 mu         0.7   0.973        2.47e- 1  7.21e-15    6.88  
 8 mu         0.8   1.44         1.59e- 2  4.85e-25   12.9   
 9 mu         0.9   2.48         1.16e- 8  1.25e-43   33.6   
10 mu_1       0.1   0.000487     9.13e-24  2.72e-82    0.0462
11 mu_1       0.2   0.244        3.96e-13  1.33e-54   13.1   
12 mu_1       0.3   0.838        4.18e- 7  1.42e-38   15.2   
13 mu_1       0.4   0.691        1.86e- 3  2.34e-27    8.23  
14 mu_1       0.5   1.04         1.22e- 1  8.08e-19    7.59  
15 mu_1       0.6   1.13         2.37e- 1  4.90e-12    8.13  
16 mu_1       0.7   0.967        1.99e- 1  2.83e-15    6.66  
17 mu_1       0.8   1.46         1.27e- 2  1.66e-25   13.3   
18 mu_1       0.9   2.50         8.09e- 9  3.81e-44   34.8   
19 mu_0       0.1   0.000163     4.30e-25  1.93e-84    0.0157
20 mu_0       0.2   0.167        5.01e-14  2.12e-56    9.97  
21 mu_0       0.3   0.804        1.08e- 7  3.88e-40   14.7   
22 mu_0       0.4   0.687        7.86e- 4  9.97e-29    7.16  
23 mu_0       0.5   0.991        9.75e- 2  5.16e-20    7.01  
24 mu_0       0.6   1.14         2.96e- 1  4.69e-13    9.40  
25 mu_0       0.7   0.987        1.87e- 1  1.74e-14    7.38  
26 mu_0       0.8   1.33         2.27e- 2  1.76e-24   11.1   
27 mu_0       0.9   2.23         4.37e- 8  9.05e-43   31.5   
[1] "Total run time was 409.047 seconds"
