
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7730"
[1] "cluster size dist'n: "

 50  52  53  54  57  58  59  60  61  62  63  64  65  66  68  69  70  71  73  74 
  1   1   2   2   2   3   6   1   2   3   2   2   3   2   1   2   3   4   2   2 
 76  77  78  79  80  82  83  84  85  86  88  89  90  91  92  93  94  96  97  98 
  3   1   1   1   2   2   1   2   1   4   6   2   3   2   2   4   3   5   2   2 
 99 100 
  3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04119 0.36432 0.62571 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4527 3203 
[1] "treatment indicator table: "

   0    1 
2910 4820 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3901
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3829
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 531.044 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.366 0.0770
 2 mu         0.1   0.2 0.422 0.0776
 3 mu         0.1   0.3 0.447 0.0875
 4 mu         0.1   0.4 0.477 0.111 
 5 mu         0.1   0.5 0.516 0.124 
 6 mu         0.2   0.1 0.417 0.0570
 7 mu         0.2   0.2 0.497 0.0546
 8 mu         0.2   0.3 0.544 0.0594
 9 mu         0.2   0.4 0.589 0.0708
10 mu         0.2   0.5 0.632 0.0794
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.936        0.307 0.00000506      9.89
 2 mu         0.2      1.13         0.919 0.0509          5.02
 3 mu         0.3      0.985        0.921 0.206           2.06
 4 mu         0.4      0.979        0.954 0.484           1.66
 5 mu         0.5      0.999        0.977 0.624           1.48
 6 mu         0.6      1.03         1.01  0.601           1.47
 7 mu         0.7      1.02         0.999 0.661           1.58
 8 mu         0.8      0.992        0.969 0.448           1.76
 9 mu         0.9      0.979        0.930 0.263           2.71
10 mu_1       0.1      0.965        0.419 0.0000151       8.79
11 mu_1       0.2      1.14         0.983 0.0767          4.61
12 mu_1       0.3      0.978        0.932 0.210           2.01
13 mu_1       0.4      0.979        0.963 0.485           1.65
14 mu_1       0.5      1.00         0.975 0.633           1.47
15 mu_1       0.6      1.03         1.01  0.610           1.46
16 mu_1       0.7      1.02         1.00  0.649           1.59
17 mu_1       0.8      0.990        0.959 0.441           1.75
18 mu_1       0.9      0.979        0.937 0.264           2.70
19 mu_0       0.1      0.933        0.289 0.00000395     10.0 
20 mu_0       0.2      1.13         0.910 0.0444          5.15
21 mu_0       0.3      0.987        0.911 0.204           2.09
22 mu_0       0.4      0.979        0.952 0.484           1.67
23 mu_0       0.5      0.996        0.982 0.615           1.49
24 mu_0       0.6      1.03         1.01  0.587           1.53
25 mu_0       0.7      1.02         0.992 0.689           1.55
26 mu_0       0.8      0.996        0.972 0.473           1.80
27 mu_0       0.9      0.986        0.929 0.254           2.79
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      9.08      2.61e-28  3.46e-67    907.  
 2 mu         0.2      0.492     2.52e-15  2.58e-43     25.2 
 3 mu         0.3      0.797     6.44e- 9  1.24e-29     18.0 
 4 mu         0.4      0.774     7.66e- 5  3.51e-20     12.5 
 5 mu         0.5      1.09      6.90e- 3  4.01e-13     11.3 
 6 mu         0.6      1.03      1.62e- 1  4.02e-17      7.85
 7 mu         0.7      1.15      1.79e- 1  4.93e-25     13.1 
 8 mu         0.8      1.74      7.35e- 2  2.30e-36     14.0 
 9 mu         0.9      1.27      3.31e- 6  5.61e-56     30.8 
10 mu_1       0.1      6.40      1.49e-27  3.08e-66    639.  
11 mu_1       0.2      0.471     8.81e-15  1.15e-42     26.6 
12 mu_1       0.3      0.810     1.45e- 8  3.69e-29     16.2 
13 mu_1       0.4      0.781     1.33e- 4  7.81e-20     13.8 
14 mu_1       0.5      1.11      8.83e- 3  7.14e-13     12.1 
15 mu_1       0.6      1.01      1.68e- 1  4.72e-18      7.85
16 mu_1       0.7      1.17      1.77e- 1  4.96e-26     14.1 
17 mu_1       0.8      1.75      6.11e- 2  2.02e-37     13.5 
18 mu_1       0.9      1.24      2.36e- 6  4.39e-57     30.4 
19 mu_0       0.1      9.37      1.24e-28  4.23e-68    937.  
20 mu_0       0.2      0.498     9.44e-16  3.54e-44     24.9 
21 mu_0       0.3      0.791     3.10e- 9  1.95e-30     18.9 
22 mu_0       0.4      0.769     3.90e- 5  6.43e-21     11.6 
23 mu_0       0.5      1.07      6.37e- 3  8.82e-14     12.1 
24 mu_0       0.6      1.05      1.08e- 1  9.34e-17      7.85
25 mu_0       0.7      1.10      1.18e- 1  1.53e-24     10.8 
26 mu_0       0.8      1.67      1.23e- 1  1.07e-35     16.5 
27 mu_0       0.9      1.58      1.12e- 5  5.21e-55     34.2 
[1] "Total run time was 535.104 seconds"
