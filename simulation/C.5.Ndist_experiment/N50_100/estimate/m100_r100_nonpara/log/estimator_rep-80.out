
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7547"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69  71  72 
  3   1   2   1   1   1   2   2   4   1   4   2   2   2   4   3   3   3   2   2 
 73  74  75  76  77  78  79  80  81  82  83  84  85  87  88  90  91  92  93  94 
  2   1   4   1   2   3   2   1   1   3   1   2   1   4   4   1   2   2   3   2 
 95  96  97  98 100 
  3   2   2   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05259 0.39277 0.65589 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4462 3085 
[1] "treatment indicator table: "

   0    1 
2743 4804 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3775
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3772
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 576.473 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.419 0.0833
 2 mu         0.1   0.2 0.511 0.105 
 3 mu         0.1   0.3 0.571 0.111 
 4 mu         0.1   0.4 0.645 0.116 
 5 mu         0.1   0.5 0.686 0.123 
 6 mu         0.2   0.1 0.341 0.0456
 7 mu         0.2   0.2 0.414 0.0565
 8 mu         0.2   0.3 0.469 0.0556
 9 mu         0.2   0.4 0.538 0.0568
10 mu         0.2   0.5 0.573 0.0594
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.09         0.228 0.0000000263     11.2 
 2 mu         0.2      0.959        0.949 0.00949           3.11
 3 mu         0.3      0.980        0.946 0.185             1.95
 4 mu         0.4      1.01         1.04  0.366             1.63
 5 mu         0.5      0.974        0.982 0.615             1.46
 6 mu         0.6      0.975        0.964 0.466             1.49
 7 mu         0.7      1.03         1.02  0.581             1.48
 8 mu         0.8      1.00         1.00  0.571             1.57
 9 mu         0.9      0.995        0.988 0.337             1.77
10 mu_1       0.1      1.03         0.361 0.0000000815      8.06
11 mu_1       0.2      0.962        0.955 0.0152            2.98
12 mu_1       0.3      0.982        0.943 0.204             1.86
13 mu_1       0.4      1.01         1.02  0.394             1.61
14 mu_1       0.5      0.970        0.984 0.619             1.44
15 mu_1       0.6      0.978        0.968 0.460             1.51
16 mu_1       0.7      1.03         1.02  0.577             1.47
17 mu_1       0.8      1.00         0.998 0.561             1.57
18 mu_1       0.9      0.994        0.984 0.335             1.77
19 mu_0       0.1      1.10         0.213 0.0000000202     11.6 
20 mu_0       0.2      0.958        0.941 0.00808           3.14
21 mu_0       0.3      0.980        0.943 0.177             1.99
22 mu_0       0.4      1.01         1.03  0.347             1.64
23 mu_0       0.5      0.978        0.988 0.611             1.47
24 mu_0       0.6      0.970        0.960 0.474             1.47
25 mu_0       0.7      1.03         1.01  0.585             1.54
26 mu_0       0.8      1.00         1.01  0.608             1.56
27 mu_0       0.9      1.00         1.00  0.349             1.88
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00889     1.07e-29  4.84e-75     0.548
 2 mu         0.2    0.846       4.37e-17  2.92e-49    31.0  
 3 mu         0.3    0.938       6.27e-10  1.10e-34    15.1  
 4 mu         0.4    0.996       2.57e- 5  5.88e-25    10.7  
 5 mu         0.5    0.919       5.49e- 3  1.60e-17     7.86 
 6 mu         0.6    0.862       6.72e- 2  1.42e-11    11.8  
 7 mu         0.7    1.19        7.99e- 2  5.66e-16    10.5  
 8 mu         0.8    1.00        1.44e- 1  1.96e-25     8.74 
 9 mu         0.9    1.14        2.57e- 5  8.54e-43    14.1  
10 mu_1       0.1    0.0195      7.62e-29  4.44e-74     1.19 
11 mu_1       0.2    0.987       1.59e-16  1.34e-48    33.7  
12 mu_1       0.3    0.892       1.45e- 9  3.50e-34    14.1  
13 mu_1       0.4    1.01        4.46e- 5  1.40e-24    10.9  
14 mu_1       0.5    0.918       7.85e- 3  3.06e-17     8.53 
15 mu_1       0.6    0.864       6.74e- 2  2.25e-11    11.7  
16 mu_1       0.7    1.20        8.66e- 2  1.72e-16    10.3  
17 mu_1       0.8    0.996       1.39e- 1  5.22e-26     8.31 
18 mu_1       0.9    1.14        1.94e- 5  2.51e-43    14.3  
19 mu_0       0.1    0.00771     3.41e-30  4.53e-76     0.477
20 mu_0       0.2    0.811       1.52e-17  3.07e-50    30.4  
21 mu_0       0.3    0.957       2.74e-10  7.49e-36    15.5  
22 mu_0       0.4    0.989       1.32e- 5  4.67e-26    10.5  
23 mu_0       0.5    0.919       4.14e- 3  1.53e-18     7.20 
24 mu_0       0.6    0.860       8.31e- 2  1.69e-12    11.9  
25 mu_0       0.7    1.18        5.71e- 2  1.48e-15    10.8  
26 mu_0       0.8    1.01        8.88e- 2  7.69e-25    10.4  
27 mu_0       0.9    1.15        7.90e- 5  6.28e-42    12.4  
[1] "Total run time was 580.924 seconds"
