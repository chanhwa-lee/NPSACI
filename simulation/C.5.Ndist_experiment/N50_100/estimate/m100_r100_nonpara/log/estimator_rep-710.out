
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7538"
[1] "cluster size dist'n: "

 51  52  53  56  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73 
  5   2   1   1   4   1   1   2   2   1   5   1   2   3   4   2   2   2   1   2 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92  94  95 
  3   2   2   2   3   1   3   4   1   4   5   1   4   2   2   1   4   1   2   2 
 96  97 100 
  1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04425 0.33865 0.60291 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4453 3085 
[1] "treatment indicator table: "

   0    1 
2762 4776 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3854
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3684
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 388.855 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.276 0.0796
 2 mu         0.1   0.2 0.348 0.104 
 3 mu         0.1   0.3 0.410 0.0908
 4 mu         0.1   0.4 0.417 0.0837
 5 mu         0.1   0.5 0.429 0.0884
 6 mu         0.2   0.1 0.342 0.0639
 7 mu         0.2   0.2 0.444 0.0855
 8 mu         0.2   0.3 0.516 0.0658
 9 mu         0.2   0.4 0.546 0.0508
10 mu         0.2   0.5 0.574 0.0542
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.662       0.0787 0.00000904      8.14
 2 mu         0.2      0.964       0.830  0.0625          4.33
 3 mu         0.3      1.05        0.975  0.397           2.18
 4 mu         0.4      1.02        1.00   0.379           1.83
 5 mu         0.5      1.01        0.993  0.571           1.99
 6 mu         0.6      0.972       0.962  0.623           1.36
 7 mu         0.7      0.989       0.988  0.603           1.35
 8 mu         0.8      0.997       0.999  0.443           1.39
 9 mu         0.9      0.977       0.955  0.229           2.50
10 mu_1       0.1      0.699       0.144  0.0000284       5.91
11 mu_1       0.2      0.995       0.834  0.0951          4.52
12 mu_1       0.3      1.05        0.996  0.367           1.95
13 mu_1       0.4      1.02        0.998  0.415           1.90
14 mu_1       0.5      1.00        0.988  0.567           1.93
15 mu_1       0.6      0.972       0.972  0.623           1.35
16 mu_1       0.7      0.990       0.979  0.590           1.34
17 mu_1       0.8      0.997       0.993  0.437           1.43
18 mu_1       0.9      0.978       0.950  0.216           2.53
19 mu_0       0.1      0.658       0.0705 0.00000690      8.38
20 mu_0       0.2      0.957       0.821  0.0532          4.29
21 mu_0       0.3      1.05        0.962  0.393           2.27
22 mu_0       0.4      1.02        1.01   0.355           1.79
23 mu_0       0.5      1.01        0.997  0.576           2.04
24 mu_0       0.6      0.972       0.959  0.622           1.38
25 mu_0       0.7      0.987       0.987  0.632           1.36
26 mu_0       0.8      1.00        0.996  0.438           1.47
27 mu_0       0.9      0.970       0.963  0.338           2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000831     3.18e-29  9.94e-82    0.0743
 2 mu         0.2   0.285        9.29e-16  7.68e-55   21.0   
 3 mu         0.3   0.969        6.33e- 9  3.18e-39   17.0   
 4 mu         0.4   0.929        2.74e- 4  3.01e-28    7.43  
 5 mu         0.5   0.841        7.82e- 2  7.65e-20    9.95  
 6 mu         0.6   1.04         1.66e- 1  4.19e-13    9.16  
 7 mu         0.7   1.10         2.82e- 1  2.57e-14   12.0   
 8 mu         0.8   1.01         1.05e- 2  1.74e-23    9.76  
 9 mu         0.9   1.47         2.25e- 8  1.08e-41   41.3   
10 mu_1       0.1   0.00202      2.07e-28  9.52e-81    0.176 
11 mu_1       0.2   0.364        2.98e-15  3.68e-54   24.9   
12 mu_1       0.3   1.02         1.36e- 8  1.01e-38   18.2   
13 mu_1       0.4   0.904        4.38e- 4  7.20e-28    6.79  
14 mu_1       0.5   0.841        9.47e- 2  1.47e-19    9.58  
15 mu_1       0.6   1.04         2.00e- 1  6.69e-13    9.41  
16 mu_1       0.7   1.11         2.70e- 1  8.69e-15   12.7   
17 mu_1       0.8   1.01         8.27e- 3  5.15e-24   10.2   
18 mu_1       0.9   1.49         1.63e- 8  3.83e-42   43.2   
19 mu_0       0.1   0.000699     1.23e-29  4.70e-83    0.0630
20 mu_0       0.2   0.265        4.15e-16  4.09e-56   20.1   
21 mu_0       0.3   0.948        3.38e- 9  1.93e-40   16.5   
22 mu_0       0.4   0.945        1.65e- 4  2.13e-29    7.86  
23 mu_0       0.5   0.842        5.84e- 2  6.51e-21   10.3   
24 mu_0       0.6   1.03         1.49e- 1  4.46e-14    9.51  
25 mu_0       0.7   1.09         2.93e- 1  6.53e-14   10.4   
26 mu_0       0.8   1.03         1.56e- 2  6.63e-23    8.08  
27 mu_0       0.9   1.25         7.81e- 8  7.33e-41   24.9   
[1] "Total run time was 392.065 seconds"
