
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7733"
[1] "cluster size dist'n: "

 50  52  53  54  56  57  58  59  60  61  63  64  65  66  67  68  69  70  71  72 
  2   2   1   1   4   2   2   2   4   5   2   1   2   1   1   1   1   2   3   1 
 73  74  75  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92  93  94 
  1   3   1   2   2   2   2   1   3   3   3   1   4   1   4   2   1   2   1   3 
 95  96  97  98  99 100 
  3   2   5   2   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0421  0.3884  0.6409  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4621 3112 
[1] "treatment indicator table: "

   0    1 
2576 5157 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3963
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3770
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 404.844 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.321 0.0604
 2 mu         0.1   0.2 0.444 0.106 
 3 mu         0.1   0.3 0.518 0.118 
 4 mu         0.1   0.4 0.535 0.130 
 5 mu         0.1   0.5 0.565 0.120 
 6 mu         0.2   0.1 0.317 0.0419
 7 mu         0.2   0.2 0.434 0.0853
 8 mu         0.2   0.3 0.505 0.0938
 9 mu         0.2   0.4 0.531 0.105 
10 mu         0.2   0.5 0.562 0.0926
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.867        0.175 0.000000188      6.17
 2 mu         0.2      0.915        0.829 0.0139           2.43
 3 mu         0.3      0.960        0.965 0.200            2.39
 4 mu         0.4      1.00         0.974 0.444            2.36
 5 mu         0.5      1.02         1.00  0.498            1.59
 6 mu         0.6      1.00         0.987 0.625            1.58
 7 mu         0.7      0.994        0.978 0.469            1.57
 8 mu         0.8      0.994        0.996 0.531            1.43
 9 mu         0.9      0.976        0.987 0.242            1.67
10 mu_1       0.1      0.936        0.289 0.000000570      7.81
11 mu_1       0.2      0.917        0.848 0.0217           2.40
12 mu_1       0.3      0.961        0.973 0.204            2.26
13 mu_1       0.4      1.01         0.987 0.462            2.38
14 mu_1       0.5      1.01         0.999 0.498            1.57
15 mu_1       0.6      1.00         0.992 0.609            1.57
16 mu_1       0.7      0.993        0.980 0.458            1.56
17 mu_1       0.8      0.994        0.997 0.539            1.44
18 mu_1       0.9      0.975        0.975 0.232            1.66
19 mu_0       0.1      0.859        0.163 0.000000146      6.36
20 mu_0       0.2      0.915        0.822 0.0119           2.44
21 mu_0       0.3      0.959        0.958 0.198            2.45
22 mu_0       0.4      1.00         0.964 0.432            2.34
23 mu_0       0.5      1.02         0.990 0.497            1.62
24 mu_0       0.6      1.00         0.999 0.647            1.60
25 mu_0       0.7      0.995        0.971 0.495            1.57
26 mu_0       0.8      0.994        0.994 0.497            1.41
27 mu_0       0.9      0.989        0.998 0.332            1.70
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.47      7.29e-33  4.84e-80    244.  
 2 mu         0.2      2.48      1.61e-18  5.26e-54    166.  
 3 mu         0.3      0.906     7.45e-11  7.37e-39     29.6 
 4 mu         0.4      0.723     3.35e- 6  3.44e-28      9.47
 5 mu         0.5      0.660     2.70e- 3  5.37e-20      9.10
 6 mu         0.6      0.969     3.98e- 2  4.01e-15      9.02
 7 mu         0.7      1.01      2.83e- 1  3.65e-24      6.36
 8 mu         0.8      1.27      3.90e- 1  1.47e-37      7.49
 9 mu         0.9      1.80      1.81e- 4  2.53e-61     30.4 
10 mu_1       0.1      3.45      5.09e-32  4.68e-79    339.  
11 mu_1       0.2      2.02      5.69e-18  2.54e-53    115.  
12 mu_1       0.3      0.892     1.78e-10  2.37e-38     24.6 
13 mu_1       0.4      0.713     6.06e- 6  8.31e-28      9.35
14 mu_1       0.5      0.668     4.00e- 3  1.04e-19      8.79
15 mu_1       0.6      0.978     4.64e- 2  1.20e-15      8.87
16 mu_1       0.7      1.01      2.64e- 1  9.39e-25      6.58
17 mu_1       0.8      1.28      3.51e- 1  3.31e-38      7.89
18 mu_1       0.9      1.79      1.46e- 4  5.06e-62     30.9 
19 mu_0       0.1      2.36      2.44e-33  1.79e-81    233.  
20 mu_0       0.2      2.60      5.95e-19  2.19e-55    178.  
21 mu_0       0.3      0.911     3.00e-11  3.51e-40     31.7 
22 mu_0       0.4      0.730     1.56e- 6  1.91e-29      9.55
23 mu_0       0.5      0.652     1.43e- 3  3.58e-21      9.42
24 mu_0       0.6      0.957     2.37e- 2  8.21e-15      9.26
25 mu_0       0.7      0.997     2.35e- 1  9.99e-24      6.66
26 mu_0       0.8      1.20      2.51e- 1  6.02e-37      7.29
27 mu_0       0.9      1.90      4.88e- 4  2.08e-60     25.8 
[1] "Total run time was 408.415 seconds"
