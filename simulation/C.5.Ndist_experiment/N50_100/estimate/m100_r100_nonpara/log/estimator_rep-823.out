
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7474"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  1   1   2   4   2   2   1   2   1   1   3   1   1   6   3   3   4   4   1   1 
 71  73  74  76  77  78  79  80  81  82  84  86  87  88  89  90  92  93  94  95 
  4   2   2   2   2   1   3   2   6   2   3   1   5   1   2   1   1   2   3   2 
 97  98  99 100 
  4   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03413 0.33591 0.59978 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4487 2987 
[1] "treatment indicator table: "

   0    1 
2794 4680 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3531
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3943
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 392.404 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.275 0.129 
 2 mu         0.1   0.2 0.281 0.152 
 3 mu         0.1   0.3 0.372 0.147 
 4 mu         0.1   0.4 0.394 0.158 
 5 mu         0.1   0.5 0.395 0.166 
 6 mu         0.2   0.1 0.306 0.0919
 7 mu         0.2   0.2 0.349 0.109 
 8 mu         0.2   0.3 0.443 0.103 
 9 mu         0.2   0.4 0.474 0.111 
10 mu         0.2   0.5 0.487 0.117 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.793        0.652 0.000112       4.23
 2 mu         0.2      0.969        0.966 0.121          1.93
 3 mu         0.3      1.06         1.05  0.289          2.22
 4 mu         0.4      1.01         1.02  0.480          1.54
 5 mu         0.5      0.968        0.978 0.556          1.45
 6 mu         0.6      0.985        0.976 0.572          1.49
 7 mu         0.7      1.02         1.00  0.720          1.40
 8 mu         0.8      1.03         1.05  0.656          1.58
 9 mu         0.9      1.03         1.02  0.292          1.91
10 mu_1       0.1      0.825        0.747 0.000269       3.42
11 mu_1       0.2      0.987        0.940 0.124          2.00
12 mu_1       0.3      1.06         1.05  0.351          2.12
13 mu_1       0.4      1.01         1.03  0.483          1.53
14 mu_1       0.5      0.967        0.975 0.570          1.45
15 mu_1       0.6      0.987        0.984 0.563          1.47
16 mu_1       0.7      1.02         1.01  0.719          1.40
17 mu_1       0.8      1.03         1.05  0.655          1.57
18 mu_1       0.9      1.03         1.01  0.288          1.91
19 mu_0       0.1      0.790        0.641 0.0000948      4.35
20 mu_0       0.2      0.965        0.976 0.120          1.94
21 mu_0       0.3      1.06         1.03  0.262          2.27
22 mu_0       0.4      1.01         1.02  0.465          1.59
23 mu_0       0.5      0.969        0.973 0.534          1.45
24 mu_0       0.6      0.983        0.977 0.585          1.52
25 mu_0       0.7      1.02         1.01  0.715          1.41
26 mu_0       0.8      1.03         1.02  0.648          1.58
27 mu_0       0.9      1.04         1.07  0.323          1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.17      8.87e-26  4.45e-73    189.  
 2 mu         0.2      0.174     9.17e-14  1.19e-47     13.6 
 3 mu         0.3      0.632     1.92e- 7  5.00e-33     16.1 
 4 mu         0.4      1.49      8.82e- 4  6.93e-23     23.3 
 5 mu         0.5      1.17      1.26e- 1  3.66e-17      7.23
 6 mu         0.6      1.12      1.41e- 1  3.38e-25      7.19
 7 mu         0.7      0.992     6.43e- 2  9.85e-36      8.95
 8 mu         0.8      1.20      1.35e- 2  9.19e-51     17.0 
 9 mu         0.9      1.20      7.52e- 8  1.07e-76     13.3 
10 mu_1       0.1      1.40      5.08e-25  4.03e-72    103.  
11 mu_1       0.2      0.143     3.17e-13  5.40e-47      9.02
12 mu_1       0.3      0.732     3.87e- 7  1.51e-32     18.7 
13 mu_1       0.4      1.50      1.40e- 3  1.57e-22     23.0 
14 mu_1       0.5      1.16      1.64e- 1  3.98e-18      7.23
15 mu_1       0.6      1.12      1.43e- 1  3.06e-26      7.19
16 mu_1       0.7      0.993     5.08e- 2  7.65e-37      9.41
17 mu_1       0.8      1.21      1.24e- 2  6.25e-52     17.4 
18 mu_1       0.9      1.19      5.10e- 8  6.47e-78     13.4 
19 mu_0       0.1      2.26      4.21e-26  4.69e-74    199.  
20 mu_0       0.2      0.182     3.55e-14  1.41e-48     14.8 
21 mu_0       0.3      0.590     1.08e- 7  6.76e-34     14.9 
22 mu_0       0.4      1.49      5.35e- 4  1.09e-23     23.5 
23 mu_0       0.5      1.18      8.76e- 2  6.93e-17      7.23
24 mu_0       0.6      1.13      9.09e- 2  7.98e-25      7.19
25 mu_0       0.7      0.990     9.01e- 2  3.11e-35      7.89
26 mu_0       0.8      1.18      2.45e- 2  4.35e-50     15.2 
27 mu_0       0.9      1.30      2.93e- 7  1.01e-75     13.0 
[1] "Total run time was 395.896 seconds"
