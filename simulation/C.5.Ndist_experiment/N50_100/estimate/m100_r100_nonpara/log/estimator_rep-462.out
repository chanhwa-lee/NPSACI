
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7374"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  63  64  65  66  67  68  69  70  71 
  4   3   3   1   1   3   1   3   5   1   1   1   3   8   1   3   2   3   2   1 
 73  74  75  77  79  80  81  82  83  85  87  88  89  90  91  92  93  94  95  96 
  4   3   2   1   1   2   2   1   2   2   3   4   1   1   2   3   1   3   2   2 
 97  98  99 100 
  2   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01952 0.29950 0.58621 1.00000 5.03263 
[1] "event indicator table: "

   0    1 
4351 3023 
[1] "treatment indicator table: "

   0    1 
2946 4428 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3644
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3730
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 373.087 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.478 0.0763
 2 mu         0.1   0.2 0.528 0.0536
 3 mu         0.1   0.3 0.608 0.0676
 4 mu         0.1   0.4 0.638 0.0600
 5 mu         0.1   0.5 0.717 0.0782
 6 mu         0.2   0.1 0.367 0.0410
 7 mu         0.2   0.2 0.447 0.0301
 8 mu         0.2   0.3 0.520 0.0406
 9 mu         0.2   0.4 0.552 0.0325
10 mu         0.2   0.5 0.618 0.0528
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.07         0.951 0.0000964      5.24
 2 mu         0.2      1.04         0.974 0.146          2.83
 3 mu         0.3      1.02         1.04  0.325          2.23
 4 mu         0.4      1.05         1.03  0.398          1.82
 5 mu         0.5      1.03         1.01  0.442          1.95
 6 mu         0.6      0.979        0.966 0.574          1.72
 7 mu         0.7      0.968        0.956 0.493          1.51
 8 mu         0.8      0.976        0.921 0.441          1.54
 9 mu         0.9      0.941        0.898 0.260          1.89
10 mu_1       0.1      1.05         0.909 0.000262       5.25
11 mu_1       0.2      1.04         0.978 0.203          2.79
12 mu_1       0.3      1.02         1.03  0.314          2.19
13 mu_1       0.4      1.05         1.03  0.387          1.93
14 mu_1       0.5      1.03         1.00  0.455          1.95
15 mu_1       0.6      0.977        0.970 0.579          1.69
16 mu_1       0.7      0.967        0.957 0.482          1.55
17 mu_1       0.8      0.976        0.922 0.435          1.55
18 mu_1       0.9      0.940        0.895 0.262          1.90
19 mu_0       0.1      1.08         0.939 0.0000780      5.24
20 mu_0       0.2      1.04         0.977 0.130          2.84
21 mu_0       0.3      1.02         1.05  0.315          2.24
22 mu_0       0.4      1.05         1.03  0.405          1.76
23 mu_0       0.5      1.03         0.999 0.429          1.96
24 mu_0       0.6      0.980        0.957 0.566          1.76
25 mu_0       0.7      0.970        0.967 0.499          1.43
26 mu_0       0.8      0.977        0.957 0.467          1.53
27 mu_0       0.9      0.943        0.911 0.240          1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.13      1.71e-24  1.05e-76    242.  
 2 mu         0.2      0.755     4.82e-13  4.53e-51     49.3 
 3 mu         0.3      0.807     2.16e- 6  3.23e-36     10.5 
 4 mu         0.4      2.10      2.66e- 3  8.31e-26     78.3 
 5 mu         0.5      1.59      3.66e- 2  7.21e-18     29.3 
 6 mu         0.6      0.819     5.29e- 2  3.10e-19     15.9 
 7 mu         0.7      0.905     5.57e- 2  2.55e-28      8.62
 8 mu         0.8      1.73      6.97e- 4  2.05e-41     11.0 
 9 mu         0.9      1.48      7.24e-11  3.48e-64     20.7 
10 mu_1       0.1      3.26      1.13e-23  9.96e-76    228.  
11 mu_1       0.2      0.612     1.47e-12  2.14e-50     34.1 
12 mu_1       0.3      0.898     4.47e- 6  1.02e-35      9.38
13 mu_1       0.4      2.16      3.67e- 3  1.96e-25     82.1 
14 mu_1       0.5      1.51      4.24e- 2  1.36e-17     24.6 
15 mu_1       0.6      0.800     4.34e- 2  4.87e-20     15.2 
16 mu_1       0.7      0.933     4.55e- 2  3.43e-29      8.60
17 mu_1       0.8      1.75      5.30e- 4  2.41e-42     11.2 
18 mu_1       0.9      1.46      4.28e-11  3.64e-65     21.8 
19 mu_0       0.1      3.11      6.45e-25  6.44e-78    244.  
20 mu_0       0.2      0.791     2.34e-13  3.11e-52     53.0 
21 mu_0       0.3      0.768     1.16e- 6  2.54e-37     10.9 
22 mu_0       0.4      2.06      1.85e- 3  7.61e-27     75.7 
23 mu_0       0.5      1.67      3.78e- 2  7.92e-19     34.0 
24 mu_0       0.6      0.847     3.82e- 2  7.02e-19     17.1 
25 mu_0       0.7      0.839     6.31e- 2  7.71e-28      8.65
26 mu_0       0.8      1.64      1.37e- 3  9.29e-41     10.2 
27 mu_0       0.9      1.60      3.39e-10  3.15e-63     17.7 
[1] "Total run time was 376.225 seconds"
