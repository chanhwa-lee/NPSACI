
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7469"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  65  66  67  68  69  70 
  2   3   2   2   2   2   5   1   4   2   1   1   3   2   1   4   1   2   3   2 
 71  72  73  74  75  76  78  80  83  84  85  86  87  88  89  90  91  92  93  95 
  1   3   2   1   5   2   3   1   2   1   1   2   1   1   3   1   2   3   5   2 
 96  97  98  99 100 
  3   2   2   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03544 0.35535 0.62026 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4471 2998 
[1] "treatment indicator table: "

   0    1 
2736 4733 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3612
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3857
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 465.878 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.295 0.126 
 2 mu         0.1   0.2 0.391 0.114 
 3 mu         0.1   0.3 0.416 0.120 
 4 mu         0.1   0.4 0.479 0.121 
 5 mu         0.1   0.5 0.520 0.133 
 6 mu         0.2   0.1 0.337 0.0557
 7 mu         0.2   0.2 0.425 0.0527
 8 mu         0.2   0.3 0.481 0.0489
 9 mu         0.2   0.4 0.548 0.0488
10 mu         0.2   0.5 0.595 0.0539
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.804        0.182  2.51e-11     18.3 
 2 mu         0.2      1.09         0.956  3.75e- 4      4.80
 3 mu         0.3      0.979        0.978  1.52e- 1      2.20
 4 mu         0.4      0.978        0.989  3.71e- 1      1.59
 5 mu         0.5      1.00         0.989  5.08e- 1      1.95
 6 mu         0.6      1.02         0.993  6.56e- 1      1.60
 7 mu         0.7      1.01         0.975  5.99e- 1      1.36
 8 mu         0.8      0.972        0.964  4.82e- 1      1.51
 9 mu         0.9      1.03         0.960  1.67e- 1      2.07
10 mu_1       0.1      0.811        0.316  8.80e-11     13.1 
11 mu_1       0.2      1.07         0.966  6.68e- 4      4.56
12 mu_1       0.3      0.978        0.980  1.85e- 1      2.05
13 mu_1       0.4      0.978        0.993  4.05e- 1      1.53
14 mu_1       0.5      1.00         0.978  5.13e- 1      1.96
15 mu_1       0.6      1.02         0.994  6.61e- 1      1.62
16 mu_1       0.7      1.01         0.976  5.82e- 1      1.38
17 mu_1       0.8      0.972        0.964  4.90e- 1      1.51
18 mu_1       0.9      1.04         0.960  1.58e- 1      2.11
19 mu_0       0.1      0.803        0.168  1.81e-11     18.9 
20 mu_0       0.2      1.09         0.968  3.02e- 4      4.86
21 mu_0       0.3      0.980        0.990  1.36e- 1      2.26
22 mu_0       0.4      0.979        0.992  3.48e- 1      1.63
23 mu_0       0.5      0.998        0.987  5.03e- 1      1.93
24 mu_0       0.6      1.02         0.995  6.47e- 1      1.58
25 mu_0       0.7      1.01         0.997  6.40e- 1      1.34
26 mu_0       0.8      0.973        0.977  4.50e- 1      1.50
27 mu_0       0.9      1.02         0.945  2.51e- 1      2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      13.4      8.30e-28  2.08e-71   1344.  
 2 mu         0.2       2.42     2.79e-15  4.12e-47    125.  
 3 mu         0.3       2.90     1.92e- 8  3.39e-33    123.  
 4 mu         0.4       1.24     2.99e- 4  1.77e-23     25.9 
 5 mu         0.5       1.01     4.19e- 2  4.20e-16      7.61
 6 mu         0.6       1.11     2.78e- 1  4.88e-11      7.05
 7 mu         0.7       1.28     3.15e- 1  1.14e-16     12.6 
 8 mu         0.8       1.20     6.04e- 2  3.94e-28     10.4 
 9 mu         0.9       1.18     1.48e- 6  7.05e-49     25.1 
10 mu_1       0.1      10.5      5.97e-27  1.92e-70   1054.  
11 mu_1       0.2       2.32     8.46e-15  1.92e-46    155.  
12 mu_1       0.3       2.69     4.14e- 8  1.05e-32    101.  
13 mu_1       0.4       1.22     3.17e- 4  4.12e-23     26.9 
14 mu_1       0.5       1.01     4.60e- 2  7.82e-16      7.57
15 mu_1       0.6       1.12     3.16e- 1  6.38e-12      6.48
16 mu_1       0.7       1.29     2.99e- 1  1.36e-17     13.3 
17 mu_1       0.8       1.20     5.20e- 2  1.22e-28     10.1 
18 mu_1       0.9       1.17     1.07e- 6  1.94e-49     25.1 
19 mu_0       0.1      13.8      2.59e-28  1.82e-72   1376.  
20 mu_0       0.2       2.44     1.37e-15  3.55e-48    117.  
21 mu_0       0.3       2.99     9.73e- 9  3.34e-34    132.  
22 mu_0       0.4       1.25     1.71e- 4  2.04e-24     25.2 
23 mu_0       0.5       1.01     3.58e- 2  5.79e-17      8.89
24 mu_0       0.6       1.10     2.33e- 1  4.92e-11      7.92
25 mu_0       0.7       1.26     2.17e- 1  2.87e-16     10.9 
26 mu_0       0.8       1.21     4.78e- 2  1.48e-27     11.5 
27 mu_0       0.9       1.20     5.26e- 6  5.30e-48     25.1 
[1] "Total run time was 469.366 seconds"
