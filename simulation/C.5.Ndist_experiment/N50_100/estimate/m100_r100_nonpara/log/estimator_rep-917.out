
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7758"
[1] "cluster size dist'n: "

 50  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  4   2   2   2   2   1   1   1   2   1   2   1   1   3   1   2   2   2   1   2 
 72  73  74  76  78  79  80  81  82  84  85  86  87  88  89  90  92  93  94  95 
  1   3   3   1   3   3   5   4   3   2   2   2   3   1   2   2   1   4   2   5 
 96  97  98  99 100 
  5   2   1   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02117 0.31402 0.58761 1.00000 6.29292 
[1] "event indicator table: "

   0    1 
4563 3195 
[1] "treatment indicator table: "

   0    1 
2957 4801 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3896
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3862
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 643.195 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.398 0.0374
 2 mu         0.1   0.2 0.537 0.0414
 3 mu         0.1   0.3 0.613 0.0506
 4 mu         0.1   0.4 0.674 0.0707
 5 mu         0.1   0.5 0.712 0.0692
 6 mu         0.2   0.1 0.432 0.0595
 7 mu         0.2   0.2 0.526 0.0500
 8 mu         0.2   0.3 0.576 0.0492
 9 mu         0.2   0.4 0.601 0.0463
10 mu         0.2   0.5 0.636 0.0433
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05         0.934    0.0174      3.03
 2 mu         0.2      0.991        0.946    0.116       2.20
 3 mu         0.3      1.00         0.986    0.339       1.95
 4 mu         0.4      1.02         1.05     0.532       1.57
 5 mu         0.5      0.989        0.989    0.575       1.36
 6 mu         0.6      0.978        0.964    0.513       1.39
 7 mu         0.7      0.972        0.990    0.507       1.44
 8 mu         0.8      0.981        0.963    0.601       1.69
 9 mu         0.9      1.05         1.04     0.489       1.87
10 mu_1       0.1      1.03         0.917    0.0333      3.16
11 mu_1       0.2      0.987        0.939    0.124       2.14
12 mu_1       0.3      1.00         0.969    0.365       1.92
13 mu_1       0.4      1.02         1.06     0.544       1.56
14 mu_1       0.5      0.987        0.990    0.565       1.33
15 mu_1       0.6      0.978        0.951    0.524       1.41
16 mu_1       0.7      0.971        0.988    0.493       1.43
17 mu_1       0.8      0.982        0.963    0.597       1.68
18 mu_1       0.9      1.05         1.03     0.475       1.87
19 mu_0       0.1      1.05         0.927    0.0157      3.07
20 mu_0       0.2      0.992        0.955    0.114       2.22
21 mu_0       0.3      0.999        0.982    0.327       1.97
22 mu_0       0.4      1.02         1.04     0.524       1.58
23 mu_0       0.5      0.991        1.00     0.586       1.39
24 mu_0       0.6      0.977        0.957    0.498       1.36
25 mu_0       0.7      0.974        0.990    0.541       1.49
26 mu_0       0.8      0.979        0.952    0.574       1.69
27 mu_0       0.9      1.04         1.02     0.490       1.87
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.756     2.21e-27  5.68e-85     72.3 
 2 mu         0.2      1.05      3.69e-15  3.13e-58     30.2 
 3 mu         0.3      0.663     1.92e- 8  1.29e-42     11.4 
 4 mu         0.4      0.577     2.53e- 4  1.45e-31      6.53
 5 mu         0.5      0.963     1.83e- 2  5.10e-23     13.4 
 6 mu         0.6      1.15      2.66e- 1  1.98e-23      8.87
 7 mu         0.7      1.42      3.50e- 1  2.13e-33     14.9 
 8 mu         0.8      1.74      1.69e- 2  1.15e-47     14.8 
 9 mu         0.9      0.462     9.69e- 8  2.41e-72     17.1 
10 mu_1       0.1      0.549     1.57e-26  5.62e-84     48.7 
11 mu_1       0.2      1.14      1.27e-14  1.55e-57     33.1 
12 mu_1       0.3      0.608     4.08e- 8  4.24e-42     10.7 
13 mu_1       0.4      0.602     4.33e- 4  3.59e-31      7.29
14 mu_1       0.5      0.981     2.59e- 2  1.01e-22     12.7 
15 mu_1       0.6      1.16      2.70e- 1  2.23e-24      8.57
16 mu_1       0.7      1.42      4.03e- 1  2.05e-34     14.6 
17 mu_1       0.8      1.73      1.52e- 2  9.70e-49     15.0 
18 mu_1       0.9      0.455     6.78e- 8  1.81e-73     17.3 
19 mu_0       0.1      0.779     7.16e-28  7.02e-87     74.9 
20 mu_0       0.2      1.02      1.44e-15  4.34e-60     29.4 
21 mu_0       0.3      0.687     9.67e- 9  2.04e-44     12.2 
22 mu_0       0.4      0.560     1.36e- 4  2.69e-33      6.41
23 mu_0       0.5      0.945     1.08e- 2  1.13e-24     14.1 
24 mu_0       0.6      1.13      1.87e- 1  4.62e-23      9.32
25 mu_0       0.7      1.40      2.51e- 1  6.63e-33     15.6 
26 mu_0       0.8      1.76      3.06e- 2  5.37e-47     14.1 
27 mu_0       0.9      0.523     3.59e- 7  2.25e-71     14.9 
[1] "Total run time was 648.242 seconds"
