
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7714"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  2   1   1   1   1   1   1   2   2   2   3   2   1   2   1   1   4   2   3   3 
 70  71  73  74  75  76  77  78  79  80  81  82  84  85  87  88  89  90  91  92 
  2   1   2   2   2   4   1   2   2   4   2   1   2   3   3   1   1   2   5   2 
 93  95  96  97  98  99 100 
  4   5   2   1   6   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03816 0.33302 0.60044 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4431 3283 
[1] "treatment indicator table: "

   0    1 
3038 4676 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3875
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3839
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 415.824 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.208 0.0874
 2 mu         0.1   0.2 0.283 0.0981
 3 mu         0.1   0.3 0.334 0.103 
 4 mu         0.1   0.4 0.377 0.115 
 5 mu         0.1   0.5 0.426 0.123 
 6 mu         0.2   0.1 0.221 0.0392
 7 mu         0.2   0.2 0.286 0.0405
 8 mu         0.2   0.3 0.339 0.0357
 9 mu         0.2   0.4 0.381 0.0433
10 mu         0.2   0.5 0.438 0.0441
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.820        0.320 0.0000000386     14.9 
 2 mu         0.2      0.921        0.866 0.0128            2.24
 3 mu         0.3      1.01         1.00  0.322             2.11
 4 mu         0.4      0.980        0.958 0.506             1.73
 5 mu         0.5      1.03         1.01  0.514             1.68
 6 mu         0.6      1.01         1.01  0.536             1.58
 7 mu         0.7      1.00         1.02  0.649             1.39
 8 mu         0.8      0.984        0.972 0.272             1.81
 9 mu         0.9      1.01         0.938 0.129             2.23
10 mu_1       0.1      0.769        0.403 0.000000121       8.86
11 mu_1       0.2      0.947        0.881 0.0203            2.05
12 mu_1       0.3      1.01         0.996 0.354             2.12
13 mu_1       0.4      0.982        0.959 0.512             1.75
14 mu_1       0.5      1.03         1.02  0.510             1.64
15 mu_1       0.6      1.01         1.01  0.549             1.58
16 mu_1       0.7      1.00         1.01  0.657             1.39
17 mu_1       0.8      0.984        0.969 0.259             1.84
18 mu_1       0.9      1.01         0.951 0.121             2.25
19 mu_0       0.1      0.826        0.310 0.0000000295     15.8 
20 mu_0       0.2      0.914        0.862 0.0110            2.29
21 mu_0       0.3      1.02         1.00  0.308             2.17
22 mu_0       0.4      0.978        0.962 0.484             1.71
23 mu_0       0.5      1.03         1.01  0.517             1.72
24 mu_0       0.6      1.01         1.00  0.517             1.58
25 mu_0       0.7      1.01         1.03  0.630             1.39
26 mu_0       0.8      0.982        0.969 0.322             1.67
27 mu_0       0.9      1.00         0.979 0.196             2.19
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00215     6.08e-26  1.93e-90    0.103 
 2 mu         0.2    0.582       8.29e-13  1.21e-61   25.3   
 3 mu         0.3    1.14        9.07e- 7  7.42e-45   32.7   
 4 mu         0.4    1.75        7.80e- 3  5.38e-33   61.7   
 5 mu         0.5    1.42        1.68e- 1  7.51e-24   16.9   
 6 mu         0.6    1.60        2.81e- 1  1.92e-16   15.5   
 7 mu         0.7    1.07        1.23e- 1  1.10e-18    7.06  
 8 mu         0.8    1.03        9.37e- 4  4.98e-30   14.3   
 9 mu         0.9    2.06        3.06e-10  2.23e-50   44.7   
10 mu_1       0.1    0.00488     3.88e-25  1.89e-89    0.227 
11 mu_1       0.2    0.674       2.78e-12  5.91e-61   27.8   
12 mu_1       0.3    1.25        1.76e- 6  2.42e-44   40.0   
13 mu_1       0.4    1.70        1.17e- 2  1.32e-32   56.6   
14 mu_1       0.5    1.44        1.65e- 1  1.47e-23   17.7   
15 mu_1       0.6    1.58        2.74e- 1  3.14e-16   15.2   
16 mu_1       0.7    1.06        1.20e- 1  3.44e-19    6.91  
17 mu_1       0.8    1.03        7.11e- 4  1.37e-30   14.2   
18 mu_1       0.9    2.08        2.03e-10  5.44e-51   46.6   
19 mu_0       0.1    0.00184     2.44e-26  4.37e-92    0.0895
20 mu_0       0.2    0.559       3.41e-13  3.08e-63   24.6   
21 mu_0       0.3    1.09        5.42e- 7  2.16e-46   29.5   
22 mu_0       0.4    1.78        5.19e- 3  1.83e-34   65.0   
23 mu_0       0.5    1.40        1.57e- 1  3.07e-25   16.1   
24 mu_0       0.6    1.63        3.01e- 1  9.80e-18   15.9   
25 mu_0       0.7    1.09        1.59e- 1  2.85e-18    7.76  
26 mu_0       0.8    1.03        1.90e- 3  1.94e-29   15.1   
27 mu_0       0.9    1.87        1.23e- 9  1.74e-49   42.4   
[1] "Total run time was 419.022 seconds"
