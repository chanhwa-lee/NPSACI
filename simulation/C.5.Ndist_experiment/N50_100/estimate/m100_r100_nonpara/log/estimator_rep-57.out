
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7503"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  62  63  64  65  66  68  69  70  71  72 
  3   3   3   1   3   3   1   3   2   2   3   1   2   1   1   4   3   3   3   2 
 73  74  75  76  77  79  80  81  84  85  87  88  89  90  91  92  93  94  95  96 
  2   4   2   1   1   1   3   4   2   1   2   2   4   1   1   1   3   4   2   1 
 97  98  99 100 
  2   2   6   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01672 0.32142 0.58264 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4478 3025 
[1] "treatment indicator table: "

   0    1 
2743 4760 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3786
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3717
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 415.017 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.396 0.122 
 2 mu         0.1   0.2 0.531 0.154 
 3 mu         0.1   0.3 0.571 0.172 
 4 mu         0.1   0.4 0.589 0.175 
 5 mu         0.1   0.5 0.630 0.182 
 6 mu         0.2   0.1 0.425 0.0643
 7 mu         0.2   0.2 0.565 0.0904
 8 mu         0.2   0.3 0.622 0.100 
 9 mu         0.2   0.4 0.658 0.0923
10 mu         0.2   0.5 0.710 0.0961
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.895       0.0784 0.000000176     18.5 
 2 mu         0.2      1.15        0.984  0.0240           6.46
 3 mu         0.3      1.06        0.979  0.263            2.43
 4 mu         0.4      1.00        0.998  0.499            1.82
 5 mu         0.5      1.01        1.01   0.570            1.41
 6 mu         0.6      1.01        0.992  0.681            1.40
 7 mu         0.7      0.994       0.976  0.597            1.52
 8 mu         0.8      0.998       0.951  0.589            1.83
 9 mu         0.9      0.994       0.928  0.214            2.01
10 mu_1       0.1      0.894       0.141  0.000000518     14.8 
11 mu_1       0.2      1.17        1.01   0.0373           6.22
12 mu_1       0.3      1.04        0.965  0.247            2.30
13 mu_1       0.4      1.00        0.972  0.492            1.88
14 mu_1       0.5      1.01        1.01   0.571            1.42
15 mu_1       0.6      1.01        0.990  0.688            1.39
16 mu_1       0.7      0.993       0.974  0.606            1.50
17 mu_1       0.8      0.998       0.951  0.589            1.84
18 mu_1       0.9      0.994       0.926  0.206            2.04
19 mu_0       0.1      0.895       0.0714 0.000000138     18.9 
20 mu_0       0.2      1.14        0.953  0.0207           6.52
21 mu_0       0.3      1.06        0.987  0.270            2.52
22 mu_0       0.4      1.00        1.01   0.503            1.78
23 mu_0       0.5      1.01        1.01   0.568            1.41
24 mu_0       0.6      1.01        1.00   0.658            1.40
25 mu_0       0.7      0.994       0.986  0.575            1.57
26 mu_0       0.8      0.997       0.948  0.591            1.77
27 mu_0       0.9      0.990       0.951  0.283            1.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.117     5.71e-29  2.11e-75     11.0 
 2 mu         0.2      1.27      3.49e-16  1.43e-49    108.  
 3 mu         0.3      1.02      6.14e- 9  1.17e-34     39.0 
 4 mu         0.4      1.10      1.45e- 4  2.95e-24     12.9 
 5 mu         0.5      0.756     4.63e- 2  2.22e-16      9.15
 6 mu         0.6      0.974     2.04e- 1  5.58e-11      5.82
 7 mu         0.7      1.17      5.30e- 1  6.50e-18      8.46
 8 mu         0.8      1.06      5.15e- 2  3.39e-28     18.9 
 9 mu         0.9      1.70      8.61e- 7  1.91e-46     46.0 
10 mu_1       0.1      0.215     3.79e-28  1.95e-74     19.9 
11 mu_1       0.2      1.21      1.13e-15  6.61e-49     97.8 
12 mu_1       0.3      1.06      1.36e- 8  3.62e-34     39.8 
13 mu_1       0.4      1.08      2.40e- 4  6.83e-24     11.9 
14 mu_1       0.5      0.754     5.30e- 2  4.11e-16      9.05
15 mu_1       0.6      1.00      2.21e- 1  1.69e-11      6.24
16 mu_1       0.7      1.16      5.17e- 1  1.69e-18      8.39
17 mu_1       0.8      1.06      4.28e- 2  7.72e-29     18.4 
18 mu_1       0.9      1.73      6.09e- 7  3.87e-47     47.3 
19 mu_0       0.1      0.106     2.13e-29  0             9.97
20 mu_0       0.2      1.28      1.43e-16  0           110.  
21 mu_0       0.3      1.01      2.97e- 9  0            38.6 
22 mu_0       0.4      1.11      8.35e- 5  0            13.5 
23 mu_0       0.5      0.758     3.08e- 2  0             9.24
24 mu_0       0.6      0.936     1.51e- 1  0             5.34
25 mu_0       0.7      1.19      5.32e- 1  0             8.60
26 mu_0       0.8      1.08      7.67e- 2  0            20.5 
27 mu_0       0.9      1.42      2.17e- 6  0            34.3 
[1] "Total run time was 420.642 seconds"
