
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7507"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  65  67  69  70  72  73  74 
  3   2   7   4   1   2   2   4   2   2   3   2   4   1   1   3   1   1   1   1 
 75  76  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  2   1   1   1   1   1   3   3   3   3   4   1   2   1   1   2   4   2   4   3 
 97  98  99 100 
  6   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02178 0.28738 0.57263 0.99569 6.22269 
[1] "event indicator table: "

   0    1 
4363 3144 
[1] "treatment indicator table: "

   0    1 
2973 4534 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3842
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3665
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 406.108 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.651 0.147 
 2 mu         0.1   0.2 0.730 0.139 
 3 mu         0.1   0.3 0.794 0.139 
 4 mu         0.1   0.4 0.822 0.145 
 5 mu         0.1   0.5 0.860 0.158 
 6 mu         0.2   0.1 0.434 0.0986
 7 mu         0.2   0.2 0.514 0.0804
 8 mu         0.2   0.3 0.591 0.0716
 9 mu         0.2   0.4 0.623 0.0754
10 mu         0.2   0.5 0.663 0.0859
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.24         0.396 0.000000134     11.4 
 2 mu         0.2      1.00         0.924 0.00825          3.33
 3 mu         0.3      0.993        0.985 0.280            2.16
 4 mu         0.4      0.994        0.957 0.444            1.94
 5 mu         0.5      0.988        0.979 0.431            1.48
 6 mu         0.6      1.00         0.982 0.635            1.36
 7 mu         0.7      0.999        0.985 0.628            1.47
 8 mu         0.8      1.06         1.03  0.646            1.50
 9 mu         0.9      0.983        0.995 0.142            2.21
10 mu_1       0.1      1.26         0.551 0.000000406      9.21
11 mu_1       0.2      0.988        0.937 0.0144           2.75
12 mu_1       0.3      0.995        1.01  0.341            2.27
13 mu_1       0.4      0.991        0.968 0.432            1.96
14 mu_1       0.5      0.989        0.988 0.444            1.48
15 mu_1       0.6      1.00         0.979 0.650            1.35
16 mu_1       0.7      1.00         0.989 0.616            1.47
17 mu_1       0.8      1.06         1.04  0.640            1.52
18 mu_1       0.9      0.981        0.999 0.135            2.25
19 mu_0       0.1      1.24         0.376 0.000000104     11.8 
20 mu_0       0.2      1.01         0.928 0.00671          3.48
21 mu_0       0.3      0.992        0.982 0.254            2.11
22 mu_0       0.4      0.996        0.956 0.451            1.94
23 mu_0       0.5      0.987        0.976 0.419            1.53
24 mu_0       0.6      1.00         0.996 0.613            1.37
25 mu_0       0.7      0.996        0.981 0.656            1.47
26 mu_0       0.8      1.05         1.04  0.670            1.56
27 mu_0       0.9      1.01         1.03  0.202            1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     11.7       8.29e-27  1.03e-64   1169.  
 2 mu         0.2      0.765     4.70e-14  2.98e-41     25.1 
 3 mu         0.3      0.834     9.45e- 8  9.56e-29     26.5 
 4 mu         0.4      1.09      9.35e- 4  5.01e-20     20.3 
 5 mu         0.5      1.01      4.17e- 2  3.87e-17      9.47
 6 mu         0.6      0.909     2.41e- 1  1.83e-25      9.05
 7 mu         0.7      1.01      2.89e- 1  2.25e-36      6.14
 8 mu         0.8      1.46      9.28e- 3  6.23e-52     11.5 
 9 mu         0.9      1.38      1.26e- 8  9.06e-79     54.9 
10 mu_1       0.1      6.22      4.81e-26  8.95e-64    615.  
11 mu_1       0.2      0.834     1.43e-13  1.32e-40     25.8 
12 mu_1       0.3      0.823     1.88e- 7  2.95e-28     23.2 
13 mu_1       0.4      1.10      1.52e- 3  1.16e-19     20.5 
14 mu_1       0.5      0.986     5.60e- 2  4.08e-18      8.59
15 mu_1       0.6      0.919     1.88e- 1  1.60e-26      9.21
16 mu_1       0.7      1.03      3.03e- 1  1.69e-37      6.26
17 mu_1       0.8      1.48      7.14e- 3  4.10e-53     12.2 
18 mu_1       0.9      1.37      8.79e- 9  5.30e-80     56.4 
19 mu_0       0.1     12.3       3.87e-27  1.49e-65   1231.  
20 mu_0       0.2      0.748     2.11e-14  2.83e-42     25.5 
21 mu_0       0.3      0.839     5.45e- 8  1.04e-29     27.9 
22 mu_0       0.4      1.07      5.03e- 4  6.34e-21     20.3 
23 mu_0       0.5      1.03      3.27e- 2  7.34e-17     10.4 
24 mu_0       0.6      0.895     2.51e- 1  4.33e-25      8.82
25 mu_0       0.7      0.981     1.78e- 1  7.11e-36      5.85
26 mu_0       0.8      1.38      1.79e- 2  2.95e-51      9.83
27 mu_0       0.9      1.55      4.72e- 8  8.59e-78     41.7 
[1] "Total run time was 409.331 seconds"
