
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7492"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  64  67  68  69  70  72  73  75 
  1   2   1   2   3   7   3   2   1   1   3   4   2   1   3   4   3   2   2   3 
 76  77  79  80  81  82  83  84  87  88  89  90  92  93  94  95  96  97  98  99 
  2   6   2   1   1   2   4   3   2   3   1   4   3   1   1   2   3   2   2   1 
100 
  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03873 0.35801 0.62818 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4391 3101 
[1] "treatment indicator table: "

   0    1 
2798 4694 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3751
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3741
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 380.923 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.357 0.0733
 2 mu         0.1   0.2 0.395 0.0661
 3 mu         0.1   0.3 0.445 0.0709
 4 mu         0.1   0.4 0.478 0.0766
 5 mu         0.1   0.5 0.501 0.0749
 6 mu         0.2   0.1 0.385 0.0560
 7 mu         0.2   0.2 0.437 0.0470
 8 mu         0.2   0.3 0.500 0.0495
 9 mu         0.2   0.4 0.539 0.0543
10 mu         0.2   0.5 0.573 0.0516
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.750        0.339 0.0000297      3.69
 2 mu         0.2      0.934        0.842 0.105          2.95
 3 mu         0.3      0.979        0.934 0.385          2.32
 4 mu         0.4      1.03         1.01  0.390          1.52
 5 mu         0.5      1.06         1.05  0.647          1.66
 6 mu         0.6      1.05         1.05  0.667          1.47
 7 mu         0.7      0.997        0.983 0.641          1.52
 8 mu         0.8      0.924        0.935 0.366          1.42
 9 mu         0.9      0.975        0.945 0.137          2.26
10 mu_1       0.1      0.814        0.518 0.0000852      3.40
11 mu_1       0.2      0.942        0.882 0.154          2.55
12 mu_1       0.3      0.983        0.919 0.422          2.31
13 mu_1       0.4      1.03         1.01  0.403          1.56
14 mu_1       0.5      1.06         1.05  0.645          1.66
15 mu_1       0.6      1.05         1.05  0.670          1.49
16 mu_1       0.7      0.994        0.987 0.630          1.51
17 mu_1       0.8      0.922        0.945 0.363          1.42
18 mu_1       0.9      0.976        0.940 0.128          2.26
19 mu_0       0.1      0.743        0.318 0.0000236      3.74
20 mu_0       0.2      0.932        0.845 0.0924         3.05
21 mu_0       0.3      0.977        0.933 0.369          2.33
22 mu_0       0.4      1.03         1.00  0.381          1.51
23 mu_0       0.5      1.06         1.05  0.648          1.66
24 mu_0       0.6      1.05         1.05  0.662          1.44
25 mu_0       0.7      1.00         0.992 0.642          1.55
26 mu_0       0.8      0.933        0.948 0.382          1.42
27 mu_0       0.9      0.963        0.940 0.218          2.25
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0360     4.46e-28  1.09e-71      3.58
 2 mu         0.2     0.852      1.04e-15  2.60e-47     60.0 
 3 mu         0.3     1.31       7.99e- 9  3.21e-33     21.4 
 4 mu         0.4     1.15       1.57e- 4  2.24e-23     10.5 
 5 mu         0.5     0.988      3.60e- 2  6.63e-16     15.9 
 6 mu         0.6     0.989      1.58e- 1  4.81e-15     11.4 
 7 mu         0.7     1.35       2.18e- 1  4.39e-24      7.98
 8 mu         0.8     1.68       5.75e- 2  1.76e-37     15.8 
 9 mu         0.9     1.84       3.66e- 7  3.04e-61     36.3 
10 mu_1       0.1     0.0648     3.30e-27  1.02e-70      6.45
11 mu_1       0.2     0.879      3.46e-15  1.21e-46     54.0 
12 mu_1       0.3     1.36       1.74e- 8  9.98e-33     20.1 
13 mu_1       0.4     1.13       2.65e- 4  5.22e-23      9.95
14 mu_1       0.5     0.969      3.19e- 2  1.24e-15     15.4 
15 mu_1       0.6     1.01       1.63e- 1  1.44e-15     11.8 
16 mu_1       0.7     1.37       2.45e- 1  1.13e-24      7.64
17 mu_1       0.8     1.68       4.69e- 2  3.97e-38     16.0 
18 mu_1       0.9     1.84       2.70e- 7  6.08e-62     37.6 
19 mu_0       0.1     0.0328     1.49e-28  8.26e-73      3.27
20 mu_0       0.2     0.845      4.33e-16  2.22e-48     61.5 
21 mu_0       0.3     1.29       3.96e- 9  3.13e-34     22.0 
22 mu_0       0.4     1.16       8.72e- 5  2.54e-24     11.6 
23 mu_0       0.5     1.01       2.20e- 2  9.04e-17     16.4 
24 mu_0       0.6     0.951      1.06e- 1  9.86e-15     10.7 
25 mu_0       0.7     1.32       1.61e- 1  1.20e-23      8.78
26 mu_0       0.8     1.69       7.58e- 2  7.23e-37     15.2 
27 mu_0       0.9     1.80       1.23e- 6  2.49e-60     27.1 
[1] "Total run time was 384.163 seconds"
