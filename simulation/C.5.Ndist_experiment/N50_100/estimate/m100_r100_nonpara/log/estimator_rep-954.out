
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7340"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 
 2  1  1  1  1  3  2  2  1  5  3  3  2  3  1  3  4  2  2  4  2  1  5  2  2  2 
78 79 80 81 83 85 86 87 88 89 90 91 92 94 96 98 99 
 3  1  1  1  3  3  2  3  3  5  2  4  2  3  1  1  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03609 0.36466 0.63329 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4447 2893 
[1] "treatment indicator table: "

   0    1 
2520 4820 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3591
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3749
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 384.132 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.400 0.0760
 2 mu         0.1   0.2 0.456 0.0779
 3 mu         0.1   0.3 0.517 0.0857
 4 mu         0.1   0.4 0.555 0.0880
 5 mu         0.1   0.5 0.593 0.0927
 6 mu         0.2   0.1 0.376 0.0608
 7 mu         0.2   0.2 0.431 0.0527
 8 mu         0.2   0.3 0.490 0.0574
 9 mu         0.2   0.4 0.531 0.0538
10 mu         0.2   0.5 0.578 0.0519
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.943        0.181 0.000000990      8.89
 2 mu         0.2      0.955        0.890 0.0217           3.20
 3 mu         0.3      1.06         1.04  0.311            2.12
 4 mu         0.4      1.03         1.03  0.638            1.56
 5 mu         0.5      1.01         0.982 0.671            1.51
 6 mu         0.6      0.996        0.990 0.667            1.34
 7 mu         0.7      0.993        0.977 0.634            1.46
 8 mu         0.8      0.991        0.998 0.608            1.51
 9 mu         0.9      0.989        0.977 0.261            1.74
10 mu_1       0.1      0.864        0.322 0.00000281       6.94
11 mu_1       0.2      0.983        0.932 0.0313           3.29
12 mu_1       0.3      1.06         1.03  0.350            1.90
13 mu_1       0.4      1.03         1.03  0.605            1.58
14 mu_1       0.5      1.00         0.988 0.673            1.47
15 mu_1       0.6      0.997        0.987 0.660            1.34
16 mu_1       0.7      0.992        0.978 0.637            1.45
17 mu_1       0.8      0.992        0.993 0.600            1.52
18 mu_1       0.9      0.988        0.975 0.259            1.76
19 mu_0       0.1      0.951        0.166 0.000000787      9.10
20 mu_0       0.2      0.948        0.875 0.0193           3.18
21 mu_0       0.3      1.06         1.04  0.294            2.21
22 mu_0       0.4      1.04         1.03  0.628            1.55
23 mu_0       0.5      1.01         0.976 0.669            1.54
24 mu_0       0.6      0.995        0.991 0.660            1.34
25 mu_0       0.7      0.995        0.979 0.628            1.46
26 mu_0       0.8      0.988        0.980 0.640            1.45
27 mu_0       0.9      1.00         1.00  0.189            1.68
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00402     1.08e-26  5.88e-73     0.390
 2 mu         0.2    0.355       3.85e-15  4.98e-48    14.4  
 3 mu         0.3    0.928       1.86e- 8  1.21e-33    21.1  
 4 mu         0.4    0.716       2.13e- 4  1.29e-23    17.5  
 5 mu         0.5    1.21        2.17e- 2  4.96e-16    11.1  
 6 mu         0.6    1.06        3.03e- 1  4.66e-10     8.37 
 7 mu         0.7    0.732       2.21e- 1  2.49e-16     4.93 
 8 mu         0.8    1.42        7.89e- 2  2.90e-27    15.3  
 9 mu         0.9    2.00        7.58e- 7  4.15e-47    25.8  
10 mu_1       0.1    0.00864     7.73e-26  5.42e-72     0.832
11 mu_1       0.2    0.448       1.27e-14  2.30e-47    18.3  
12 mu_1       0.3    0.916       4.25e- 8  3.73e-33    17.9  
13 mu_1       0.4    0.717       3.53e- 4  2.97e-23    16.4  
14 mu_1       0.5    1.26        2.34e- 2  9.16e-16    11.3  
15 mu_1       0.6    1.03        2.77e- 1  7.17e-10     8.10 
16 mu_1       0.7    0.730       1.86e- 1  9.09e-17     4.84 
17 mu_1       0.8    1.46        6.43e- 2  9.25e-28    15.8  
18 mu_1       0.9    1.99        5.69e- 7  1.18e-47    26.0  
19 mu_0       0.1    0.00350     3.44e-27  5.02e-74     0.341
20 mu_0       0.2    0.332       1.64e-15  4.79e-49    13.4  
21 mu_0       0.3    0.932       8.42e- 9  1.33e-34    22.4  
22 mu_0       0.4    0.715       1.21e- 4  1.65e-24    18.3  
23 mu_0       0.5    1.17        1.36e- 2  7.63e-17    10.8  
24 mu_0       0.6    1.11        2.29e- 1  8.96e-11     8.78 
25 mu_0       0.7    0.737       2.44e- 1  6.19e-16     5.13 
26 mu_0       0.8    1.29        7.52e- 2  1.08e-26    13.4  
27 mu_0       0.9    2.03        2.46e- 6  3.09e-46    24.6  
[1] "Total run time was 387.283 seconds"
