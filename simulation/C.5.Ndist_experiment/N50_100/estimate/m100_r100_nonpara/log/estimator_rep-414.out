
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7262"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  71  72 
  1   1   3   1   6   2   1   3   3   1   5   2   3   4   1   3   2   3   2   6 
 73  74  75  76  77  79  80  81  82  84  87  88  89  90  91  93  94  95  96  97 
  2   3   3   4   1   4   1   2   4   2   1   2   1   2   2   1   1   1   3   3 
 99 100 
  2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03019 0.33088 0.59641 1.00000 5.35779 
[1] "event indicator table: "

   0    1 
4370 2892 
[1] "treatment indicator table: "

   0    1 
2714 4548 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3565
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3697
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 354.243 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.280 0.0559
 2 mu         0.1   0.2 0.409 0.0850
 3 mu         0.1   0.3 0.451 0.0858
 4 mu         0.1   0.4 0.485 0.0906
 5 mu         0.1   0.5 0.535 0.106 
 6 mu         0.2   0.1 0.317 0.0246
 7 mu         0.2   0.2 0.455 0.0582
 8 mu         0.2   0.3 0.514 0.0455
 9 mu         0.2   0.4 0.564 0.0437
10 mu         0.2   0.5 0.626 0.0548
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.751        0.135 0.00000195      7.86
 2 mu         0.2      0.967        0.930 0.0360          2.70
 3 mu         0.3      1.00         0.942 0.381           1.93
 4 mu         0.4      0.993        0.992 0.503           1.58
 5 mu         0.5      0.992        0.987 0.544           1.42
 6 mu         0.6      1.00         1.02  0.635           1.48
 7 mu         0.7      1.00         1.01  0.592           1.45
 8 mu         0.8      0.994        0.990 0.549           1.52
 9 mu         0.9      1.08         1.06  0.181           2.09
10 mu_1       0.1      0.798        0.221 0.00000566      9.01
11 mu_1       0.2      0.977        0.880 0.0533          2.52
12 mu_1       0.3      1.00         0.961 0.415           1.88
13 mu_1       0.4      0.992        0.991 0.509           1.59
14 mu_1       0.5      0.993        0.986 0.525           1.39
15 mu_1       0.6      1.00         1.01  0.649           1.47
16 mu_1       0.7      0.999        1.01  0.591           1.46
17 mu_1       0.8      0.993        0.986 0.544           1.52
18 mu_1       0.9      1.08         1.05  0.170           2.11
19 mu_0       0.1      0.746        0.125 0.00000154      7.73
20 mu_0       0.2      0.965        0.946 0.0317          2.89
21 mu_0       0.3      1.00         0.929 0.367           1.96
22 mu_0       0.4      0.994        0.990 0.499           1.60
23 mu_0       0.5      0.991        0.991 0.563           1.45
24 mu_0       0.6      1.00         1.01  0.614           1.49
25 mu_0       0.7      1.00         0.994 0.593           1.42
26 mu_0       0.8      0.999        0.990 0.567           1.54
27 mu_0       0.9      1.04         1.03  0.280           1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.22      6.82e-26  1.78e-77    119.  
 2 mu         0.2      2.89      1.78e-14  1.53e-50    187.  
 3 mu         0.3      1.28      2.71e- 8  4.85e-35     31.7 
 4 mu         0.4      1.24      2.35e- 4  2.84e-24     21.1 
 5 mu         0.5      0.752     3.58e- 2  3.62e-16      8.77
 6 mu         0.6      0.781     2.85e- 1  1.87e-10      5.59
 7 mu         0.7      1.08      3.73e- 1  1.93e-16      6.33
 8 mu         0.8      1.28      2.81e- 2  1.51e-25     11.1 
 9 mu         0.9      1.49      3.22e- 7  1.36e-41     34.8 
10 mu_1       0.1      1.89      4.40e-25  1.62e-76    183.  
11 mu_1       0.2      2.63      5.95e-14  6.94e-50    144.  
12 mu_1       0.3      1.16      5.73e- 8  1.47e-34     23.5 
13 mu_1       0.4      1.23      3.95e- 4  6.45e-24     20.4 
14 mu_1       0.5      0.732     4.92e- 2  6.59e-16      8.08
15 mu_1       0.6      0.802     2.57e- 1  7.88e-11      5.81
16 mu_1       0.7      1.08      3.17e- 1  4.24e-17      6.07
17 mu_1       0.8      1.28      2.23e- 2  2.91e-26     11.8 
18 mu_1       0.9      1.50      2.30e- 7  2.33e-42     36.2 
19 mu_0       0.1      1.14      2.69e-26  1.78e-78    112.  
20 mu_0       0.2      2.95      7.36e-15  1.72e-51    198.  
21 mu_0       0.3      1.33      1.42e- 8  6.23e-36     35.3 
22 mu_0       0.4      1.24      1.33e- 4  4.25e-25     21.5 
23 mu_0       0.5      0.772     2.56e- 2  6.52e-17      9.46
24 mu_0       0.6      0.750     2.46e- 1  1.92e-11      5.27
25 mu_0       0.7      1.07      4.42e- 1  5.44e-16      6.96
26 mu_0       0.8      1.26      4.38e- 2  6.40e-25      8.56
27 mu_0       0.9      1.47      1.16e- 6  1.15e-40     28.3 
[1] "Total run time was 357.719 seconds"
