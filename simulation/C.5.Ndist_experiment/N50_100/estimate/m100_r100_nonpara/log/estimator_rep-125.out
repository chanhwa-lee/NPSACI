
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7598"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  61  62  63  64  65  66  67  68  69  71  72  73 
  4   1   2   1   1   2   3   3   1   4   1   2   1   4   1   3   1   8   4   1 
 75  76  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92  94  95  96 
  3   2   1   2   2   2   1   2   1   1   4   3   2   1   4   2   4   2   2   2 
 97  98  99 100 
  1   2   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0252  0.3067  0.5823  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4447 3151 
[1] "treatment indicator table: "

   0    1 
2945 4653 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3807
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3791
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 355.158 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.398 0.0627
 2 mu         0.1   0.2 0.472 0.0727
 3 mu         0.1   0.3 0.554 0.0904
 4 mu         0.1   0.4 0.594 0.0910
 5 mu         0.1   0.5 0.646 0.0984
 6 mu         0.2   0.1 0.432 0.0401
 7 mu         0.2   0.2 0.525 0.0460
 8 mu         0.2   0.3 0.603 0.0537
 9 mu         0.2   0.4 0.652 0.0542
10 mu         0.2   0.5 0.709 0.0612
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.838        0.458 0.0000345      4.42
 2 mu         0.2      1.04         0.941 0.106          2.74
 3 mu         0.3      1.00         1.00  0.431          1.99
 4 mu         0.4      0.994        0.999 0.511          1.69
 5 mu         0.5      1.02         0.996 0.671          1.58
 6 mu         0.6      0.990        0.986 0.585          1.39
 7 mu         0.7      0.994        1.00  0.557          1.40
 8 mu         0.8      1.01         0.980 0.526          1.72
 9 mu         0.9      0.990        0.910 0.209          2.25
10 mu_1       0.1      0.934        0.588 0.0000920      4.92
11 mu_1       0.2      1.03         0.964 0.149          2.67
12 mu_1       0.3      1.00         1.01  0.425          2.01
13 mu_1       0.4      0.997        1.01  0.528          1.69
14 mu_1       0.5      1.02         0.994 0.666          1.57
15 mu_1       0.6      0.989        0.986 0.586          1.38
16 mu_1       0.7      0.996        0.991 0.560          1.41
17 mu_1       0.8      1.01         0.983 0.516          1.72
18 mu_1       0.9      0.991        0.909 0.203          2.25
19 mu_0       0.1      0.827        0.433 0.0000281      4.37
20 mu_0       0.2      1.04         0.934 0.0959         2.75
21 mu_0       0.3      1.01         1.00  0.405          1.99
22 mu_0       0.4      0.991        1.00  0.499          1.70
23 mu_0       0.5      1.02         0.994 0.676          1.59
24 mu_0       0.6      0.992        0.990 0.583          1.41
25 mu_0       0.7      0.992        1.01  0.552          1.37
26 mu_0       0.8      1.02         1.00  0.563          1.74
27 mu_0       0.9      0.980        0.909 0.266          2.18
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0841     5.90e-25  1.46e-68      7.79
 2 mu         0.2     0.752      1.14e-13  2.18e-46     27.2 
 3 mu         0.3     0.904      4.29e- 7  1.79e-33     12.0 
 4 mu         0.4     1.17       3.52e- 3  2.32e-24     16.6 
 5 mu         0.5     1.07       2.71e- 2  2.39e-17      7.64
 6 mu         0.6     1.01       2.01e- 1  1.11e-11     10.1 
 7 mu         0.7     1.19       1.09e- 1  2.54e-18     11.2 
 8 mu         0.8     1.13       2.19e- 2  3.43e-28     10.3 
 9 mu         0.9     1.32       1.60e- 7  6.03e-48     19.7 
10 mu_1       0.1     0.144      3.86e-24  1.42e-67     13.0 
11 mu_1       0.2     0.817      4.00e-13  1.06e-45     22.7 
12 mu_1       0.3     0.887      8.79e- 7  5.82e-33      9.85
13 mu_1       0.4     1.19       3.44e- 3  5.64e-24     15.8 
14 mu_1       0.5     1.05       2.45e- 2  4.65e-17      7.20
15 mu_1       0.6     1.03       1.80e- 1  3.48e-12      9.76
16 mu_1       0.7     1.19       1.18e- 1  6.05e-19     11.6 
17 mu_1       0.8     1.14       1.70e- 2  7.15e-29     10.1 
18 mu_1       0.9     1.33       1.15e- 7  1.74e-48     19.3 
19 mu_0       0.1     0.0774     2.26e-25  4.27e-70      7.21
20 mu_0       0.2     0.736      4.81e-14  7.18e-48     28.3 
21 mu_0       0.3     0.912      2.36e- 7  6.74e-35     13.2 
22 mu_0       0.4     1.15       2.26e- 3  1.02e-25     17.2 
23 mu_0       0.5     1.08       2.19e- 2  1.26e-18      8.61
24 mu_0       0.6     0.994      2.74e- 1  7.28e-13     10.6 
25 mu_0       0.7     1.21       6.16e- 2  7.06e-18     10.3 
26 mu_0       0.8     1.10       3.47e- 2  1.43e-27     11.2 
27 mu_0       0.9     1.23       5.73e- 7  4.46e-47     23.8 
[1] "Total run time was 358.178 seconds"
