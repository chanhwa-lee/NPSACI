
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7230"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  70  71 
  1   2   1   3   3   6   3   1   2   3   4   3   3   3   2   2   3   2   2   2 
 72  73  74  75  76  77  78  79  80  81  83  84  86  87  88  90  91  92  93  96 
  1   4   2   2   2   3   1   2   2   1   2   2   2   1   2   3   2   2   5   1 
 98  99 100 
  1   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0267  0.3050  0.5797  0.9677  5.0000 
[1] "event indicator table: "

   0    1 
4145 3085 
[1] "treatment indicator table: "

   0    1 
2989 4241 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3518
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3712
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 370.899 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.491 0.0746
 2 mu         0.1   0.2 0.618 0.117 
 3 mu         0.1   0.3 0.648 0.104 
 4 mu         0.1   0.4 0.700 0.122 
 5 mu         0.1   0.5 0.801 0.165 
 6 mu         0.2   0.1 0.441 0.0470
 7 mu         0.2   0.2 0.541 0.0506
 8 mu         0.2   0.3 0.584 0.0485
 9 mu         0.2   0.4 0.618 0.0459
10 mu         0.2   0.5 0.676 0.0515
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.04         0.829  0.000280      3.47
 2 mu         0.2      1.05         1.02   0.106         2.41
 3 mu         0.3      1.00         0.948  0.373         1.79
 4 mu         0.4      0.997        0.971  0.516         1.74
 5 mu         0.5      1.01         1.01   0.644         1.83
 6 mu         0.6      1.01         0.980  0.680         1.47
 7 mu         0.7      1.01         0.992  0.577         1.47
 8 mu         0.8      0.985        0.989  0.472         1.52
 9 mu         0.9      1.06         1.00   0.233         2.44
10 mu_1       0.1      1.06         0.901  0.000749      3.42
11 mu_1       0.2      1.05         1.03   0.121         2.43
12 mu_1       0.3      0.996        0.949  0.371         1.75
13 mu_1       0.4      0.999        0.971  0.544         1.86
14 mu_1       0.5      1.00         1.01   0.629         1.75
15 mu_1       0.6      1.01         0.981  0.675         1.49
16 mu_1       0.7      1.01         0.994  0.584         1.47
17 mu_1       0.8      0.986        0.983  0.465         1.56
18 mu_1       0.9      1.06         0.998  0.220         2.47
19 mu_0       0.1      1.04         0.812  0.000228      3.47
20 mu_0       0.2      1.05         1.01   0.102         2.40
21 mu_0       0.3      1.00         0.955  0.373         1.83
22 mu_0       0.4      0.997        0.971  0.497         1.73
23 mu_0       0.5      1.01         1.01   0.651         1.91
24 mu_0       0.6      1.01         0.980  0.658         1.44
25 mu_0       0.7      1.02         1.01   0.559         1.46
26 mu_0       0.8      0.982        0.985  0.500         1.56
27 mu_0       0.9      1.06         1.02   0.351         2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.78      1.92e-23  1.86e-72    175.  
 2 mu         0.2      0.807     1.19e-11  2.81e-47     26.9 
 3 mu         0.3      0.823     4.39e- 6  8.97e-33     14.7 
 4 mu         0.4      1.22      6.26e- 3  1.09e-22     16.0 
 5 mu         0.5      0.834     1.01e- 1  4.37e-15      6.09
 6 mu         0.6      0.759     1.05e- 1  4.78e-15     11.5 
 7 mu         0.7      1.32      1.24e- 1  1.80e-23     14.5 
 8 mu         0.8      1.77      1.38e- 3  6.31e-36     15.7 
 9 mu         0.9      1.47      1.66e- 9  5.50e-58     55.9 
10 mu_1       0.1      1.43      1.25e-22  1.70e-71    138.  
11 mu_1       0.2      0.782     3.32e-11  1.28e-46     29.7 
12 mu_1       0.3      0.870     9.00e- 6  2.73e-32     15.7 
13 mu_1       0.4      1.21      9.76e- 3  2.49e-22     14.6 
14 mu_1       0.5      0.813     7.45e- 2  7.99e-15      6.31
15 mu_1       0.6      0.774     9.76e- 2  1.39e-15     12.7 
16 mu_1       0.7      1.35      1.20e- 1  4.47e-24     13.6 
17 mu_1       0.8      1.76      1.01e- 3  1.37e-36     15.7 
18 mu_1       0.9      1.47      1.07e- 9  1.06e-58     56.7 
19 mu_0       0.1      1.82      7.54e-24  1.78e-73    180.  
20 mu_0       0.2      0.813     6.62e-12  3.02e-48     26.2 
21 mu_0       0.3      0.803     2.41e- 6  1.10e-33     14.3 
22 mu_0       0.4      1.23      3.93e- 3  1.56e-23     17.0 
23 mu_0       0.5      0.855     7.12e- 2  7.52e-16      5.87
24 mu_0       0.6      0.736     1.17e- 1  9.87e-15      9.87
25 mu_0       0.7      1.24      1.45e- 1  4.95e-23     16.5 
26 mu_0       0.8      1.82      2.88e- 3  2.61e-35     16.1 
27 mu_0       0.9      1.47      6.95e- 9  4.54e-57     48.1 
[1] "Total run time was 374.144 seconds"
