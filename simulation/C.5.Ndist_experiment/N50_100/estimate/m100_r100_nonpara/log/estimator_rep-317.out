
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7613"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  4   1   4   1   1   2   1   4   1   4   5   2   1   1   1   1   2   2   4   1 
 71  72  73  74  75  77  79  81  82  83  84  85  86  87  88  90  91  94  95  96 
  2   2   1   1   1   1   1   4   1   1   2   1   4   6   3   1   1   8   3   1 
 97  98  99 100 
  2   1   5   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03524 0.35600 0.63078 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4526 3087 
[1] "treatment indicator table: "

   0    1 
2813 4800 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3811
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 392.694 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.594 0.176 
 2 mu         0.1   0.2 0.731 0.217 
 3 mu         0.1   0.3 0.800 0.235 
 4 mu         0.1   0.4 0.824 0.251 
 5 mu         0.1   0.5 0.867 0.264 
 6 mu         0.2   0.1 0.404 0.0452
 7 mu         0.2   0.2 0.492 0.0513
 8 mu         0.2   0.3 0.541 0.0481
 9 mu         0.2   0.4 0.563 0.0483
10 mu         0.2   0.5 0.593 0.0567
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.42         0.369 0.00000000397     37.9 
 2 mu         0.2      1.02         0.953 0.00114            4.11
 3 mu         0.3      0.968        0.918 0.126              2.99
 4 mu         0.4      0.962        0.972 0.479              2.16
 5 mu         0.5      0.997        0.974 0.504              1.86
 6 mu         0.6      1.05         1.04  0.545              1.68
 7 mu         0.7      0.979        0.970 0.512              1.30
 8 mu         0.8      0.986        0.978 0.530              1.53
 9 mu         0.9      1.04         1.01  0.301              2.09
10 mu_1       0.1      1.33         0.442 0.0000000149      26.1 
11 mu_1       0.2      1.01         0.947 0.00216            3.52
12 mu_1       0.3      0.963        0.930 0.160              3.20
13 mu_1       0.4      0.963        0.964 0.454              1.94
14 mu_1       0.5      1.00         0.982 0.495              1.85
15 mu_1       0.6      1.04         1.04  0.549              1.68
16 mu_1       0.7      0.978        0.970 0.519              1.32
17 mu_1       0.8      0.986        0.977 0.542              1.56
18 mu_1       0.9      1.04         1.02  0.291              2.12
19 mu_0       0.1      1.43         0.349 0.00000000276     39.2 
20 mu_0       0.2      1.02         0.953 0.000879           4.26
21 mu_0       0.3      0.970        0.922 0.112              2.90
22 mu_0       0.4      0.962        0.966 0.471              2.31
23 mu_0       0.5      0.993        0.965 0.513              1.87
24 mu_0       0.6      1.05         1.06  0.527              1.69
25 mu_0       0.7      0.983        0.969 0.494              1.32
26 mu_0       0.8      0.986        0.970 0.482              1.52
27 mu_0       0.9      1.02         0.984 0.323              1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0695     1.96e-28  3.51e-75      5.66
 2 mu         0.2     1.71       1.31e-15  2.12e-49     94.7 
 3 mu         0.3     2.49       8.59e- 9  1.52e-34    179.  
 4 mu         0.4     1.21       2.25e- 4  3.28e-24     16.8 
 5 mu         0.5     1.10       6.45e- 2  1.44e-16     16.1 
 6 mu         0.6     1.29       1.54e- 1  7.59e-15     14.6 
 7 mu         0.7     1.10       2.34e- 1  6.92e-24      7.01
 8 mu         0.8     1.22       1.53e- 2  2.78e-37     11.6 
 9 mu         0.9     1.38       1.74e- 8  4.80e-61     28.4 
10 mu_1       0.1     0.129      1.35e-27  3.22e-74     10.2 
11 mu_1       0.2     1.82       3.85e-15  9.71e-49     85.3 
12 mu_1       0.3     2.42       1.79e- 8  4.64e-34    171.  
13 mu_1       0.4     1.18       3.78e- 4  7.52e-24     17.0 
14 mu_1       0.5     1.10       7.04e- 2  2.77e-16     14.5 
15 mu_1       0.6     1.29       1.08e- 1  2.28e-15     15.2 
16 mu_1       0.7     1.09       2.41e- 1  1.78e-24      6.89
17 mu_1       0.8     1.22       1.34e- 2  6.26e-38     11.5 
18 mu_1       0.9     1.39       1.22e- 8  9.59e-62     28.0 
19 mu_0       0.1     0.0628     6.79e-29  3.29e-76      5.15
20 mu_0       0.2     1.69       6.61e-16  2.23e-50     97.1 
21 mu_0       0.3     2.52       4.59e- 9  1.83e-35    182.  
22 mu_0       0.4     1.23       1.33e- 4  4.61e-25     19.9 
23 mu_0       0.5     1.10       4.75e- 2  1.12e-17     17.6 
24 mu_0       0.6     1.27       1.57e- 1  1.56e-14     13.6 
25 mu_0       0.7     1.12       2.68e- 1  1.89e-23      8.06
26 mu_0       0.8     1.21       2.73e- 2  1.14e-36     12.2 
27 mu_0       0.9     1.29       6.69e- 8  3.93e-60     32.7 
[1] "Total run time was 396.535 seconds"
