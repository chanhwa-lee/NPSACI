
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7256"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  58  60  61  62  63  64  65  66  67  68  70  71  72  74 
  2   1   6   2   2   2   3   3   2   4   4   6   1   2   1   2   4   2   7   2 
 75  76  77  78  79  80  81  82  83  85  86  87  88  89  90  91  94  95  98  99 
  2   2   2   2   1   3   1   3   3   2   1   2   2   1   1   4   2   1   2   2 
100 
  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02516 0.30903 0.58625 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4348 2908 
[1] "treatment indicator table: "

   0    1 
2695 4561 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3538
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3718
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 355.757 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.432 0.0578
 2 mu         0.1   0.2 0.555 0.0728
 3 mu         0.1   0.3 0.679 0.0908
 4 mu         0.1   0.4 0.691 0.0738
 5 mu         0.1   0.5 0.771 0.0931
 6 mu         0.2   0.1 0.405 0.0371
 7 mu         0.2   0.2 0.501 0.0450
 8 mu         0.2   0.3 0.596 0.0509
 9 mu         0.2   0.4 0.629 0.0393
10 mu         0.2   0.5 0.697 0.0493
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.11         0.814   0.00561      4.45
 2 mu         0.2      1.10         1.05    0.214        2.61
 3 mu         0.3      0.972        0.957   0.434        1.79
 4 mu         0.4      1.01         1.00    0.503        1.76
 5 mu         0.5      1.01         0.997   0.586        1.87
 6 mu         0.6      0.981        0.975   0.584        1.43
 7 mu         0.7      0.975        0.963   0.592        1.62
 8 mu         0.8      1.03         1.02    0.521        1.66
 9 mu         0.9      0.983        0.981   0.486        1.84
10 mu_1       0.1      1.14         0.979   0.0135       3.23
11 mu_1       0.2      1.08         1.05    0.264        2.44
12 mu_1       0.3      0.969        0.947   0.439        1.76
13 mu_1       0.4      1.01         1.00    0.509        1.74
14 mu_1       0.5      1.01         0.997   0.580        1.85
15 mu_1       0.6      0.981        0.982   0.566        1.40
16 mu_1       0.7      0.976        0.954   0.590        1.62
17 mu_1       0.8      1.03         1.02    0.525        1.68
18 mu_1       0.9      0.984        0.980   0.472        1.85
19 mu_0       0.1      1.10         0.795   0.00474      4.58
20 mu_0       0.2      1.11         1.05    0.195        2.67
21 mu_0       0.3      0.973        0.963   0.423        1.80
22 mu_0       0.4      1.01         0.991   0.499        1.77
23 mu_0       0.5      1.01         1.00    0.592        1.88
24 mu_0       0.6      0.982        0.970   0.609        1.47
25 mu_0       0.7      0.975        0.973   0.562        1.63
26 mu_0       0.8      1.02         1.01    0.501        1.61
27 mu_0       0.9      0.982        0.969   0.412        1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.615     1.17e-26  9.00e-82     56.7 
 2 mu         0.2      0.929     4.22e-15  3.91e-54     36.2 
 3 mu         0.3      1.10      7.97e- 9  3.65e-38     17.9 
 4 mu         0.4      0.719     2.01e- 4  5.16e-27      9.06
 5 mu         0.5      0.612     1.03e- 2  1.48e-18      4.56
 6 mu         0.6      0.984     1.38e- 1  7.19e-12      7.63
 7 mu         0.7      1.48      2.53e- 1  4.73e-16     10.3 
 8 mu         0.8      0.978     3.63e- 2  9.48e-26     10.5 
 9 mu         0.9      1.16      7.34e- 7  3.42e-43     17.0 
10 mu_1       0.1      0.851     7.78e-26  8.37e-81     76.3 
11 mu_1       0.2      0.877     1.53e-14  1.82e-53     24.4 
12 mu_1       0.3      1.10      1.79e- 8  1.13e-37     18.3 
13 mu_1       0.4      0.672     3.34e- 4  1.20e-26      8.88
14 mu_1       0.5      0.635     1.37e- 2  2.76e-18      5.01
15 mu_1       0.6      1.01      1.39e- 1  1.11e-11      8.09
16 mu_1       0.7      1.49      2.22e- 1  1.54e-16     10.4 
17 mu_1       0.8      0.971     3.40e- 2  2.70e-26     10.9 
18 mu_1       0.9      1.16      5.45e- 7  8.67e-44     17.4 
19 mu_0       0.1      0.589     4.41e-27  7.00e-83     54.5 
20 mu_0       0.2      0.942     1.44e-15  3.42e-55     39.2 
21 mu_0       0.3      1.10      3.69e- 9  3.65e-39     17.8 
22 mu_0       0.4      0.749     1.06e- 4  6.02e-28      9.18
23 mu_0       0.5      0.590     1.00e- 2  2.08e-19      4.11
24 mu_0       0.6      0.948     1.24e- 1  6.86e-13      6.94
25 mu_0       0.7      1.47      2.28e- 1  1.22e-15      9.95
26 mu_0       0.8      1.01      5.45e- 2  3.66e-25      8.92
27 mu_0       0.9      1.19      2.32e- 6  2.64e-42     13.8 
[1] "Total run time was 359.143 seconds"
