
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7461"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  64  66  68  69  70  71  72  73 
  1   2   3   2   2   2   4   3   1   5   1   2   2   3   1   2   2   3   2   4 
 74  75  76  77  78  79  80  81  82  83  85  86  88  89  90  91  92  94  95  96 
  5   3   1   2   2   2   3   3   3   1   2   2   2   1   3   2   1   3   3   1 
 98  99 100 
  2   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03282 0.34394 0.60779 1.00000 7.27631 
[1] "event indicator table: "

   0    1 
4441 3020 
[1] "treatment indicator table: "

   0    1 
2730 4731 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3638
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3823
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 429.552 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.301 0.117 
 2 mu         0.1   0.2 0.364 0.140 
 3 mu         0.1   0.3 0.408 0.146 
 4 mu         0.1   0.4 0.438 0.146 
 5 mu         0.1   0.5 0.495 0.166 
 6 mu         0.2   0.1 0.383 0.0685
 7 mu         0.2   0.2 0.463 0.0832
 8 mu         0.2   0.3 0.541 0.0781
 9 mu         0.2   0.4 0.591 0.0735
10 mu         0.2   0.5 0.656 0.0893
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.733       0.0230 0.00000000311     10.9 
 2 mu         0.2      1.05        0.854  0.000754           4.21
 3 mu         0.3      1.07        0.994  0.0722             2.46
 4 mu         0.4      1.05        1.01   0.417              2.27
 5 mu         0.5      1.01        1.00   0.586              1.44
 6 mu         0.6      0.967       0.955  0.601              1.46
 7 mu         0.7      0.975       0.952  0.593              1.52
 8 mu         0.8      1.01        0.992  0.380              1.74
 9 mu         0.9      1.04        1.02   0.0166             2.14
10 mu_1       0.1      0.733       0.0483 0.0000000121       9.77
11 mu_1       0.2      1.08        0.935  0.00149            3.88
12 mu_1       0.3      1.07        0.998  0.0711             2.52
13 mu_1       0.4      1.05        1.04   0.403              2.25
14 mu_1       0.5      1.00        0.999  0.601              1.44
15 mu_1       0.6      0.966       0.956  0.610              1.49
16 mu_1       0.7      0.976       0.953  0.586              1.51
17 mu_1       0.8      1.02        0.995  0.383              1.79
18 mu_1       0.9      1.04        1.01   0.0149             2.16
19 mu_0       0.1      0.733       0.0202 0.00000000211     11.0 
20 mu_0       0.2      1.05        0.859  0.000570           4.36
21 mu_0       0.3      1.07        1.00   0.0727             2.61
22 mu_0       0.4      1.05        1.01   0.426              2.29
23 mu_0       0.5      1.01        1.02   0.572              1.49
24 mu_0       0.6      0.968       0.960  0.589              1.42
25 mu_0       0.7      0.974       0.955  0.564              1.52
26 mu_0       0.8      1.01        1.00   0.369              1.70
27 mu_0       0.9      1.03        1.03   0.0319             2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0564     2.32e-27  2.52e-88      3.73
 2 mu         0.2     2.30       3.52e-15  1.40e-59     99.2 
 3 mu         0.3     1.35       1.28e- 8  7.56e-43     52.7 
 4 mu         0.4     1.14       2.77e- 4  4.70e-31     30.0 
 5 mu         0.5     1.43       4.36e- 2  5.46e-22     26.6 
 6 mu         0.6     1.58       3.67e- 1  1.12e-14     41.1 
 7 mu         0.7     1.35       3.72e- 1  1.49e-20     10.6 
 8 mu         0.8     1.03       2.94e- 2  5.18e-33     10.6 
 9 mu         0.9     2.28       6.94e- 7  2.29e-55    104.  
10 mu_1       0.1     0.116      1.47e-26  2.45e-87      7.46
11 mu_1       0.2     2.49       1.13e-14  6.81e-59    100.  
12 mu_1       0.3     1.24       2.80e- 8  2.44e-42     43.2 
13 mu_1       0.4     1.15       4.61e- 4  1.14e-30     28.3 
14 mu_1       0.5     1.47       5.79e- 2  1.06e-21     30.0 
15 mu_1       0.6     1.55       3.29e- 1  1.81e-14     38.7 
16 mu_1       0.7     1.36       3.52e- 1  4.69e-21     10.7 
17 mu_1       0.8     1.01       2.74e- 2  1.43e-33     10.9 
18 mu_1       0.9     2.34       4.89e- 7  5.59e-56    110.  
19 mu_0       0.1     0.0498     9.48e-28  8.50e-90      3.32
20 mu_0       0.2     2.26       1.78e-15  5.32e-61     98.9 
21 mu_0       0.3     1.40       6.28e- 9  3.27e-44     56.8 
22 mu_0       0.4     1.13       1.54e- 4  2.37e-32     31.1 
23 mu_0       0.5     1.39       2.98e- 2  3.31e-23     23.2 
24 mu_0       0.6     1.62       3.17e- 1  8.46e-16     44.8 
25 mu_0       0.7     1.34       2.74e- 1  3.88e-20     10.5 
26 mu_0       0.8     1.08       3.16e- 2  2.02e-32      9.65
27 mu_0       0.9     1.75       2.53e- 6  1.78e-54     51.5 
[1] "Total run time was 432.765 seconds"
