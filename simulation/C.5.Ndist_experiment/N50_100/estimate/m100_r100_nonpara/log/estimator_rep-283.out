
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7413"
[1] "cluster size dist'n: "

50 52 53 54 55 56 57 58 59 60 61 62 64 65 66 67 68 69 71 72 73 74 75 76 77 79 
 3  4  2  3  3  1  1  2  2  1  3  2  2  5  1  4  1  1  3  4  1  2  1  2  2  2 
80 81 82 83 84 85 86 87 89 90 91 92 93 95 96 97 99 
 2  1  1  4  1  4  2  3  7  2  3  2  4  1  3  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04355 0.39912 0.63784 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4446 2967 
[1] "treatment indicator table: "

   0    1 
2611 4802 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3804
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3609
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 436.212 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.228 0.0619
 2 mu         0.1   0.2 0.287 0.0642
 3 mu         0.1   0.3 0.294 0.0721
 4 mu         0.1   0.4 0.346 0.0954
 5 mu         0.1   0.5 0.382 0.0815
 6 mu         0.2   0.1 0.315 0.0410
 7 mu         0.2   0.2 0.387 0.0380
 8 mu         0.2   0.3 0.405 0.0411
 9 mu         0.2   0.4 0.465 0.0606
10 mu         0.2   0.5 0.503 0.0438
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.691        0.116 0.000000181      6.58
 2 mu         0.2      0.927        0.774 0.0185           2.97
 3 mu         0.3      0.994        0.928 0.308            2.50
 4 mu         0.4      1.04         1.02  0.437            1.78
 5 mu         0.5      1.03         1.03  0.630            1.35
 6 mu         0.6      1.01         1.02  0.611            1.40
 7 mu         0.7      1.00         1.00  0.680            1.51
 8 mu         0.8      1.03         1.04  0.604            1.55
 9 mu         0.9      0.969        0.931 0.210            2.50
10 mu_1       0.1      0.730        0.196 0.000000553      5.00
11 mu_1       0.2      0.935        0.813 0.0312           2.84
12 mu_1       0.3      1.00         0.966 0.337            2.48
13 mu_1       0.4      1.04         1.04  0.454            1.75
14 mu_1       0.5      1.03         1.04  0.636            1.35
15 mu_1       0.6      1.01         1.01  0.622            1.39
16 mu_1       0.7      1.00         1.01  0.681            1.54
17 mu_1       0.8      1.03         1.04  0.592            1.56
18 mu_1       0.9      0.967        0.937 0.199            2.53
19 mu_0       0.1      0.687        0.107 0.000000140      6.76
20 mu_0       0.2      0.926        0.761 0.0153           3.08
21 mu_0       0.3      0.990        0.902 0.296            2.51
22 mu_0       0.4      1.04         1.03  0.425            1.81
23 mu_0       0.5      1.03         1.04  0.624            1.36
24 mu_0       0.6      1.01         1.02  0.594            1.40
25 mu_0       0.7      1.00         0.997 0.678            1.45
26 mu_0       0.8      1.03         1.03  0.654            1.54
27 mu_0       0.9      0.989        0.952 0.310            2.31
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0772     1.63e-28  5.10e-66      7.44
 2 mu         0.2     0.727      5.48e-16  6.00e-43     26.7 
 3 mu         0.3     0.913      3.26e- 9  1.12e-29     20.2 
 4 mu         0.4     0.796      1.45e- 4  1.82e-20     17.9 
 5 mu         0.5     0.809      4.61e- 2  1.53e-13      5.45
 6 mu         0.6     1.20       2.50e- 1  5.60e- 9      8.63
 7 mu         0.7     1.16       3.79e- 1  5.14e-16     10.7 
 8 mu         0.8     1.30       1.03e- 1  6.83e-27      9.32
 9 mu         0.9     1.36       9.69e- 7  1.10e-46     31.9 
10 mu_1       0.1     0.135      1.07e-27  4.62e-65     12.8 
11 mu_1       0.2     0.794      2.03e-15  2.72e-42     25.6 
12 mu_1       0.3     0.900      7.12e- 9  3.39e-29     23.2 
13 mu_1       0.4     0.775      2.43e- 4  4.12e-20     15.9 
14 mu_1       0.5     0.839      6.29e- 2  2.78e-13      5.69
15 mu_1       0.6     1.21       2.69e- 1  1.61e- 9      8.44
16 mu_1       0.7     1.15       3.85e- 1  1.93e-16     10.9 
17 mu_1       0.8     1.31       8.56e- 2  2.25e-27      9.39
18 mu_1       0.9     1.34       7.12e- 7  3.21e-47     32.2 
19 mu_0       0.1     0.0708     4.71e-29  5.27e-67      6.84
20 mu_0       0.2     0.711      1.85e-16  6.98e-44     27.6 
21 mu_0       0.3     0.919      1.61e- 9  1.49e-30     19.6 
22 mu_0       0.4     0.810      7.96e- 5  2.82e-21     19.5 
23 mu_0       0.5     0.780      3.55e- 2  2.85e-14      5.20
24 mu_0       0.6     1.19       2.01e- 1  8.96e- 9      8.91
25 mu_0       0.7     1.17       3.01e- 1  1.26e-15     10.1 
26 mu_0       0.8     1.25       1.53e- 1  2.52e-26      9.01
27 mu_0       0.9     1.47       3.28e- 6  8.10e-46     29.7 
[1] "Total run time was 441.301 seconds"
