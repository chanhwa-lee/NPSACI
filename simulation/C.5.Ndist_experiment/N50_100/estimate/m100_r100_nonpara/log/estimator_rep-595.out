
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7523"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  59  60  61  64  65  66  67  69  70  71  73  74  75 
  3   3   4   3   2   2   5   3   1   2   2   2   1   2   2   2   1   3   1   1 
 77  78  79  80  81  82  83  84  85  86  87  88  89  91  92  93  95  96  97  98 
  4   3   5   1   5   3   3   2   2   2   1   1   1   1   1   2   2   5   6   3 
 99 100 
  1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01624 0.29362 0.56478 0.97583 9.00000 
[1] "event indicator table: "

   0    1 
4427 3096 
[1] "treatment indicator table: "

   0    1 
3012 4511 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3739
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3784
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 353.789 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.411 0.0341
 2 mu         0.1   0.2 0.527 0.0938
 3 mu         0.1   0.3 0.648 0.0971
 4 mu         0.1   0.4 0.664 0.0869
 5 mu         0.1   0.5 0.693 0.0757
 6 mu         0.2   0.1 0.377 0.0253
 7 mu         0.2   0.2 0.470 0.0623
 8 mu         0.2   0.3 0.510 0.0457
 9 mu         0.2   0.4 0.563 0.0355
10 mu         0.2   0.5 0.610 0.0385
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.00         0.894 0.0000769      2.96
 2 mu         0.2      0.963        0.965 0.181          2.14
 3 mu         0.3      0.983        0.964 0.450          2.04
 4 mu         0.4      1.01         0.999 0.557          1.50
 5 mu         0.5      0.994        0.990 0.652          1.53
 6 mu         0.6      0.999        0.998 0.581          1.56
 7 mu         0.7      0.997        0.972 0.586          1.47
 8 mu         0.8      1.00         0.984 0.532          1.53
 9 mu         0.9      0.983        0.916 0.351          1.80
10 mu_1       0.1      0.981        0.795 0.000187       3.00
11 mu_1       0.2      0.968        0.957 0.227          2.06
12 mu_1       0.3      0.984        0.961 0.446          1.95
13 mu_1       0.4      1.01         0.999 0.575          1.48
14 mu_1       0.5      0.994        0.979 0.645          1.54
15 mu_1       0.6      1.00         1.00  0.559          1.58
16 mu_1       0.7      0.997        0.987 0.586          1.46
17 mu_1       0.8      1.00         0.986 0.533          1.56
18 mu_1       0.9      0.983        0.920 0.335          1.82
19 mu_0       0.1      1.00         0.888 0.0000647      2.96
20 mu_0       0.2      0.962        0.960 0.170          2.16
21 mu_0       0.3      0.983        0.963 0.445          2.08
22 mu_0       0.4      1.01         0.993 0.544          1.51
23 mu_0       0.5      0.995        0.982 0.659          1.52
24 mu_0       0.6      0.999        1.00  0.613          1.54
25 mu_0       0.7      0.998        0.981 0.585          1.49
26 mu_0       0.8      1.00         0.984 0.528          1.53
27 mu_0       0.9      0.984        0.952 0.373          1.88
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.104      1.91e-23  7.97e-75      9.77
 2 mu         0.2     0.271      2.48e-11  1.57e-49     19.5 
 3 mu         0.3     0.482      1.66e- 5  2.55e-35      7.80
 4 mu         0.4     1.11       2.73e- 2  1.19e-25     16.2 
 5 mu         0.5     1.17       2.24e- 1  3.12e-18      6.31
 6 mu         0.6     0.983      1.66e- 1  8.23e-20      9.62
 7 mu         0.7     0.847      3.04e- 2  6.22e-27      7.52
 8 mu         0.8     0.999      3.64e- 4  5.71e-37     13.0 
 9 mu         0.9     1.38       4.37e-11  3.96e-54     20.0 
10 mu_1       0.1     0.0128     8.28e-23  0             1.26
11 mu_1       0.2     0.300      5.41e-11  0            19.7 
12 mu_1       0.3     0.516      3.13e- 5  0             7.06
13 mu_1       0.4     1.15       3.71e- 2  0            16.9 
14 mu_1       0.5     1.16       2.44e- 1  0             6.39
15 mu_1       0.6     0.968      1.31e- 1  0             9.58
16 mu_1       0.7     0.853      2.26e- 2  0             7.90
17 mu_1       0.8     0.994      2.64e- 4  0            12.9 
18 mu_1       0.9     1.41       2.61e-11  0            20.8 
19 mu_0       0.1     0.114      9.48e-24  6.04e-76     10.9 
20 mu_0       0.2     0.263      1.36e-11  1.30e-50     19.4 
21 mu_0       0.3     0.467      1.03e- 5  1.33e-36      8.12
22 mu_0       0.4     1.08       1.85e- 2  7.26e-27     15.7 
23 mu_0       0.5     1.17       1.85e- 1  2.28e-19      6.77
24 mu_0       0.6     1.00       1.39e- 1  2.06e-19      9.68
25 mu_0       0.7     0.834      4.86e- 2  2.07e-26      6.62
26 mu_0       0.8     1.02       5.06e- 4  2.86e-36     13.3 
27 mu_0       0.9     1.16       2.04e-10  3.96e-53     17.9 
[1] "Total run time was 357.471 seconds"
