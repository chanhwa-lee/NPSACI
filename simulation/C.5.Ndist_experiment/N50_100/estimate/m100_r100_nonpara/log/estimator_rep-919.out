
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7425"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  64  65  66  67  68  69  70  71 
  3   1   2   2   4   2   1   3   2   3   1   1   1   3   1   3   2   3   3   3 
 72  73  74  75  76  77  79  80  82  83  84  85  87  88  89  90  91  93  94  95 
  4   1   6   2   3   2   2   1   2   2   3   3   2   2   2   2   2   1   2   2 
 96  97  99 100 
  5   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03852 0.36711 0.62902 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4464 2961 
[1] "treatment indicator table: "

   0    1 
2650 4775 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3686
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3739
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 434.029 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.371 0.0633
 2 mu         0.1   0.2 0.427 0.0741
 3 mu         0.1   0.3 0.478 0.0845
 4 mu         0.1   0.4 0.520 0.0938
 5 mu         0.1   0.5 0.566 0.0997
 6 mu         0.2   0.1 0.375 0.0267
 7 mu         0.2   0.2 0.450 0.0270
 8 mu         0.2   0.3 0.511 0.0315
 9 mu         0.2   0.4 0.565 0.0349
10 mu         0.2   0.5 0.613 0.0350
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.451 0.0000528     10.8 
 2 mu         0.2      1.17         1.09  0.196          3.07
 3 mu         0.3      1.07         1.05  0.370          2.05
 4 mu         0.4      0.988        0.963 0.512          1.70
 5 mu         0.5      0.998        0.996 0.686          1.36
 6 mu         0.6      0.983        0.992 0.608          1.35
 7 mu         0.7      0.993        0.973 0.530          1.58
 8 mu         0.8      1.00         0.991 0.632          1.57
 9 mu         0.9      1.04         1.00  0.356          2.04
10 mu_1       0.1      1.04         0.591 0.000130       7.35
11 mu_1       0.2      1.16         1.10  0.214          2.89
12 mu_1       0.3      1.05         1.06  0.350          2.07
13 mu_1       0.4      0.987        0.957 0.532          1.66
14 mu_1       0.5      0.998        0.995 0.703          1.36
15 mu_1       0.6      0.983        0.991 0.612          1.35
16 mu_1       0.7      0.994        0.971 0.534          1.57
17 mu_1       0.8      1.00         0.991 0.637          1.58
18 mu_1       0.9      1.04         0.999 0.343          2.06
19 mu_0       0.1      1.01         0.434 0.0000443     11.2 
20 mu_0       0.2      1.18         1.07  0.192          3.12
21 mu_0       0.3      1.07         1.05  0.378          2.05
22 mu_0       0.4      0.988        0.971 0.499          1.75
23 mu_0       0.5      0.998        0.981 0.668          1.36
24 mu_0       0.6      0.984        0.990 0.603          1.36
25 mu_0       0.7      0.990        0.974 0.522          1.62
26 mu_0       0.8      1.00         0.993 0.611          1.55
27 mu_0       0.9      1.03         0.991 0.401          1.87
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0501     8.93e-28  1.15e-83      4.96
 2 mu         0.2     0.730      6.36e-15  3.55e-56     42.7 
 3 mu         0.3     0.845      2.58e- 8  3.30e-40     22.8 
 4 mu         0.4     1.06       3.35e- 4  5.56e-29     20.7 
 5 mu         0.5     0.865      6.67e- 2  2.21e-20      6.21
 6 mu         0.6     1.14       3.85e- 1  1.74e-13     12.6 
 7 mu         0.7     1.11       3.30e- 1  9.42e-21      8.14
 8 mu         0.8     1.07       3.34e- 2  3.29e-32     16.0 
 9 mu         0.9     1.85       2.64e- 7  1.63e-52     23.2 
10 mu_1       0.1     0.0887     6.46e-27  1.10e-82      8.76
11 mu_1       0.2     0.770      2.05e-14  1.70e-55     37.7 
12 mu_1       0.3     0.851      5.50e- 8  1.05e-39     19.6 
13 mu_1       0.4     1.06       5.52e- 4  1.33e-28     20.2 
14 mu_1       0.5     0.857      8.85e- 2  4.23e-20      6.32
15 mu_1       0.6     1.16       3.32e- 1  1.53e-13     12.5 
16 mu_1       0.7     1.09       3.33e- 1  2.37e-21      7.80
17 mu_1       0.8     1.08       2.66e- 2  7.26e-33     16.3 
18 mu_1       0.9     1.87       1.94e- 7  3.20e-53     23.4 
19 mu_0       0.1     0.0458     2.74e-28  5.31e-85      4.54
20 mu_0       0.2     0.720      2.75e-15  1.85e-57     44.0 
21 mu_0       0.3     0.843      1.34e- 8  1.96e-41     24.2 
22 mu_0       0.4     1.05       1.90e- 4  3.86e-30     21.0 
23 mu_0       0.5     0.873      5.46e- 2  1.84e-21      6.21
24 mu_0       0.6     1.10       3.84e- 1  1.81e-14     12.8 
25 mu_0       0.7     1.17       3.31e- 1  2.58e-20      8.95
26 mu_0       0.8     0.996      6.06e- 2  1.36e-31     14.4 
27 mu_0       0.9     1.74       8.96e- 7  1.34e-51     21.4 
[1] "Total run time was 438.785 seconds"
