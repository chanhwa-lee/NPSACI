
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7573"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  60  61  63  65  66  67  68  69  70  71  72  73 
  4   1   2   1   1   2   1   2   1   2   2   1   1   2   3   4   4   2   4   2 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  3   2   2   2   5   4   3   2   4   1   2   2   2   1   2   4   2   1   3   3 
 94  96  99 100 
  4   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04745 0.36594 0.61717 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4416 3157 
[1] "treatment indicator table: "

   0    1 
2926 4647 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3828
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3745
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 378.787 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.364 0.0689
 2 mu         0.1   0.2 0.434 0.0722
 3 mu         0.1   0.3 0.520 0.0700
 4 mu         0.1   0.4 0.594 0.0783
 5 mu         0.1   0.5 0.642 0.0832
 6 mu         0.2   0.1 0.301 0.0341
 7 mu         0.2   0.2 0.380 0.0430
 8 mu         0.2   0.3 0.458 0.0428
 9 mu         0.2   0.4 0.529 0.0494
10 mu         0.2   0.5 0.574 0.0528
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.911        0.542 0.00000219      5.46
 2 mu         0.2      0.904        0.877 0.0193          2.50
 3 mu         0.3      0.993        0.934 0.338           3.05
 4 mu         0.4      0.992        0.954 0.489           1.62
 5 mu         0.5      0.991        0.979 0.455           1.47
 6 mu         0.6      0.979        0.964 0.682           1.49
 7 mu         0.7      1.01         1.01  0.561           1.48
 8 mu         0.8      1.00         0.997 0.500           1.55
 9 mu         0.9      0.968        0.942 0.272           1.77
10 mu_1       0.1      0.907        0.676 0.00000676      4.65
11 mu_1       0.2      0.904        0.886 0.0302          2.36
12 mu_1       0.3      1.00         0.960 0.396           2.97
13 mu_1       0.4      0.990        0.959 0.487           1.62
14 mu_1       0.5      0.990        0.990 0.458           1.48
15 mu_1       0.6      0.980        0.969 0.668           1.52
16 mu_1       0.7      1.01         1.02  0.554           1.48
17 mu_1       0.8      0.998        0.995 0.498           1.57
18 mu_1       0.9      0.969        0.949 0.271           1.77
19 mu_0       0.1      0.911        0.525 0.00000168      5.55
20 mu_0       0.2      0.904        0.883 0.0166          2.54
21 mu_0       0.3      0.990        0.936 0.314           3.09
22 mu_0       0.4      0.993        0.946 0.480           1.65
23 mu_0       0.5      0.991        0.978 0.452           1.49
24 mu_0       0.6      0.979        0.963 0.672           1.46
25 mu_0       0.7      1.01         1.01  0.576           1.49
26 mu_0       0.8      1.01         0.993 0.507           1.46
27 mu_0       0.9      0.962        0.927 0.290           1.84
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0210     1.49e-25  5.12e-92      1.59
 2 mu         0.2     0.796      2.68e-13  1.28e-62     33.2 
 3 mu         0.3     1.33       7.66e- 7  1.77e-45     29.1 
 4 mu         0.4     1.39       1.91e- 3  2.29e-33     14.3 
 5 mu         0.5     1.34       7.61e- 2  4.99e-24     20.2 
 6 mu         0.6     1.13       2.65e- 1  1.84e-16     10.0 
 7 mu         0.7     1.22       8.24e- 2  7.83e-22     10.4 
 8 mu         0.8     1.30       1.87e- 2  9.26e-34     27.1 
 9 mu         0.9     1.50       2.45e- 8  6.46e-55     29.8 
10 mu_1       0.1     0.0398     1.06e-24  5.02e-91      2.86
11 mu_1       0.2     0.888      7.81e-13  6.28e-62     36.1 
12 mu_1       0.3     1.38       1.54e- 6  5.80e-45     30.4 
13 mu_1       0.4     1.37       2.88e- 3  5.60e-33     12.8 
14 mu_1       0.5     1.32       8.14e- 2  9.78e-24     20.4 
15 mu_1       0.6     1.14       2.49e- 1  3.00e-16     10.6 
16 mu_1       0.7     1.21       6.79e- 2  2.01e-22     10.5 
17 mu_1       0.8     1.31       1.44e- 2  2.08e-34     27.1 
18 mu_1       0.9     1.51       1.72e- 8  1.29e-55     30.7 
19 mu_0       0.1     0.0189     4.86e-26  1.14e-93      1.45
20 mu_0       0.2     0.773      1.39e-13  3.21e-64     32.4 
21 mu_0       0.3     1.31       4.35e- 7  5.07e-47     28.6 
22 mu_0       0.4     1.40       1.51e- 3  7.62e-35     15.3 
23 mu_0       0.5     1.36       8.34e- 2  2.00e-25     19.9 
24 mu_0       0.6     1.11       2.55e- 1  9.18e-18      9.09
25 mu_0       0.7     1.25       8.54e- 2  2.14e-21      9.91
26 mu_0       0.8     1.26       2.70e- 2  3.80e-33     27.1 
27 mu_0       0.9     1.41       8.97e- 8  5.30e-54     21.7 
[1] "Total run time was 383.322 seconds"
