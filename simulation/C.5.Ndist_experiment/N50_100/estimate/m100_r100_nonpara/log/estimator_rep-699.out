
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7475"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  71  72 
  1   4   2   2   4   1   3   1   1   2   1   1   1   3   2   4   4   1   5   4 
 73  74  75  76  77  78  79  81  82  83  84  86  87  88  89  90  91  92  93  94 
  1   5   1   3   1   2   4   2   1   5   1   1   3   2   2   1   1   2   3   4 
 96  97  98  99 100 
  1   1   4   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0301  0.3325  0.5960  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4475 3000 
[1] "treatment indicator table: "

   0    1 
2659 4816 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3806
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3669
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 495.263 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.494 0.0897
 2 mu         0.1   0.2 0.642 0.122 
 3 mu         0.1   0.3 0.750 0.140 
 4 mu         0.1   0.4 0.796 0.155 
 5 mu         0.1   0.5 0.834 0.152 
 6 mu         0.2   0.1 0.440 0.0525
 7 mu         0.2   0.2 0.571 0.0542
 8 mu         0.2   0.3 0.657 0.0569
 9 mu         0.2   0.4 0.689 0.0564
10 mu         0.2   0.5 0.722 0.0551
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.22         0.339 0.0000000397     12.2 
 2 mu         0.2      1.12         1.05  0.00796           3.62
 3 mu         0.3      0.936        0.857 0.211             2.54
 4 mu         0.4      0.983        0.999 0.422             1.75
 5 mu         0.5      1.01         0.996 0.617             1.67
 6 mu         0.6      1.03         1.04  0.578             1.58
 7 mu         0.7      1.00         1.01  0.643             1.34
 8 mu         0.8      0.983        0.965 0.404             1.84
 9 mu         0.9      1.01         0.961 0.318             2.53
10 mu_1       0.1      1.21         0.536 0.000000132       7.30
11 mu_1       0.2      1.09         0.986 0.0135            3.93
12 mu_1       0.3      0.933        0.868 0.267             2.22
13 mu_1       0.4      0.987        0.982 0.430             1.70
14 mu_1       0.5      1.02         0.995 0.624             1.66
15 mu_1       0.6      1.03         1.04  0.577             1.60
16 mu_1       0.7      0.999        1.01  0.634             1.33
17 mu_1       0.8      0.982        0.960 0.391             1.87
18 mu_1       0.9      1.02         0.971 0.303             2.56
19 mu_0       0.1      1.22         0.314 0.0000000294     12.8 
20 mu_0       0.2      1.12         1.07  0.00657           3.60
21 mu_0       0.3      0.937        0.864 0.187             2.67
22 mu_0       0.4      0.981        0.993 0.417             1.79
23 mu_0       0.5      1.01         0.992 0.610             1.67
24 mu_0       0.6      1.03         1.03  0.578             1.55
25 mu_0       0.7      1.00         1.01  0.662             1.36
26 mu_0       0.8      0.988        0.968 0.456             1.74
27 mu_0       0.9      0.990        0.941 0.430             2.26
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000841     6.85e-30  5.25e-79    0.0422
 2 mu         0.2   0.488        3.26e-16  9.01e-53   15.3   
 3 mu         0.3   1.26         6.96e- 9  1.45e-37   18.3   
 4 mu         0.4   1.45         1.16e- 4  6.62e-27   37.7   
 5 mu         0.5   1.03         2.71e- 2  8.98e-19   10.9   
 6 mu         0.6   0.970        9.54e- 2  2.55e-12    8.87  
 7 mu         0.7   0.965        2.59e- 1  7.37e-19    6.19  
 8 mu         0.8   1.39         2.48e- 2  7.52e-31   13.6   
 9 mu         0.9   1.27         7.41e- 8  1.68e-52   19.2   
10 mu_1       0.1   0.00217      4.58e-29  4.97e-78    0.111 
11 mu_1       0.2   0.625        1.06e-15  4.26e-52   18.6   
12 mu_1       0.3   1.30         1.51e- 8  4.57e-37   15.5   
13 mu_1       0.4   1.42         2.01e- 4  1.57e-26   36.1   
14 mu_1       0.5   1.02         2.60e- 2  1.70e-18   10.9   
15 mu_1       0.6   0.972        1.12e- 1  4.02e-12    9.30  
16 mu_1       0.7   0.967        2.86e- 1  2.53e-19    5.85  
17 mu_1       0.8   1.41         1.97e- 2  2.26e-31   13.9   
18 mu_1       0.9   1.27         5.34e- 8  4.48e-53   18.7   
19 mu_0       0.1   0.000693     2.53e-30  3.14e-80    0.0345
20 mu_0       0.2   0.454        1.42e-16  6.06e-54   14.5   
21 mu_0       0.3   1.24         3.51e- 9  1.11e-38   19.5   
22 mu_0       0.4   1.48         5.94e- 5  5.93e-28   38.7   
23 mu_0       0.5   1.05         1.90e- 2  9.65e-20   11.0   
24 mu_0       0.6   0.967        8.40e- 2  3.46e-13    8.21  
25 mu_0       0.7   0.959        2.40e- 1  1.87e-18    6.98  
26 mu_0       0.8   1.34         3.92e- 2  2.86e-30   12.6   
27 mu_0       0.9   1.30         2.60e- 7  1.28e-51   24.5   
[1] "Total run time was 500.354 seconds"
