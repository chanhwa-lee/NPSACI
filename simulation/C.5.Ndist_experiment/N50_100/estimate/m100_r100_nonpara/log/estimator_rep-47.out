
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7561"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  62  63  64  65  67  68  69  70  71  72 
  3   1   1   3   1   2   5   2   1   5   2   2   2   2   1   3   3   2   3   2 
 75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  93  94  95 
  2   2   1   2   4   3   1   5   2   1   1   1   3   2   1   2   3   2   1   3 
 96  99 100 
  3   3   6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02828 0.32343 0.58839 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4376 3185 
[1] "treatment indicator table: "

   0    1 
2933 4628 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3903
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3658
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 440.074 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.470 0.0745
 2 mu         0.1   0.2 0.563 0.0848
 3 mu         0.1   0.3 0.630 0.0915
 4 mu         0.1   0.4 0.695 0.104 
 5 mu         0.1   0.5 0.727 0.109 
 6 mu         0.2   0.1 0.391 0.0427
 7 mu         0.2   0.2 0.466 0.0492
 8 mu         0.2   0.3 0.534 0.0448
 9 mu         0.2   0.4 0.588 0.0498
10 mu         0.2   0.5 0.612 0.0490
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.16         0.387 0.000000167      8.59
 2 mu         0.2      1.06         0.991 0.0270           2.77
 3 mu         0.3      1.05         1.02  0.229            1.93
 4 mu         0.4      0.965        0.944 0.539            1.71
 5 mu         0.5      1.01         1.01  0.584            1.55
 6 mu         0.6      1.02         1.01  0.583            1.41
 7 mu         0.7      1.01         0.976 0.678            1.48
 8 mu         0.8      0.999        1.01  0.564            1.75
 9 mu         0.9      0.980        0.993 0.0653           1.75
10 mu_1       0.1      1.12         0.609 0.000000495      7.54
11 mu_1       0.2      1.07         1.00  0.0410           2.73
12 mu_1       0.3      1.03         1.03  0.247            1.86
13 mu_1       0.4      0.966        0.956 0.549            1.64
14 mu_1       0.5      1.01         0.997 0.596            1.55
15 mu_1       0.6      1.02         1.01  0.583            1.42
16 mu_1       0.7      1.01         0.986 0.672            1.47
17 mu_1       0.8      0.999        1.01  0.559            1.78
18 mu_1       0.9      0.979        0.999 0.0594           1.73
19 mu_0       0.1      1.16         0.359 0.000000131      8.71
20 mu_0       0.2      1.06         0.996 0.0235           2.78
21 mu_0       0.3      1.05         1.02  0.222            1.96
22 mu_0       0.4      0.965        0.955 0.532            1.75
23 mu_0       0.5      1.00         1.01  0.573            1.55
24 mu_0       0.6      1.02         1.01  0.583            1.41
25 mu_0       0.7      1.01         0.985 0.693            1.51
26 mu_0       0.8      0.998        1.01  0.586            1.61
27 mu_0       0.9      0.988        0.960 0.118            1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00279     2.43e-27  4.85e-83     0.230
 2 mu         0.2    0.554       3.08e-14  1.33e-56    20.6  
 3 mu         0.3    1.16        2.20e- 7  3.66e-41    13.9  
 4 mu         0.4    1.21        2.05e- 3  3.09e-30    16.9  
 5 mu         0.5    0.816       1.20e- 1  8.70e-22     8.17 
 6 mu         0.6    1.22        1.48e- 1  6.46e-15     8.12 
 7 mu         0.7    1.16        3.81e- 1  6.23e-18     7.70 
 8 mu         0.8    1.63        4.55e- 3  2.82e-29    18.3  
 9 mu         0.9    1.74        5.14e- 9  8.96e-50    70.8  
10 mu_1       0.1    0.00630     1.40e-26  4.79e-82     0.511
11 mu_1       0.2    0.671       1.05e-13  6.59e-56    22.9  
12 mu_1       0.3    1.19        4.47e- 7  1.20e-40    13.2  
13 mu_1       0.4    1.17        3.30e- 3  7.65e-30    16.9  
14 mu_1       0.5    0.818       1.12e- 1  1.72e-21     7.76 
15 mu_1       0.6    1.24        1.42e- 1  1.07e-14     8.17 
16 mu_1       0.7    1.16        3.29e- 1  2.15e-18     8.04 
17 mu_1       0.8    1.64        3.53e- 3  8.52e-30    18.8  
18 mu_1       0.9    1.81        3.68e- 9  2.41e-50    75.0  
19 mu_0       0.1    0.00240     1.15e-27  6.05e-85     0.199
20 mu_0       0.2    0.525       1.21e-14  1.87e-58    20.0  
21 mu_0       0.3    1.14        1.20e- 7  5.87e-43    15.1  
22 mu_0       0.4    1.24        1.22e- 3  5.79e-32    16.9  
23 mu_0       0.5    0.813       1.09e- 1  1.95e-23     8.58 
24 mu_0       0.6    1.20        1.10e- 1  1.82e-16     8.32 
25 mu_0       0.7    1.15        4.29e- 1  1.57e-17     7.65 
26 mu_0       0.8    1.60        5.07e- 3  1.07e-28    16.2  
27 mu_0       0.9    1.17        1.83e- 8  6.79e-49    32.7  
[1] "Total run time was 443.757 seconds"
