
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7677"
[1] "cluster size dist'n: "

 51  52  53  55  57  58  59  60  61  63  64  65  66  67  68  69  70  71  72  73 
  3   1   3   2   1   2   4   1   2   2   5   3   3   2   1   1   4   1   2   2 
 74  76  77  79  80  81  82  83  84  85  87  88  90  91  92  93  95  96  97  98 
  3   1   6   3   1   2   1   1   2   1   1   3   5   2   3   2   2   3   3   4 
 99 100 
  2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04223 0.35525 0.61238 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4497 3180 
[1] "treatment indicator table: "

   0    1 
2952 4725 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3846
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3831
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.701 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.364 0.0471
 2 mu         0.1   0.2 0.405 0.0577
 3 mu         0.1   0.3 0.457 0.0649
 4 mu         0.1   0.4 0.512 0.0695
 5 mu         0.1   0.5 0.561 0.0834
 6 mu         0.2   0.1 0.306 0.0280
 7 mu         0.2   0.2 0.342 0.0383
 8 mu         0.2   0.3 0.391 0.0379
 9 mu         0.2   0.4 0.442 0.0384
10 mu         0.2   0.5 0.490 0.0512
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.00         0.559 0.0000144      5.94
 2 mu         0.2      0.934        0.840 0.0596         2.47
 3 mu         0.3      1.00         0.998 0.234          2.09
 4 mu         0.4      1.05         1.07  0.599          1.54
 5 mu         0.5      1.02         1.01  0.611          1.50
 6 mu         0.6      0.978        0.963 0.645          1.42
 7 mu         0.7      0.972        0.975 0.603          1.43
 8 mu         0.8      0.990        0.981 0.656          1.52
 9 mu         0.9      1.00         0.950 0.237          1.96
10 mu_1       0.1      0.975        0.654 0.0000439      5.20
11 mu_1       0.2      0.942        0.868 0.0940         2.56
12 mu_1       0.3      1.00         1.01  0.253          1.99
13 mu_1       0.4      1.05         1.08  0.591          1.58
14 mu_1       0.5      1.02         1.00  0.619          1.46
15 mu_1       0.6      0.976        0.960 0.655          1.41
16 mu_1       0.7      0.972        0.972 0.605          1.45
17 mu_1       0.8      0.990        0.985 0.642          1.52
18 mu_1       0.9      1.00         0.949 0.226          1.97
19 mu_0       0.1      1.01         0.567 0.0000112      6.02
20 mu_0       0.2      0.932        0.832 0.0510         2.47
21 mu_0       0.3      0.998        1.00  0.226          2.13
22 mu_0       0.4      1.05         1.08  0.604          1.51
23 mu_0       0.5      1.03         1.02  0.603          1.53
24 mu_0       0.6      0.979        0.963 0.631          1.43
25 mu_0       0.7      0.973        0.977 0.597          1.39
26 mu_0       0.8      0.989        0.970 0.701          1.53
27 mu_0       0.9      1.00         0.958 0.333          1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00653     1.87e-26  4.97e-75     0.567
 2 mu         0.2    0.586       4.41e-14  1.69e-49    38.5  
 3 mu         0.3    0.873       8.18e- 8  9.23e-35    14.1  
 4 mu         0.4    0.909       7.41e- 4  1.74e-24    10.8  
 5 mu         0.5    0.903       8.99e- 2  1.05e-16     5.44 
 6 mu         0.6    1.11        3.22e- 1  5.92e-13     4.90 
 7 mu         0.7    0.991       1.82e- 1  3.54e-21     5.58 
 8 mu         0.8    1.32        1.02e- 2  1.85e-33    13.4  
 9 mu         0.9    1.40        2.17e- 8  2.30e-55    25.9  
10 mu_1       0.1    0.0134      1.11e-25  4.60e-74     1.13 
11 mu_1       0.2    0.648       1.48e-13  7.80e-49    38.5  
12 mu_1       0.3    0.898       1.80e- 7  2.84e-34    14.1  
13 mu_1       0.4    0.893       1.25e- 3  4.03e-24     9.93 
14 mu_1       0.5    0.922       1.18e- 1  1.94e-16     5.75 
15 mu_1       0.6    1.11        2.72e- 1  1.97e-13     4.97 
16 mu_1       0.7    0.978       1.48e- 1  1.01e-21     5.68 
17 mu_1       0.8    1.34        7.90e- 3  4.63e-34    13.8  
18 mu_1       0.9    1.40        1.48e- 8  5.11e-56    26.5  
19 mu_0       0.1    0.00577     8.47e-27  4.16e-76     0.504
20 mu_0       0.2    0.571       1.82e-14  1.59e-50    38.5  
21 mu_0       0.3    0.862       3.99e- 8  9.92e-36    14.2  
22 mu_0       0.4    0.919       3.99e- 4  2.19e-25    11.4  
23 mu_0       0.5    0.884       7.43e- 2  1.58e-17     5.13 
24 mu_0       0.6    1.10        3.40e- 1  1.18e-12     4.78 
25 mu_0       0.7    1.02        1.64e- 1  9.44e-21     5.79 
26 mu_0       0.8    1.25        1.79e- 2  7.41e-33    12.0  
27 mu_0       0.9    1.37        8.31e- 8  1.84e-54    20.7  
[1] "Total run time was 401.764 seconds"
