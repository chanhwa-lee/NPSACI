
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7625"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  63  64  65  67  68  69  70  71  72 
  5   1   2   1   2   1   2   2   1   2   2   2   2   5   3   1   2   1   2   7 
 74  75  76  77  78  80  81  82  83  84  85  86  87  89  90  92  94  95  96  97 
  1   2   1   2   5   2   1   1   3   4   2   1   1   3   1   3   4   2   4   3 
 98  99 100 
  2   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03917 0.35383 0.60514 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4594 3031 
[1] "treatment indicator table: "

   0    1 
2854 4771 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3792
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3833
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 426.963 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.313 0.0463
 2 mu         0.1   0.2 0.457 0.0705
 3 mu         0.1   0.3 0.469 0.0654
 4 mu         0.1   0.4 0.552 0.0798
 5 mu         0.1   0.5 0.565 0.0840
 6 mu         0.2   0.1 0.276 0.0238
 7 mu         0.2   0.2 0.401 0.0477
 8 mu         0.2   0.3 0.415 0.0322
 9 mu         0.2   0.4 0.491 0.0451
10 mu         0.2   0.5 0.507 0.0455
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.919        0.213  1.59e-11      6.26
 2 mu         0.2      0.875        0.859  1.38e- 4      2.57
 3 mu         0.3      0.967        0.965  6.28e- 2      1.89
 4 mu         0.4      1.03         1.01   2.02e- 1      2.00
 5 mu         0.5      0.997        0.978  3.70e- 1      1.55
 6 mu         0.6      0.994        0.985  6.20e- 1      1.43
 7 mu         0.7      1.01         1.00   5.22e- 1      1.50
 8 mu         0.8      0.993        0.990  4.83e- 1      2.11
 9 mu         0.9      1.06         1.08   3.96e- 3      2.09
10 mu_1       0.1      0.881        0.357  5.69e-11      7.23
11 mu_1       0.2      0.881        0.860  2.50e- 4      2.55
12 mu_1       0.3      0.975        0.975  8.15e- 2      1.85
13 mu_1       0.4      1.03         1.00   2.00e- 1      1.99
14 mu_1       0.5      0.995        0.966  3.87e- 1      1.56
15 mu_1       0.6      0.995        0.981  6.10e- 1      1.42
16 mu_1       0.7      1.01         1.00   5.23e- 1      1.51
17 mu_1       0.8      0.993        0.990  4.70e- 1      2.12
18 mu_1       0.9      1.07         1.08   3.51e- 3      2.13
19 mu_0       0.1      0.923        0.198  1.13e-11      6.15
20 mu_0       0.2      0.874        0.853  1.10e- 4      2.57
21 mu_0       0.3      0.964        0.956  5.48e- 2      1.95
22 mu_0       0.4      1.03         0.992  2.03e- 1      2.01
23 mu_0       0.5      0.999        0.982  3.54e- 1      1.55
24 mu_0       0.6      0.992        0.979  6.05e- 1      1.46
25 mu_0       0.7      1.01         1.00   5.19e- 1      1.49
26 mu_0       0.8      0.994        0.980  4.42e- 1      2.10
27 mu_0       0.9      1.05         1.05   8.02e- 3      1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0154     1.75e-28  7.62e-85      1.53
 2 mu         0.2     0.406      2.28e-15  7.45e-58     19.5 
 3 mu         0.3     1.59       3.86e- 8  4.02e-42     49.6 
 4 mu         0.4     1.34       1.34e- 3  5.19e-31     15.1 
 5 mu         0.5     1.24       6.42e- 2  1.90e-22     20.4 
 6 mu         0.6     1.13       1.62e- 1  1.63e-15     23.1 
 7 mu         0.7     0.863      8.20e- 2  5.94e-14      8.72
 8 mu         0.8     1.28       3.87e- 3  4.56e-24     15.7 
 9 mu         0.9     1.66       2.29e- 9  1.32e-42     23.7 
10 mu_1       0.1     0.0304     1.14e-27  7.45e-84      3.00
11 mu_1       0.2     0.498      7.13e-15  3.65e-57     19.5 
12 mu_1       0.3     1.64       8.66e- 8  1.31e-41     47.3 
13 mu_1       0.4     1.32       2.15e- 3  1.27e-30     15.1 
14 mu_1       0.5     1.22       7.09e- 2  3.72e-22     20.1 
15 mu_1       0.6     1.13       1.79e- 1  2.65e-15     24.2 
16 mu_1       0.7     0.855      9.71e- 2  2.40e-14      7.82
17 mu_1       0.8     1.30       3.11e- 3  1.61e-24     16.2 
18 mu_1       0.9     1.68       1.57e- 9  4.15e-43     24.8 
19 mu_0       0.1     0.0137     6.72e-29  1.84e-86      1.36
20 mu_0       0.2     0.383      1.06e-15  2.03e-59     19.6 
21 mu_0       0.3     1.56       1.80e- 8  1.25e-43     50.7 
22 mu_0       0.4     1.35       8.11e- 4  1.88e-32     15.1 
23 mu_0       0.5     1.27       6.43e- 2  8.26e-24     20.7 
24 mu_0       0.6     1.13       1.47e- 1  8.84e-17     21.5 
25 mu_0       0.7     0.881      7.73e- 2  1.42e-13     10.8 
26 mu_0       0.8     1.20       6.62e- 3  1.64e-23     13.7 
27 mu_0       0.9     1.46       8.85e- 9  9.49e-42     22.6 
[1] "Total run time was 430.389 seconds"
