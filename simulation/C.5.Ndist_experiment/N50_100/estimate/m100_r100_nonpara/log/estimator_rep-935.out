
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7501"
[1] "cluster size dist'n: "

 50  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  4   3   1   1   2   1   2   1   2   3   3   3   1   1   3   2   2   2   1   3 
 72  73  74  76  77  78  79  80  81  82  83  84  85  87  88  89  90  92  93  94 
  2   6   2   4   2   2   4   2   2   3   3   3   1   1   2   1   1   1   2   2 
 96  97  98  99 100 
  5   2   1   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03101 0.32518 0.58673 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4319 3182 
[1] "treatment indicator table: "

   0    1 
2955 4546 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3601
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3900
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 405.624 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.354 0.105 
 2 mu         0.1   0.2 0.530 0.142 
 3 mu         0.1   0.3 0.563 0.131 
 4 mu         0.1   0.4 0.627 0.122 
 5 mu         0.1   0.5 0.655 0.121 
 6 mu         0.2   0.1 0.374 0.0830
 7 mu         0.2   0.2 0.540 0.123 
 8 mu         0.2   0.3 0.582 0.103 
 9 mu         0.2   0.4 0.651 0.0872
10 mu         0.2   0.5 0.681 0.0792
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.01         0.307  1.18e-10     12.4 
 2 mu         0.2      1.10         0.982  4.28e- 4      3.54
 3 mu         0.3      0.985        0.937  1.60e- 1      1.80
 4 mu         0.4      1.03         1.01   5.11e- 1      1.82
 5 mu         0.5      1.03         1.02   6.10e- 1      1.45
 6 mu         0.6      0.997        0.970  5.99e- 1      1.44
 7 mu         0.7      0.974        0.967  5.36e- 1      1.35
 8 mu         0.8      0.991        0.973  6.47e- 1      1.55
 9 mu         0.9      0.989        0.949  1.53e- 1      2.65
10 mu_1       0.1      1.14         0.401  4.41e-10     14.2 
11 mu_1       0.2      1.08         0.964  8.11e- 4      3.22
12 mu_1       0.3      0.986        0.955  2.07e- 1      1.76
13 mu_1       0.4      1.03         1.01   5.25e- 1      1.81
14 mu_1       0.5      1.02         1.02   6.11e- 1      1.43
15 mu_1       0.6      0.995        0.969  6.11e- 1      1.46
16 mu_1       0.7      0.973        0.966  5.33e- 1      1.34
17 mu_1       0.8      0.993        0.982  6.51e- 1      1.57
18 mu_1       0.9      0.990        0.948  1.45e- 1      2.70
19 mu_0       0.1      0.995        0.286  8.24e-11     12.2 
20 mu_0       0.2      1.10         0.983  3.33e- 4      3.75
21 mu_0       0.3      0.984        0.946  1.39e- 1      1.83
22 mu_0       0.4      1.03         0.998  5.02e- 1      1.82
23 mu_0       0.5      1.03         1.03   6.09e- 1      1.46
24 mu_0       0.6      0.999        0.979  5.81e- 1      1.42
25 mu_0       0.7      0.977        0.965  5.43e- 1      1.36
26 mu_0       0.8      0.983        0.959  6.03e- 1      1.47
27 mu_0       0.9      0.982        0.917  2.19e- 1      2.25
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.0115      3.84e-26  2.43e-70     0.516
 2 mu         0.2    0.984       2.01e-13  8.14e-46    36.1  
 3 mu         0.3    1.52        4.63e- 7  1.01e-31    29.3  
 4 mu         0.4    1.05        2.66e- 3  5.91e-22    23.8  
 5 mu         0.5    0.850       6.82e- 2  6.65e-15     5.85 
 6 mu         0.6    1.06        2.09e- 1  1.58e- 9    13.3  
 7 mu         0.7    1.24        3.43e- 1  4.32e-16     8.89 
 8 mu         0.8    1.45        9.87e- 3  3.33e-27    16.0  
 9 mu         0.9    0.891       2.32e- 8  1.70e-47    29.8  
10 mu_1       0.1    0.0262      2.19e-25  2.19e-69     1.16 
11 mu_1       0.2    1.17        6.25e-13  3.67e-45    42.1  
12 mu_1       0.3    1.44        9.49e- 7  3.04e-31    27.4  
13 mu_1       0.4    1.04        4.15e- 3  1.33e-21    23.1  
14 mu_1       0.5    0.847       9.16e- 2  1.25e-14     6.71 
15 mu_1       0.6    1.08        1.99e- 1  2.46e- 9    12.7  
16 mu_1       0.7    1.24        3.60e- 1  1.68e-16     8.88 
17 mu_1       0.8    1.45        7.82e- 3  1.14e-27    16.0  
18 mu_1       0.9    0.898       1.58e- 8  5.14e-48    29.9  
19 mu_0       0.1    0.00986     1.84e-26  2.64e-71     0.449
20 mu_0       0.2    0.937       9.48e-14  9.95e-47    34.6  
21 mu_0       0.3    1.56        2.54e- 7  1.41e-32    30.2  
22 mu_0       0.4    1.06        1.66e- 3  9.64e-23    24.3  
23 mu_0       0.5    0.854       4.48e- 2  8.42e-16     5.00 
24 mu_0       0.6    1.03        2.45e- 1  2.49e-10    14.2  
25 mu_0       0.7    1.22        2.75e- 1  1.05e-15     9.15 
26 mu_0       0.8    1.47        1.54e- 2  1.21e-26    15.7  
27 mu_0       0.9    0.831       8.94e- 8  1.23e-46    28.1  
[1] "Total run time was 409.096 seconds"
