
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7352"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  65  66  67  68  69  71  72  73  74 
  3   6   2   3   7   1   1   2   1   2   4   3   1   4   2   2   3   2   1   1 
 75  76  77  78  79  82  83  84  85  86  87  88  89  90  91  92  93  94  95  97 
  2   4   1   2   1   1   1   3   5   1   3   1   2   3   5   1   1   1   2   3 
 98  99 100 
  3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02407 0.31516 0.58976 1.00000 6.27730 
[1] "event indicator table: "

   0    1 
4255 3097 
[1] "treatment indicator table: "

   0    1 
3020 4332 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3728
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3624
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 375.498 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.406 0.0667
 2 mu         0.1   0.2 0.455 0.0573
 3 mu         0.1   0.3 0.580 0.102 
 4 mu         0.1   0.4 0.603 0.104 
 5 mu         0.1   0.5 0.637 0.0963
 6 mu         0.2   0.1 0.379 0.0401
 7 mu         0.2   0.2 0.432 0.0335
 8 mu         0.2   0.3 0.515 0.0429
 9 mu         0.2   0.4 0.551 0.0441
10 mu         0.2   0.5 0.579 0.0393
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.912        0.800 0.0000191      6.18
 2 mu         0.2      0.956        0.942 0.200          2.04
 3 mu         0.3      0.987        0.976 0.347          2.00
 4 mu         0.4      1.03         1.03  0.671          1.48
 5 mu         0.5      0.997        0.982 0.713          1.45
 6 mu         0.6      1.00         1.00  0.582          1.54
 7 mu         0.7      1.00         1.02  0.637          1.53
 8 mu         0.8      0.961        0.943 0.579          1.67
 9 mu         0.9      0.970        0.915 0.0969         2.23
10 mu_1       0.1      0.924        0.836 0.0000498      5.20
11 mu_1       0.2      0.964        0.949 0.224          2.18
12 mu_1       0.3      0.990        0.982 0.392          1.95
13 mu_1       0.4      1.03         1.03  0.690          1.50
14 mu_1       0.5      0.997        0.984 0.703          1.45
15 mu_1       0.6      1.01         1.01  0.584          1.55
16 mu_1       0.7      1.00         1.01  0.628          1.53
17 mu_1       0.8      0.961        0.937 0.574          1.66
18 mu_1       0.9      0.969        0.921 0.0912         2.24
19 mu_0       0.1      0.910        0.779 0.0000157      6.29
20 mu_0       0.2      0.954        0.939 0.194          2.02
21 mu_0       0.3      0.986        0.974 0.328          2.02
22 mu_0       0.4      1.03         1.03  0.659          1.48
23 mu_0       0.5      0.998        0.983 0.712          1.44
24 mu_0       0.6      1.00         0.997 0.580          1.53
25 mu_0       0.7      1.01         1.02  0.627          1.52
26 mu_0       0.8      0.960        0.952 0.572          1.71
27 mu_0       0.9      0.980        0.951 0.149          2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.202     1.04e-22  1.14e-85     10.6 
 2 mu         0.2      1.08      1.46e-10  1.41e-57     35.6 
 3 mu         0.3      1.11      2.21e- 5  2.96e-41     14.6 
 4 mu         0.4      1.01      9.07e- 3  8.86e-30     15.6 
 5 mu         0.5      1.01      5.10e- 2  5.50e-21      6.49
 6 mu         0.6      1.14      1.63e- 1  6.25e-14      9.62
 7 mu         0.7      1.24      1.49e- 1  1.73e-22      8.08
 8 mu         0.8      1.55      1.24e- 3  2.68e-35     13.7 
 9 mu         0.9      1.22      1.63e- 9  4.15e-58     31.7 
10 mu_1       0.1      0.305     6.92e-22  1.10e-84     14.2 
11 mu_1       0.2      1.10      4.52e-10  6.78e-57     34.5 
12 mu_1       0.3      1.12      4.59e- 5  9.46e-41     16.0 
13 mu_1       0.4      0.991     1.18e- 2  2.12e-29     14.4 
14 mu_1       0.5      1.04      4.97e- 2  1.05e-20      6.86
15 mu_1       0.6      1.11      1.73e- 1  2.21e-14      9.38
16 mu_1       0.7      1.27      1.18e- 1  4.78e-23      8.62
17 mu_1       0.8      1.55      8.67e- 4  6.48e-36     14.0 
18 mu_1       0.9      1.21      1.01e- 9  8.94e-59     32.3 
19 mu_0       0.1      0.191     4.21e-23  5.19e-87     10.2 
20 mu_0       0.2      1.07      6.88e-11  7.21e-59     35.8 
21 mu_0       0.3      1.10      1.19e- 5  1.72e-42     14.0 
22 mu_0       0.4      1.03      7.66e- 3  6.03e-31     16.4 
23 mu_0       0.5      0.979     3.46e- 2  4.49e-22      6.29
24 mu_0       0.6      1.17      1.19e- 1  6.37e-15      9.98
25 mu_0       0.7      1.17      2.17e- 1  4.64e-22      7.21
26 mu_0       0.8      1.58      1.92e- 3  1.08e-34     12.5 
27 mu_0       0.9      1.30      7.23e- 9  3.35e-57     26.1 
[1] "Total run time was 379.509 seconds"
