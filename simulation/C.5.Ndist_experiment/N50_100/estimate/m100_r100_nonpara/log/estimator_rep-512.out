
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7335"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  63  64  65  66  67  68  69  70 
  3   3   2   2   3   2   2   3   3   2   1   2   1   4   2   1   4   4   3   1 
 71  73  74  75  77  78  79  81  82  84  85  86  87  89  90  91  92  93  94  95 
  1   1   4   1   2   6   1   2   2   2   3   3   2   2   2   1   3   3   3   2 
 97  98 100 
  2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02072 0.30274 0.57825 0.97636 7.00000 
[1] "event indicator table: "

   0    1 
4444 2891 
[1] "treatment indicator table: "

   0    1 
2701 4634 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3608
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3727
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 358.875 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.262 0.0966
 2 mu         0.1   0.2 0.405 0.0817
 3 mu         0.1   0.3 0.442 0.0812
 4 mu         0.1   0.4 0.505 0.0858
 5 mu         0.1   0.5 0.552 0.0891
 6 mu         0.2   0.1 0.270 0.0704
 7 mu         0.2   0.2 0.403 0.0487
 8 mu         0.2   0.3 0.440 0.0445
 9 mu         0.2   0.4 0.498 0.0430
10 mu         0.2   0.5 0.550 0.0439
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.848        0.157 0.000000136      7.27
 2 mu         0.2      0.885        0.824 0.0118           3.21
 3 mu         0.3      0.895        0.895 0.177            1.51
 4 mu         0.4      0.963        0.956 0.453            1.60
 5 mu         0.5      1.01         0.989 0.615            1.40
 6 mu         0.6      1.01         0.990 0.651            1.74
 7 mu         0.7      1.01         0.993 0.586            1.47
 8 mu         0.8      1.00         1.02  0.624            1.45
 9 mu         0.9      1.06         1.04  0.336            1.90
10 mu_1       0.1      0.888        0.265 0.000000438      6.83
11 mu_1       0.2      0.881        0.809 0.0195           3.20
12 mu_1       0.3      0.904        0.910 0.202            1.53
13 mu_1       0.4      0.968        0.954 0.439            1.55
14 mu_1       0.5      1.01         0.981 0.624            1.38
15 mu_1       0.6      1.01         0.991 0.663            1.72
16 mu_1       0.7      1.01         0.991 0.581            1.48
17 mu_1       0.8      1.00         1.02  0.612            1.45
18 mu_1       0.9      1.06         1.05  0.324            1.91
19 mu_0       0.1      0.844        0.144 0.000000102      7.43
20 mu_0       0.2      0.886        0.821 0.00989          3.21
21 mu_0       0.3      0.891        0.891 0.166            1.54
22 mu_0       0.4      0.960        0.955 0.463            1.63
23 mu_0       0.5      1.01         0.991 0.606            1.43
24 mu_0       0.6      1.01         0.994 0.632            1.76
25 mu_0       0.7      1.01         0.991 0.597            1.44
26 mu_0       0.8      1.00         1.02  0.648            1.43
27 mu_0       0.9      1.06         1.03  0.429            1.82
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.91      6.17e-27  1.82e-74    190.  
 2 mu         0.2      1.35      3.57e-14  5.49e-50     66.4 
 3 mu         0.3      0.563     1.96e- 7  8.85e-36     13.3 
 4 mu         0.4      0.796     1.56e- 3  8.40e-26      8.34
 5 mu         0.5      1.17      8.94e- 2  3.58e-18     15.2 
 6 mu         0.6      1.19      3.28e- 1  4.33e-14      7.81
 7 mu         0.7      0.953     2.95e- 1  1.09e-22      7.26
 8 mu         0.8      0.849     1.20e- 2  1.69e-35      6.51
 9 mu         0.9      0.774     1.02e- 7  2.62e-58     10.7 
10 mu_1       0.1      2.40      3.85e-26  1.73e-73    237.  
11 mu_1       0.2      1.14      1.05e-13  2.62e-49     41.5 
12 mu_1       0.3      0.575     4.09e- 7  2.81e-35     12.2 
13 mu_1       0.4      0.819     9.85e- 4  2.00e-25      8.44
14 mu_1       0.5      1.20      7.87e- 2  6.83e-18     14.4 
15 mu_1       0.6      1.17      3.42e- 1  1.40e-14      7.34
16 mu_1       0.7      0.951     2.42e- 1  3.02e-23      7.44
17 mu_1       0.8      0.847     9.39e- 3  4.10e-36      6.74
18 mu_1       0.9      0.778     7.42e- 8  5.65e-59     10.6 
19 mu_0       0.1      1.86      2.58e-27  9.40e-76    185.  
20 mu_0       0.2      1.41      1.84e-14  3.19e-51     72.6 
21 mu_0       0.3      0.558     1.05e- 7  5.88e-37     13.8 
22 mu_0       0.4      0.781     1.05e- 3  6.51e-27      8.27
23 mu_0       0.5      1.15      6.58e- 2  3.33e-19     15.9 
24 mu_0       0.6      1.21      2.41e- 1  8.72e-14      8.51
25 mu_0       0.7      0.959     2.80e- 1  2.93e-22      6.84
26 mu_0       0.8      0.859     1.96e- 2  6.82e-35      5.69
27 mu_0       0.9      0.741     3.50e- 7  2.12e-57     11.1 
[1] "Total run time was 362.119 seconds"
