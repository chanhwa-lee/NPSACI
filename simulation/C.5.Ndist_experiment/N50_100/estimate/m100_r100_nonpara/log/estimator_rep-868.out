
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7385"
[1] "cluster size dist'n: "

 50  51  52  53  54  57  58  59  60  61  63  64  65  66  68  69  71  72  73  74 
  4   6   3   2   1   3   5   3   3   6   1   2   3   1   1   1   1   2   3   2 
 75  78  79  80  81  82  84  85  86  89  90  91  92  93  94  95  96  97  98  99 
  1   3   2   2   2   3   2   1   4   2   1   1   1   4   2   2   2   2   3   5 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04801 0.37874 0.64127 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4388 2997 
[1] "treatment indicator table: "

   0    1 
2804 4581 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3654
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3731
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 387.761 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.339 0.0428
 2 mu         0.1   0.2 0.437 0.0467
 3 mu         0.1   0.3 0.488 0.0565
 4 mu         0.1   0.4 0.539 0.0576
 5 mu         0.1   0.5 0.575 0.0623
 6 mu         0.2   0.1 0.315 0.0276
 7 mu         0.2   0.2 0.414 0.0339
 8 mu         0.2   0.3 0.494 0.0423
 9 mu         0.2   0.4 0.542 0.0396
10 mu         0.2   0.5 0.580 0.0402
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.01         0.860  0.000449      5.37
 2 mu         0.2      0.983        0.946  0.168         2.06
 3 mu         0.3      1.02         1.01   0.528         1.69
 4 mu         0.4      0.993        1.00   0.560         1.57
 5 mu         0.5      1.03         1.02   0.578         1.49
 6 mu         0.6      1.00         1.02   0.509         1.49
 7 mu         0.7      0.970        0.988  0.551         1.42
 8 mu         0.8      0.979        0.952  0.589         1.71
 9 mu         0.9      1.02         0.989  0.395         1.91
10 mu_1       0.1      1.01         0.927  0.00103       4.63
11 mu_1       0.2      0.985        0.970  0.217         2.05
12 mu_1       0.3      1.01         0.998  0.521         1.57
13 mu_1       0.4      0.998        1.01   0.544         1.53
14 mu_1       0.5      1.03         1.02   0.591         1.48
15 mu_1       0.6      0.999        1.01   0.501         1.51
16 mu_1       0.7      0.969        0.986  0.541         1.45
17 mu_1       0.8      0.980        0.967  0.566         1.71
18 mu_1       0.9      1.02         0.995  0.386         1.90
19 mu_0       0.1      1.01         0.860  0.000384      5.45
20 mu_0       0.2      0.983        0.933  0.155         2.06
21 mu_0       0.3      1.02         1.01   0.531         1.74
22 mu_0       0.4      0.989        1.01   0.568         1.59
23 mu_0       0.5      1.03         1.01   0.564         1.52
24 mu_0       0.6      1.00         1.02   0.522         1.46
25 mu_0       0.7      0.972        0.996  0.575         1.38
26 mu_0       0.8      0.978        0.959  0.608         1.71
27 mu_0       0.9      1.00         0.961  0.463         1.93
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.38      7.26e-29  2.01e-83    135.  
 2 mu         0.2      0.813     2.38e-15  1.74e-56     22.8 
 3 mu         0.3      0.941     3.59e- 8  8.24e-41      9.63
 4 mu         0.4      0.837     4.45e- 4  9.11e-30     11.5 
 5 mu         0.5      1.02      2.84e- 2  2.78e-21      9.28
 6 mu         0.6      1.69      1.57e- 1  8.33e-22     14.1 
 7 mu         0.7      1.43      2.42e- 1  3.94e-32     13.6 
 8 mu         0.8      1.45      1.39e- 2  4.78e-47     13.8 
 9 mu         0.9      1.34      2.43e- 8  5.01e-73     19.8 
10 mu_1       0.1      1.44      4.70e-28  1.94e-82    138.  
11 mu_1       0.2      0.876     7.41e-15  8.44e-56     23.9 
12 mu_1       0.3      0.948     7.51e- 8  2.66e-40     10.4 
13 mu_1       0.4      0.818     7.48e- 4  2.20e-29     12.3 
14 mu_1       0.5      1.06      2.81e- 2  5.38e-21      9.67
15 mu_1       0.6      1.70      1.58e- 1  1.42e-22     13.7 
16 mu_1       0.7      1.43      2.46e- 1  5.74e-33     13.3 
17 mu_1       0.8      1.47      1.36e- 2  6.09e-48     13.9 
18 mu_1       0.9      1.31      1.70e- 8  5.68e-74     20.0 
19 mu_0       0.1      1.38      2.84e-29  7.19e-85    135.  
20 mu_0       0.2      0.797     1.13e-15  7.03e-58     23.6 
21 mu_0       0.3      0.938     1.97e- 8  3.80e-42     10.3 
22 mu_0       0.4      0.849     2.56e- 4  4.90e-31     10.9 
23 mu_0       0.5      0.975     3.69e- 2  1.79e-22      8.88
24 mu_0       0.6      1.68      1.32e- 1  1.87e-21     14.8 
25 mu_0       0.7      1.45      2.91e- 1  1.18e-31     14.5 
26 mu_0       0.8      1.41      2.56e- 2  2.15e-46     13.5 
27 mu_0       0.9      1.52      8.97e- 8  4.50e-72     23.0 
[1] "Total run time was 390.989 seconds"
