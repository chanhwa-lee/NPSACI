
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7596"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  70 
  1   1   1   2   1   1   1   1   1   2   1   2   1   6   2   2   4   2   3   3 
 71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  90  91 
  4   1   5   1   1   2   2   2   5   1   1   1   2   1   2   2   3   7   1   1 
 92  93  94  95  97  98  99 100 
  1   3   4   2   1   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0311  0.3507  0.6116  1.0000  6.3586 
[1] "event indicator table: "

   0    1 
4597 2999 
[1] "treatment indicator table: "

   0    1 
2596 5000 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3811
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3785
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 415.002 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.438 0.139 
 2 mu         0.1   0.2 0.539 0.176 
 3 mu         0.1   0.3 0.555 0.180 
 4 mu         0.1   0.4 0.604 0.192 
 5 mu         0.1   0.5 0.627 0.200 
 6 mu         0.2   0.1 0.371 0.0728
 7 mu         0.2   0.2 0.462 0.0997
 8 mu         0.2   0.3 0.504 0.0788
 9 mu         0.2   0.4 0.560 0.0787
10 mu         0.2   0.5 0.600 0.0685
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.862        0.158  8.33e-10     31.5 
 2 mu         0.2      0.933        0.796  1.55e- 3      4.24
 3 mu         0.3      1.00         0.948  1.69e- 1      2.02
 4 mu         0.4      0.989        0.971  4.54e- 1      1.82
 5 mu         0.5      1.02         1.02   5.26e- 1      1.70
 6 mu         0.6      1.01         0.998  5.91e- 1      1.61
 7 mu         0.7      0.977        0.972  5.60e- 1      1.56
 8 mu         0.8      1.01         0.990  4.84e- 1      1.56
 9 mu         0.9      1.04         1.01   2.52e- 1      2.02
10 mu_1       0.1      0.880        0.214  2.84e- 9     29.8 
11 mu_1       0.2      0.958        0.827  2.60e- 3      4.50
12 mu_1       0.3      1.00         0.959  2.02e- 1      2.02
13 mu_1       0.4      0.989        0.958  4.62e- 1      1.81
14 mu_1       0.5      1.02         1.02   5.39e- 1      1.76
15 mu_1       0.6      1.01         0.991  5.87e- 1      1.58
16 mu_1       0.7      0.977        0.963  5.58e- 1      1.58
17 mu_1       0.8      1.01         0.993  4.81e- 1      1.56
18 mu_1       0.9      1.04         1.00   2.47e- 1      2.02
19 mu_0       0.1      0.860        0.153  6.11e-10     31.7 
20 mu_0       0.2      0.926        0.788  1.29e- 3      4.17
21 mu_0       0.3      1.00         0.948  1.56e- 1      2.02
22 mu_0       0.4      0.989        0.973  4.48e- 1      1.86
23 mu_0       0.5      1.01         1.01   5.14e- 1      1.64
24 mu_0       0.6      1.02         1.01   5.97e- 1      1.64
25 mu_0       0.7      0.976        0.979  5.63e- 1      1.52
26 mu_0       0.8      1.01         0.980  4.97e- 1      1.55
27 mu_0       0.9      1.03         0.993  2.88e- 1      2.04
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.93      2.02e-33  6.85e-71    282.  
 2 mu         0.2      3.65      6.35e-19  1.43e-45    170.  
 3 mu         0.3      1.59      1.22e-10  1.35e-31     50.0 
 4 mu         0.4      0.594     1.65e- 5  6.92e-22      9.26
 5 mu         0.5      0.795     2.17e- 3  2.62e-15     17.5 
 6 mu         0.6      0.954     7.36e- 2  4.32e-14      7.55
 7 mu         0.7      1.18      2.79e- 1  8.59e-22      9.46
 8 mu         0.8      1.53      1.28e- 1  5.20e-33     16.6 
 9 mu         0.9      1.06      9.57e- 6  1.14e-52     31.2 
10 mu_1       0.1      3.88      1.36e-32  5.96e-70    366.  
11 mu_1       0.2      3.44      2.07e-18  6.52e-45    170.  
12 mu_1       0.3      1.39      2.65e-10  4.11e-31     42.2 
13 mu_1       0.4      0.591     2.83e- 5  1.58e-21      7.49
14 mu_1       0.5      0.811     2.90e- 3  5.02e-15     18.2 
15 mu_1       0.6      0.961     8.11e- 2  9.35e-15      7.55
16 mu_1       0.7      1.19      2.67e- 1  1.59e-22      9.89
17 mu_1       0.8      1.53      1.06e- 1  8.44e-34     16.9 
18 mu_1       0.9      1.07      7.55e- 6  1.65e-53     31.6 
19 mu_0       0.1      2.82      7.20e-34  9.90e-72    273.  
20 mu_0       0.2      3.70      2.30e-19  1.59e-46    170.  
21 mu_0       0.3      1.67      6.08e-11  1.72e-32     53.3 
22 mu_0       0.4      0.596     8.73e- 6  1.03e-22     10.4 
23 mu_0       0.5      0.779     1.67e- 3  2.25e-16     16.8 
24 mu_0       0.6      0.943     5.80e- 2  9.40e-14      9.03
25 mu_0       0.7      1.17      2.48e- 1  2.49e-21      8.45
26 mu_0       0.8      1.51      1.78e- 1  2.26e-32     15.4 
27 mu_0       0.9      1.05      2.81e- 5  9.95e-52     27.7 
[1] "Total run time was 418.929 seconds"
