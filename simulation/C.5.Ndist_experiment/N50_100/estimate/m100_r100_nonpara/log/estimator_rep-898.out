
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7383"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  62  63  64  65  66  67  68  69  70  71 
  1   2   2   3   3   2   3   1   4   1   2   2   2   4   3   4   3   3   1   2 
 72  73  74  76  77  78  79  80  81  82  83  84  85  87  88  89  90  91  92  94 
  2   2   1   4   2   1   1   4   3   1   1   1   2   4   1   2   5   2   2   1 
 95  96  97  98 100 
  4   1   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03624 0.34830 0.61114 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4366 3017 
[1] "treatment indicator table: "

   0    1 
2931 4452 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3615
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3768
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 550.218 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.323 0.0629
 2 mu         0.1   0.2 0.404 0.0601
 3 mu         0.1   0.3 0.474 0.0691
 4 mu         0.1   0.4 0.502 0.0956
 5 mu         0.1   0.5 0.568 0.101 
 6 mu         0.2   0.1 0.281 0.0431
 7 mu         0.2   0.2 0.359 0.0285
 8 mu         0.2   0.3 0.420 0.0337
 9 mu         0.2   0.4 0.439 0.0620
10 mu         0.2   0.5 0.492 0.0638
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.01         0.546 0.00000111       6.36
 2 mu         0.2      0.906        0.859 0.0511           1.87
 3 mu         0.3      1.02         0.985 0.318            1.92
 4 mu         0.4      1.02         1.02  0.563            1.68
 5 mu         0.5      1.01         1.02  0.603            1.44
 6 mu         0.6      1.01         1.02  0.604            1.40
 7 mu         0.7      0.990        0.988 0.577            1.49
 8 mu         0.8      0.958        0.902 0.466            1.78
 9 mu         0.9      0.989        0.955 0.287            3.30
10 mu_1       0.1      0.990        0.636 0.00000317       6.63
11 mu_1       0.2      0.914        0.879 0.0751           1.76
12 mu_1       0.3      1.02         0.978 0.342            1.93
13 mu_1       0.4      1.02         1.03  0.573            1.68
14 mu_1       0.5      1.00         1.02  0.606            1.46
15 mu_1       0.6      1.01         1.01  0.612            1.41
16 mu_1       0.7      0.989        0.981 0.586            1.50
17 mu_1       0.8      0.958        0.898 0.470            1.79
18 mu_1       0.9      0.989        0.967 0.277            3.38
19 mu_0       0.1      1.01         0.535 0.000000879      6.49
20 mu_0       0.2      0.904        0.845 0.0450           1.94
21 mu_0       0.3      1.02         0.969 0.308            1.91
22 mu_0       0.4      1.02         1.01  0.557            1.68
23 mu_0       0.5      1.01         1.01  0.600            1.42
24 mu_0       0.6      1.01         1.02  0.592            1.38
25 mu_0       0.7      0.995        0.995 0.556            1.51
26 mu_0       0.8      0.959        0.910 0.450            1.76
27 mu_0       0.9      0.983        0.967 0.351            2.65
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00142     8.25e-24  6.19e-68    0.0579
 2 mu         0.2    0.308       4.20e-12  5.18e-44    9.59  
 3 mu         0.3    1.04        7.21e- 6  2.86e-30   19.0   
 4 mu         0.4    1.18        1.62e- 2  9.41e-21    8.97  
 5 mu         0.5    1.20        2.47e- 1  1.29e-13    8.73  
 6 mu         0.6    0.930       1.01e- 1  4.49e- 8    7.42  
 7 mu         0.7    0.663       7.44e- 2  2.66e-13    5.31  
 8 mu         0.8    1.26        5.30e- 4  5.29e-22   23.7   
 9 mu         0.9    1.45        1.92e-10  7.74e-38   31.4   
10 mu_1       0.1    0.00368     4.96e-23  5.57e-67    0.153 
11 mu_1       0.2    0.404       1.22e-11  2.33e-43   12.7   
12 mu_1       0.3    1.09        1.40e- 5  8.58e-30   20.9   
13 mu_1       0.4    1.17        2.36e- 2  2.12e-20    8.07  
14 mu_1       0.5    1.20        2.29e- 1  2.32e-13    8.97  
15 mu_1       0.6    0.898       1.17e- 1  5.30e- 8    6.90  
16 mu_1       0.7    0.664       7.23e- 2  1.00e-13    5.35  
17 mu_1       0.8    1.29        3.79e- 4  1.74e-22   24.3   
18 mu_1       0.9    1.43        1.18e-10  2.26e-38   31.4   
19 mu_0       0.1    0.00117     3.65e-24  6.88e-69    0.0473
20 mu_0       0.2    0.284       2.20e-12  6.48e-45    8.82  
21 mu_0       0.3    1.02        4.31e- 6  4.08e-31   18.2   
22 mu_0       0.4    1.19        1.11e- 2  1.57e-21    9.82  
23 mu_0       0.5    1.19        2.21e- 1  2.58e-14    8.48  
24 mu_0       0.6    0.979       1.23e- 1  1.12e- 8    8.20  
25 mu_0       0.7    0.660       8.13e- 2  6.53e-13    5.22  
26 mu_0       0.8    1.14        1.13e- 3  1.95e-21   21.3   
27 mu_0       0.9    1.60        8.40e-10  5.71e-37   31.4   
[1] "Total run time was 554.535 seconds"
