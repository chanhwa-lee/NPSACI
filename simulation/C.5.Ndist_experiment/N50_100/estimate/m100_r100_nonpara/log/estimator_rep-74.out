
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7197"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  62  63  64  66  67  68  69  70  71 
  2   2   3   1   5   5   1   5   4   2   1   3   1   1   2   1   2   2   1   6 
 72  73  74  76  77  78  79  80  82  83  85  86  87  88  89  90  91  92  94  96 
  2   4   2   2   2   3   3   4   1   1   2   2   2   4   3   1   3   2   2   1 
 97  99 100 
  1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04193 0.37275 0.62481 1.00000 5.96293 
[1] "event indicator table: "

   0    1 
4312 2885 
[1] "treatment indicator table: "

   0    1 
2544 4653 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3659
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3538
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.215 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.554 0.300 
 2 mu         0.1   0.2 0.712 0.395 
 3 mu         0.1   0.3 0.792 0.443 
 4 mu         0.1   0.4 0.901 0.500 
 5 mu         0.1   0.5 0.987 0.541 
 6 mu         0.2   0.1 0.364 0.0418
 7 mu         0.2   0.2 0.460 0.0496
 8 mu         0.2   0.3 0.511 0.0529
 9 mu         0.2   0.4 0.586 0.0625
10 mu         0.2   0.5 0.647 0.0687
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.67        0.106   3.12e-12     97.9 
 2 mu         0.2      1.09        0.788   9.21e- 5      6.29
 3 mu         0.3      1.04        0.944   6.77e- 2      3.07
 4 mu         0.4      1.01        1.00    3.52e- 1      1.80
 5 mu         0.5      1.02        1.02    6.40e- 1      1.46
 6 mu         0.6      1.01        0.993   7.02e- 1      1.54
 7 mu         0.7      1.02        1.00    6.83e- 1      1.59
 8 mu         0.8      0.967       0.958   6.11e- 1      1.36
 9 mu         0.9      1.01        0.969   2.19e- 1      2.40
10 mu_1       0.1      1.35        0.180   1.19e-11     56.3 
11 mu_1       0.2      1.09        0.808   1.76e- 4      4.94
12 mu_1       0.3      1.04        0.987   8.75e- 2      3.01
13 mu_1       0.4      1.01        0.994   3.86e- 1      1.79
14 mu_1       0.5      1.02        1.02    6.38e- 1      1.41
15 mu_1       0.6      1.01        0.997   7.07e- 1      1.55
16 mu_1       0.7      1.02        0.994   6.84e- 1      1.61
17 mu_1       0.8      0.966       0.957   5.87e- 1      1.36
18 mu_1       0.9      1.01        0.973   2.04e- 1      2.43
19 mu_0       0.1      1.71        0.0967  2.15e-12    103.  
20 mu_0       0.2      1.10        0.787   7.11e- 5      6.63
21 mu_0       0.3      1.04        0.942   5.92e- 2      3.20
22 mu_0       0.4      1.01        0.999   3.30e- 1      1.80
23 mu_0       0.5      1.02        1.02    6.41e- 1      1.50
24 mu_0       0.6      1.01        0.987   6.95e- 1      1.52
25 mu_0       0.7      1.02        1.01    6.73e- 1      1.54
26 mu_0       0.8      0.972       0.966   6.24e- 1      1.42
27 mu_0       0.9      0.988       0.934   2.69e- 1      2.17
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0448     9.03e-29  1.79e-80      4.42
 2 mu         0.2     1.08       2.40e-15  1.10e-54     70.4 
 3 mu         0.3     1.41       1.20e- 8  1.17e-39     28.0 
 4 mu         0.4     1.19       1.83e- 4  4.78e-29     47.8 
 5 mu         0.5     0.970      4.93e- 2  7.16e-21      9.70
 6 mu         0.6     1.03       3.29e- 1  2.96e-14      8.81
 7 mu         0.7     0.930      1.90e- 1  7.55e-16      6.50
 8 mu         0.8     1.37       3.33e- 2  2.59e-26      8.76
 9 mu         0.9     1.04       9.49e- 7  2.64e-45     31.9 
10 mu_1       0.1     0.0886     6.04e-28  1.75e-79      8.71
11 mu_1       0.2     1.19       8.51e-15  5.36e-54     69.4 
12 mu_1       0.3     1.43       2.77e- 8  3.81e-39     34.8 
13 mu_1       0.4     1.15       2.90e- 4  1.17e-28     44.5 
14 mu_1       0.5     0.966      6.22e- 2  1.40e-20      7.23
15 mu_1       0.6     1.02       2.92e- 1  4.81e-14      8.78
16 mu_1       0.7     0.937      2.15e- 1  2.76e-16      6.74
17 mu_1       0.8     1.38       2.71e- 2  8.28e-27      9.01
18 mu_1       0.9     1.02       6.86e- 7  7.49e-46     31.8 
19 mu_0       0.1     0.0399     3.29e-29  4.53e-82      3.94
20 mu_0       0.2     1.05       8.67e-16  3.12e-56     70.7 
21 mu_0       0.3     1.40       5.33e- 9  3.80e-41     25.1 
22 mu_0       0.4     1.22       1.11e- 4  1.81e-30     50.0 
23 mu_0       0.5     0.975      3.65e- 2  3.25e-22     12.2 
24 mu_0       0.6     1.04       3.73e- 1  1.68e-15      8.86
25 mu_0       0.7     0.915      2.34e- 1  1.87e-15      5.97
26 mu_0       0.8     1.31       5.82e- 2  9.65e-26      8.01
27 mu_0       0.9     1.18       3.32e- 6  1.96e-44     32.3 
[1] "Total run time was 421.423 seconds"
