
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7212"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  2   2   6   1   4   1   2   1   2   2   3   3   3   2   3   4   1   3   2   4 
 70  71  72  73  74  75  76  77  79  80  81  82  83  84  85  87  89  90  91  92 
  1   2   1   3   1   2   1   3   3   1   1   1   3   1   1   2   1   6   2   1 
 93  96  97  99 100 
  3   3   3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03509 0.36776 0.62750 1.00000 7.07210 
[1] "event indicator table: "

   0    1 
4337 2875 
[1] "treatment indicator table: "

   0    1 
2422 4790 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3519
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3693
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 359.155 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.433 0.0645
 2 mu         0.1   0.2 0.564 0.0918
 3 mu         0.1   0.3 0.635 0.0981
 4 mu         0.1   0.4 0.715 0.118 
 5 mu         0.1   0.5 0.745 0.126 
 6 mu         0.2   0.1 0.353 0.0344
 7 mu         0.2   0.2 0.450 0.0456
 8 mu         0.2   0.3 0.506 0.0434
 9 mu         0.2   0.4 0.562 0.0509
10 mu         0.2   0.5 0.603 0.0547
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.17         0.367  3.38e-10     16.2 
 2 mu         0.2      0.958        0.828  9.02e- 4      4.89
 3 mu         0.3      0.980        1.00   1.54e- 1      2.24
 4 mu         0.4      1.01         0.973  5.18e- 1      2.02
 5 mu         0.5      0.995        0.967  4.99e- 1      1.54
 6 mu         0.6      0.987        0.988  6.30e- 1      1.42
 7 mu         0.7      1.01         1.02   6.67e- 1      1.33
 8 mu         0.8      0.996        0.971  6.63e- 1      1.41
 9 mu         0.9      0.965        0.934  3.97e- 1      1.81
10 mu_1       0.1      1.16         0.507  1.17e- 9     16.0 
11 mu_1       0.2      0.949        0.861  1.59e- 3      4.47
12 mu_1       0.3      0.983        0.979  1.99e- 1      2.06
13 mu_1       0.4      1.01         0.963  5.07e- 1      2.10
14 mu_1       0.5      0.993        0.974  4.92e- 1      1.53
15 mu_1       0.6      0.988        0.992  6.40e- 1      1.43
16 mu_1       0.7      1.01         1.02   6.58e- 1      1.34
17 mu_1       0.8      0.995        0.965  6.58e- 1      1.41
18 mu_1       0.9      0.965        0.935  3.92e- 1      1.83
19 mu_0       0.1      1.17         0.345  2.46e-10     16.3 
20 mu_0       0.2      0.960        0.818  7.30e- 4      4.99
21 mu_0       0.3      0.979        0.998  1.34e- 1      2.32
22 mu_0       0.4      1.01         0.961  5.26e- 1      1.97
23 mu_0       0.5      0.996        0.971  5.06e- 1      1.55
24 mu_0       0.6      0.986        0.988  6.14e- 1      1.41
25 mu_0       0.7      1.01         1.00   6.87e- 1      1.35
26 mu_0       0.8      1.00         0.980  6.72e- 1      1.44
27 mu_0       0.9      0.965        0.921  4.39e- 1      1.68
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.00122      6.58e-30  8.53e-80    0.0606
 2 mu         0.2   0.513        3.80e-17  5.21e-53   22.3   
 3 mu         0.3   1.32         1.86e- 9  1.65e-37   41.1   
 4 mu         0.4   1.24         1.02e- 4  1.15e-26   23.3   
 5 mu         0.5   1.23         1.84e- 2  2.03e-18    9.32  
 6 mu         0.6   1.03         3.91e- 2  7.10e-12    9.03  
 7 mu         0.7   0.937        7.11e- 2  8.42e-15    9.43  
 8 mu         0.8   1.13         5.51e- 2  6.07e-25    7.33  
 9 mu         0.9   1.10         2.25e- 6  1.39e-43   19.8   
10 mu_1       0.1   0.00330      4.83e-29  7.99e-79    0.162 
11 mu_1       0.2   0.689        1.36e-16  2.44e-52   29.7   
12 mu_1       0.3   1.27         3.98e- 9  5.15e-37   36.6   
13 mu_1       0.4   1.26         1.69e- 4  2.69e-26   23.7   
14 mu_1       0.5   1.21         2.56e- 2  3.80e-18    8.47  
15 mu_1       0.6   1.04         5.08e- 2  1.11e-11    9.71  
16 mu_1       0.7   0.929        6.88e- 2  3.18e-15    9.23  
17 mu_1       0.8   1.14         4.41e- 2  2.02e-25    7.43  
18 mu_1       0.9   1.10         1.61e- 6  4.11e-44   20.1   
19 mu_0       0.1   0.000990     1.95e-30  5.92e-81    0.0494
20 mu_0       0.2   0.469        1.42e-17  4.07e-54   20.4   
21 mu_0       0.3   1.34         9.53e-10  1.47e-38   43.1   
22 mu_0       0.4   1.22         5.80e- 5  1.20e-27   23.1   
23 mu_0       0.5   1.25         1.21e- 2  2.53e-19   10.2   
24 mu_0       0.6   1.03         3.73e- 2  1.11e-12    8.56  
25 mu_0       0.7   0.957        5.97e- 2  2.07e-14    9.90  
26 mu_0       0.8   1.09         6.77e- 2  2.22e-24    6.92  
27 mu_0       0.9   1.05         8.06e- 6  1.02e-42   17.1   
[1] "Total run time was 362.282 seconds"
