
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7619"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  61  63  64  65  68  69  70  72  74  75  76 
  2   4   3   3   1   3   2   1   1   1   4   4   3   2   3   1   3   3   2   1 
 77  78  80  82  83  84  85  86  87  88  89  91  92  93  94  95  96  97  98  99 
  1   5   3   1   2   3   2   4   1   2   3   2   6   1   5   2   4   1   2   2 
100 
  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03149 0.34731 0.60926 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4503 3116 
[1] "treatment indicator table: "

   0    1 
2985 4634 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3865
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3754
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 466.336 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.506 0.134 
 2 mu         0.1   0.2 0.615 0.114 
 3 mu         0.1   0.3 0.653 0.105 
 4 mu         0.1   0.4 0.719 0.109 
 5 mu         0.1   0.5 0.751 0.107 
 6 mu         0.2   0.1 0.319 0.0371
 7 mu         0.2   0.2 0.442 0.0344
 8 mu         0.2   0.3 0.516 0.0432
 9 mu         0.2   0.4 0.583 0.0503
10 mu         0.2   0.5 0.631 0.0481
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.13         0.529 0.00000762      9.11
 2 mu         0.2      1.02         0.971 0.0560          2.57
 3 mu         0.3      1.00         0.940 0.276           2.03
 4 mu         0.4      1.01         1.02  0.389           1.73
 5 mu         0.5      1.03         1.02  0.660           1.45
 6 mu         0.6      0.981        0.985 0.598           1.41
 7 mu         0.7      0.973        0.953 0.598           1.46
 8 mu         0.8      1.00         0.994 0.500           1.61
 9 mu         0.9      0.938        0.914 0.0878          1.76
10 mu_1       0.1      1.08         0.691 0.0000203       6.61
11 mu_1       0.2      1.02         0.979 0.0804          2.50
12 mu_1       0.3      1.01         0.944 0.302           1.99
13 mu_1       0.4      1.01         1.01  0.386           1.74
14 mu_1       0.5      1.03         1.03  0.642           1.45
15 mu_1       0.6      0.977        0.980 0.587           1.41
16 mu_1       0.7      0.974        0.951 0.589           1.47
17 mu_1       0.8      1.00         0.991 0.498           1.61
18 mu_1       0.9      0.936        0.910 0.0806          1.80
19 mu_0       0.1      1.13         0.505 0.00000622      9.39
20 mu_0       0.2      1.02         0.975 0.0499          2.59
21 mu_0       0.3      1.00         0.935 0.259           2.05
22 mu_0       0.4      1.01         1.02  0.391           1.72
23 mu_0       0.5      1.03         1.03  0.660           1.45
24 mu_0       0.6      0.985        1.00  0.584           1.42
25 mu_0       0.7      0.969        0.943 0.602           1.44
26 mu_0       0.8      1.01         1.01  0.509           1.64
27 mu_0       0.9      0.950        0.935 0.153           1.66
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.192     1.29e-25  7.78e-84     17.2 
 2 mu         0.2      0.866     1.85e-13  4.28e-56     57.9 
 3 mu         0.3      1.17      3.93e- 7  5.22e-40     34.0 
 4 mu         0.4      1.07      2.73e- 3  1.01e-28     12.1 
 5 mu         0.5      1.27      1.58e- 1  4.16e-20     19.5 
 6 mu         0.6      1.17      1.66e- 1  6.66e-18      9.56
 7 mu         0.7      0.942     1.22e- 1  3.75e-27     12.6 
 8 mu         0.8      1.02      2.23e- 3  1.16e-40     11.1 
 9 mu         0.9      0.858     3.48e- 9  2.22e-64     22.1 
10 mu_1       0.1      0.279     7.79e-25  7.39e-83     23.7 
11 mu_1       0.2      0.914     5.97e-13  2.03e-55     57.9 
12 mu_1       0.3      1.18      7.88e- 7  1.65e-39     33.0 
13 mu_1       0.4      1.08      4.24e- 3  2.39e-28     12.2 
14 mu_1       0.5      1.27      1.59e- 1  7.89e-20     19.1 
15 mu_1       0.6      1.16      1.73e- 1  1.54e-18      9.67
16 mu_1       0.7      0.937     1.13e- 1  7.41e-28     12.4 
17 mu_1       0.8      1.03      1.84e- 3  2.00e-41     11.7 
18 mu_1       0.9      0.863     2.26e- 9  3.41e-65     23.7 
19 mu_0       0.1      0.183     5.71e-26  4.41e-85     16.4 
20 mu_0       0.2      0.855     8.17e-14  2.73e-57     57.9 
21 mu_0       0.3      1.17      2.24e- 7  3.81e-41     34.5 
22 mu_0       0.4      1.07      1.73e- 3  8.55e-30     12.1 
23 mu_0       0.5      1.27      1.49e- 1  4.24e-21     19.9 
24 mu_0       0.6      1.18      2.06e- 1  1.44e-17      9.39
25 mu_0       0.7      0.951     1.28e- 1  1.08e-26     13.3 
26 mu_0       0.8      1.01      2.62e- 3  5.00e-40      8.88
27 mu_0       0.9      0.815     1.45e- 8  1.91e-63     16.1 
[1] "Total run time was 470.082 seconds"
