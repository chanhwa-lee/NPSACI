
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7411"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 58 59 60 61 62 64 65 66 67 68 70 71 72 73 74 75 76 77 78 
 1  3  2  3  2  2  3  3  1  4  1  2  4  2  3  3  1  1  2  3  3  2  2  1  4  1 
79 80 81 82 83 84 85 86 87 88 91 93 94 95 96 97 98 99 
 2  3  1  5  2  1  2  2  2  4  1  2  1  4  1  1  3  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03438 0.34105 0.61004 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4372 3039 
[1] "treatment indicator table: "

   0    1 
2766 4645 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3713
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3698
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 399.952 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.331 0.0490
 2 mu         0.1   0.2 0.393 0.0640
 3 mu         0.1   0.3 0.477 0.0742
 4 mu         0.1   0.4 0.512 0.0820
 5 mu         0.1   0.5 0.529 0.0927
 6 mu         0.2   0.1 0.323 0.0290
 7 mu         0.2   0.2 0.382 0.0345
 8 mu         0.2   0.3 0.457 0.0465
 9 mu         0.2   0.4 0.493 0.0485
10 mu         0.2   0.5 0.523 0.0517
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.02         0.265 0.00000969      6.76
 2 mu         0.2      1.05         0.980 0.0570          3.29
 3 mu         0.3      1.02         0.959 0.335           2.33
 4 mu         0.4      1.02         0.980 0.572           1.84
 5 mu         0.5      0.987        0.946 0.581           1.67
 6 mu         0.6      0.969        0.945 0.602           1.44
 7 mu         0.7      1.00         0.971 0.650           1.37
 8 mu         0.8      1.04         1.02  0.607           1.67
 9 mu         0.9      1.03         0.995 0.288           2.42
10 mu_1       0.1      0.989        0.419 0.0000250       5.44
11 mu_1       0.2      1.04         0.949 0.0831          3.27
12 mu_1       0.3      1.03         0.953 0.372           2.37
13 mu_1       0.4      1.02         0.977 0.560           1.83
14 mu_1       0.5      0.987        0.953 0.593           1.65
15 mu_1       0.6      0.969        0.955 0.590           1.43
16 mu_1       0.7      1.00         0.963 0.643           1.37
17 mu_1       0.8      1.04         1.02  0.591           1.67
18 mu_1       0.9      1.03         1.00  0.275           2.43
19 mu_0       0.1      1.03         0.247 0.00000799      6.91
20 mu_0       0.2      1.06         0.968 0.0505          3.29
21 mu_0       0.3      1.02         0.940 0.318           2.32
22 mu_0       0.4      1.03         0.984 0.580           1.84
23 mu_0       0.5      0.988        0.957 0.569           1.70
24 mu_0       0.6      0.970        0.935 0.620           1.45
25 mu_0       0.7      0.995        0.981 0.669           1.39
26 mu_0       0.8      1.04         1.03  0.622           1.64
27 mu_0       0.9      1.03         0.991 0.339           2.35
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1  0.0000343     4.78e-27  5.12e-74   0.00180
 2 mu         0.2  0.117         3.90e-14  2.75e-49   6.45   
 3 mu         0.3  1.13          2.16e- 7  5.81e-35  20.6    
 4 mu         0.4  2.13          2.10e- 3  6.31e-25  59.1    
 5 mu         0.5  1.40          1.19e- 1  2.80e-17  11.1    
 6 mu         0.6  1.07          1.76e- 1  2.31e-11   7.66   
 7 mu         0.7  0.837         1.20e- 1  1.66e-13   7.60   
 8 mu         0.8  0.964         1.39e- 2  8.53e-23   7.81   
 9 mu         0.9  1.29          9.64e- 8  9.88e-40  13.8    
10 mu_1       0.1  0.0000975     3.04e-26  4.83e-73   0.00484
11 mu_1       0.2  0.168         1.11e-13  1.30e-48   8.65   
12 mu_1       0.3  1.25          4.61e- 7  1.83e-34  21.5    
13 mu_1       0.4  2.13          3.31e- 3  1.49e-24  57.6    
14 mu_1       0.5  1.36          1.34e- 1  5.28e-17  11.2    
15 mu_1       0.6  1.06          1.87e- 1  3.66e-11   7.94   
16 mu_1       0.7  0.830         1.19e- 1  6.37e-14   7.15   
17 mu_1       0.8  0.977         1.23e- 2  2.86e-23   7.97   
18 mu_1       0.9  1.29          7.20e- 8  2.94e-40  14.5    
19 mu_0       0.1  0.0000273     1.94e-27  3.23e-75   0.00147
20 mu_0       0.2  0.104         2.09e-14  1.95e-50   5.90   
21 mu_0       0.3  1.08          1.11e- 7  4.72e-36  20.2    
22 mu_0       0.4  2.14          1.29e- 3  5.97e-26  60.2    
23 mu_0       0.5  1.43          8.91e- 2  3.02e-18  10.9    
24 mu_0       0.6  1.08          1.10e- 1  2.78e-12   7.24   
25 mu_0       0.7  0.854         8.84e- 2  4.06e-13   8.64   
26 mu_0       0.8  0.910         1.87e- 2  3.12e-22   8.77   
27 mu_0       0.9  1.29          3.16e- 7  7.23e-39  12.8    
[1] "Total run time was 403.579 seconds"
