
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7564"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  70  71 
  1   1   1   2   1   4   3   1   4   2   2   4   1   3   3   2   1   1   2   3 
 72  74  76  77  78  79  80  81  83  84  85  86  88  89  90  91  92  93  94  95 
  2   2   3   4   2   1   1   1   1   3   1   6   3   5   2   4   2   4   2   3 
 96  97  98  99 100 
  1   1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03183 0.34939 0.61337 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4527 3037 
[1] "treatment indicator table: "

   0    1 
2789 4775 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3674
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3890
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 430.024 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0758
 2 mu         0.1   0.2 0.406 0.0839
 3 mu         0.1   0.3 0.452 0.0997
 4 mu         0.1   0.4 0.554 0.0900
 5 mu         0.1   0.5 0.594 0.104 
 6 mu         0.2   0.1 0.321 0.0434
 7 mu         0.2   0.2 0.388 0.0437
 8 mu         0.2   0.3 0.434 0.0553
 9 mu         0.2   0.4 0.531 0.0374
10 mu         0.2   0.5 0.575 0.0476
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.980        0.261  8.40e-11      9.37
 2 mu         0.2      1.00         0.873  3.65e- 4      3.15
 3 mu         0.3      0.987        0.954  7.59e- 2      2.24
 4 mu         0.4      1.01         0.994  4.34e- 1      2.05
 5 mu         0.5      1.03         1.00   6.22e- 1      1.62
 6 mu         0.6      1.02         1.02   7.08e- 1      1.50
 7 mu         0.7      0.977        0.979  5.33e- 1      1.32
 8 mu         0.8      0.941        0.930  5.26e- 1      1.41
 9 mu         0.9      1.09         1.02   8.80e- 2      5.95
10 mu_1       0.1      0.931        0.387  2.95e-10      8.73
11 mu_1       0.2      1.00         0.913  6.44e- 4      2.96
12 mu_1       0.3      0.991        0.960  9.18e- 2      2.11
13 mu_1       0.4      1.02         0.995  4.77e- 1      2.06
14 mu_1       0.5      1.03         1.00   6.14e- 1      1.61
15 mu_1       0.6      1.02         1.02   7.12e- 1      1.50
16 mu_1       0.7      0.974        0.978  5.27e- 1      1.31
17 mu_1       0.8      0.942        0.925  5.19e- 1      1.41
18 mu_1       0.9      1.09         1.02   8.19e- 2      6.00
19 mu_0       0.1      0.985        0.246  6.05e-11      9.44
20 mu_0       0.2      1.00         0.862  2.95e- 4      3.20
21 mu_0       0.3      0.986        0.952  6.90e- 2      2.30
22 mu_0       0.4      1.01         1.00   4.05e- 1      2.05
23 mu_0       0.5      1.03         1.02   6.17e- 1      1.64
24 mu_0       0.6      1.03         1.01   7.03e- 1      1.49
25 mu_0       0.7      0.984        0.977  5.48e- 1      1.35
26 mu_0       0.8      0.939        0.927  5.26e- 1      1.42
27 mu_0       0.9      1.07         1.01   1.43e- 1      5.52
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.162     3.63e-28  1.60e-74      7.47
 2 mu         0.2      2.88      1.71e-15  5.43e-49    129.  
 3 mu         0.3      1.11      7.33e- 9  2.97e-34     24.5 
 4 mu         0.4      0.905     1.12e- 4  5.61e-24     15.4 
 5 mu         0.5      0.956     2.09e- 2  3.38e-16     12.1 
 6 mu         0.6      1.06      3.36e- 1  2.33e-14      6.53
 7 mu         0.7      1.35      4.14e- 1  4.41e-23     10.4 
 8 mu         0.8      1.07      7.19e- 2  4.56e-36      7.87
 9 mu         0.9      1.75      9.06e- 7  3.53e-59     53.6 
10 mu_1       0.1      0.299     2.35e-27  1.48e-73     13.9 
11 mu_1       0.2      2.74      5.82e-15  2.51e-48    120.  
12 mu_1       0.3      1.11      1.59e- 8  9.16e-34     22.1 
13 mu_1       0.4      0.889     1.94e- 4  1.30e-23     14.5 
14 mu_1       0.5      0.952     2.83e- 2  6.25e-16     11.5 
15 mu_1       0.6      1.07      3.39e- 1  7.45e-15      6.33
16 mu_1       0.7      1.35      3.79e- 1  1.21e-23     10.4 
17 mu_1       0.8      1.06      5.93e- 2  1.09e-36      7.87
18 mu_1       0.9      1.78      6.74e- 7  7.53e-60     55.2 
19 mu_0       0.1      0.147     1.43e-28  1.34e-75      6.75
20 mu_0       0.2      2.91      6.78e-16  5.11e-50    131.  
21 mu_0       0.3      1.11      3.68e- 9  3.19e-35     25.5 
22 mu_0       0.4      0.915     6.14e- 5  7.04e-25     16.0 
23 mu_0       0.5      0.960     1.44e- 2  5.09e-17     12.8 
24 mu_0       0.6      1.03      2.33e- 1  4.71e-14      6.83
25 mu_0       0.7      1.33      4.43e- 1  1.19e-22     10.5 
26 mu_0       0.8      1.13      9.09e- 2  1.84e-35      9.01
27 mu_0       0.9      1.46      2.99e- 6  2.86e-58     39.0 
[1] "Total run time was 433.537 seconds"
