
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7499"
[1] "cluster size dist'n: "

50 52 53 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 73 74 75 76 78 79 
 1  2  1  2  1  2  2  4  3  2  2  3  6  4  1  4  3  2  3  3  1  1  4  2  1  3 
81 82 84 85 86 87 89 90 91 92 93 94 95 96 98 99 
 2  2  1  2  2  1  3  1  1  6  2  1  5  4  1  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03692 0.36028 0.62727 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4421 3078 
[1] "treatment indicator table: "

   0    1 
2781 4718 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3824
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3675
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 578.292 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.340 0.105 
 2 mu         0.1   0.2 0.411 0.0966
 3 mu         0.1   0.3 0.474 0.118 
 4 mu         0.1   0.4 0.524 0.108 
 5 mu         0.1   0.5 0.565 0.0946
 6 mu         0.2   0.1 0.371 0.0750
 7 mu         0.2   0.2 0.446 0.0640
 8 mu         0.2   0.3 0.529 0.0793
 9 mu         0.2   0.4 0.574 0.0689
10 mu         0.2   0.5 0.626 0.0526
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.863        0.275 0.00000571      9.28
 2 mu         0.2      1.03         0.946 0.0538          3.10
 3 mu         0.3      1.01         0.976 0.253           2.20
 4 mu         0.4      1.01         1.03  0.360           1.64
 5 mu         0.5      1.01         1.01  0.557           1.57
 6 mu         0.6      1.02         1.04  0.633           1.48
 7 mu         0.7      0.986        0.979 0.559           1.46
 8 mu         0.8      0.982        0.966 0.567           1.60
 9 mu         0.9      1.05         0.987 0.244           2.38
10 mu_1       0.1      0.890        0.445 0.0000150       7.56
11 mu_1       0.2      1.03         0.965 0.0719          2.85
12 mu_1       0.3      1.00         0.957 0.279           2.25
13 mu_1       0.4      1.01         1.04  0.362           1.69
14 mu_1       0.5      1.01         1.01  0.535           1.53
15 mu_1       0.6      1.02         1.03  0.625           1.48
16 mu_1       0.7      0.985        0.983 0.566           1.48
17 mu_1       0.8      0.984        0.964 0.567           1.59
18 mu_1       0.9      1.05         0.979 0.233           2.39
19 mu_0       0.1      0.860        0.255 0.00000467      9.47
20 mu_0       0.2      1.02         0.943 0.0493          3.16
21 mu_0       0.3      1.01         0.984 0.242           2.18
22 mu_0       0.4      1.01         1.02  0.359           1.66
23 mu_0       0.5      1.01         1.01  0.579           1.62
24 mu_0       0.6      1.03         1.02  0.646           1.49
25 mu_0       0.7      0.989        0.991 0.542           1.44
26 mu_0       0.8      0.976        0.953 0.569           1.62
27 mu_0       0.9      1.05         1.01  0.346           2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.155     2.71e-26  1.29e-84     15.5 
 2 mu         0.2      0.177     6.12e-14  1.41e-56     12.0 
 3 mu         0.3      0.611     1.49e- 7  2.59e-40     13.6 
 4 mu         0.4      1.31      9.01e- 4  6.64e-29     28.7 
 5 mu         0.5      1.34      1.12e- 1  3.43e-20      9.28
 6 mu         0.6      1.07      2.71e- 1  3.07e-13      7.37
 7 mu         0.7      1.02      9.56e- 2  3.43e-20      8.96
 8 mu         0.8      0.783     1.10e- 2  2.37e-30      6.54
 9 mu         0.9      1.99      2.93e- 8  3.33e-48     41.8 
10 mu_1       0.1      0.218     1.77e-25  1.22e-83     21.8 
11 mu_1       0.2      0.169     1.96e-13  6.71e-56      8.45
12 mu_1       0.3      0.673     3.18e- 7  8.18e-40     13.2 
13 mu_1       0.4      1.35      1.46e- 3  1.58e-28     28.9 
14 mu_1       0.5      1.33      1.07e- 1  6.52e-20      8.70
15 mu_1       0.6      1.05      2.18e- 1  7.21e-14      7.50
16 mu_1       0.7      1.02      8.28e- 2  6.91e-21      8.86
17 mu_1       0.8      0.780     9.76e- 3  4.17e-31      6.65
18 mu_1       0.9      2.01      2.04e- 8  5.22e-49     42.9 
19 mu_0       0.1      0.148     1.04e-26  7.21e-86     14.8 
20 mu_0       0.2      0.179     2.75e-14  8.92e-58     12.9 
21 mu_0       0.3      0.585     7.67e- 8  1.87e-41     13.8 
22 mu_0       0.4      1.29      5.34e- 4  5.59e-30     28.6 
23 mu_0       0.5      1.35      8.76e- 2  3.47e-21      9.86
24 mu_0       0.6      1.09      3.18e- 1  3.94e-14      7.18
25 mu_0       0.7      1.02      1.34e- 1  9.83e-20      9.19
26 mu_0       0.8      0.795     4.89e- 3  1.02e-29      7.00
27 mu_0       0.9      1.77      1.10e- 7  2.86e-47     31.7 
[1] "Total run time was 582.874 seconds"
