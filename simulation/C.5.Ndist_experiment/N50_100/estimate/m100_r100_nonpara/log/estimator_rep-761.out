
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7696"
[1] "cluster size dist'n: "

 51  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71  72 
  2   3   2   3   1   1   1   6   1   3   1   3   1   2   1   2   2   2   5   2 
 74  75  76  77  78  80  81  82  83  85  86  87  88  90  91  92  93  94  95  96 
  1   1   1   2   2   2   2   3   3   3   4   3   3   2   1   2   2   2   3   2 
 97  98  99 100 
  2   2   5   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05279 0.39459 0.64930 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4586 3110 
[1] "treatment indicator table: "

   0    1 
2815 4881 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3841
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3855
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 388.514 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.343 0.0625
 2 mu         0.1   0.2 0.412 0.0802
 3 mu         0.1   0.3 0.477 0.0894
 4 mu         0.1   0.4 0.491 0.0954
 5 mu         0.1   0.5 0.541 0.0986
 6 mu         0.2   0.1 0.363 0.0552
 7 mu         0.2   0.2 0.438 0.0630
 8 mu         0.2   0.3 0.529 0.0690
 9 mu         0.2   0.4 0.546 0.0597
10 mu         0.2   0.5 0.584 0.0552
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.881        0.132 0.0000000245      8.82
 2 mu         0.2      0.972        0.808 0.00125           3.25
 3 mu         0.3      0.979        0.931 0.0948            2.62
 4 mu         0.4      0.967        0.978 0.371             1.69
 5 mu         0.5      0.967        0.965 0.410             1.52
 6 mu         0.6      0.970        0.973 0.568             1.56
 7 mu         0.7      1.01         0.993 0.667             1.49
 8 mu         0.8      1.01         0.974 0.430             1.66
 9 mu         0.9      1.05         1.00  0.456             1.89
10 mu_1       0.1      0.873        0.229 0.0000000788      6.80
11 mu_1       0.2      0.961        0.818 0.00243           3.21
12 mu_1       0.3      0.981        0.911 0.130             2.50
13 mu_1       0.4      0.967        0.990 0.373             1.66
14 mu_1       0.5      0.967        0.962 0.417             1.50
15 mu_1       0.6      0.971        0.974 0.574             1.56
16 mu_1       0.7      1.01         0.992 0.665             1.50
17 mu_1       0.8      1.01         0.968 0.430             1.66
18 mu_1       0.9      1.05         0.994 0.446             1.91
19 mu_0       0.1      0.882        0.121 0.0000000184      9.10
20 mu_0       0.2      0.975        0.802 0.000953          3.26
21 mu_0       0.3      0.978        0.920 0.0796            2.66
22 mu_0       0.4      0.967        0.968 0.369             1.71
23 mu_0       0.5      0.968        0.961 0.403             1.53
24 mu_0       0.6      0.967        0.973 0.559             1.56
25 mu_0       0.7      1.01         0.993 0.672             1.47
26 mu_0       0.8      1.01         0.990 0.431             1.66
27 mu_0       0.9      1.04         1.01  0.550             1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00237     2.63e-29  4.48e-65     0.179
 2 mu         0.2    0.568       7.19e-16  4.17e-41    26.6  
 3 mu         0.3    1.05        2.29e- 8  1.77e-27    27.7  
 4 mu         0.4    1.12        3.47e- 4  6.62e-19    12.5  
 5 mu         0.5    1.10        3.26e- 2  1.12e-12    15.1  
 6 mu         0.6    1.10        1.44e- 1  1.01e- 8    15.4  
 7 mu         0.7    1.28        1.74e- 1  2.95e-15     9.99 
 8 mu         0.8    1.28        4.23e- 2  3.44e-25    13.7  
 9 mu         0.9    1.41        2.16e- 7  3.93e-43    26.2  
10 mu_1       0.1    0.00583     1.60e-28  3.83e-64     0.438
11 mu_1       0.2    0.716       2.25e-15  1.78e-40    32.1  
12 mu_1       0.3    1.02        4.92e- 8  5.03e-27    24.8  
13 mu_1       0.4    1.16        5.55e- 4  1.50e-18    14.3  
14 mu_1       0.5    1.07        4.31e- 2  2.04e-12    13.9  
15 mu_1       0.6    1.11        1.65e- 1  4.04e- 9    16.3  
16 mu_1       0.7    1.30        2.00e- 1  1.02e-15    10.0  
17 mu_1       0.8    1.28        3.41e- 2  1.04e-25    13.7  
18 mu_1       0.9    1.41        1.51e- 7  1.05e-43    26.7  
19 mu_0       0.1    0.00199     1.05e-29  7.26e-66     0.150
20 mu_0       0.2    0.531       3.39e-16  7.60e-42    25.2  
21 mu_0       0.3    1.07        1.26e- 8  3.68e-28    28.9  
22 mu_0       0.4    1.10        2.09e- 4  1.00e-19    11.3  
23 mu_0       0.5    1.14        2.59e- 2  2.04e-13    16.4  
24 mu_0       0.6    1.08        1.38e- 1  1.87e- 8    14.0  
25 mu_0       0.7    1.25        1.30e- 1  7.47e-15    12.1  
26 mu_0       0.8    1.30        6.26e- 2  1.31e-24    14.0  
27 mu_0       0.9    1.45        8.04e- 7  2.98e-42    22.2  
[1] "Total run time was 391.704 seconds"
