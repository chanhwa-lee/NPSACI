
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7658"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71 
  3   2   1   1   2   1   2   2   1   2   4   1   2   1   1   4   3   2   1   1 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93 
  2   3   1   2   3   2   2   3   3   3   3   2   3   3   1   3   1   3   4   4 
 94  95  96  98  99 100 
  1   5   2   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03245 0.34266 0.60792 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4530 3128 
[1] "treatment indicator table: "

   0    1 
2905 4753 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3685
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3973
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 469.612 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.343 0.0633
 2 mu         0.1   0.2 0.429 0.0627
 3 mu         0.1   0.3 0.453 0.0656
 4 mu         0.1   0.4 0.504 0.0574
 5 mu         0.1   0.5 0.533 0.0576
 6 mu         0.2   0.1 0.301 0.0450
 7 mu         0.2   0.2 0.366 0.0366
 8 mu         0.2   0.3 0.407 0.0503
 9 mu         0.2   0.4 0.471 0.0458
10 mu         0.2   0.5 0.498 0.0430
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.935        0.782 0.0000792      2.69
 2 mu         0.2      0.933        0.896 0.0698         2.07
 3 mu         0.3      0.943        0.899 0.238          1.54
 4 mu         0.4      0.973        0.968 0.364          1.47
 5 mu         0.5      1.03         1.03  0.602          1.54
 6 mu         0.6      1.03         1.03  0.748          1.49
 7 mu         0.7      1.02         1.02  0.651          1.45
 8 mu         0.8      1.01         1.02  0.502          1.53
 9 mu         0.9      0.992        1.00  0.384          1.74
10 mu_1       0.1      0.934        0.825 0.000231       2.48
11 mu_1       0.2      0.928        0.852 0.0374         2.00
12 mu_1       0.3      0.947        0.926 0.272          1.53
13 mu_1       0.4      0.978        0.970 0.382          1.47
14 mu_1       0.5      1.03         1.03  0.607          1.52
15 mu_1       0.6      1.03         1.02  0.736          1.49
16 mu_1       0.7      1.02         1.01  0.651          1.43
17 mu_1       0.8      1.01         1.03  0.499          1.53
18 mu_1       0.9      0.991        0.992 0.386          1.76
19 mu_0       0.1      0.935        0.803 0.0000623      2.75
20 mu_0       0.2      0.935        0.902 0.0725         2.09
21 mu_0       0.3      0.942        0.892 0.214          1.57
22 mu_0       0.4      0.970        0.969 0.352          1.47
23 mu_0       0.5      1.02         1.03  0.598          1.57
24 mu_0       0.6      1.03         1.03  0.765          1.49
25 mu_0       0.7      1.03         1.02  0.649          1.50
26 mu_0       0.8      1.01         1.02  0.512          1.54
27 mu_0       0.9      0.999        1.02  0.366          1.67
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.119     1.81e-26  1.16e-82      9.20
 2 mu         0.2      1.25      5.81e-14  1.80e-55     79.2 
 3 mu         0.3      0.752     1.40e- 7  1.11e-39     12.4 
 4 mu         0.4      0.815     1.06e- 3  1.41e-28     11.1 
 5 mu         0.5      0.999     3.86e- 2  4.47e-20      7.07
 6 mu         0.6      1.23      9.54e- 2  2.94e-13     11.9 
 7 mu         0.7      1.16      1.18e- 1  3.07e-21      6.64
 8 mu         0.8      1.23      7.81e- 3  9.34e-34     14.2 
 9 mu         0.9      1.03      3.53e- 8  3.66e-56     14.3 
10 mu_1       0.1      0.210     1.12e-25  1.11e-81     16.2 
11 mu_1       0.2      1.20      1.92e-13  8.60e-55     69.9 
12 mu_1       0.3      0.750     2.89e- 7  3.55e-39     11.7 
13 mu_1       0.4      0.817     1.63e- 3  3.37e-28     10.1 
14 mu_1       0.5      1.03      3.57e- 2  8.56e-20      7.32
15 mu_1       0.6      1.23      1.14e- 1  2.37e-13     12.0 
16 mu_1       0.7      1.16      9.69e- 2  9.31e-22      6.63
17 mu_1       0.8      1.23      6.29e- 3  2.48e-34     14.2 
18 mu_1       0.9      1.05      2.48e- 8  8.64e-57     13.9 
19 mu_0       0.1      0.109     7.68e-27  5.44e-84      8.42
20 mu_0       0.2      1.26      2.47e-14  9.45e-57     81.5 
21 mu_0       0.3      0.752     7.64e- 8  6.70e-41     12.7 
22 mu_0       0.4      0.813     6.34e- 4  9.87e-30     11.7 
23 mu_0       0.5      0.968     4.21e- 2  3.76e-21      6.81
24 mu_0       0.6      1.23      9.99e- 2  3.09e-14     11.9 
25 mu_0       0.7      1.17      1.66e- 1  8.07e-21      6.67
26 mu_0       0.8      1.24      1.04e- 2  3.68e-33     14.0 
27 mu_0       0.9      0.917     1.30e- 7  2.89e-55     18.1 
[1] "Total run time was 474.04 seconds"
