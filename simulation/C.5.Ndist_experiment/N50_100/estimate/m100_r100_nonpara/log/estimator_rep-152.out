
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7542"
[1] "cluster size dist'n: "

 50  51  52  53  56  57  58  59  60  62  63  64  65  67  68  69  70  71  72  73 
  1   4   3   3   2   3   3   4   2   2   1   2   2   2   1   2   1   2   3   5 
 74  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92  93  94  95 
  2   1   2   3   2   1   1   1   2   1   4   2   1   4   1   5   3   2   2   5 
 96  98 100 
  3   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0332  0.3627  0.6151  1.0000  6.1457 
[1] "event indicator table: "

   0    1 
4498 3044 
[1] "treatment indicator table: "

   0    1 
2746 4796 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3796
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 383.818 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.397 0.0922
 2 mu         0.1   0.2 0.436 0.0809
 3 mu         0.1   0.3 0.439 0.0805
 4 mu         0.1   0.4 0.482 0.0980
 5 mu         0.1   0.5 0.551 0.111 
 6 mu         0.2   0.1 0.398 0.0584
 7 mu         0.2   0.2 0.450 0.0405
 8 mu         0.2   0.3 0.469 0.0352
 9 mu         0.2   0.4 0.513 0.0545
10 mu         0.2   0.5 0.574 0.0602
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.894        0.185 0.0000000350      9.28
 2 mu         0.2      0.988        0.856 0.00680           2.80
 3 mu         0.3      0.986        0.963 0.294             1.92
 4 mu         0.4      0.968        0.955 0.411             1.55
 5 mu         0.5      0.995        0.968 0.556             1.71
 6 mu         0.6      1.02         1.01  0.593             1.45
 7 mu         0.7      1.02         1.01  0.590             1.43
 8 mu         0.8      1.03         0.999 0.511             1.66
 9 mu         0.9      1.00         0.981 0.355             2.22
10 mu_1       0.1      0.901        0.308 0.000000119       8.14
11 mu_1       0.2      0.985        0.894 0.0116            2.92
12 mu_1       0.3      0.985        0.957 0.317             1.83
13 mu_1       0.4      0.969        0.954 0.445             1.55
14 mu_1       0.5      0.997        0.973 0.573             1.67
15 mu_1       0.6      1.02         1.01  0.580             1.45
16 mu_1       0.7      1.02         1.01  0.578             1.43
17 mu_1       0.8      1.03         1.00  0.514             1.66
18 mu_1       0.9      1.00         0.986 0.348             2.23
19 mu_0       0.1      0.894        0.170 0.0000000257      9.52
20 mu_0       0.2      0.989        0.853 0.00559           2.87
21 mu_0       0.3      0.987        0.961 0.284             1.97
22 mu_0       0.4      0.968        0.951 0.388             1.57
23 mu_0       0.5      0.993        0.973 0.525             1.75
24 mu_0       0.6      1.02         1.00  0.611             1.44
25 mu_0       0.7      1.02         1.00  0.620             1.44
26 mu_0       0.8      1.03         0.996 0.499             1.62
27 mu_0       0.9      1.00         0.988 0.349             2.12
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000989     1.63e-29  2.26e-76    0.0888
 2 mu         0.2   0.241        2.21e-16  1.53e-50   14.5   
 3 mu         0.3   1.03         6.67e- 9  1.26e-35   16.6   
 4 mu         0.4   0.725        1.82e- 4  3.17e-25   10.0   
 5 mu         0.5   1.18         2.94e- 2  2.39e-17   19.2   
 6 mu         0.6   1.43         1.60e- 1  3.87e-11   22.3   
 7 mu         0.7   1.12         2.98e- 1  1.03e-13    9.11  
 8 mu         0.8   0.946        1.93e- 2  3.08e-23    5.55  
 9 mu         0.9   1.11         1.35e- 7  7.91e-41   21.4   
10 mu_1       0.1   0.00251      1.22e-28  2.09e-75    0.222 
11 mu_1       0.2   0.322        7.39e-16  7.09e-50   18.1   
12 mu_1       0.3   1.04         1.42e- 8  3.88e-35   17.6   
13 mu_1       0.4   0.722        2.95e- 4  7.33e-25    9.60  
14 mu_1       0.5   1.23         3.19e- 2  4.42e-17   21.3   
15 mu_1       0.6   1.42         1.77e- 1  5.97e-11   20.6   
16 mu_1       0.7   1.11         2.97e- 1  4.12e-14    9.35  
17 mu_1       0.8   0.948        1.55e- 2  1.07e-23    5.64  
18 mu_1       0.9   1.11         9.84e- 8  2.57e-41   21.6   
19 mu_0       0.1   0.000820     4.55e-30  1.87e-77    0.0740
20 mu_0       0.2   0.221        9.18e-17  1.43e-51   13.6   
21 mu_0       0.3   1.02         3.46e- 9  1.34e-36   16.7   
22 mu_0       0.4   0.727        1.11e- 4  3.93e-26   10.3   
23 mu_0       0.5   1.14         2.93e- 2  3.55e-18   17.1   
24 mu_0       0.6   1.45         1.89e- 1  7.21e-12   24.9   
25 mu_0       0.7   1.15         2.11e- 1  2.48e-13    9.31  
26 mu_0       0.8   0.935        2.64e- 2  1.11e-22    6.03  
27 mu_0       0.9   1.18         4.68e- 7  5.60e-40   20.3   
[1] "Total run time was 387.087 seconds"
