
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7340"
[1] "cluster size dist'n: "

50 51 52 53 55 56 58 59 60 61 63 64 66 67 68 69 70 71 72 73 74 75 76 77 78 79 
 2  3  4  2  2  2  3  1  4  1  2  3  4  3  2  2  1  3  5  1  1  5  2  1  2  5 
80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 99 
 3  3  1  3  3  1  1  1  1  2  1  1  1  2  2  1  2  2  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04512 0.40213 0.65007 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4397 2943 
[1] "treatment indicator table: "

   0    1 
2547 4793 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3583
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 388.271 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.539 0.0866
 2 mu         0.1   0.2 0.635 0.0942
 3 mu         0.1   0.3 0.683 0.0862
 4 mu         0.1   0.4 0.717 0.0872
 5 mu         0.1   0.5 0.797 0.100 
 6 mu         0.2   0.1 0.374 0.0500
 7 mu         0.2   0.2 0.451 0.0497
 8 mu         0.2   0.3 0.488 0.0399
 9 mu         0.2   0.4 0.515 0.0365
10 mu         0.2   0.5 0.581 0.0470
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.24         0.820 0.00000000998      7.20
 2 mu         0.2      0.940        0.915 0.00171            3.03
 3 mu         0.3      0.958        0.934 0.190              1.97
 4 mu         0.4      1.00         0.996 0.464              1.86
 5 mu         0.5      1.00         0.967 0.503              1.63
 6 mu         0.6      0.986        0.964 0.600              1.43
 7 mu         0.7      0.984        0.974 0.666              1.73
 8 mu         0.8      1.04         1.01  0.527              1.77
 9 mu         0.9      0.990        0.963 0.381              3.04
10 mu_1       0.1      1.21         0.810 0.0000000366       7.11
11 mu_1       0.2      0.930        0.919 0.00320            2.47
12 mu_1       0.3      0.964        0.945 0.245              1.93
13 mu_1       0.4      1.00         0.991 0.447              1.85
14 mu_1       0.5      1.00         0.970 0.498              1.59
15 mu_1       0.6      0.984        0.964 0.622              1.39
16 mu_1       0.7      0.985        0.968 0.674              1.72
17 mu_1       0.8      1.04         1.01  0.524              1.81
18 mu_1       0.9      0.987        0.949 0.381              3.03
19 mu_0       0.1      1.24         0.820 0.00000000702      7.59
20 mu_0       0.2      0.943        0.923 0.00133            3.22
21 mu_0       0.3      0.956        0.924 0.166              1.99
22 mu_0       0.4      1.00         0.986 0.476              1.87
23 mu_0       0.5      1.00         0.960 0.508              1.67
24 mu_0       0.6      0.988        0.989 0.566              1.48
25 mu_0       0.7      0.981        0.968 0.649              1.76
26 mu_0       0.8      1.03         0.996 0.528              1.64
27 mu_0       0.9      1.01         0.993 0.379              3.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.741     7.00e-31  1.05e-74      73.7
 2 mu         0.2      0.867     4.88e-17  2.01e-48      50.9
 3 mu         0.3      0.692     1.51e- 9  3.20e-34      20.4
 4 mu         0.4      0.835     3.61e- 5  6.30e-25      14.6
 5 mu         0.5      1.08      2.23e- 2  8.45e-18      21.3
 6 mu         0.6      1.16      2.95e- 1  6.51e-13      10.2
 7 mu         0.7      1.59      4.46e- 1  5.46e-20      11.9
 8 mu         0.8      1.29      8.32e- 2  2.51e-30      13.8
 9 mu         0.9      1.95      1.16e- 6  1.77e-48      27.9
10 mu_1       0.1      1.03      4.51e-30  9.47e-74     102. 
11 mu_1       0.2      0.783     1.58e-16  9.03e-48      35.3
12 mu_1       0.3      0.688     3.50e- 9  1.03e-33      20.8
13 mu_1       0.4      0.878     6.01e- 5  1.52e-24      17.0
14 mu_1       0.5      1.07      2.64e- 2  1.63e-17      19.8
15 mu_1       0.6      1.19      3.42e- 1  1.51e-13      10.1
16 mu_1       0.7      1.57      4.32e- 1  1.08e-20      12.2
17 mu_1       0.8      1.30      7.58e- 2  4.35e-31      13.9
18 mu_1       0.9      1.96      8.84e- 7  2.73e-49      27.8
19 mu_0       0.1      0.708     2.77e-31  1.18e-75      70.5
20 mu_0       0.2      0.888     2.14e-17  2.54e-49      54.7
21 mu_0       0.3      0.694     6.57e-10  1.73e-35      20.2
22 mu_0       0.4      0.806     2.09e- 5  3.99e-26      13.0
23 mu_0       0.5      1.10      1.44e- 2  6.42e-19      22.7
24 mu_0       0.6      1.12      2.42e- 1  4.28e-13      10.8
25 mu_0       0.7      1.61      4.85e- 1  1.57e-19      13.0
26 mu_0       0.8      1.25      1.06e- 1  1.08e-29      13.7
27 mu_0       0.9      1.93      3.67e- 6  1.52e-47      29.7
[1] "Total run time was 391.729 seconds"
