
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7478"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  64  65  66  67  69  70  71 
  3   3   1   2   1   2   3   5   3   2   2   3   1   4   1   2   1   1   2   3 
 73  74  75  76  77  78  79  80  82  84  85  86  87  88  89  90  92  93  94  95 
  3   1   4   1   1   1   2   3   4   3   2   1   3   2   2   1   5   1   1   2 
 96  97  98  99 100 
  2   3   1   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03975 0.35756 0.60894 1.00000 5.71052 
[1] "event indicator table: "

   0    1 
4462 3016 
[1] "treatment indicator table: "

   0    1 
2651 4827 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3793
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3685
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 367.711 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.236 0.0800
 2 mu         0.1   0.2 0.287 0.0920
 3 mu         0.1   0.3 0.418 0.113 
 4 mu         0.1   0.4 0.413 0.119 
 5 mu         0.1   0.5 0.456 0.126 
 6 mu         0.2   0.1 0.240 0.0355
 7 mu         0.2   0.2 0.338 0.0540
 8 mu         0.2   0.3 0.436 0.0673
 9 mu         0.2   0.4 0.459 0.0650
10 mu         0.2   0.5 0.490 0.0672
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.711       0.0293  2.81e-12     13.5 
 2 mu         0.2      0.826       0.694   3.90e- 5      3.19
 3 mu         0.3      0.945       0.906   2.39e- 2      2.11
 4 mu         0.4      1.01        0.984   3.91e- 1      1.72
 5 mu         0.5      0.996       0.976   6.18e- 1      1.43
 6 mu         0.6      0.990       0.971   5.85e- 1      1.38
 7 mu         0.7      0.990       0.979   6.91e- 1      1.31
 8 mu         0.8      0.996       0.977   5.89e- 1      1.40
 9 mu         0.9      1.04        1.05    1.26e- 1      2.64
10 mu_1       0.1      0.764       0.0596  1.08e-11     10.6 
11 mu_1       0.2      0.844       0.734   8.39e- 5      3.45
12 mu_1       0.3      0.954       0.933   3.50e- 2      1.98
13 mu_1       0.4      1.01        0.987   4.52e- 1      1.77
14 mu_1       0.5      0.995       0.981   6.08e- 1      1.41
15 mu_1       0.6      0.989       0.975   5.82e- 1      1.37
16 mu_1       0.7      0.990       0.984   6.94e- 1      1.32
17 mu_1       0.8      0.996       0.981   5.83e- 1      1.40
18 mu_1       0.9      1.04        1.05    1.17e- 1      2.69
19 mu_0       0.1      0.705       0.0258  1.93e-12     13.8 
20 mu_0       0.2      0.821       0.676   2.77e- 5      3.13
21 mu_0       0.3      0.941       0.892   1.92e- 2      2.17
22 mu_0       0.4      1.01        0.993   3.51e- 1      1.68
23 mu_0       0.5      0.997       0.974   6.29e- 1      1.45
24 mu_0       0.6      0.990       0.975   5.87e- 1      1.40
25 mu_0       0.7      0.990       0.974   6.86e- 1      1.32
26 mu_0       0.8      0.993       0.996   6.13e- 1      1.40
27 mu_0       0.9      1.03        1.04    1.33e- 1      2.40
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000657     6.52e-28  5.99e-74    0.0624
 2 mu         0.2   0.311        4.16e-15  1.81e-49   19.9   
 3 mu         0.3   1.48         1.56e- 8  2.92e-35   30.8   
 4 mu         0.4   1.51         1.44e- 4  2.77e-25   23.0   
 5 mu         0.5   0.894        3.62e- 2  1.18e-17    8.03  
 6 mu         0.6   0.911        2.74e- 1  1.50e-11    6.07  
 7 mu         0.7   1.20         3.60e- 1  6.47e-14    6.48  
 8 mu         0.8   1.18         9.20e- 2  1.24e-23   14.3   
 9 mu         0.9   2.21         3.88e- 6  8.06e-43   54.4   
10 mu_1       0.1   0.00160      3.77e-27  5.71e-73    0.150 
11 mu_1       0.2   0.409        1.40e-14  8.62e-49   23.8   
12 mu_1       0.3   1.59         3.59e- 8  9.27e-35   29.4   
13 mu_1       0.4   1.44         2.40e- 4  6.60e-25   20.7   
14 mu_1       0.5   0.881        4.34e- 2  2.25e-17    8.38  
15 mu_1       0.6   0.920        3.02e- 1  2.39e-11    6.43  
16 mu_1       0.7   1.21         3.73e- 1  2.22e-14    6.87  
17 mu_1       0.8   1.18         7.67e- 2  4.79e-24   14.7   
18 mu_1       0.9   2.25         3.02e- 6  2.78e-43   55.8   
19 mu_0       0.1   0.000553     3.06e-28  3.10e-75    0.0527
20 mu_0       0.2   0.287        1.70e-15  1.05e-50   18.9   
21 mu_0       0.3   1.44         6.87e- 9  1.94e-36   31.4   
22 mu_0       0.4   1.56         8.25e- 5  2.15e-26   24.5   
23 mu_0       0.5   0.908        2.45e- 2  1.10e-18    7.68  
24 mu_0       0.6   0.896        2.32e- 1  1.75e-12    5.53  
25 mu_0       0.7   1.18         3.25e- 1  1.64e-13    6.35  
26 mu_0       0.8   1.17         7.68e- 2  4.26e-23   12.8   
27 mu_0       0.9   1.87         1.16e- 5  5.56e-42   41.3   
[1] "Total run time was 371.209 seconds"
