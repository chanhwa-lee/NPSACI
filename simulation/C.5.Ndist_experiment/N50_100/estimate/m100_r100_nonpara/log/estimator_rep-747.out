
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7511"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  60  61  62  63  64  65  67  68  69  70  71  72 
  1   2   5   1   1   1   3   1   3   1   2   3   4   1   1   1   3   4   2   3 
 73  74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  92  93  94 
  5   1   4   1   2   1   2   5   2   3   3   2   1   4   1   4   3   1   1   2 
 96  97  98  99 100 
  1   2   3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02948 0.34340 0.60798 1.00000 7.02018 
[1] "event indicator table: "

   0    1 
4475 3036 
[1] "treatment indicator table: "

   0    1 
2797 4714 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3726
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3785
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 380.572 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.415 0.116 
 2 mu         0.1   0.2 0.480 0.128 
 3 mu         0.1   0.3 0.531 0.132 
 4 mu         0.1   0.4 0.562 0.142 
 5 mu         0.1   0.5 0.610 0.166 
 6 mu         0.2   0.1 0.423 0.0610
 7 mu         0.2   0.2 0.508 0.0670
 8 mu         0.2   0.3 0.550 0.0634
 9 mu         0.2   0.4 0.588 0.0613
10 mu         0.2   0.5 0.639 0.0782
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.946        0.302  9.67e-11     18.2 
 2 mu         0.2      0.998        0.837  3.86e- 4      3.53
 3 mu         0.3      0.929        0.896  1.18e- 1      2.04
 4 mu         0.4      0.934        0.915  4.90e- 1      1.86
 5 mu         0.5      0.997        0.981  5.82e- 1      1.57
 6 mu         0.6      1.02         1.01   5.70e- 1      1.58
 7 mu         0.7      0.996        0.969  5.62e- 1      1.57
 8 mu         0.8      1.02         1.06   5.40e- 1      1.71
 9 mu         0.9      1.04         0.976  3.62e- 2      2.70
10 mu_1       0.1      0.950        0.471  3.56e-10     12.5 
11 mu_1       0.2      0.992        0.862  7.07e- 4      3.33
12 mu_1       0.3      0.924        0.897  1.53e- 1      1.84
13 mu_1       0.4      0.940        0.911  5.18e- 1      1.81
14 mu_1       0.5      0.999        0.996  5.77e- 1      1.60
15 mu_1       0.6      1.02         1.01   5.64e- 1      1.57
16 mu_1       0.7      0.995        0.972  5.52e- 1      1.58
17 mu_1       0.8      1.03         1.06   5.26e- 1      1.72
18 mu_1       0.9      1.04         0.980  3.38e- 2      2.74
19 mu_0       0.1      0.945        0.286  6.79e-11     18.8 
20 mu_0       0.2      1.00         0.826  3.06e- 4      3.59
21 mu_0       0.3      0.930        0.909  1.04e- 1      2.14
22 mu_0       0.4      0.930        0.914  4.57e- 1      1.90
23 mu_0       0.5      0.994        0.970  5.83e- 1      1.54
24 mu_0       0.6      1.02         1.02   5.78e- 1      1.60
25 mu_0       0.7      0.999        0.977  5.86e- 1      1.55
26 mu_0       0.8      1.01         1.02   5.93e- 1      1.68
27 mu_0       0.9      1.05         1.02   5.77e- 2      2.34
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.633     8.46e-29  4.42e-77     51.7 
 2 mu         0.2      0.408     2.77e-15  6.75e-51     14.1 
 3 mu         0.3      0.607     4.85e- 8  9.50e-36     33.8 
 4 mu         0.4      0.568     4.39e- 4  3.09e-25      8.95
 5 mu         0.5      0.845     9.11e- 2  2.24e-17     10.1 
 6 mu         0.6      1.19      3.68e- 1  4.71e-19      9.10
 7 mu         0.7      1.22      3.03e- 1  2.97e-28     14.8 
 8 mu         0.8      1.14      1.16e- 2  1.38e-41     11.3 
 9 mu         0.9      2.61      1.82e- 8  7.43e-65     78.3 
10 mu_1       0.1      0.758     5.37e-28  4.14e-76     58.1 
11 mu_1       0.2      0.399     8.42e-15  3.16e-50     14.3 
12 mu_1       0.3      0.590     1.03e- 7  2.96e-35     31.4 
13 mu_1       0.4      0.599     6.82e- 4  7.23e-25      9.17
14 mu_1       0.5      0.859     1.09e- 1  4.18e-17      9.83
15 mu_1       0.6      1.21      4.05e- 1  8.81e-20      8.88
16 mu_1       0.7      1.21      3.05e- 1  4.76e-29     15.1 
17 mu_1       0.8      1.15      8.82e- 3  1.94e-42     11.8 
18 mu_1       0.9      2.66      1.34e- 8  9.27e-66     81.4 
19 mu_0       0.1      0.619     3.32e-29  3.14e-78     51.0 
20 mu_0       0.2      0.410     1.35e-15  5.39e-52     15.0 
21 mu_0       0.3      0.615     2.52e- 8  8.66e-37     34.8 
22 mu_0       0.4      0.548     2.77e- 4  3.36e-26      8.81
23 mu_0       0.5      0.831     6.43e- 2  2.92e-18     10.4 
24 mu_0       0.6      1.17      4.36e- 1  1.04e-18      9.43
25 mu_0       0.7      1.23      2.44e- 1  8.77e-28     14.1 
26 mu_0       0.8      1.10      2.08e- 2  6.14e-41     11.3 
27 mu_0       0.9      2.17      6.21e- 8  6.59e-64     50.0 
[1] "Total run time was 383.929 seconds"
