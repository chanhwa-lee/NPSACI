
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7624"
[1] "cluster size dist'n: "

 51  53  55  56  57  58  59  61  62  63  64  65  66  67  68  69  70  71  72  73 
  2   1   3   3   2   2   4   3   2   1   2   3   2   1   3   2   2   1   1   2 
 74  75  76  77  78  79  80  81  82  84  85  86  87  88  89  90  91  92  93  94 
  2   2   4   4   3   2   2   1   3   2   2   4   3   2   1   2   1   3   1   2 
 96  97  98  99 100 
  2   1   2   3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03616 0.33067 0.60123 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4438 3186 
[1] "treatment indicator table: "

   0    1 
3121 4503 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3815
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3809
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 453.912 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.359 0.0740
 2 mu         0.1   0.2 0.445 0.0810
 3 mu         0.1   0.3 0.481 0.0901
 4 mu         0.1   0.4 0.526 0.0851
 5 mu         0.1   0.5 0.560 0.0916
 6 mu         0.2   0.1 0.355 0.0355
 7 mu         0.2   0.2 0.456 0.0387
 8 mu         0.2   0.3 0.506 0.0397
 9 mu         0.2   0.4 0.553 0.0385
10 mu         0.2   0.5 0.596 0.0390
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.907        0.326 0.0000000754      7.68
 2 mu         0.2      1.03         1.01  0.0186            2.89
 3 mu         0.3      1.01         0.978 0.141             1.95
 4 mu         0.4      1.04         1.03  0.443             1.67
 5 mu         0.5      0.991        0.981 0.558             1.82
 6 mu         0.6      0.996        0.991 0.612             1.49
 7 mu         0.7      1.02         0.999 0.622             2.00
 8 mu         0.8      1.01         1.01  0.503             1.83
 9 mu         0.9      1.03         1.03  0.0821            2.10
10 mu_1       0.1      0.911        0.436 0.000000234       5.91
11 mu_1       0.2      1.03         1.03  0.0291            2.67
12 mu_1       0.3      1.01         0.951 0.164             1.90
13 mu_1       0.4      1.04         1.04  0.448             1.66
14 mu_1       0.5      0.988        0.984 0.577             1.81
15 mu_1       0.6      0.997        0.994 0.608             1.49
16 mu_1       0.7      1.02         1.00  0.629             2.01
17 mu_1       0.8      1.01         1.01  0.503             1.82
18 mu_1       0.9      1.02         1.03  0.0757            2.14
19 mu_0       0.1      0.906        0.313 0.0000000578      8.01
20 mu_0       0.2      1.03         0.997 0.0160            2.95
21 mu_0       0.3      1.01         0.969 0.131             1.97
22 mu_0       0.4      1.04         1.02  0.439             1.68
23 mu_0       0.5      0.994        0.976 0.539             1.82
24 mu_0       0.6      0.994        0.989 0.617             1.50
25 mu_0       0.7      1.02         0.989 0.593             1.97
26 mu_0       0.8      1.01         0.998 0.503             1.88
27 mu_0       0.9      1.03         1.02  0.139             2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0195     8.78e-25  2.00e-82      1.71
 2 mu         0.2     1.05       2.57e-13  1.74e-55     43.0 
 3 mu         0.3     1.90       3.21e- 7  8.22e-40     78.2 
 4 mu         0.4     1.63       2.15e- 3  9.09e-29     26.2 
 5 mu         0.5     1.02       1.09e- 1  2.77e-20      7.94
 6 mu         0.6     1.03       1.43e- 1  1.90e-13     16.4 
 7 mu         0.7     0.946      1.68e- 1  4.68e-20      7.18
 8 mu         0.8     1.08       3.55e- 3  3.21e-31     13.6 
 9 mu         0.9     1.11       2.46e- 9  4.02e-51     36.4 
10 mu_1       0.1     0.0398     5.67e-24  1.94e-81      3.47
11 mu_1       0.2     1.21       8.31e-13  8.43e-55     43.6 
12 mu_1       0.3     1.89       6.63e- 7  2.65e-39     81.5 
13 mu_1       0.4     1.60       3.25e- 3  2.20e-28     25.5 
14 mu_1       0.5     0.993      1.32e- 1  5.37e-20      7.66
15 mu_1       0.6     1.03       1.36e- 1  3.06e-13     16.4 
16 mu_1       0.7     0.952      1.64e- 1  1.32e-20      7.66
17 mu_1       0.8     1.07       2.86e- 3  7.92e-32     14.1 
18 mu_1       0.9     1.16       1.73e- 9  8.84e-52     38.0 
19 mu_0       0.1     0.0173     3.45e-25  7.18e-84      1.51
20 mu_0       0.2     1.01       1.14e-13  7.02e-57     42.9 
21 mu_0       0.3     1.90       1.75e- 7  3.79e-41     76.8 
22 mu_0       0.4     1.65       2.08e- 3  4.89e-30     26.6 
23 mu_0       0.5     1.04       8.45e- 2  1.79e-21      8.59
24 mu_0       0.6     1.02       1.11e- 1  1.53e-14     16.4 
25 mu_0       0.7     0.932      1.62e- 1  1.25e-19      6.64
26 mu_0       0.8     1.11       3.45e- 3  1.29e-30     12.4 
27 mu_0       0.9     0.690      9.02e- 9  3.23e-50     22.3 
[1] "Total run time was 458.163 seconds"
