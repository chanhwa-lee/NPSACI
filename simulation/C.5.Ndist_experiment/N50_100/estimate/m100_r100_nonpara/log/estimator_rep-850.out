
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7578"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  58  59  60  61  62  63  65  66  67  68  69  70  71  72 
  4   2   3   1   1   3   1   1   1   1   4   1   5   7   4   1   1   1   2   1 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  89  90  91  92  93  95 
  1   3   1   2   2   1   2   1   3   3   1   2   3   2   1   3   3   2   4   4 
 97  99 100 
  1   6   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03453 0.34086 0.60157 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4593 2985 
[1] "treatment indicator table: "

   0    1 
2756 4822 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3804
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3774
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 403.907 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.463 0.114 
 2 mu         0.1   0.2 0.568 0.149 
 3 mu         0.1   0.3 0.647 0.162 
 4 mu         0.1   0.4 0.680 0.165 
 5 mu         0.1   0.5 0.724 0.161 
 6 mu         0.2   0.1 0.364 0.0445
 7 mu         0.2   0.2 0.418 0.0405
 8 mu         0.2   0.3 0.491 0.0423
 9 mu         0.2   0.4 0.527 0.0437
10 mu         0.2   0.5 0.596 0.0575
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.08         0.450 0.000000116      17.8 
 2 mu         0.2      1.00         0.999 0.0201            2.44
 3 mu         0.3      0.966        0.950 0.444             2.00
 4 mu         0.4      1.01         1.01  0.356             1.38
 5 mu         0.5      1.00         1.00  0.647             1.58
 6 mu         0.6      0.987        0.979 0.687             1.60
 7 mu         0.7      1.02         1.02  0.639             1.51
 8 mu         0.8      0.987        0.975 0.488             1.37
 9 mu         0.9      0.974        0.958 0.333             1.93
10 mu_1       0.1      1.02         0.607 0.000000367       9.56
11 mu_1       0.2      1.01         1.04  0.0323            2.60
12 mu_1       0.3      0.961        0.922 0.417             1.82
13 mu_1       0.4      1.01         1.02  0.355             1.40
14 mu_1       0.5      1.00         1.00  0.634             1.56
15 mu_1       0.6      0.989        0.973 0.710             1.62
16 mu_1       0.7      1.02         1.02  0.638             1.52
17 mu_1       0.8      0.986        0.981 0.489             1.38
18 mu_1       0.9      0.973        0.956 0.317             1.95
19 mu_0       0.1      1.08         0.439 0.0000000882     18.7 
20 mu_0       0.2      1.00         1.00  0.0171            2.51
21 mu_0       0.3      0.969        0.946 0.437             2.09
22 mu_0       0.4      1.01         1.01  0.357             1.37
23 mu_0       0.5      1.01         1.01  0.635             1.59
24 mu_0       0.6      0.983        0.984 0.653             1.56
25 mu_0       0.7      1.02         1.03  0.641             1.51
26 mu_0       0.8      0.991        0.985 0.484             1.36
27 mu_0       0.9      0.978        0.933 0.472             2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     12.6       1.60e-29  6.71e-84   1255.  
 2 mu         0.2      1.10      1.00e-15  6.55e-56     66.4 
 3 mu         0.3      1.30      6.86e- 9  1.05e-39     24.9 
 4 mu         0.4      0.900     1.34e- 4  2.31e-28      8.12
 5 mu         0.5      0.962     2.06e- 2  9.96e-20      6.24
 6 mu         0.6      1.11      7.06e- 2  2.38e-16     11.9 
 7 mu         0.7      0.876     1.62e- 1  7.90e-24      5.40
 8 mu         0.8      1.42      1.68e- 2  1.63e-34     10.7 
 9 mu         0.9      1.32      4.21e- 7  5.66e-53     21.8 
10 mu_1       0.1      7.75      9.38e-29  6.30e-83    761.  
11 mu_1       0.2      1.06      3.40e-15  3.08e-55     60.8 
12 mu_1       0.3      1.30      1.49e- 8  3.29e-39     22.3 
13 mu_1       0.4      0.877     2.25e- 4  5.43e-28      7.84
14 mu_1       0.5      0.971     2.18e- 2  1.87e-19      6.84
15 mu_1       0.6      1.11      6.73e- 2  2.40e-17     11.7 
16 mu_1       0.7      0.874     1.74e- 1  6.84e-25      5.43
17 mu_1       0.8      1.44      1.31e- 2  1.23e-35     11.2 
18 mu_1       0.9      1.33      2.87e- 7  3.81e-54     22.4 
19 mu_0       0.1     13.2       7.34e-30  4.47e-85   1310.  
20 mu_0       0.2      1.11      4.04e-16  4.91e-57     67.8 
21 mu_0       0.3      1.31      3.41e- 9  9.00e-41     26.1 
22 mu_0       0.4      0.915     7.25e- 5  2.31e-29      8.87
23 mu_0       0.5      0.952     2.79e- 2  1.19e-20      6.06
24 mu_0       0.6      1.12      6.05e- 2  5.58e-16     12.4 
25 mu_0       0.7      0.881     1.42e- 1  2.47e-23      5.34
26 mu_0       0.8      1.33      2.83e- 2  7.65e-34      8.44
27 mu_0       0.9      1.26      1.63e- 6  5.31e-52     16.5 
[1] "Total run time was 407.078 seconds"
