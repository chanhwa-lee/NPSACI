
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7453"
[1] "cluster size dist'n: "

 50  51  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  4   3   3   2   1   1   2   7   1   2   1   1   1   1   4   1   1   3   3   3 
 72  73  74  75  76  78  79  80  81  82  84  86  87  88  90  91  92  93  94  95 
  4   5   1   4   1   2   2   1   1   1   1   1   2   2   4   4   2   2   3   1 
 96  97  98  99 100 
  2   3   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03325 0.33860 0.60256 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4332 3121 
[1] "treatment indicator table: "

   0    1 
2733 4720 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3706
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3747
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 369.726 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.543 0.278 
 2 mu         0.1   0.2 0.710 0.343 
 3 mu         0.1   0.3 0.833 0.386 
 4 mu         0.1   0.4 0.874 0.417 
 5 mu         0.1   0.5 0.921 0.433 
 6 mu         0.2   0.1 0.345 0.0454
 7 mu         0.2   0.2 0.467 0.0592
 8 mu         0.2   0.3 0.557 0.0669
 9 mu         0.2   0.4 0.583 0.0645
10 mu         0.2   0.5 0.622 0.0670
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.58         0.286  3.79e-10     69.8 
 2 mu         0.2      1.14         0.935  2.55e- 3      5.25
 3 mu         0.3      0.980        0.981  1.42e- 1      3.95
 4 mu         0.4      1.00         0.982  4.46e- 1      1.71
 5 mu         0.5      0.993        0.977  5.32e- 1      1.42
 6 mu         0.6      0.998        0.992  6.31e- 1      1.50
 7 mu         0.7      1.02         1.03   6.62e- 1      1.41
 8 mu         0.8      0.989        0.988  5.81e- 1      1.50
 9 mu         0.9      1.04         1.02   1.80e- 1      2.19
10 mu_1       0.1      1.73         0.453  1.31e- 9     71.4 
11 mu_1       0.2      1.10         0.981  4.44e- 3      4.95
12 mu_1       0.3      0.982        0.985  1.61e- 1      3.77
13 mu_1       0.4      1.00         0.984  4.13e- 1      1.67
14 mu_1       0.5      0.994        0.983  5.66e- 1      1.44
15 mu_1       0.6      0.999        0.992  6.28e- 1      1.50
16 mu_1       0.7      1.02         1.03   6.52e- 1      1.40
17 mu_1       0.8      0.989        0.987  5.96e- 1      1.52
18 mu_1       0.9      1.05         1.03   1.72e- 1      2.23
19 mu_0       0.1      1.57         0.268  2.76e-10     69.6 
20 mu_0       0.2      1.15         0.924  2.08e- 3      5.63
21 mu_0       0.3      0.980        0.960  1.34e- 1      4.03
22 mu_0       0.4      1.00         0.979  4.36e- 1      1.73
23 mu_0       0.5      0.993        0.983  4.99e- 1      1.41
24 mu_0       0.6      0.996        0.986  6.36e- 1      1.51
25 mu_0       0.7      1.02         1.02   6.58e- 1      1.44
26 mu_0       0.8      0.992        1.00   5.22e- 1      1.47
27 mu_0       0.9      1.02         0.988  2.50e- 1      2.20
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.00117      1.92e-29  2.05e-84    0.0558
 2 mu         0.2   0.816        5.37e-16  2.25e-56   40.5   
 3 mu         0.3   2.45         8.70e- 9  4.12e-40   75.5   
 4 mu         0.4   1.20         1.51e- 4  1.06e-28   18.1   
 5 mu         0.5   0.959        4.48e- 2  5.47e-20    7.92  
 6 mu         0.6   1.04         3.62e- 1  4.97e-13    8.46  
 7 mu         0.7   1.26         2.81e- 1  6.46e-13    7.71  
 8 mu         0.8   0.888        2.24e- 2  6.52e-22    7.14  
 9 mu         0.9   1.73         1.81e- 7  2.68e-38   48.5   
10 mu_1       0.1   0.00308      1.45e-28  1.94e-83    0.148 
11 mu_1       0.2   1.10         1.77e-15  1.07e-55   53.6   
12 mu_1       0.3   2.39         1.82e- 8  1.30e-39   66.6   
13 mu_1       0.4   1.14         2.36e- 4  2.51e-28   17.2   
14 mu_1       0.5   0.944        5.81e- 2  1.04e-19    7.80  
15 mu_1       0.6   1.06         3.24e- 1  7.87e-13    8.58  
16 mu_1       0.7   1.26         2.69e- 1  2.45e-13    7.83  
17 mu_1       0.8   0.877        1.77e- 2  2.17e-22    7.46  
18 mu_1       0.9   1.76         1.33e- 7  7.93e-39   49.9   
19 mu_0       0.1   0.000954     5.24e-30  1.15e-85    0.0456
20 mu_0       0.2   0.745        2.23e-16  1.42e-57   37.2   
21 mu_0       0.3   2.48         4.19e- 9  2.97e-41   79.3   
22 mu_0       0.4   1.25         9.37e- 5  8.91e-30   19.0   
23 mu_0       0.5   0.975        3.77e- 2  5.53e-21    8.05  
24 mu_0       0.6   1.02         3.97e- 1  6.28e-14    8.29  
25 mu_0       0.7   1.26         3.59e- 1  1.58e-12    7.42  
26 mu_0       0.8   0.933        3.69e- 2  2.39e-21    6.63  
27 mu_0       0.9   1.43         6.13e- 7  1.97e-37   36.1   
[1] "Total run time was 373.382 seconds"
