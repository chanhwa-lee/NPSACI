
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7523"
[1] "cluster size dist'n: "

50 51 52 53 54 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 
 1  2  2  2  2  3  1  1  1  2  1  1  2  1  1  3  2  3  1  5  3  4  6  2  3  3 
79 80 82 83 84 86 87 88 89 90 91 92 94 95 96 97 99 
 1  5  3  2  2  4  3  3  2  1  4  1  2  1  1  3  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0325  0.3390  0.6095  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4279 3244 
[1] "treatment indicator table: "

   0    1 
3164 4359 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3721
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 368.277 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.369 0.0847
 2 mu         0.1   0.2 0.421 0.109 
 3 mu         0.1   0.3 0.453 0.108 
 4 mu         0.1   0.4 0.524 0.116 
 5 mu         0.1   0.5 0.546 0.117 
 6 mu         0.2   0.1 0.362 0.0559
 7 mu         0.2   0.2 0.424 0.0780
 8 mu         0.2   0.3 0.473 0.0716
 9 mu         0.2   0.4 0.544 0.0740
10 mu         0.2   0.5 0.579 0.0721
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.925        0.542 0.0000171     13.3 
 2 mu         0.2      1.09         0.931 0.0518         7.23
 3 mu         0.3      1.03         0.974 0.459          2.13
 4 mu         0.4      1.02         0.990 0.469          2.28
 5 mu         0.5      1.00         0.998 0.689          1.51
 6 mu         0.6      0.998        0.981 0.660          1.54
 7 mu         0.7      1.00         0.987 0.516          1.59
 8 mu         0.8      0.970        0.979 0.357          1.63
 9 mu         0.9      1.04         0.982 0.157          2.93
10 mu_1       0.1      0.936        0.631 0.0000443      8.36
11 mu_1       0.2      1.10         0.941 0.0846         7.60
12 mu_1       0.3      1.03         0.971 0.452          2.14
13 mu_1       0.4      1.02         0.998 0.467          2.17
14 mu_1       0.5      1.00         0.994 0.663          1.52
15 mu_1       0.6      0.998        0.980 0.657          1.54
16 mu_1       0.7      1.00         0.997 0.514          1.60
17 mu_1       0.8      0.969        0.985 0.345          1.64
18 mu_1       0.9      1.04         0.993 0.148          3.02
19 mu_0       0.1      0.924        0.528 0.0000141     13.9 
20 mu_0       0.2      1.09         0.912 0.0437         7.13
21 mu_0       0.3      1.03         0.974 0.461          2.19
22 mu_0       0.4      1.02         0.980 0.471          2.35
23 mu_0       0.5      1.00         1.00  0.697          1.50
24 mu_0       0.6      0.998        0.990 0.666          1.54
25 mu_0       0.7      1.00         0.984 0.522          1.58
26 mu_0       0.8      0.974        0.969 0.403          1.63
27 mu_0       0.9      1.04         1.00  0.202          2.24
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.770     1.04e-22  2.66e-74     76.7 
 2 mu         0.2      1.83      1.93e-11  4.51e-50    127.  
 3 mu         0.3      1.69      9.43e- 6  5.55e-36     29.7 
 4 mu         0.4      1.13      8.15e- 3  4.60e-26     14.9 
 5 mu         0.5      0.978     2.03e- 1  1.89e-18      8.99
 6 mu         0.6      1.07      2.95e- 1  9.41e-17      6.82
 7 mu         0.7      1.23      7.38e- 2  3.04e-26      8.90
 8 mu         0.8      1.02      2.28e- 3  3.64e-40     12.6 
 9 mu         0.9      1.61      9.19e-10  1.10e-64     49.9 
10 mu_1       0.1      1.17      6.54e-22  2.56e-73    116.  
11 mu_1       0.2      1.67      5.69e-11  2.18e-49     96.1 
12 mu_1       0.3      1.70      1.99e- 5  1.78e-35     32.6 
13 mu_1       0.4      1.10      1.29e- 2  1.11e-25     12.3 
14 mu_1       0.5      0.972     1.75e- 1  3.64e-18      8.34
15 mu_1       0.6      1.08      2.96e- 1  2.38e-17      7.17
16 mu_1       0.7      1.22      7.20e- 2  6.58e-27      9.36
17 mu_1       0.8      1.02      1.69e- 3  6.89e-41     12.8 
18 mu_1       0.9      1.60      6.12e-10  1.85e-65     49.7 
19 mu_0       0.1      0.725     4.26e-23  1.05e-75     72.3 
20 mu_0       0.2      1.87      1.13e-11  2.02e-51    135.  
21 mu_0       0.3      1.69      4.93e- 6  2.83e-37     29.8 
22 mu_0       0.4      1.15      4.96e- 3  2.74e-27     16.7 
23 mu_0       0.5      0.984     1.74e- 1  1.35e-19      9.64
24 mu_0       0.6      1.04      2.92e- 1  2.00e-16      6.30
25 mu_0       0.7      1.24      8.96e- 2  8.60e-26      7.82
26 mu_0       0.8      1.02      7.20e- 4  1.54e-39     11.8 
27 mu_0       0.9      1.69      3.69e- 9  9.34e-64     55.3 
[1] "Total run time was 371.594 seconds"
