
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7563"
[1] "cluster size dist'n: "

 50  51  52  53  55  56  58  59  60  62  63  64  65  66  67  68  69  70  71  72 
  2   1   4   1   3   1   3   4   1   1   2   5   3   2   2   2   1   1   1   2 
 73  74  75  76  77  78  79  81  82  84  86  88  89  90  91  92  93  95  96  97 
  2   1   2   2   9   2   1   1   2   4   2   2   3   3   5   2   3   4   1   1 
 98  99 100 
  2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03454 0.33402 0.59442 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4522 3041 
[1] "treatment indicator table: "

   0    1 
2776 4787 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3755
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3808
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 610.298 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.397 0.126 
 2 mu         0.1   0.2 0.439 0.133 
 3 mu         0.1   0.3 0.491 0.123 
 4 mu         0.1   0.4 0.575 0.135 
 5 mu         0.1   0.5 0.593 0.135 
 6 mu         0.2   0.1 0.343 0.0618
 7 mu         0.2   0.2 0.432 0.0895
 8 mu         0.2   0.3 0.501 0.0775
 9 mu         0.2   0.4 0.575 0.0759
10 mu         0.2   0.5 0.617 0.0758
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.985       0.106  0.0000000109      17.1 
 2 mu         0.2      1.14        0.881  0.00238            7.95
 3 mu         0.3      1.04        0.995  0.169              2.72
 4 mu         0.4      0.996       1.00   0.455              1.63
 5 mu         0.5      1.02        1.00   0.623              1.63
 6 mu         0.6      1.02        1.01   0.724              1.43
 7 mu         0.7      1.01        1.02   0.527              1.43
 8 mu         0.8      0.984       0.979  0.616              1.39
 9 mu         0.9      0.932       0.908  0.134              2.04
10 mu_1       0.1      1.04        0.211  0.0000000378      16.7 
11 mu_1       0.2      1.13        0.937  0.00414            7.43
12 mu_1       0.3      1.03        1.01   0.204              2.54
13 mu_1       0.4      0.996       0.977  0.451              1.59
14 mu_1       0.5      1.02        1.00   0.641              1.65
15 mu_1       0.6      1.02        1.01   0.724              1.39
16 mu_1       0.7      1.01        1.01   0.517              1.41
17 mu_1       0.8      0.984       0.988  0.604              1.39
18 mu_1       0.9      0.929       0.902  0.127              2.06
19 mu_0       0.1      0.979       0.0953 0.00000000791     17.1 
20 mu_0       0.2      1.14        0.899  0.00193            8.08
21 mu_0       0.3      1.05        0.979  0.154              2.79
22 mu_0       0.4      0.996       1.00   0.457              1.65
23 mu_0       0.5      1.02        0.984  0.605              1.61
24 mu_0       0.6      1.02        1.01   0.716              1.48
25 mu_0       0.7      1.01        1.02   0.553              1.47
26 mu_0       0.8      0.987       0.970  0.635              1.38
27 mu_0       0.9      0.954       0.917  0.190              1.88
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     11.4       4.88e-27  1.27e-68   1139.  
 2 mu         0.2      2.10      3.10e-15  1.07e-43    174.  
 3 mu         0.3      1.07      2.21e- 8  1.74e-29     36.1 
 4 mu         0.4      0.840     1.56e- 4  4.26e-20      9.22
 5 mu         0.5      1.00      3.99e- 2  1.35e-13      6.87
 6 mu         0.6      1.08      2.90e- 1  3.00e-20      8.57
 7 mu         0.7      1.01      2.59e- 1  3.84e-30      9.89
 8 mu         0.8      1.42      3.13e- 2  2.06e-44     12.1 
 9 mu         0.9      1.31      1.22e- 7  3.08e-69     20.8 
10 mu_1       0.1     11.1       3.19e-26  1.10e-67   1103.  
11 mu_1       0.2      2.03      1.09e-14  4.62e-43    178.  
12 mu_1       0.3      1.04      4.75e- 8  5.04e-29     36.6 
13 mu_1       0.4      0.846     2.67e- 4  9.82e-20     10.1 
14 mu_1       0.5      1.02      5.51e- 2  1.55e-13      6.05
15 mu_1       0.6      1.08      2.54e- 1  4.83e-21      8.13
16 mu_1       0.7      1.01      2.59e- 1  5.31e-31      9.73
17 mu_1       0.8      1.44      2.57e- 2  2.50e-45     12.6 
18 mu_1       0.9      1.29      8.34e- 8  3.31e-70     21.3 
19 mu_0       0.1     11.5       1.87e-27  1.88e-69   1144.  
20 mu_0       0.2      2.12      1.20e-15  1.77e-44    173.  
21 mu_0       0.3      1.08      1.12e- 8  3.30e-30     35.9 
22 mu_0       0.4      0.836     8.23e- 5  5.46e-21      9.55
23 mu_0       0.5      0.989     3.13e- 2  2.08e-14      7.70
24 mu_0       0.6      1.09      2.96e- 1  6.77e-20      9.23
25 mu_0       0.7      1.02      2.65e- 1  1.16e-29     10.3 
26 mu_0       0.8      1.32      5.38e- 2  9.32e-44     12.6 
27 mu_0       0.9      1.49      4.71e- 7  2.78e-68     19.3 
[1] "Total run time was 613.974 seconds"
