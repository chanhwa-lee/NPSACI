
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7407"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70 
  1   2   3   2   3   1   3   2   3   1   1   2   4   2   2   3   1   1   4   1 
 71  72  73  75  76  78  79  80  81  82  83  84  85  86  87  88  90  91  92  93 
  2   1   4   3   3   3   3   1   5   4   2   1   2   1   3   2   2   3   1   2 
 94  95  96  97  99 100 
  2   1   3   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04413 0.37846 0.64312 1.00000 6.37015 
[1] "event indicator table: "

   0    1 
4395 3012 
[1] "treatment indicator table: "

   0    1 
2807 4600 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3687
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3720
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.313 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.238 0.0759
 2 mu         0.1   0.2 0.305 0.0935
 3 mu         0.1   0.3 0.339 0.131 
 4 mu         0.1   0.4 0.430 0.123 
 5 mu         0.1   0.5 0.473 0.139 
 6 mu         0.2   0.1 0.232 0.0681
 7 mu         0.2   0.2 0.298 0.0832
 8 mu         0.2   0.3 0.348 0.130 
 9 mu         0.2   0.4 0.420 0.117 
10 mu         0.2   0.5 0.464 0.134 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.939        0.230 0.000000311      9.22
 2 mu         0.2      0.940        0.823 0.0170           2.77
 3 mu         0.3      1.00         0.957 0.232            1.93
 4 mu         0.4      0.992        0.947 0.452            1.75
 5 mu         0.5      0.988        0.972 0.590            1.42
 6 mu         0.6      0.996        1.01  0.659            1.51
 7 mu         0.7      0.971        0.978 0.591            1.41
 8 mu         0.8      0.986        0.990 0.497            1.39
 9 mu         0.9      1.04         1.04  0.254            2.26
10 mu_1       0.1      0.923        0.373 0.000000981      5.51
11 mu_1       0.2      0.935        0.802 0.0277           2.56
12 mu_1       0.3      1.01         0.988 0.261            1.85
13 mu_1       0.4      0.989        0.930 0.462            1.70
14 mu_1       0.5      0.989        0.986 0.611            1.43
15 mu_1       0.6      0.996        1.01  0.649            1.49
16 mu_1       0.7      0.970        0.979 0.590            1.41
17 mu_1       0.8      0.987        0.991 0.492            1.40
18 mu_1       0.9      1.04         1.04  0.242            2.29
19 mu_0       0.1      0.941        0.211 0.000000236      9.63
20 mu_0       0.2      0.941        0.813 0.0143           2.83
21 mu_0       0.3      0.996        0.944 0.220            1.97
22 mu_0       0.4      0.994        0.950 0.445            1.80
23 mu_0       0.5      0.987        0.969 0.569            1.41
24 mu_0       0.6      0.995        1.01  0.674            1.53
25 mu_0       0.7      0.973        0.969 0.594            1.41
26 mu_0       0.8      0.981        0.977 0.519            1.41
27 mu_0       0.9      1.03         1.01  0.364            2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00960     5.75e-26  7.49e-74     0.939
 2 mu         0.2    0.603       1.48e-13  4.01e-48    25.6  
 3 mu         0.3    0.818       8.03e- 7  2.52e-33    28.7  
 4 mu         0.4    1.10        4.63e- 3  4.66e-23    19.2  
 5 mu         0.5    1.38        1.77e- 1  2.44e-15    10.3  
 6 mu         0.6    1.57        3.77e- 1  2.87e-11    17.7  
 7 mu         0.7    1.38        1.45e- 1  3.90e-18    11.3  
 8 mu         0.8    1.32        4.09e- 3  2.33e-28    14.6  
 9 mu         0.9    2.21        2.09e- 9  1.15e-48    34.4  
10 mu_1       0.1    0.0186      4.10e-25  6.78e-73     1.81 
11 mu_1       0.2    0.704       4.63e-13  1.82e-47    31.9  
12 mu_1       0.3    0.796       1.62e- 6  7.61e-33    23.9  
13 mu_1       0.4    1.15        6.48e- 3  1.06e-22    18.8  
14 mu_1       0.5    1.40        1.54e- 1  4.42e-15    10.3  
15 mu_1       0.6    1.56        4.27e- 1  9.19e-12    16.9  
16 mu_1       0.7    1.39        1.46e- 1  1.07e-18    11.5  
17 mu_1       0.8    1.32        3.17e- 3  5.59e-29    14.1  
18 mu_1       0.9    2.19        1.39e- 9  3.20e-49    34.0  
19 mu_0       0.1    0.00860     1.85e-26  7.80e-75     0.843
20 mu_0       0.2    0.578       7.29e-14  4.70e-49    24.0  
21 mu_0       0.3    0.828       4.52e- 7  3.38e-34    30.8  
22 mu_0       0.4    1.07        2.99e- 3  7.29e-24    19.6  
23 mu_0       0.5    1.35        1.64e- 1  4.57e-16    10.3  
24 mu_0       0.6    1.58        3.37e- 1  5.79e-11    18.9  
25 mu_0       0.7    1.38        1.92e- 1  1.05e-17    10.8  
26 mu_0       0.8    1.30        7.74e- 3  9.40e-28    16.9  
27 mu_0       0.9    2.37        8.72e- 9  8.65e-48    38.2  
[1] "Total run time was 421.997 seconds"
