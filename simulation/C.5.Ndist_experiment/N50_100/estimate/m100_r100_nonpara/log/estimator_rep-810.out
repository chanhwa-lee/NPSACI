
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7207"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 64 65 66 67 68 69 70 71 72 73 75 76 77 
 2  2  1  2  3  2  4  3  5  1  2  2  3  2  8  1  3  1  2  4  4  1  1  2  1  1 
79 80 81 82 83 84 85 86 87 88 89 91 92 94 95 96 99 
 2  3  1  2  3  2  1  1  3  1  2  1  3  3  4  4  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03738 0.35615 0.61168 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4250 2957 
[1] "treatment indicator table: "

   0    1 
2620 4587 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3731
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3476
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 340.969 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.491 0.0984
 2 mu         0.1   0.2 0.613 0.126 
 3 mu         0.1   0.3 0.637 0.116 
 4 mu         0.1   0.4 0.644 0.106 
 5 mu         0.1   0.5 0.658 0.106 
 6 mu         0.2   0.1 0.453 0.0722
 7 mu         0.2   0.2 0.560 0.0913
 8 mu         0.2   0.3 0.599 0.0793
 9 mu         0.2   0.4 0.613 0.0626
10 mu         0.2   0.5 0.637 0.0567
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.06         0.325 0.00000648     11.3 
 2 mu         0.2      1.06         0.949 0.0393          4.24
 3 mu         0.3      0.977        0.920 0.204           2.81
 4 mu         0.4      0.996        0.988 0.478           1.84
 5 mu         0.5      1.04         0.989 0.625           1.87
 6 mu         0.6      1.02         1.01  0.668           1.49
 7 mu         0.7      1.00         0.975 0.589           1.76
 8 mu         0.8      0.985        0.980 0.537           1.52
 9 mu         0.9      0.975        0.974 0.327           1.84
10 mu_1       0.1      0.973        0.492 0.0000179       5.45
11 mu_1       0.2      1.05         0.980 0.0552          3.65
12 mu_1       0.3      0.976        0.928 0.208           2.81
13 mu_1       0.4      0.999        0.994 0.511           1.81
14 mu_1       0.5      1.04         0.993 0.613           1.87
15 mu_1       0.6      1.02         1.00  0.672           1.51
16 mu_1       0.7      1.00         0.985 0.585           1.77
17 mu_1       0.8      0.983        0.983 0.524           1.51
18 mu_1       0.9      0.976        0.969 0.327           1.85
19 mu_0       0.1      1.07         0.304 0.00000521     12.0 
20 mu_0       0.2      1.06         0.931 0.0354          4.39
21 mu_0       0.3      0.978        0.908 0.202           2.81
22 mu_0       0.4      0.993        0.985 0.455           1.85
23 mu_0       0.5      1.03         1.00  0.637           1.87
24 mu_0       0.6      1.02         1.02  0.660           1.47
25 mu_0       0.7      1.00         0.983 0.588           1.73
26 mu_0       0.8      0.990        0.978 0.579           1.60
27 mu_0       0.9      0.969        0.942 0.321           1.74
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.271     2.01e-26  4.08e-74      19.8
 2 mu         0.2      1.75      2.77e-14  2.19e-48      72.6
 3 mu         0.3      0.812     1.10e- 7  3.60e-34      11.3
 4 mu         0.4      0.806     5.89e- 4  9.45e-25      29.0
 5 mu         0.5      0.986     4.92e- 2  1.58e-17      13.7
 6 mu         0.6      1.50      3.21e- 1  1.01e-11      15.6
 7 mu         0.7      1.37      3.06e- 1  3.12e-17      17.9
 8 mu         0.8      0.937     4.07e- 2  7.88e-28      13.5
 9 mu         0.9      1.18      1.79e- 6  6.34e-48      14.0
10 mu_1       0.1      0.463     1.37e-25  3.70e-73      32.4
11 mu_1       0.2      1.65      8.75e-14  9.92e-48      67.8
12 mu_1       0.3      0.820     2.43e- 7  1.15e-33      13.6
13 mu_1       0.4      0.771     9.01e- 4  2.27e-24      27.0
14 mu_1       0.5      1.04      5.79e- 2  3.05e-17      15.2
15 mu_1       0.6      1.50      3.56e- 1  1.63e-11      14.4
16 mu_1       0.7      1.35      2.87e- 1  8.32e-18      18.3
17 mu_1       0.8      0.933     3.30e- 2  2.56e-28      13.6
18 mu_1       0.9      1.19      1.29e- 6  1.83e-48      13.8
19 mu_0       0.1      0.249     7.09e-27  4.25e-75      18.3
20 mu_0       0.2      1.77      1.28e-14  2.57e-49      73.8
21 mu_0       0.3      0.808     5.35e- 8  1.93e-35      10.7
22 mu_0       0.4      0.829     3.82e- 4  5.90e-26      30.3
23 mu_0       0.5      0.930     3.46e- 2  1.19e-18      12.2
24 mu_0       0.6      1.49      3.20e- 1  9.50e-13      17.4
25 mu_0       0.7      1.42      3.28e- 1  8.45e-17      16.8
26 mu_0       0.8      0.953     5.24e- 2  2.91e-27      13.6
27 mu_0       0.9      1.13      6.03e- 6  4.69e-47      15.5
[1] "Total run time was 344.338 seconds"
