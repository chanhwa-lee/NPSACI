
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7268"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  62  63  64  65  66  67  68  70  71 
  1   4   6   2   1   5   1   3   2   1   1   2   2   4   2   2   3   3   1   4 
 72  73  74  75  76  77  78  80  81  82  83  84  87  88  89  90  91  92  93  94 
  2   2   3   3   2   1   2   3   3   1   1   3   1   1   2   2   1   3   3   1 
 96  97  98  99 100 
  1   2   1   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03415 0.33337 0.59502 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4332 2936 
[1] "treatment indicator table: "

   0    1 
2889 4379 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3602
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3666
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 436.787 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.422 0.0879
 2 mu         0.1   0.2 0.493 0.0722
 3 mu         0.1   0.3 0.526 0.0629
 4 mu         0.1   0.4 0.551 0.0606
 5 mu         0.1   0.5 0.595 0.0656
 6 mu         0.2   0.1 0.349 0.0546
 7 mu         0.2   0.2 0.428 0.0411
 8 mu         0.2   0.3 0.468 0.0340
 9 mu         0.2   0.4 0.492 0.0287
10 mu         0.2   0.5 0.539 0.0307
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.994        0.710 0.00000253      5.88
 2 mu         0.2      0.953        0.939 0.110           2.50
 3 mu         0.3      0.984        0.972 0.147           1.57
 4 mu         0.4      1.02         1.01  0.558           1.48
 5 mu         0.5      1.01         1.01  0.605           1.34
 6 mu         0.6      0.996        0.988 0.665           1.41
 7 mu         0.7      0.983        0.994 0.666           1.31
 8 mu         0.8      0.969        0.958 0.435           1.55
 9 mu         0.9      0.970        0.948 0.237           1.94
10 mu_1       0.1      1.02         0.855 0.00000701      5.72
11 mu_1       0.2      0.939        0.947 0.159           2.41
12 mu_1       0.3      0.990        0.983 0.175           1.59
13 mu_1       0.4      1.03         1.01  0.583           1.49
14 mu_1       0.5      1.01         1.01  0.611           1.37
15 mu_1       0.6      0.995        0.993 0.660           1.42
16 mu_1       0.7      0.983        0.998 0.667           1.30
17 mu_1       0.8      0.969        0.958 0.431           1.55
18 mu_1       0.9      0.970        0.945 0.227           1.98
19 mu_0       0.1      0.990        0.679 0.00000203      5.89
20 mu_0       0.2      0.956        0.953 0.0980          2.57
21 mu_0       0.3      0.981        0.979 0.134           1.58
22 mu_0       0.4      1.02         1.01  0.541           1.48
23 mu_0       0.5      1.02         1.01  0.599           1.33
24 mu_0       0.6      0.997        0.996 0.631           1.40
25 mu_0       0.7      0.984        0.983 0.665           1.34
26 mu_0       0.8      0.971        0.972 0.405           1.58
27 mu_0       0.9      0.967        0.955 0.258           1.74
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00141     3.21e-23  4.31e-73    0.0762
 2 mu         0.2    0.589       1.61e-12  3.65e-48   36.8   
 3 mu         0.3    1.29        1.66e- 6  8.88e-34   20.6   
 4 mu         0.4    1.05        5.46e- 3  4.79e-24    9.37  
 5 mu         0.5    1.23        1.32e- 1  8.37e-17    9.45  
 6 mu         0.6    1.32        2.74e- 1  7.64e-12   10.9   
 7 mu         0.7    1.06        2.32e- 1  5.44e-20   12.0   
 8 mu         0.8    1.41        1.00e- 2  2.83e-32   17.0   
 9 mu         0.9    1.73        2.03e- 8  2.50e-54   37.8   
10 mu_1       0.1    0.00329     2.03e-22  3.98e-72    0.169 
11 mu_1       0.2    0.712       5.52e-12  1.69e-47   40.9   
12 mu_1       0.3    1.30        3.40e- 6  2.73e-33   20.3   
13 mu_1       0.4    1.05        8.50e- 3  1.14e-23    8.75  
14 mu_1       0.5    1.24        1.39e- 1  1.59e-16    8.78  
15 mu_1       0.6    1.32        2.51e- 1  2.83e-12   10.4   
16 mu_1       0.7    1.05        2.48e- 1  1.73e-20   11.9   
17 mu_1       0.8    1.43        7.82e- 3  7.87e-33   17.8   
18 mu_1       0.9    1.75        1.42e- 8  6.18e-55   37.3   
19 mu_0       0.1    0.00120     1.32e-23  3.68e-74    0.0658
20 mu_0       0.2    0.559       6.34e-13  3.51e-49   35.8   
21 mu_0       0.3    1.28        9.10e- 7  9.76e-35   20.8   
22 mu_0       0.4    1.06        3.44e- 3  3.90e-25    9.78  
23 mu_0       0.5    1.22        1.43e- 1  8.17e-18   10.1   
24 mu_0       0.6    1.31        3.05e- 1  6.27e-12   11.6   
25 mu_0       0.7    1.08        2.39e- 1  1.41e-19   12.3   
26 mu_0       0.8    1.32        1.10e- 2  1.10e-31   14.1   
27 mu_0       0.9    1.61        7.55e- 8  1.95e-53   42.0   
[1] "Total run time was 440.276 seconds"
