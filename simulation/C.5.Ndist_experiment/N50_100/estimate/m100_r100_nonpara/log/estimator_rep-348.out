
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7539"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  58  59  60  61  63  64  65  66  67  68  69  70  71  72 
  2   3   1   4   4   1   7   4   1   2   1   2   2   1   1   1   1   3   2   1 
 73  74  75  76  77  79  80  81  82  83  85  87  88  89  90  91  92  93  94  95 
  2   2   2   1   2   2   3   1   5   1   3   1   1   1   6   1   1   5   2   5 
 96  97  98  99 100 
  1   1   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01466 0.28219 0.54801 0.93038 6.00000 
[1] "event indicator table: "

   0    1 
4533 3006 
[1] "treatment indicator table: "

   0    1 
3057 4482 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3842
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3697
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 496.765 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.244 0.0427
 2 mu         0.1   0.2 0.317 0.0569
 3 mu         0.1   0.3 0.359 0.0620
 4 mu         0.1   0.4 0.443 0.0767
 5 mu         0.1   0.5 0.461 0.0772
 6 mu         0.2   0.1 0.301 0.0262
 7 mu         0.2   0.2 0.371 0.0343
 8 mu         0.2   0.3 0.424 0.0361
 9 mu         0.2   0.4 0.496 0.0456
10 mu         0.2   0.5 0.530 0.0431
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.783        0.406 0.00000139      8.60
 2 mu         0.2      0.966        0.902 0.0609          2.46
 3 mu         0.3      0.999        1.02  0.194           2.03
 4 mu         0.4      0.960        0.943 0.440           1.68
 5 mu         0.5      0.941        0.927 0.530           1.50
 6 mu         0.6      0.996        0.994 0.545           1.73
 7 mu         0.7      1.01         1.00  0.468           1.80
 8 mu         0.8      1.02         1.02  0.497           1.63
 9 mu         0.9      1.08         0.966 0.258           2.71
10 mu_1       0.1      0.834        0.479 0.00000386      5.51
11 mu_1       0.2      0.961        0.898 0.0873          2.40
12 mu_1       0.3      1.00         1.00  0.209           2.02
13 mu_1       0.4      0.953        0.939 0.454           1.63
14 mu_1       0.5      0.944        0.908 0.527           1.48
15 mu_1       0.6      0.999        0.990 0.545           1.70
16 mu_1       0.7      1.01         0.997 0.460           1.81
17 mu_1       0.8      1.02         1.02  0.487           1.63
18 mu_1       0.9      1.08         0.942 0.240           2.75
19 mu_0       0.1      0.777        0.381 0.00000112      8.94
20 mu_0       0.2      0.967        0.907 0.0543          2.51
21 mu_0       0.3      0.997        1.01  0.188           2.04
22 mu_0       0.4      0.964        0.938 0.428           1.71
23 mu_0       0.5      0.938        0.911 0.533           1.51
24 mu_0       0.6      0.993        0.995 0.546           1.77
25 mu_0       0.7      1.01         1.01  0.487           1.77
26 mu_0       0.8      1.01         1.02  0.524           1.65
27 mu_0       0.9      1.07         0.962 0.284           2.39
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.72      6.93e-24  4.65e-88    202.  
 2 mu         0.2      3.37      4.71e-12  2.59e-59    140.  
 3 mu         0.3      1.03      6.74e- 6  1.39e-42     15.9 
 4 mu         0.4      0.706     1.07e- 2  8.66e-31     11.3 
 5 mu         0.5      1.19      5.58e- 2  1.01e-21     15.4 
 6 mu         0.6      1.22      2.58e- 1  2.06e-14      9.99
 7 mu         0.7      1.36      1.83e- 1  8.44e-20     14.9 
 8 mu         0.8      1.35      1.32e- 3  1.30e-31     31.6 
 9 mu         0.9      1.92      1.64e- 9  8.15e-53     53.4 
10 mu_1       0.1      3.80      4.15e-23  4.51e-87    281.  
11 mu_1       0.2      2.90      1.45e-11  1.26e-58     98.3 
12 mu_1       0.3      0.932     1.30e- 5  4.50e-42     16.1 
13 mu_1       0.4      0.730     9.78e- 3  2.10e-30     12.9 
14 mu_1       0.5      1.22      4.52e- 2  1.95e-21     16.3 
15 mu_1       0.6      1.20      2.25e- 1  3.33e-14      9.72
16 mu_1       0.7      1.37      1.45e- 1  2.67e-20     14.3 
17 mu_1       0.8      1.33      9.33e- 4  3.59e-32     30.8 
18 mu_1       0.9      1.97      1.00e- 9  2.00e-53     55.5 
19 mu_0       0.1      2.60      3.27e-24  1.57e-89    194.  
20 mu_0       0.2      3.49      2.27e-12  9.81e-61    150.  
21 mu_0       0.3      1.07      4.04e- 6  6.03e-44     16.5 
22 mu_0       0.4      0.689     8.73e- 3  4.37e-32     11.4 
23 mu_0       0.5      1.15      4.56e- 2  6.10e-23     14.7 
24 mu_0       0.6      1.24      2.68e- 1  1.56e-15     11.8 
25 mu_0       0.7      1.35      2.06e- 1  2.19e-19     16.3 
26 mu_0       0.8      1.42      2.13e- 3  5.06e-31     34.8 
27 mu_0       0.9      1.47      7.38e- 9  6.35e-52     35.3 
[1] "Total run time was 501.157 seconds"
