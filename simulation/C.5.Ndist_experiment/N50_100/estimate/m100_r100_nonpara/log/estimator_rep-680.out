
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7432"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  68  69  71 
  1   1   5   1   3   3   2   2   3   2   4   1   2   3   1   1   1   3   3   1 
 72  73  74  75  76  77  80  81  82  83  84  85  87  88  89  90  91  92  94  96 
  3   1   2   3   4   3   1   4   2   2   2   3   3   2   2   4   1   1   1   1 
 97  98  99 100 
  4   3   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03799 0.35922 0.62857 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4408 3024 
[1] "treatment indicator table: "

   0    1 
2722 4710 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3654
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3778
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 381.974 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.402 0.0905
 2 mu         0.1   0.2 0.477 0.129 
 3 mu         0.1   0.3 0.498 0.129 
 4 mu         0.1   0.4 0.575 0.108 
 5 mu         0.1   0.5 0.620 0.0924
 6 mu         0.2   0.1 0.376 0.0616
 7 mu         0.2   0.2 0.440 0.0854
 8 mu         0.2   0.3 0.467 0.0841
 9 mu         0.2   0.4 0.529 0.0664
10 mu         0.2   0.5 0.584 0.0557
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.02         0.618 0.00000933      4.52
 2 mu         0.2      1.01         0.986 0.104           2.61
 3 mu         0.3      1.02         0.997 0.170           2.17
 4 mu         0.4      1.00         0.995 0.403           1.63
 5 mu         0.5      1.00         1.00  0.547           1.59
 6 mu         0.6      1.02         1.01  0.539           1.52
 7 mu         0.7      1.01         1.00  0.720           1.38
 8 mu         0.8      0.976        0.980 0.585           1.51
 9 mu         0.9      0.966        0.948 0.127           2.34
10 mu_1       0.1      0.967        0.844 0.0000248       3.39
11 mu_1       0.2      1.02         0.962 0.146           2.62
12 mu_1       0.3      1.02         0.976 0.204           2.12
13 mu_1       0.4      1.00         1.00  0.419           1.63
14 mu_1       0.5      1.00         1.00  0.535           1.62
15 mu_1       0.6      1.02         1.01  0.539           1.53
16 mu_1       0.7      1.01         1.00  0.709           1.37
17 mu_1       0.8      0.975        0.981 0.582           1.51
18 mu_1       0.9      0.968        0.947 0.119           2.34
19 mu_0       0.1      1.03         0.590 0.00000761      4.65
20 mu_0       0.2      1.01         0.962 0.0930          2.63
21 mu_0       0.3      1.03         0.990 0.156           2.19
22 mu_0       0.4      1.00         0.986 0.392           1.63
23 mu_0       0.5      1.00         0.994 0.559           1.56
24 mu_0       0.6      1.01         1.01  0.540           1.52
25 mu_0       0.7      1.02         1.02  0.699           1.41
26 mu_0       0.8      0.981        0.975 0.597           1.58
27 mu_0       0.9      0.951        0.953 0.197           2.38
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.0102      1.39e-27  6.67e-87     0.794
 2 mu         0.2    0.773       4.01e-15  8.26e-60    36.0  
 3 mu         0.3    0.620       2.23e- 8  5.82e-44    21.5  
 4 mu         0.4    0.954       2.40e- 4  1.02e-32    16.6  
 5 mu         0.5    1.33        2.42e- 2  5.39e-24    16.0  
 6 mu         0.6    0.931       1.63e- 1  7.21e-17     7.21 
 7 mu         0.7    0.978       1.13e- 1  7.05e-23     8.76 
 8 mu         0.8    1.03        3.51e- 3  8.33e-36     7.60 
 9 mu         0.9    1.35        7.02e- 9  7.26e-59    29.9  
10 mu_1       0.1    0.0222      1.02e-26  6.67e-86     1.74 
11 mu_1       0.2    0.873       1.33e-14  4.13e-59    39.4  
12 mu_1       0.3    0.567       5.18e- 8  1.94e-43    20.5  
13 mu_1       0.4    1.04        3.75e- 4  2.56e-32    17.6  
14 mu_1       0.5    1.31        3.36e- 2  1.08e-23    15.2  
15 mu_1       0.6    0.915       2.03e- 1  1.20e-16     7.11 
16 mu_1       0.7    0.990       1.11e- 1  2.01e-23     9.04 
17 mu_1       0.8    1.03        2.60e- 3  2.08e-36     7.42 
18 mu_1       0.9    1.36        4.94e- 9  1.61e-59    30.3  
19 mu_0       0.1    0.00885     4.06e-28  0            0.689
20 mu_0       0.2    0.747       1.69e-15  0           35.2  
21 mu_0       0.3    0.642       9.60e- 9  0           21.9  
22 mu_0       0.4    0.898       1.50e- 4  0           16.0  
23 mu_0       0.5    1.35        2.49e- 2  0           16.8  
24 mu_0       0.6    0.956       1.55e- 1  0            7.35 
25 mu_0       0.7    0.950       1.28e- 1  0            8.11 
26 mu_0       0.8    1.04        5.45e- 3  0            8.35 
27 mu_0       0.9    1.28        1.77e- 8  0           26.2  
[1] "Total run time was 385.552 seconds"
