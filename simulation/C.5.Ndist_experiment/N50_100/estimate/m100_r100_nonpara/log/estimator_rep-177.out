
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7371"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 
 1  3  3  1  2  1  2  4  1  2  1  2  3  1  1  4  1  2  1  2  2  2  2  2  3  5 
76 77 79 80 81 83 84 85 86 87 89 90 91 92 93 95 96 97 98 99 
 3  2  7  2  2  2  3  3  3  2  2  3  1  2  2  1  1  3  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03811 0.36601 0.63777 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4336 3035 
[1] "treatment indicator table: "

   0    1 
2696 4675 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3757
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3614
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 398.829 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.331 0.0433
 2 mu         0.1   0.2 0.417 0.0514
 3 mu         0.1   0.3 0.487 0.0586
 4 mu         0.1   0.4 0.562 0.0830
 5 mu         0.1   0.5 0.583 0.0815
 6 mu         0.2   0.1 0.327 0.0468
 7 mu         0.2   0.2 0.416 0.0409
 8 mu         0.2   0.3 0.475 0.0442
 9 mu         0.2   0.4 0.546 0.0400
10 mu         0.2   0.5 0.580 0.0405
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.01         0.656  0.000189      3.76
 2 mu         0.2      1.11         1.05   0.145         2.99
 3 mu         0.3      1.04         1.05   0.385         2.04
 4 mu         0.4      1.00         0.996  0.568         1.60
 5 mu         0.5      0.994        1.00   0.608         1.56
 6 mu         0.6      0.988        0.998  0.682         1.37
 7 mu         0.7      0.988        0.968  0.664         1.41
 8 mu         0.8      1.01         1.02   0.553         1.61
 9 mu         0.9      0.978        0.988  0.261         2.04
10 mu_1       0.1      0.997        0.802  0.000451      3.69
11 mu_1       0.2      1.11         1.07   0.169         2.83
12 mu_1       0.3      1.03         1.03   0.398         2.05
13 mu_1       0.4      1.00         0.997  0.572         1.58
14 mu_1       0.5      0.995        1.01   0.630         1.59
15 mu_1       0.6      0.987        0.996  0.684         1.39
16 mu_1       0.7      0.990        0.978  0.650         1.41
17 mu_1       0.8      1.00         1.01   0.542         1.62
18 mu_1       0.9      0.979        0.986  0.264         2.09
19 mu_0       0.1      1.01         0.631  0.000160      3.76
20 mu_0       0.2      1.11         1.04   0.139         3.04
21 mu_0       0.3      1.04         1.05   0.380         2.03
22 mu_0       0.4      1.00         0.996  0.565         1.61
23 mu_0       0.5      0.994        0.994  0.586         1.53
24 mu_0       0.6      0.989        0.998  0.663         1.37
25 mu_0       0.7      0.984        0.964  0.658         1.41
26 mu_0       0.8      1.01         1.03   0.594         1.57
27 mu_0       0.9      0.968        0.967  0.230         1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.366     4.25e-25  3.48e-76     36.5 
 2 mu         0.2      0.133     9.15e-14  7.46e-51      5.50
 3 mu         0.3      0.490     1.07e- 7  3.55e-36     10.3 
 4 mu         0.4      0.906     4.90e- 4  6.85e-26      7.85
 5 mu         0.5      0.897     5.15e- 2  4.76e-18      7.93
 6 mu         0.6      0.949     1.24e- 1  1.15e-17      7.33
 7 mu         0.7      0.988     1.60e- 1  1.08e-25      6.76
 8 mu         0.8      1.25      2.68e- 2  2.92e-37      9.21
 9 mu         0.9      1.58      9.39e- 7  2.26e-57     27.5 
10 mu_1       0.1      0.341     2.69e-24  3.28e-75     34.1 
11 mu_1       0.2      0.163     3.12e-13  3.52e-50      6.79
12 mu_1       0.3      0.529     2.29e- 7  1.12e-35      9.36
13 mu_1       0.4      0.919     7.98e- 4  1.62e-25      7.94
14 mu_1       0.5      0.901     6.70e- 2  8.98e-18      7.83
15 mu_1       0.6      0.958     1.28e- 1  1.79e-18      7.73
16 mu_1       0.7      0.978     1.35e- 1  1.44e-26      6.67
17 mu_1       0.8      1.28      2.13e- 2  3.41e-38      9.62
18 mu_1       0.9      1.57      6.82e- 7  2.34e-58     28.1 
19 mu_0       0.1      0.368     1.74e-25  2.15e-77     36.8 
20 mu_0       0.2      0.125     3.64e-14  5.18e-52      5.17
21 mu_0       0.3      0.473     5.50e- 8  2.82e-37     10.8 
22 mu_0       0.4      0.897     2.84e- 4  6.34e-27      7.79
23 mu_0       0.5      0.894     4.26e- 2  5.28e-19      8.03
24 mu_0       0.6      0.935     1.19e- 1  2.61e-17      6.72
25 mu_0       0.7      1.01      1.06e- 1  3.27e-25      6.97
26 mu_0       0.8      1.15      4.53e- 2  1.33e-36      9.00
27 mu_0       0.9      1.69      3.25e- 6  2.05e-56     22.0 
[1] "Total run time was 402.233 seconds"
