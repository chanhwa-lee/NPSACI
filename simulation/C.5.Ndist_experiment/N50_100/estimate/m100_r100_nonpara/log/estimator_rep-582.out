
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7508"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  63  64  65  66  67  68  69  70  71 
  1   1   2   1   2   2   3   2   1   2   2   5   3   2   3   1   2   2   3   5 
 72  73  74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92 
  7   1   3   1   1   2   1   1   2   2   2   2   1   1   2   3   3   1   1   2 
 93  94  96  97  98  99 100 
  2   4   1   3   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03387 0.33529 0.59987 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4441 3067 
[1] "treatment indicator table: "

   0    1 
2785 4723 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3711
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3797
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 530.821 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.390 0.0895
 2 mu         0.1   0.2 0.464 0.106 
 3 mu         0.1   0.3 0.511 0.126 
 4 mu         0.1   0.4 0.539 0.120 
 5 mu         0.1   0.5 0.543 0.111 
 6 mu         0.2   0.1 0.385 0.0574
 7 mu         0.2   0.2 0.467 0.0689
 8 mu         0.2   0.3 0.516 0.0831
 9 mu         0.2   0.4 0.549 0.0776
10 mu         0.2   0.5 0.571 0.0717
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.874        0.507 0.000000454      6.62
 2 mu         0.2      1.01         0.849 0.0165           3.28
 3 mu         0.3      0.961        0.907 0.275            2.27
 4 mu         0.4      0.970        0.975 0.288            1.63
 5 mu         0.5      1.01         0.991 0.568            1.80
 6 mu         0.6      0.998        1.00  0.593            1.67
 7 mu         0.7      1.01         1.01  0.647            1.54
 8 mu         0.8      1.04         0.977 0.608            1.69
 9 mu         0.9      1.01         0.987 0.308            1.91
10 mu_1       0.1      0.945        0.508 0.00000146       8.77
11 mu_1       0.2      1.01         0.863 0.0273           2.59
12 mu_1       0.3      0.958        0.902 0.265            2.24
13 mu_1       0.4      0.974        0.982 0.290            1.64
14 mu_1       0.5      1.01         0.991 0.588            1.76
15 mu_1       0.6      0.998        0.992 0.577            1.66
16 mu_1       0.7      1.02         1.01  0.657            1.54
17 mu_1       0.8      1.04         0.984 0.596            1.72
18 mu_1       0.9      1.01         0.989 0.310            1.94
19 mu_0       0.1      0.866        0.491 0.000000343      6.38
20 mu_0       0.2      1.01         0.852 0.0138           3.56
21 mu_0       0.3      0.963        0.890 0.279            2.28
22 mu_0       0.4      0.966        0.977 0.286            1.63
23 mu_0       0.5      1.01         0.990 0.548            1.84
24 mu_0       0.6      0.999        0.995 0.590            1.68
25 mu_0       0.7      1.01         1.01  0.610            1.53
26 mu_0       0.8      1.04         0.998 0.655            1.58
27 mu_0       0.9      1.04         1.02  0.291            1.99
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.689     2.96e-27  7.11e-72     68.7 
 2 mu         0.2      1.69      6.52e-14  9.54e-47     98.7 
 3 mu         0.3      1.12      2.74e- 7  2.66e-32     15.9 
 4 mu         0.4      1.00      2.63e- 3  2.77e-22     14.0 
 5 mu         0.5      1.19      4.56e- 2  9.27e-15     13.6 
 6 mu         0.6      1.35      2.29e- 1  1.50e-12      8.74
 7 mu         0.7      1.18      1.21e- 1  6.87e-21     11.8 
 8 mu         0.8      1.13      1.50e- 2  2.09e-33      9.27
 9 mu         0.9      1.82      4.43e- 8  8.20e-56     25.3 
10 mu_1       0.1      1.06      1.82e-26  6.43e-71    106.  
11 mu_1       0.2      1.56      1.89e-13  4.31e-46     75.9 
12 mu_1       0.3      1.10      5.99e- 7  8.02e-32     17.3 
13 mu_1       0.4      1.00      4.09e- 3  6.26e-22     14.4 
14 mu_1       0.5      1.21      5.60e- 2  1.68e-14     13.7 
15 mu_1       0.6      1.36      2.16e- 1  5.31e-13      9.63
16 mu_1       0.7      1.16      1.04e- 1  2.08e-21     11.5 
17 mu_1       0.8      1.14      1.18e- 2  5.54e-34      9.14
18 mu_1       0.9      1.82      3.14e- 8  1.93e-56     25.7 
19 mu_0       0.1      0.648     1.27e-27  7.57e-73     64.6 
20 mu_0       0.2      1.72      3.42e-14  1.14e-47    104.  
21 mu_0       0.3      1.12      1.35e- 7  3.64e-33     15.4 
22 mu_0       0.4      1.01      1.66e- 3  4.42e-23     13.7 
23 mu_0       0.5      1.17      5.06e- 2  1.78e-15     13.9 
24 mu_0       0.6      1.35      1.52e- 1  2.96e-12      8.20
25 mu_0       0.7      1.21      1.53e- 1  1.80e-20     13.3 
26 mu_0       0.8      1.07      2.80e- 2  8.23e-33      9.75
27 mu_0       0.9      1.85      1.60e- 7  6.46e-55     22.7 
[1] "Total run time was 535.951 seconds"
