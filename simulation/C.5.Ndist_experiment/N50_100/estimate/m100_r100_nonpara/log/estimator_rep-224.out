
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7562"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  59  60  61  62  63  65  66  67  69  70  71  72  73 
  1   1   2   3   2   3   3   2   2   4   2   3   3   1   2   2   4   2   2   3 
 74  75  76  77  79  80  81  82  83  84  85  86  88  89  90  91  92  93  94  95 
  4   1   2   2   3   4   1   3   1   1   2   1   2   2   3   1   1   3   2   1 
 96  97  98  99 100 
  3   3   1   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03603 0.37219 0.63500 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4520 3042 
[1] "treatment indicator table: "

   0    1 
2651 4911 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3748
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 425.247 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.498 0.173 
 2 mu         0.1   0.2 0.556 0.201 
 3 mu         0.1   0.3 0.606 0.222 
 4 mu         0.1   0.4 0.667 0.245 
 5 mu         0.1   0.5 0.690 0.265 
 6 mu         0.2   0.1 0.344 0.0540
 7 mu         0.2   0.2 0.415 0.0522
 8 mu         0.2   0.3 0.449 0.0468
 9 mu         0.2   0.4 0.489 0.0501
10 mu         0.2   0.5 0.520 0.0541
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.14         0.412  6.76e-12     47.5 
 2 mu         0.2      0.835        0.852  8.25e- 5      3.55
 3 mu         0.3      0.889        0.888  5.47e- 2      2.41
 4 mu         0.4      0.926        0.911  3.28e- 1      1.92
 5 mu         0.5      0.968        0.938  5.41e- 1      1.59
 6 mu         0.6      0.971        0.932  6.31e- 1      1.50
 7 mu         0.7      0.978        0.969  5.24e- 1      1.54
 8 mu         0.8      1.04         1.03   4.20e- 1      1.56
 9 mu         0.9      0.999        0.956  3.56e- 1      2.19
10 mu_1       0.1      1.03         0.485  2.64e-11     32.6 
11 mu_1       0.2      0.850        0.893  1.62e- 4      3.59
12 mu_1       0.3      0.891        0.887  7.30e- 2      2.42
13 mu_1       0.4      0.929        0.899  3.17e- 1      1.97
14 mu_1       0.5      0.970        0.938  5.69e- 1      1.57
15 mu_1       0.6      0.971        0.947  6.20e- 1      1.47
16 mu_1       0.7      0.979        0.970  5.24e- 1      1.56
17 mu_1       0.8      1.04         1.03   4.14e- 1      1.57
18 mu_1       0.9      0.997        0.966  3.50e- 1      2.23
19 mu_0       0.1      1.15         0.427  4.58e-12     49.2 
20 mu_0       0.2      0.832        0.853  6.28e- 5      3.54
21 mu_0       0.3      0.888        0.893  4.68e- 2      2.41
22 mu_0       0.4      0.924        0.917  3.11e- 1      1.89
23 mu_0       0.5      0.965        0.952  5.14e- 1      1.60
24 mu_0       0.6      0.972        0.917  6.48e- 1      1.54
25 mu_0       0.7      0.976        0.965  5.23e- 1      1.49
26 mu_0       0.8      1.03         1.02   4.43e- 1      1.60
27 mu_0       0.9      1.02         1.01   4.08e- 1      1.83
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     10.6       6.87e-30  3.51e-82     525. 
 2 mu         0.2      8.02      2.01e-17  8.57e-55     285. 
 3 mu         0.3      0.788     9.24e-10  6.10e-39      27.5
 4 mu         0.4      0.887     6.27e- 5  1.50e-28      28.3
 5 mu         0.5      1.50      4.37e- 3  1.15e-20      13.8
 6 mu         0.6      1.40      1.61e- 1  5.96e-15      12.9
 7 mu         0.7      1.51      2.52e- 1  7.62e-23      40.5
 8 mu         0.8      1.70      4.64e- 2  2.69e-34      15.7
 9 mu         0.9      1.87      1.54e- 5  5.66e-56      26.8
10 mu_1       0.1     13.0       5.06e-29  3.29e-81     614. 
11 mu_1       0.2      6.72      6.83e-17  4.02e-54     265. 
12 mu_1       0.3      0.645     2.04e- 9  1.91e-38      17.1
13 mu_1       0.4      0.935     9.46e- 5  3.66e-28      26.0
14 mu_1       0.5      1.53      4.74e- 3  2.25e-20      13.9
15 mu_1       0.6      1.39      2.04e- 1  1.16e-15      15.0
16 mu_1       0.7      1.53      2.23e- 1  1.27e-23      40.2
17 mu_1       0.8      1.70      3.76e- 2  3.93e-35      15.7
18 mu_1       0.9      1.88      1.19e- 5  1.15e-56      28.2
19 mu_0       0.1     10.4       2.01e-30  2.39e-83     515. 
20 mu_0       0.2      8.35      8.38e-18  6.56e-56     291. 
21 mu_0       0.3      0.849     4.46e-10  2.93e-40      32.0
22 mu_0       0.4      0.855     3.60e- 5  5.88e-30      29.9
23 mu_0       0.5      1.48      2.24e- 3  5.42e-22      14.9
24 mu_0       0.6      1.41      1.19e- 1  1.62e-15      10.3
25 mu_0       0.7      1.47      3.19e- 1  2.24e-22      41.2
26 mu_0       0.8      1.71      3.78e- 2  1.19e-33      15.7
27 mu_0       0.9      1.81      4.56e- 5  4.63e-55      25.6
[1] "Total run time was 429.442 seconds"
