
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7486"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 76 
 1  1  1  3  1  1  5  1  2  3  2  2  3  2  1  3  2  1  2  2  4  1  3  1  2  3 
77 78 79 80 81 82 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
 2  1  2  4  2  4  1  1  3  1  6  1  1  1  3  2  1  3  2  2  2  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04212 0.36932 0.62163 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4437 3049 
[1] "treatment indicator table: "

   0    1 
2653 4833 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3637
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3849
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 458.788 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.442 0.0628
 2 mu         0.1   0.2 0.605 0.101 
 3 mu         0.1   0.3 0.651 0.0982
 4 mu         0.1   0.4 0.732 0.102 
 5 mu         0.1   0.5 0.756 0.0977
 6 mu         0.2   0.1 0.359 0.0458
 7 mu         0.2   0.2 0.503 0.0828
 8 mu         0.2   0.3 0.542 0.0755
 9 mu         0.2   0.4 0.617 0.0719
10 mu         0.2   0.5 0.639 0.0631
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.12         0.743 0.0000163      5.84
 2 mu         0.2      1.00         0.925 0.0459         2.62
 3 mu         0.3      1.00         1.02  0.354          1.83
 4 mu         0.4      1.00         0.983 0.529          1.63
 5 mu         0.5      0.976        0.984 0.556          1.46
 6 mu         0.6      0.999        1.02  0.672          1.35
 7 mu         0.7      1.00         1.02  0.652          1.28
 8 mu         0.8      0.983        0.977 0.564          1.46
 9 mu         0.9      0.991        1.00  0.404          1.76
10 mu_1       0.1      1.14         0.874 0.0000431      5.25
11 mu_1       0.2      0.996        0.962 0.0284         2.32
12 mu_1       0.3      1.01         0.992 0.413          1.87
13 mu_1       0.4      0.998        0.975 0.502          1.58
14 mu_1       0.5      0.976        0.988 0.551          1.42
15 mu_1       0.6      1.00         1.01  0.654          1.34
16 mu_1       0.7      1.00         1.02  0.645          1.29
17 mu_1       0.8      0.983        0.980 0.549          1.49
18 mu_1       0.9      0.992        1.00  0.409          1.77
19 mu_0       0.1      1.12         0.707 0.0000133      5.90
20 mu_0       0.2      1.00         0.933 0.0503         2.69
21 mu_0       0.3      1.00         1.02  0.328          1.81
22 mu_0       0.4      1.00         0.984 0.547          1.66
23 mu_0       0.5      0.975        0.978 0.560          1.50
24 mu_0       0.6      0.998        1.02  0.656          1.36
25 mu_0       0.7      1.00         1.01  0.670          1.27
26 mu_0       0.8      0.981        0.974 0.617          1.48
27 mu_0       0.9      0.985        0.959 0.357          1.65
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.432     7.19e-28  3.29e-72     36.8 
 2 mu         0.2      0.499     1.93e-15  7.85e-48     31.7 
 3 mu         0.3      0.487     1.54e- 8  9.69e-34     14.2 
 4 mu         0.4      1.25      1.67e- 4  6.76e-24     26.4 
 5 mu         0.5      0.936     6.71e- 2  2.00e-16      8.01
 6 mu         0.6      1.09      9.27e- 2  1.27e-14      7.67
 7 mu         0.7      1.27      1.90e- 1  3.36e-22     13.0 
 8 mu         0.8      1.52      1.02e- 1  3.05e-33      9.19
 9 mu         0.9      1.20      1.29e- 5  1.34e-52     25.9 
10 mu_1       0.1      0.595     4.25e-27  3.07e-71     48.4 
11 mu_1       0.2      0.412     6.44e-15  3.66e-47     27.1 
12 mu_1       0.3      0.548     3.21e- 8  3.01e-33     15.2 
13 mu_1       0.4      1.28      2.91e- 4  1.57e-23     25.7 
14 mu_1       0.5      0.919     6.86e- 2  3.73e-16      7.30
15 mu_1       0.6      1.10      6.95e- 2  2.78e-15      7.83
16 mu_1       0.7      1.28      1.84e- 1  6.32e-23     12.9 
17 mu_1       0.8      1.52      8.38e- 2  5.02e-34      9.66
18 mu_1       0.9      1.20      9.89e- 6  1.96e-53     26.7 
19 mu_0       0.1      0.414     2.60e-28  2.49e-73     35.5 
20 mu_0       0.2      0.520     8.07e-16  6.69e-49     32.9 
21 mu_0       0.3      0.460     8.11e- 9  9.44e-35     13.7 
22 mu_0       0.4      1.23      1.17e- 4  7.68e-25     26.8 
23 mu_0       0.5      0.954     4.50e- 2  2.73e-17      8.72
24 mu_0       0.6      1.06      1.11e- 1  2.75e-14      7.43
25 mu_0       0.7      1.25      2.01e- 1  9.73e-22     13.0 
26 mu_0       0.8      1.52      1.02e- 1  1.32e-32      9.24
27 mu_0       0.9      1.20      4.03e- 5  1.17e-51     18.5 
[1] "Total run time was 462.414 seconds"
