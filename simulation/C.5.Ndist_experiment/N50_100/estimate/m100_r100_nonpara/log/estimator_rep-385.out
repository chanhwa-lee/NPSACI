
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7506"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  60  61  62  63  64  65  67  68  70  71  72  73 
  1   2   3   2   1   2   3   4   3   3   3   3   3   1   5   1   2   1   4   3 
 74  75  78  79  81  83  84  85  86  87  88  89  90  91  93  94  96  98  99 100 
  1   3   2   1   2   5   2   2   3   3   3   3   2   2   2   3   3   2   4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03332 0.33165 0.61013 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4365 3141 
[1] "treatment indicator table: "

   0    1 
2772 4734 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3760
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 494.407 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.559 0.182 
 2 mu         0.1   0.2 0.617 0.187 
 3 mu         0.1   0.3 0.713 0.214 
 4 mu         0.1   0.4 0.771 0.237 
 5 mu         0.1   0.5 0.820 0.248 
 6 mu         0.2   0.1 0.462 0.103 
 7 mu         0.2   0.2 0.497 0.0647
 8 mu         0.2   0.3 0.574 0.0797
 9 mu         0.2   0.4 0.619 0.0844
10 mu         0.2   0.5 0.659 0.0862
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.24        0.0628 0.0000000420     37.7 
 2 mu         0.2      0.984       0.785  0.0126            6.99
 3 mu         0.3      1.00        0.965  0.239             2.52
 4 mu         0.4      1.01        0.985  0.510             2.11
 5 mu         0.5      1.03        1.02   0.583             2.17
 6 mu         0.6      1.02        1.01   0.560             1.68
 7 mu         0.7      1.03        1.02   0.781             1.43
 8 mu         0.8      1.03        1.01   0.623             1.52
 9 mu         0.9      0.961       0.925  0.395             1.88
10 mu_1       0.1      1.16        0.118  0.000000131      20.6 
11 mu_1       0.2      0.976       0.840  0.0198            5.40
12 mu_1       0.3      1.00        0.964  0.279             2.27
13 mu_1       0.4      1.01        0.976  0.504             2.10
14 mu_1       0.5      1.03        1.02   0.574             2.16
15 mu_1       0.6      1.02        1.01   0.560             1.66
16 mu_1       0.7      1.03        1.02   0.782             1.43
17 mu_1       0.8      1.03        1.01   0.626             1.51
18 mu_1       0.9      0.960       0.923  0.398             1.88
19 mu_0       0.1      1.25        0.0564 0.0000000321     39.6 
20 mu_0       0.2      0.986       0.774  0.0108            7.39
21 mu_0       0.3      0.998       0.969  0.222             2.66
22 mu_0       0.4      1.01        0.982  0.509             2.11
23 mu_0       0.5      1.02        1.02   0.559             2.18
24 mu_0       0.6      1.02        1.02   0.560             1.70
25 mu_0       0.7      1.02        1.01   0.773             1.43
26 mu_0       0.8      1.03        1.02   0.612             1.55
27 mu_0       0.9      0.966       0.914  0.353             1.88
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.00113      5.14e-27  8.58e-75    0.0765
 2 mu         0.2   0.641        1.08e-14  6.08e-50   44.1   
 3 mu         0.3   1.16         5.36e- 8  3.80e-36   32.9   
 4 mu         0.4   1.03         1.42e- 3  2.07e-26   16.1   
 5 mu         0.5   1.19         1.39e- 1  6.50e-19   10.9   
 6 mu         0.6   1.20         1.18e- 1  7.49e-13   15.5   
 7 mu         0.7   0.872        2.43e- 1  1.67e-16   12.8   
 8 mu         0.8   1.16         6.28e- 3  2.22e-27    7.88  
 9 mu         0.9   2.80         1.32e- 8  5.03e-47  136.    
10 mu_1       0.1   0.00290      2.84e-26  8.10e-74    0.202 
11 mu_1       0.2   0.806        3.83e-14  2.97e-49   53.3   
12 mu_1       0.3   1.12         1.12e- 7  1.23e-35   30.4   
13 mu_1       0.4   1.04         2.11e- 3  5.04e-26   15.9   
14 mu_1       0.5   1.22         1.50e- 1  1.27e-18   11.0   
15 mu_1       0.6   1.17         1.48e- 1  1.22e-12   14.7   
16 mu_1       0.7   0.880        2.30e- 1  5.76e-17   13.1   
17 mu_1       0.8   1.17         4.86e- 3  6.72e-28    8.07  
18 mu_1       0.9   2.85         9.28e- 9  1.35e-47  140.    
19 mu_0       0.1   0.000930     2.56e-27  5.36e-76    0.0625
20 mu_0       0.2   0.600        3.94e-15  1.88e-51   41.8   
21 mu_0       0.3   1.18         2.98e- 8  1.34e-37   35.6   
22 mu_0       0.4   1.03         9.23e- 4  8.51e-28   16.2   
23 mu_0       0.5   1.17         9.96e- 2  3.21e-20   10.7   
24 mu_0       0.6   1.24         1.18e- 1  4.62e-14   16.8   
25 mu_0       0.7   0.854        2.25e- 1  4.21e-16   12.1   
26 mu_0       0.8   1.12         1.01e- 2  8.43e-27    7.12  
27 mu_0       0.9   2.37         4.82e- 8  3.81e-46   93.5   
[1] "Total run time was 498.115 seconds"
