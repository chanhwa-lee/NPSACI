
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7517"
[1] "cluster size dist'n: "

50 51 52 53 54 56 57 58 59 61 62 63 64 65 67 68 69 71 72 73 74 75 76 77 79 80 
 1  2  1  2  4  2  3  2  1  2  3  2  2  1  2  4  4  4  3  1  2  3  1  2  1  4 
81 82 83 84 85 86 87 88 89 90 91 92 93 94 97 98 
 2  2  2  2  3  2  2  3  4  4  3  4  1  2  4  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02657 0.35545 0.61439 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4558 2959 
[1] "treatment indicator table: "

   0    1 
2718 4799 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3676
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3841
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 442.934 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.459 0.115 
 2 mu         0.1   0.2 0.479 0.103 
 3 mu         0.1   0.3 0.533 0.116 
 4 mu         0.1   0.4 0.580 0.130 
 5 mu         0.1   0.5 0.566 0.117 
 6 mu         0.2   0.1 0.497 0.0931
 7 mu         0.2   0.2 0.534 0.0760
 8 mu         0.2   0.3 0.607 0.0930
 9 mu         0.2   0.4 0.665 0.106 
10 mu         0.2   0.5 0.669 0.0932
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.719        0.289 0.000000144      9.47
 2 mu         0.2      0.989        0.933 0.00590          4.52
 3 mu         0.3      0.993        0.934 0.185            2.79
 4 mu         0.4      1.04         1.02  0.161            2.65
 5 mu         0.5      0.989        0.985 0.368            1.67
 6 mu         0.6      0.968        0.966 0.574            1.42
 7 mu         0.7      0.971        0.953 0.529            1.44
 8 mu         0.8      1.06         1.05  0.533            2.36
 9 mu         0.9      1.02         0.967 0.259            2.23
10 mu_1       0.1      0.752        0.375 0.000000481      8.85
11 mu_1       0.2      1.01         0.971 0.00995          4.90
12 mu_1       0.3      0.993        0.943 0.175            2.56
13 mu_1       0.4      1.03         1.01  0.164            2.55
14 mu_1       0.5      0.987        0.984 0.389            1.67
15 mu_1       0.6      0.967        0.963 0.580            1.39
16 mu_1       0.7      0.973        0.955 0.540            1.47
17 mu_1       0.8      1.06         1.05  0.523            2.40
18 mu_1       0.9      1.02         0.969 0.267            2.28
19 mu_0       0.1      0.716        0.274 0.000000107      9.54
20 mu_0       0.2      0.985        0.931 0.00489          4.43
21 mu_0       0.3      0.993        0.928 0.189            2.89
22 mu_0       0.4      1.04         1.02  0.159            2.72
23 mu_0       0.5      0.991        0.982 0.347            1.66
24 mu_0       0.6      0.968        0.963 0.566            1.47
25 mu_0       0.7      0.967        0.949 0.505            1.39
26 mu_0       0.8      1.05         1.03  0.571            2.20
27 mu_0       0.9      1.04         0.988 0.190            1.93
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0624     8.86e-28  1.10e-75      5.95
 2 mu         0.2     0.602      2.15e-15  4.19e-50     39.2 
 3 mu         0.3     1.21       2.74e- 8  2.62e-35     34.9 
 4 mu         0.4     1.44       7.92e- 4  5.76e-25     30.5 
 5 mu         0.5     1.74       4.76e- 2  4.17e-17     34.3 
 6 mu         0.6     1.53       1.04e- 1  3.86e-11     20.9 
 7 mu         0.7     1.14       1.60e- 1  1.30e-18      8.21
 8 mu         0.8     1.45       4.30e- 2  7.73e-30      8.54
 9 mu         0.9     1.83       4.63e- 7  6.14e-50     30.1 
10 mu_1       0.1     0.101      5.35e-27  1.03e-74      9.52
11 mu_1       0.2     0.653      7.31e-15  1.96e-49     41.9 
12 mu_1       0.3     1.30       5.76e- 8  8.15e-35     40.1 
13 mu_1       0.4     1.42       1.29e- 3  1.35e-24     26.3 
14 mu_1       0.5     1.77       4.85e- 2  7.79e-17     36.4 
15 mu_1       0.6     1.51       1.06e- 1  1.37e-11     21.4 
16 mu_1       0.7     1.14       1.57e- 1  3.96e-19      7.20
17 mu_1       0.8     1.47       3.73e- 2  2.06e-30      8.86
18 mu_1       0.9     1.82       3.34e- 7  1.46e-50     29.3 
19 mu_0       0.1     0.0581     3.90e-28  7.95e-77      5.55
20 mu_0       0.2     0.590      8.63e-16  3.41e-51     38.6 
21 mu_0       0.3     1.17       1.44e- 8  2.44e-36     32.6 
22 mu_0       0.4     1.46       4.64e- 4  6.27e-26     33.2 
23 mu_0       0.5     1.71       3.18e- 2  5.44e-18     32.3 
24 mu_0       0.6     1.57       9.05e- 2  1.15e-11     22.7 
25 mu_0       0.7     1.15       1.60e- 1  3.40e-18     10.6 
26 mu_0       0.8     1.36       3.09e- 2  3.04e-29      8.00
27 mu_0       0.9     1.98       1.63e- 6  4.83e-49     37.2 
[1] "Total run time was 447.159 seconds"
