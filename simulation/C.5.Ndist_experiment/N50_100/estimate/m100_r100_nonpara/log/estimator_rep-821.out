
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7517"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  2   1   3   1   1   1   1   1   5   3   4   1   4   1   2   4   1   2   1   2 
 71  72  73  74  76  77  79  82  83  84  85  86  87  88  89  90  91  92  93  94 
  3   3   2   4   2   2   3   3   4   2   2   2   2   3   2   1   1   1   2   4 
 95  96  98  99 100 
  2   4   1   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04244 0.36784 0.62483 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4455 3062 
[1] "treatment indicator table: "

   0    1 
2934 4583 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3718
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3799
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 521.477 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.328 0.0542
 2 mu         0.1   0.2 0.393 0.0577
 3 mu         0.1   0.3 0.445 0.0626
 4 mu         0.1   0.4 0.495 0.0644
 5 mu         0.1   0.5 0.510 0.0676
 6 mu         0.2   0.1 0.341 0.0348
 7 mu         0.2   0.2 0.421 0.0360
 8 mu         0.2   0.3 0.488 0.0344
 9 mu         0.2   0.4 0.533 0.0353
10 mu         0.2   0.5 0.558 0.0363
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.908        0.703 0.0000000681      6.29
 2 mu         0.2      1.02         0.960 0.00961           3.03
 3 mu         0.3      0.986        0.956 0.423             1.75
 4 mu         0.4      0.993        0.956 0.518             1.59
 5 mu         0.5      0.978        0.978 0.592             1.41
 6 mu         0.6      1.01         1.02  0.571             1.41
 7 mu         0.7      1.01         1.01  0.739             1.54
 8 mu         0.8      0.960        0.954 0.565             1.42
 9 mu         0.9      1.02         1.03  0.134             2.04
10 mu_1       0.1      0.971        0.742 0.000000212       6.38
11 mu_1       0.2      1.00         0.965 0.0153            2.81
12 mu_1       0.3      0.993        0.972 0.481             1.70
13 mu_1       0.4      0.989        0.971 0.530             1.54
14 mu_1       0.5      0.979        0.982 0.575             1.44
15 mu_1       0.6      1.01         1.03  0.578             1.41
16 mu_1       0.7      1.01         0.997 0.749             1.54
17 mu_1       0.8      0.960        0.943 0.563             1.45
18 mu_1       0.9      1.02         1.02  0.129             2.06
19 mu_0       0.1      0.901        0.686 0.0000000521      6.28
20 mu_0       0.2      1.02         0.977 0.00820           3.09
21 mu_0       0.3      0.983        0.953 0.395             1.78
22 mu_0       0.4      0.996        0.955 0.510             1.63
23 mu_0       0.5      0.977        0.977 0.609             1.38
24 mu_0       0.6      1.01         1.00  0.561             1.41
25 mu_0       0.7      1.02         1.01  0.714             1.54
26 mu_0       0.8      0.960        0.959 0.576             1.37
27 mu_0       0.9      1.02         1.01  0.177             1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0203     4.24e-27  1.23e-81      1.38
 2 mu         0.2     1.27       3.61e-14  8.43e-56     49.5 
 3 mu         0.3     1.03       5.31e- 8  1.03e-40     14.7 
 4 mu         0.4     0.959      5.80e- 4  4.89e-30     12.4 
 5 mu         0.5     0.771      3.10e- 2  8.81e-22      6.40
 6 mu         0.6     0.898      1.46e- 1  4.54e-15      5.65
 7 mu         0.7     1.02       2.26e- 1  1.35e-20      9.51
 8 mu         0.8     1.15       1.65e- 2  6.14e-33     10.8 
 9 mu         0.9     0.933      1.77e- 7  4.82e-55     23.4 
10 mu_1       0.1     0.0433     2.54e-26  1.21e-80      2.93
11 mu_1       0.2     1.40       1.12e-13  4.17e-55     52.5 
12 mu_1       0.3     0.990      1.15e- 7  3.39e-40     14.1 
13 mu_1       0.4     0.944      9.28e- 4  1.21e-29     12.2 
14 mu_1       0.5     0.775      3.08e- 2  1.74e-21      6.58
15 mu_1       0.6     0.907      1.32e- 1  7.49e-15      5.85
16 mu_1       0.7     1.02       1.93e- 1  4.12e-21      9.49
17 mu_1       0.8     1.16       1.32e- 2  1.64e-33     10.7 
18 mu_1       0.9     0.928      1.27e- 7  1.15e-55     24.3 
19 mu_0       0.1     0.0177     1.89e-27  1.57e-83      1.21
20 mu_0       0.2     1.23       1.70e-14  1.21e-57     48.8 
21 mu_0       0.3     1.05       2.66e- 8  1.69e-42     15.7 
22 mu_0       0.4     0.969      3.35e- 4  9.38e-32     12.7 
23 mu_0       0.5     0.767      2.45e- 2  2.02e-23      6.21
24 mu_0       0.6     0.885      1.68e- 1  1.31e-16      5.35
25 mu_0       0.7     1.01       1.97e- 1  3.53e-20      9.55
26 mu_0       0.8     1.11       2.40e- 2  2.41e-32     11.3 
27 mu_0       0.9     0.980      6.24e- 7  3.78e-54     21.5 
[1] "Total run time was 526.994 seconds"
