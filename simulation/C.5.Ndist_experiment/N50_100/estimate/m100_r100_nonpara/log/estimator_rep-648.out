
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7593"
[1] "cluster size dist'n: "

51 52 53 54 55 57 59 60 61 62 63 64 65 67 68 70 71 73 74 75 76 77 78 79 80 81 
 1  1  2  2  3  2  3  6  4  3  1  4  1  1  1  3  2  3  1  2  3  2  1  1  3  1 
82 83 84 85 86 87 88 89 90 91 92 93 95 96 97 98 99 
 3  1  2  2  6  4  3  4  1  2  4  1  1  2  3  2  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01745 0.27985 0.56903 0.99040 6.00000 
[1] "event indicator table: "

   0    1 
4468 3125 
[1] "treatment indicator table: "

   0    1 
2914 4679 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3683
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3910
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 864.985 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.418 0.0827
 2 mu         0.1   0.2 0.483 0.0708
 3 mu         0.1   0.3 0.517 0.0708
 4 mu         0.1   0.4 0.537 0.0726
 5 mu         0.1   0.5 0.544 0.0768
 6 mu         0.2   0.1 0.365 0.0369
 7 mu         0.2   0.2 0.454 0.0360
 8 mu         0.2   0.3 0.510 0.0405
 9 mu         0.2   0.4 0.534 0.0359
10 mu         0.2   0.5 0.545 0.0380
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.881        0.330 0.00000743      5.60
 2 mu         0.2      0.921        0.843 0.0827          2.21
 3 mu         0.3      0.954        0.938 0.482           1.76
 4 mu         0.4      0.980        0.980 0.601           1.35
 5 mu         0.5      1.01         0.996 0.666           1.57
 6 mu         0.6      1.00         1.01  0.701           1.32
 7 mu         0.7      1.01         1.01  0.602           1.45
 8 mu         0.8      1.06         1.05  0.508           1.59
 9 mu         0.9      1.03         1.03  0.225           1.80
10 mu_1       0.1      0.855        0.443 0.0000195       4.53
11 mu_1       0.2      0.936        0.905 0.111           2.14
12 mu_1       0.3      0.954        0.939 0.495           1.71
13 mu_1       0.4      0.982        0.972 0.606           1.40
14 mu_1       0.5      1.01         0.998 0.671           1.54
15 mu_1       0.6      1.00         1.01  0.701           1.34
16 mu_1       0.7      1.01         1.01  0.601           1.47
17 mu_1       0.8      1.06         1.06  0.505           1.59
18 mu_1       0.9      1.02         1.02  0.214           1.80
19 mu_0       0.1      0.884        0.308 0.00000609      5.75
20 mu_0       0.2      0.918        0.823 0.0755          2.24
21 mu_0       0.3      0.954        0.929 0.470           1.80
22 mu_0       0.4      0.978        0.982 0.583           1.34
23 mu_0       0.5      1.00         0.994 0.661           1.60
24 mu_0       0.6      1.00         1.02  0.701           1.30
25 mu_0       0.7      1.01         1.00  0.605           1.40
26 mu_0       0.8      1.05         1.04  0.517           1.57
27 mu_0       0.9      1.04         1.03  0.321           1.87
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.451     1.14e-25  2.52e-71     39.2 
 2 mu         0.2      0.813     1.39e-13  9.49e-46     20.9 
 3 mu         0.3      0.772     4.89e- 7  5.71e-32     12.7 
 4 mu         0.4      0.777     2.13e- 3  1.10e-22     11.8 
 5 mu         0.5      1.01      8.61e- 2  1.28e-15      7.73
 6 mu         0.6      1.24      3.26e- 1  2.23e-19      6.57
 7 mu         0.7      0.994     1.96e- 1  4.53e-29      6.89
 8 mu         0.8      1.23      2.08e- 2  3.64e-43     16.0 
 9 mu         0.9      1.37      6.21e- 8  7.73e-68     37.1 
10 mu_1       0.1      0.591     7.46e-25  2.22e-70     49.0 
11 mu_1       0.2      0.836     4.30e-13  4.17e-45     22.2 
12 mu_1       0.3      0.778     1.05e- 6  1.79e-31     14.2 
13 mu_1       0.4      0.779     3.32e- 3  2.59e-22     10.7 
14 mu_1       0.5      1.04      9.58e- 2  2.41e-15      7.41
15 mu_1       0.6      1.24      2.93e- 1  4.64e-20      7.05
16 mu_1       0.7      0.976     1.88e- 1  8.10e-30      6.69
17 mu_1       0.8      1.25      1.62e- 2  5.68e-44     15.8 
18 mu_1       0.9      1.37      4.33e- 8  1.07e-68     37.9 
19 mu_0       0.1      0.436     4.42e-26  3.40e-72     38.1 
20 mu_0       0.2      0.807     6.60e-14  1.44e-46     20.6 
21 mu_0       0.3      0.769     2.49e- 7  4.98e-33     12.0 
22 mu_0       0.4      0.775     1.33e- 3  1.12e-23     12.5 
23 mu_0       0.5      0.986     7.39e- 2  1.57e-16      8.05
24 mu_0       0.6      1.24      3.19e- 1  4.87e-19      5.85
25 mu_0       0.7      1.04      1.91e- 1  1.32e-28      7.38
26 mu_0       0.8      1.18      3.23e- 2  1.59e-42     16.8 
27 mu_0       0.9      1.36      2.32e- 7  6.76e-67     30.2 
[1] "Total run time was 870.307 seconds"
