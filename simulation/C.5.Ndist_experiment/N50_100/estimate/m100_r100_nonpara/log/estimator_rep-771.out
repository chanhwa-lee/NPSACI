
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7379"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  63  64  66  67  68  70  71  72  73 
  2   1   3   4   3   1   2   5   3   4   3   1   1   3   2   5   2   1   3   3 
 74  75  77  78  79  81  82  83  84  85  86  88  89  90  91  92  94  95  96  97 
  1   4   1   3   2   4   1   2   1   1   1   1   5   2   2   2   1   1   3   3 
 98  99 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03526 0.34880 0.60417 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4294 3085 
[1] "treatment indicator table: "

   0    1 
2844 4535 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3712
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3667
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 407.684 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.423 0.109 
 2 mu         0.1   0.2 0.496 0.103 
 3 mu         0.1   0.3 0.572 0.112 
 4 mu         0.1   0.4 0.606 0.115 
 5 mu         0.1   0.5 0.668 0.127 
 6 mu         0.2   0.1 0.354 0.0617
 7 mu         0.2   0.2 0.430 0.0589
 8 mu         0.2   0.3 0.495 0.0544
 9 mu         0.2   0.4 0.537 0.0465
10 mu         0.2   0.5 0.582 0.0549
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.04         0.288 0.0000474     14.9 
 2 mu         0.2      0.986        0.944 0.0507         2.56
 3 mu         0.3      1.03         1.09  0.282          1.73
 4 mu         0.4      1.01         1.02  0.554          1.46
 5 mu         0.5      1.00         1.02  0.352          1.36
 6 mu         0.6      0.994        0.969 0.657          1.40
 7 mu         0.7      1.01         0.997 0.712          1.46
 8 mu         0.8      0.961        0.937 0.483          1.42
 9 mu         0.9      0.927        0.936 0.0389         1.84
10 mu_1       0.1      1.01         0.467 0.000139       9.40
11 mu_1       0.2      0.998        0.956 0.0749         2.54
12 mu_1       0.3      1.03         1.05  0.313          1.67
13 mu_1       0.4      1.01         1.03  0.546          1.44
14 mu_1       0.5      1.00         1.02  0.360          1.34
15 mu_1       0.6      0.993        0.968 0.672          1.41
16 mu_1       0.7      1.01         0.997 0.722          1.48
17 mu_1       0.8      0.959        0.931 0.475          1.42
18 mu_1       0.9      0.927        0.934 0.0357         1.85
19 mu_0       0.1      1.04         0.267 0.0000372     15.7 
20 mu_0       0.2      0.983        0.940 0.0447         2.59
21 mu_0       0.3      1.03         1.06  0.269          1.75
22 mu_0       0.4      1.01         1.03  0.559          1.49
23 mu_0       0.5      1.00         1.03  0.343          1.38
24 mu_0       0.6      0.996        0.969 0.634          1.39
25 mu_0       0.7      1.01         0.995 0.689          1.42
26 mu_0       0.8      0.967        0.957 0.514          1.46
27 mu_0       0.9      0.929        0.933 0.0676         1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.288     2.21e-27  2.37e-83     26.0 
 2 mu         0.2      1.75      2.51e-14  7.32e-56     83.0 
 3 mu         0.3      1.17      6.10e- 8  6.81e-40     15.8 
 4 mu         0.4      1.09      6.08e- 4  1.15e-28     10.5 
 5 mu         0.5      0.874     4.34e- 2  4.56e-20     10.9 
 6 mu         0.6      0.815     1.50e- 1  3.59e-13      4.93
 7 mu         0.7      1.23      2.76e- 1  2.13e-20      7.97
 8 mu         0.8      1.27      6.19e- 2  4.32e-32     12.2 
 9 mu         0.9      1.67      6.79e- 7  6.78e-53     37.2 
10 mu_1       0.1      0.496     1.48e-26  2.27e-82     44.1 
11 mu_1       0.2      1.66      7.87e-14  3.51e-55     70.4 
12 mu_1       0.3      1.17      1.35e- 7  2.17e-39     15.8 
13 mu_1       0.4      1.07      9.46e- 4  2.75e-28     10.5 
14 mu_1       0.5      0.863     2.87e- 2  8.73e-20     10.7 
15 mu_1       0.6      0.828     1.71e- 1  4.89e-13      5.18
16 mu_1       0.7      1.24      2.76e- 1  5.81e-21      8.66
17 mu_1       0.8      1.28      4.95e- 2  1.03e-32     11.6 
18 mu_1       0.9      1.68      5.04e- 7  1.44e-53     37.5 
19 mu_0       0.1      0.265     8.14e-28  1.10e-84     24.0 
20 mu_0       0.2      1.77      1.17e-14  3.81e-57     86.2 
21 mu_0       0.3      1.17      2.92e- 8  4.05e-41     16.2 
22 mu_0       0.4      1.10      3.83e- 4  7.96e-30     10.5 
23 mu_0       0.5      0.885     4.01e- 2  3.80e-21     11.0 
24 mu_0       0.6      0.795     1.15e- 1  3.74e-14      4.56
25 mu_0       0.7      1.20      2.22e- 1  5.75e-20      6.35
26 mu_0       0.8      1.26      1.11e- 1  1.75e-31     14.6 
27 mu_0       0.9      1.62      2.26e- 6  5.49e-52     34.5 
[1] "Total run time was 411.762 seconds"
