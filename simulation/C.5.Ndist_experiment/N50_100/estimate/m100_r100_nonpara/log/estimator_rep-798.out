
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7579"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  64  65  67  68  69  70  71  72 
  2   1   4   1   3   1   1   4   3   1   3   3   3   2   1   2   1   2   3   1 
 73  74  75  76  77  78  79  80  81  82  84  85  86  87  88  89  90  92  93  94 
  4   2   1   1   1   3   2   2   3   4   1   3   1   3   2   3   1   1   2   3 
 95  96  97  98  99 100 
  2   3   3   1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02259 0.33334 0.60388 1.00000 5.31344 
[1] "event indicator table: "

   0    1 
4568 3011 
[1] "treatment indicator table: "

   0    1 
2815 4764 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3777
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 478.183 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.438 0.0427
 2 mu         0.1   0.2 0.563 0.0675
 3 mu         0.1   0.3 0.608 0.0693
 4 mu         0.1   0.4 0.642 0.0719
 5 mu         0.1   0.5 0.711 0.0953
 6 mu         0.2   0.1 0.371 0.0338
 7 mu         0.2   0.2 0.458 0.0388
 8 mu         0.2   0.3 0.511 0.0373
 9 mu         0.2   0.4 0.544 0.0401
10 mu         0.2   0.5 0.584 0.0353
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.16         0.988  0.000429      4.95
 2 mu         0.2      1.04         0.983  0.124         2.39
 3 mu         0.3      0.957        0.916  0.423         1.93
 4 mu         0.4      0.991        0.956  0.666         1.57
 5 mu         0.5      0.977        0.975  0.472         1.54
 6 mu         0.6      0.983        0.966  0.556         1.48
 7 mu         0.7      1.01         0.998  0.590         1.46
 8 mu         0.8      1.01         0.991  0.558         1.45
 9 mu         0.9      1.04         1.04   0.252         2.36
10 mu_1       0.1      1.17         1.01   0.00111       5.30
11 mu_1       0.2      1.02         0.969  0.0911        2.27
12 mu_1       0.3      0.958        0.929  0.446         1.91
13 mu_1       0.4      0.993        0.959  0.653         1.58
14 mu_1       0.5      0.976        0.967  0.487         1.55
15 mu_1       0.6      0.985        0.962  0.551         1.48
16 mu_1       0.7      1.01         0.997  0.584         1.45
17 mu_1       0.8      1.01         0.987  0.554         1.47
18 mu_1       0.9      1.04         1.04   0.246         2.35
19 mu_0       0.1      1.15         0.972  0.000353      5.08
20 mu_0       0.2      1.05         0.995  0.125         2.50
21 mu_0       0.3      0.956        0.914  0.413         1.94
22 mu_0       0.4      0.990        0.958  0.650         1.56
23 mu_0       0.5      0.979        0.989  0.456         1.54
24 mu_0       0.6      0.980        0.972  0.564         1.48
25 mu_0       0.7      1.01         0.996  0.602         1.47
26 mu_0       0.8      1.00         0.992  0.576         1.41
27 mu_0       0.9      1.03         1.01   0.262         2.50
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.773     2.70e-31  8.36e-92     68.6 
 2 mu         0.2      1.16      4.92e-17  1.05e-62     23.0 
 3 mu         0.3      1.08      9.51e-10  9.65e-46     13.6 
 4 mu         0.4      0.992     2.08e- 5  9.33e-34     11.9 
 5 mu         0.5      0.972     3.56e- 3  1.63e-24     15.3 
 6 mu         0.6      0.920     1.05e- 2  1.80e-21      7.71
 7 mu         0.7      1.18      9.59e- 2  2.31e-31      8.51
 8 mu         0.8      1.40      5.77e- 2  1.24e-45     11.3 
 9 mu         0.9      1.28      8.92e- 7  1.85e-70     17.6 
10 mu_1       0.1      0.821     1.85e-30  8.19e-91     66.4 
11 mu_1       0.2      1.28      1.68e-16  5.13e-62     24.8 
12 mu_1       0.3      1.02      2.20e- 9  3.15e-45     12.3 
13 mu_1       0.4      0.993     3.41e- 5  2.28e-33     12.2 
14 mu_1       0.5      0.969     5.20e- 3  3.19e-24     15.1 
15 mu_1       0.6      0.931     7.13e- 3  2.91e-22      7.97
16 mu_1       0.7      1.18      1.06e- 1  3.20e-32      8.33
17 mu_1       0.8      1.41      5.72e- 2  1.50e-46     11.4 
18 mu_1       0.9      1.28      6.06e- 7  1.99e-71     18.2 
19 mu_0       0.1      0.768     9.44e-32  1.88e-93     68.9 
20 mu_0       0.2      1.13      1.64e-17  2.64e-64     23.7 
21 mu_0       0.3      1.11      3.86e-10  2.79e-47     14.8 
22 mu_0       0.4      0.992     1.20e- 5  3.14e-35     11.6 
23 mu_0       0.5      0.976     3.43e- 3  6.58e-26     15.4 
24 mu_0       0.6      0.904     1.28e- 2  4.08e-21      7.31
25 mu_0       0.7      1.16      6.50e- 2  6.96e-31      8.94
26 mu_0       0.8      1.37      4.57e- 2  5.61e-45     11.1 
27 mu_0       0.9      1.28      3.47e- 6  1.67e-69     11.9 
[1] "Total run time was 481.928 seconds"
