
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7532"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  64  65  66  67  69  70  72  73 
  1   4   2   2   2   4   1   2   1   1   1   5   2   2   3   3   1   4   2   1 
 74  75  76  77  78  80  81  82  84  85  86  88  90  91  92  93  94  95  96  98 
  1   5   1   2   1   4   3   3   1   6   2   2   4   3   3   3   4   1   1   4 
 99 100 
  1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04155 0.39176 0.64269 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4532 3000 
[1] "treatment indicator table: "

   0    1 
2539 4993 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3820
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3712
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 426.986 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.566 0.112 
 2 mu         0.1   0.2 0.654 0.117 
 3 mu         0.1   0.3 0.744 0.137 
 4 mu         0.1   0.4 0.800 0.149 
 5 mu         0.1   0.5 0.839 0.148 
 6 mu         0.2   0.1 0.428 0.0781
 7 mu         0.2   0.2 0.489 0.0699
 8 mu         0.2   0.3 0.563 0.0860
 9 mu         0.2   0.4 0.605 0.0959
10 mu         0.2   0.5 0.632 0.0851
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.20         0.412 0.0000000207     12.4 
 2 mu         0.2      0.939        0.889 0.00924           3.07
 3 mu         0.3      0.981        0.916 0.200             2.76
 4 mu         0.4      0.992        0.957 0.545             1.65
 5 mu         0.5      1.01         1.00  0.444             1.57
 6 mu         0.6      1.02         1.01  0.672             1.70
 7 mu         0.7      1.02         1.01  0.711             1.41
 8 mu         0.8      1.02         1.03  0.388             1.43
 9 mu         0.9      1.01         0.974 0.440             1.82
10 mu_1       0.1      1.13         0.539 0.0000000638      9.52
11 mu_1       0.2      0.934        0.858 0.0144            3.21
12 mu_1       0.3      0.987        0.934 0.232             2.74
13 mu_1       0.4      0.995        0.970 0.538             1.69
14 mu_1       0.5      1.01         1.01  0.448             1.60
15 mu_1       0.6      1.02         1.01  0.669             1.70
16 mu_1       0.7      1.02         1.01  0.715             1.43
17 mu_1       0.8      1.02         1.03  0.377             1.45
18 mu_1       0.9      1.01         0.969 0.438             1.82
19 mu_0       0.1      1.20         0.387 0.0000000159     12.7 
20 mu_0       0.2      0.940        0.887 0.00796           3.03
21 mu_0       0.3      0.979        0.938 0.186             2.77
22 mu_0       0.4      0.990        0.964 0.536             1.63
23 mu_0       0.5      1.01         1.01  0.441             1.58
24 mu_0       0.6      1.03         1.01  0.676             1.70
25 mu_0       0.7      1.02         1.01  0.693             1.37
26 mu_0       0.8      1.02         1.03  0.433             1.44
27 mu_0       0.9      1.01         0.990 0.459             1.77
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.140     2.03e-30  6.48e-85     14.0 
 2 mu         0.2      0.196     1.29e-16  6.34e-58     13.2 
 3 mu         0.3      0.572     1.46e- 9  3.42e-42     12.0 
 4 mu         0.4      0.907     2.20e- 5  4.41e-31      8.88
 5 mu         0.5      1.15      1.47e- 2  1.61e-22     14.1 
 6 mu         0.6      0.970     4.07e- 2  1.39e-16      6.44
 7 mu         0.7      0.797     8.31e- 2  2.47e-25      5.63
 8 mu         0.8      1.21      2.02e- 2  3.87e-38     10.3 
 9 mu         0.9      1.73      8.32e- 7  1.18e-60     28.2 
10 mu_1       0.1      0.202     1.33e-29  6.34e-84     20.2 
11 mu_1       0.2      0.187     4.21e-16  3.10e-57      9.51
12 mu_1       0.3      0.640     3.21e- 9  1.12e-41     12.5 
13 mu_1       0.4      0.919     2.90e- 5  1.08e-30      8.10
14 mu_1       0.5      1.17      2.05e- 2  3.16e-22     14.1 
15 mu_1       0.6      0.936     5.13e- 2  3.34e-17      6.36
16 mu_1       0.7      0.811     6.71e- 2  5.10e-26      5.59
17 mu_1       0.8      1.22      1.60e- 2  6.98e-39     10.2 
18 mu_1       0.9      1.72      6.31e- 7  1.90e-61     27.6 
19 mu_0       0.1      0.133     7.76e-31  1.56e-86     13.3 
20 mu_0       0.2      0.199     4.72e-17  1.72e-59     14.1 
21 mu_0       0.3      0.544     7.10e-10  1.06e-43     11.8 
22 mu_0       0.4      0.898     1.57e- 5  1.60e-32      9.40
23 mu_0       0.5      1.14      8.91e- 3  7.02e-24     14.1 
24 mu_0       0.6      1.02      3.00e- 2  7.51e-17      7.34
25 mu_0       0.7      0.763     9.62e- 2  7.04e-25      5.73
26 mu_0       0.8      1.18      2.97e- 2  1.65e-37     11.0 
27 mu_0       0.9      1.79      2.64e- 6  1.01e-59     32.9 
[1] "Total run time was 430.723 seconds"
