
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7614"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  61  62  63  64  66  67  68  69  70  72  73 
  3   5   1   1   2   1   1   1   3   2   3   2   2   4   1   2   4   2   3   1 
 74  75  76  77  78  79  80  83  84  85  86  87  88  89  90  91  92  93  94  96 
  4   5   1   1   1   2   1   1   3   1   1   1   1   4   5   1   6   1   3   4 
 97  98  99 100 
  3   1   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03849 0.36153 0.62096 1.00000 6.88985 
[1] "event indicator table: "

   0    1 
4359 3255 
[1] "treatment indicator table: "

   0    1 
3000 4614 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3798
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3816
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.711 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.574 0.118 
 2 mu         0.1   0.2 0.656 0.126 
 3 mu         0.1   0.3 0.741 0.137 
 4 mu         0.1   0.4 0.794 0.142 
 5 mu         0.1   0.5 0.823 0.144 
 6 mu         0.2   0.1 0.455 0.0819
 7 mu         0.2   0.2 0.529 0.0702
 8 mu         0.2   0.3 0.608 0.0773
 9 mu         0.2   0.4 0.663 0.0791
10 mu         0.2   0.5 0.694 0.0718
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.24         0.524 0.000000352     10.8 
 2 mu         0.2      1.13         0.991 0.0224           5.45
 3 mu         0.3      0.987        0.972 0.310            2.18
 4 mu         0.4      1.02         1.01  0.248            1.67
 5 mu         0.5      0.982        0.974 0.379            1.45
 6 mu         0.6      0.975        0.961 0.506            1.56
 7 mu         0.7      1.00         0.974 0.687            1.57
 8 mu         0.8      0.976        0.952 0.476            1.67
 9 mu         0.9      1.02         1.04  0.0975           2.04
10 mu_1       0.1      1.24         0.550 0.00000103       8.56
11 mu_1       0.2      1.09         0.934 0.0343           4.52
12 mu_1       0.3      0.985        0.975 0.348            1.97
13 mu_1       0.4      1.02         0.998 0.233            1.68
14 mu_1       0.5      0.979        0.968 0.375            1.50
15 mu_1       0.6      0.977        0.966 0.510            1.53
16 mu_1       0.7      1.00         0.968 0.679            1.56
17 mu_1       0.8      0.977        0.946 0.470            1.68
18 mu_1       0.9      1.02         1.04  0.0908           2.07
19 mu_0       0.1      1.24         0.503 0.000000277     11.5 
20 mu_0       0.2      1.13         1.00  0.0194           5.80
21 mu_0       0.3      0.987        0.960 0.294            2.32
22 mu_0       0.4      1.02         1.02  0.259            1.66
23 mu_0       0.5      0.985        0.968 0.384            1.46
24 mu_0       0.6      0.972        0.958 0.500            1.61
25 mu_0       0.7      1.00         0.972 0.671            1.59
26 mu_0       0.8      0.975        0.959 0.501            1.65
27 mu_0       0.9      1.02         1.01  0.157            1.82
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.64      1.32e-24  9.90e-86     89.4 
 2 mu         0.2      3.31      3.58e-13  1.22e-57    118.  
 3 mu         0.3      2.04      7.51e- 7  2.56e-41     69.5 
 4 mu         0.4      2.03      9.24e- 4  7.67e-30     45.9 
 5 mu         0.5      1.97      9.14e- 2  4.76e-21     47.4 
 6 mu         0.6      1.10      2.05e- 1  1.26e-15      7.46
 7 mu         0.7      1.00      6.69e- 2  2.90e-24      6.33
 8 mu         0.8      1.22      1.68e- 3  3.46e-37     31.2 
 9 mu         0.9      1.12      5.68e-10  5.95e-60     15.7 
10 mu_1       0.1      2.42      7.30e-24  9.49e-85    128.  
11 mu_1       0.2      3.07      1.13e-12  5.87e-57    129.  
12 mu_1       0.3      1.94      1.52e- 6  8.19e-41     54.9 
13 mu_1       0.4      2.08      1.45e- 3  1.84e-29     48.8 
14 mu_1       0.5      1.91      1.17e- 1  9.13e-21     42.9 
15 mu_1       0.6      1.08      1.96e- 1  3.30e-16      7.33
16 mu_1       0.7      1.01      6.58e- 2  6.30e-25      6.51
17 mu_1       0.8      1.21      1.38e- 3  6.58e-38     30.9 
18 mu_1       0.9      1.13      3.78e-10  1.01e-60     16.1 
19 mu_0       0.1      1.55      6.61e-25  4.49e-87     85.2 
20 mu_0       0.2      3.37      1.64e-13  6.24e-59    125.  
21 mu_0       0.3      2.08      4.23e- 7  1.49e-42     75.8 
22 mu_0       0.4      1.99      5.84e- 4  5.22e-31     48.2 
23 mu_0       0.5      2.03      7.01e- 2  3.88e-22     51.9 
24 mu_0       0.6      1.13      1.76e- 1  2.65e-15      8.38
25 mu_0       0.7      0.984     6.12e- 2  8.19e-24      6.26
26 mu_0       0.8      1.25      2.85e- 3  1.47e-36     32.2 
27 mu_0       0.9      1.01      2.28e- 9  5.04e-59     12.6 
[1] "Total run time was 445.773 seconds"
