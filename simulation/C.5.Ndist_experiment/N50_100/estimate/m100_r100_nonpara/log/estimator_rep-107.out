
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7452"
[1] "cluster size dist'n: "

50 51 52 53 57 58 60 61 63 64 65 66 67 68 69 70 71 72 74 75 76 77 78 79 80 81 
 7  4  1  1  3  3  2  3  2  3  1  1  1  3  4  1  2  3  4  2  1  3  2  1  5  1 
82 83 85 86 87 89 90 91 92 93 94 95 97 98 99 
 1  3  5  1  3  2  1  3  5  1  5  1  2  1  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03436 0.34774 0.60875 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4429 3023 
[1] "treatment indicator table: "

   0    1 
2689 4763 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3860
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3592
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 372.648 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.513 0.161 
 2 mu         0.1   0.2 0.631 0.196 
 3 mu         0.1   0.3 0.748 0.224 
 4 mu         0.1   0.4 0.758 0.244 
 5 mu         0.1   0.5 0.806 0.261 
 6 mu         0.2   0.1 0.380 0.0562
 7 mu         0.2   0.2 0.477 0.0660
 8 mu         0.2   0.3 0.574 0.0812
 9 mu         0.2   0.4 0.574 0.0817
10 mu         0.2   0.5 0.616 0.0923
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.31        0.0573  1.67e-12     31.8 
 2 mu         0.2      1.07        0.736   1.03e- 4     13.5 
 3 mu         0.3      1.05        0.968   1.14e- 1      3.09
 4 mu         0.4      1.03        0.982   3.36e- 1      1.76
 5 mu         0.5      0.985       0.977   6.01e- 1      1.52
 6 mu         0.6      0.973       0.937   6.60e- 1      1.43
 7 mu         0.7      0.982       0.990   6.29e- 1      1.38
 8 mu         0.8      1.01        1.02    5.34e- 1      1.60
 9 mu         0.9      1.04        1.02    3.83e- 1      2.00
10 mu_1       0.1      1.31        0.110   6.44e-12     23.6 
11 mu_1       0.2      1.06        0.821   1.99e- 4     10.5 
12 mu_1       0.3      1.05        0.944   1.50e- 1      3.02
13 mu_1       0.4      1.02        0.970   3.50e- 1      1.79
14 mu_1       0.5      0.985       0.975   5.92e- 1      1.50
15 mu_1       0.6      0.972       0.937   6.68e- 1      1.44
16 mu_1       0.7      0.984       0.991   6.27e- 1      1.38
17 mu_1       0.8      1.01        1.02    5.26e- 1      1.61
18 mu_1       0.9      1.04        1.01    3.81e- 1      2.01
19 mu_0       0.1      1.31        0.0520  1.15e-12     32.8 
20 mu_0       0.2      1.07        0.717   7.87e- 5     14.3 
21 mu_0       0.3      1.05        0.974   9.90e- 2      3.14
22 mu_0       0.4      1.03        0.984   3.26e- 1      1.75
23 mu_0       0.5      0.985       0.985   6.09e- 1      1.55
24 mu_0       0.6      0.975       0.937   6.48e- 1      1.45
25 mu_0       0.7      0.978       0.986   6.33e- 1      1.36
26 mu_0       0.8      1.01        1.02    5.66e- 1      1.55
27 mu_0       0.9      1.04        1.03    3.74e- 1      1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0705     9.87e-27  2.88e-69      7.04
 2 mu         0.2     1.81       8.05e-15  1.13e-45    177.  
 3 mu         0.3     1.01       1.26e- 8  3.14e-32     33.5 
 4 mu         0.4     1.37       1.82e- 4  8.07e-23     23.5 
 5 mu         0.5     0.979      8.03e- 2  1.17e-15      8.62
 6 mu         0.6     1.12       3.59e- 1  5.77e-10      9.77
 7 mu         0.7     0.889      4.54e- 1  2.74e-14      5.29
 8 mu         0.8     1.38       1.24e- 2  3.67e-23     14.1 
 9 mu         0.9     1.24       6.94e- 8  5.30e-39     30.6 
10 mu_1       0.1     0.143      6.58e-26  2.65e-68     14.3 
11 mu_1       0.2     1.86       2.94e-14  5.29e-45    180.  
12 mu_1       0.3     0.991      2.67e- 8  9.82e-32     29.9 
13 mu_1       0.4     1.37       2.93e- 4  1.90e-22     22.4 
14 mu_1       0.5     0.965      1.03e- 1  2.21e-15      8.07
15 mu_1       0.6     1.13       3.25e- 1  9.04e-10      9.82
16 mu_1       0.7     0.890      4.63e- 1  7.94e-15      5.17
17 mu_1       0.8     1.39       9.91e- 3  9.30e-24     13.9 
18 mu_1       0.9     1.25       5.12e- 8  1.19e-39     32.0 
19 mu_0       0.1     0.0624     3.58e-27  2.57e-70      6.24
20 mu_0       0.2     1.80       2.72e-15  8.47e-47    177.  
21 mu_0       0.3     1.01       6.55e- 9  2.70e-33     38.1 
22 mu_0       0.4     1.38       1.09e- 4  8.10e-24     24.3 
23 mu_0       0.5     0.993      5.60e- 2  1.42e-16      9.17
24 mu_0       0.6     1.11       2.91e- 1  8.70e-11      9.70
25 mu_0       0.7     0.886      3.76e- 1  7.28e-14      5.59
26 mu_0       0.8     1.36       2.09e- 2  1.46e-22     14.8 
27 mu_0       0.9     1.07       2.33e- 7  4.22e-38     20.1 
[1] "Total run time was 376.324 seconds"
