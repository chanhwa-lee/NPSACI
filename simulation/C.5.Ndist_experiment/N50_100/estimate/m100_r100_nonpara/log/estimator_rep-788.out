
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7540"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  4   2   1   2   2   3   2   2   3   1   1   1   2   1   2   1   2   4   2   4 
 71  72  73  74  75  76  77  79  80  81  82  83  84  86  87  89  90  91  92  93 
  1   1   1   4   1   3   1   1   1   6   2   1   1   3   3   3   4   2   3   5 
 94  96  97  98  99 100 
  1   3   3   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0258  0.3145  0.5899  0.9840  6.4691 
[1] "event indicator table: "

   0    1 
4435 3105 
[1] "treatment indicator table: "

   0    1 
2899 4641 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3754
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3786
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 376.377 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.200 0.0412
 2 mu         0.1   0.2 0.309 0.0934
 3 mu         0.1   0.3 0.329 0.0779
 4 mu         0.1   0.4 0.363 0.0985
 5 mu         0.1   0.5 0.403 0.0987
 6 mu         0.2   0.1 0.298 0.0627
 7 mu         0.2   0.2 0.433 0.107 
 8 mu         0.2   0.3 0.472 0.0996
 9 mu         0.2   0.4 0.529 0.120 
10 mu         0.2   0.5 0.578 0.123 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.551       0.0607  8.53e-12      5.16
 2 mu         0.2      0.868       0.562   2.61e- 4     14.3 
 3 mu         0.3      0.982       0.940   1.49e- 1      2.60
 4 mu         0.4      0.987       0.971   2.99e- 1      1.73
 5 mu         0.5      1.03        0.975   6.23e- 1      2.18
 6 mu         0.6      1.01        0.991   5.41e- 1      1.63
 7 mu         0.7      1.01        0.997   6.64e- 1      1.59
 8 mu         0.8      0.983       0.948   4.99e- 1      1.82
 9 mu         0.9      1.12        1.01    1.51e- 2      4.38
10 mu_1       0.1      0.572       0.117   3.10e-11      3.99
11 mu_1       0.2      0.884       0.628   4.78e- 4     12.4 
12 mu_1       0.3      0.990       0.968   1.87e- 1      2.45
13 mu_1       0.4      0.987       0.947   3.30e- 1      1.67
14 mu_1       0.5      1.03        0.972   6.06e- 1      2.19
15 mu_1       0.6      1.01        0.988   5.44e- 1      1.58
16 mu_1       0.7      1.01        0.994   6.64e- 1      1.63
17 mu_1       0.8      0.983       0.948   5.02e- 1      1.85
18 mu_1       0.9      1.12        0.999   1.38e- 2      4.50
19 mu_0       0.1      0.549       0.0557  6.04e-12      5.29
20 mu_0       0.2      0.865       0.539   2.07e- 4     14.8 
21 mu_0       0.3      0.978       0.925   1.33e- 1      2.67
22 mu_0       0.4      0.987       0.989   2.78e- 1      1.77
23 mu_0       0.5      1.03        0.977   6.06e- 1      2.16
24 mu_0       0.6      1.01        0.992   5.36e- 1      1.71
25 mu_0       0.7      1.01        0.988   6.63e- 1      1.50
26 mu_0       0.8      0.984       0.965   4.87e- 1      1.70
27 mu_0       0.9      1.12        1.03    2.66e- 2      3.31
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0672     3.96e-25  1.61e-70      5.61
 2 mu         0.2     2.40       3.98e-13  3.42e-46    176.  
 3 mu         0.3     2.40       1.31e- 6  3.69e-32     47.0 
 4 mu         0.4     1.23       3.59e- 3  2.21e-22     18.2 
 5 mu         0.5     0.861      2.31e- 1  5.45e-15      9.06
 6 mu         0.6     1.60       1.94e- 1  3.55e- 9     20.3 
 7 mu         0.7     1.02       2.33e- 1  1.89e-15     13.4 
 8 mu         0.8     1.15       2.39e- 3  5.70e-25     20.2 
 9 mu         0.9     2.45       2.02e- 9  5.79e-42     59.7 
10 mu_1       0.1     0.140      2.29e-24  1.49e-69     11.4 
11 mu_1       0.2     2.58       1.15e-12  1.57e-45    179.  
12 mu_1       0.3     2.31       2.55e- 6  1.13e-31     46.8 
13 mu_1       0.4     1.15       5.85e- 3  5.08e-22     16.7 
14 mu_1       0.5     0.885      2.81e- 1  1.00e-14      8.75
15 mu_1       0.6     1.61       1.87e- 1  1.48e- 9     20.3 
16 mu_1       0.7     0.997      2.43e- 1  5.46e-16     12.6 
17 mu_1       0.8     1.16       1.74e- 3  1.44e-25     21.5 
18 mu_1       0.9     2.45       1.33e- 9  1.30e-42     61.1 
19 mu_0       0.1     0.0592     1.85e-25  1.41e-71      4.97
20 mu_0       0.2     2.35       2.10e-13  3.36e-47    176.  
21 mu_0       0.3     2.44       7.79e- 7  4.15e-33     47.5 
22 mu_0       0.4     1.28       2.13e- 3  2.89e-23     19.1 
23 mu_0       0.5     0.836      1.81e- 1  8.57e-16      9.37
24 mu_0       0.6     1.59       2.18e- 1  6.99e-10     20.3 
25 mu_0       0.7     1.06       2.79e- 1  5.01e-15     15.4 
26 mu_0       0.8     1.08       5.08e- 3  2.27e-24     15.0 
27 mu_0       0.9     2.39       8.34e- 9  4.61e-41     46.9 
[1] "Total run time was 379.583 seconds"
