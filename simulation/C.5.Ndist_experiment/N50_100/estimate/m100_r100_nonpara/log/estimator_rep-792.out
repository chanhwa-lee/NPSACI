
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7505"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  64  66  67  68  69  70  71 
  1   1   5   2   4   1   1   2   2   4   4   3   1   1   1   4   3   4   2   1 
 72  74  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92  93  94 
  2   1   1   3   3   1   2   1   3   1   2   2   3   1   4   1   1   2   2   5 
 95  96  97  98  99 100 
  1   2   2   2   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04458 0.36786 0.63530 1.00000 9.00000 
[1] "event indicator table: "

   0    1 
4436 3069 
[1] "treatment indicator table: "

   0    1 
2910 4595 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3805
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3700
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 446.763 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.386 0.0863
 2 mu         0.1   0.2 0.451 0.0912
 3 mu         0.1   0.3 0.529 0.121 
 4 mu         0.1   0.4 0.560 0.128 
 5 mu         0.1   0.5 0.625 0.144 
 6 mu         0.2   0.1 0.326 0.0453
 7 mu         0.2   0.2 0.383 0.0436
 8 mu         0.2   0.3 0.451 0.0540
 9 mu         0.2   0.4 0.478 0.0549
10 mu         0.2   0.5 0.528 0.0674
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.14         0.345 0.00000000361     14.2 
 2 mu         0.2      1.07         0.985 0.00781            4.00
 3 mu         0.3      1.03         0.955 0.400              2.03
 4 mu         0.4      1.01         1.02  0.467              1.67
 5 mu         0.5      1.00         1.01  0.640              1.46
 6 mu         0.6      1.01         1.01  0.679              1.48
 7 mu         0.7      1.03         1.01  0.685              1.55
 8 mu         0.8      1.02         1.00  0.531              1.90
 9 mu         0.9      0.953        0.942 0.0336             1.94
10 mu_1       0.1      1.16         0.458 0.0000000117      12.4 
11 mu_1       0.2      1.06         1.00  0.0128             3.60
12 mu_1       0.3      1.03         0.964 0.422              2.10
13 mu_1       0.4      1.01         1.02  0.482              1.65
14 mu_1       0.5      1.00         1.01  0.649              1.45
15 mu_1       0.6      1.01         1.01  0.684              1.49
16 mu_1       0.7      1.03         1.02  0.689              1.57
17 mu_1       0.8      1.02         1.00  0.525              1.90
18 mu_1       0.9      0.952        0.940 0.0311             1.96
19 mu_0       0.1      1.14         0.332 0.00000000271     14.4 
20 mu_0       0.2      1.07         0.969 0.00656            4.10
21 mu_0       0.3      1.03         0.955 0.391              2.00
22 mu_0       0.4      1.01         1.01  0.457              1.69
23 mu_0       0.5      1.01         1.00  0.624              1.47
24 mu_0       0.6      1.01         1.01  0.671              1.45
25 mu_0       0.7      1.03         1.02  0.678              1.49
26 mu_0       0.8      1.03         0.993 0.553              1.90
27 mu_0       0.9      0.956        0.939 0.0559             2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      4.40      1.57e-25  1.02e-72    364.  
 2 mu         0.2      3.54      5.48e-13  1.54e-48    230.  
 3 mu         0.3      0.597     6.39e- 7  1.65e-34      8.36
 4 mu         0.4      0.883     3.46e- 3  1.18e-24     14.3 
 5 mu         0.5      1.44      1.13e- 1  4.02e-17     11.0 
 6 mu         0.6      1.02      3.27e- 1  4.26e-11      8.53
 7 mu         0.7      0.933     1.11e- 1  4.82e-18      5.79
 8 mu         0.8      1.36      6.16e- 3  1.11e-28     16.4 
 9 mu         0.9      1.83      3.10e- 9  1.12e-47     44.4 
10 mu_1       0.1      6.06      1.03e-24  9.71e-72    494.  
11 mu_1       0.2      2.60      1.72e-12  7.33e-48    156.  
12 mu_1       0.3      0.574     1.31e- 6  5.25e-34      8.84
13 mu_1       0.4      0.921     5.51e- 3  2.80e-24     14.1 
14 mu_1       0.5      1.45      1.19e- 1  7.65e-17     12.0 
15 mu_1       0.6      0.988     3.08e- 1  2.11e-11      7.72
16 mu_1       0.7      0.946     8.63e- 2  1.41e-18      5.80
17 mu_1       0.8      1.38      4.80e- 3  2.85e-29     16.9 
18 mu_1       0.9      1.83      2.19e- 9  2.54e-48     44.5 
19 mu_0       0.1      4.21      6.09e-26  5.33e-74    350.  
20 mu_0       0.2      3.77      2.55e-13  9.05e-50    248.  
21 mu_0       0.3      0.606     3.53e- 7  1.11e-35      8.66
22 mu_0       0.4      0.857     2.10e- 3  9.23e-26     14.5 
23 mu_0       0.5      1.42      8.70e- 2  3.78e-18     10.1 
24 mu_0       0.6      1.07      2.52e- 1  5.02e-12      9.73
25 mu_0       0.7      0.901     1.59e- 1  1.28e-17      5.77
26 mu_0       0.8      1.31      8.10e- 3  4.43e-28     14.5 
27 mu_0       0.9      1.85      1.11e- 8  8.89e-47     43.3 
[1] "Total run time was 450.225 seconds"
