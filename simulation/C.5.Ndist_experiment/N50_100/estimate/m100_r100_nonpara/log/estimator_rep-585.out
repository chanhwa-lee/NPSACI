
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7688"
[1] "cluster size dist'n: "

 51  53  54  55  56  57  58  59  61  63  65  66  67  68  69  71  72  73  74  75 
  2   4   1   1   3   4   2   1   1   1   2   1   3   2   3   3   3   1   3   3 
 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  4   1   2   3   3   5   1   2   2   1   2   6   4   3   3   2   3   1   2   1 
 97  98  99 100 
  1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03327 0.34015 0.60622 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4666 3022 
[1] "treatment indicator table: "

   0    1 
2714 4974 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3837
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3851
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 366.311 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.278 0.0586
 2 mu         0.1   0.2 0.375 0.0636
 3 mu         0.1   0.3 0.402 0.0630
 4 mu         0.1   0.4 0.469 0.0798
 5 mu         0.1   0.5 0.476 0.0758
 6 mu         0.2   0.1 0.335 0.0423
 7 mu         0.2   0.2 0.451 0.0438
 8 mu         0.2   0.3 0.497 0.0428
 9 mu         0.2   0.4 0.563 0.0555
10 mu         0.2   0.5 0.588 0.0509
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.754       0.0758 0.000000181      6.03
 2 mu         0.2      1.01        0.870  0.0180           3.71
 3 mu         0.3      0.960       0.946  0.217            2.01
 4 mu         0.4      1.00        0.957  0.508            1.63
 5 mu         0.5      1.01        0.998  0.406            1.97
 6 mu         0.6      1.01        0.989  0.584            1.64
 7 mu         0.7      1.01        0.985  0.514            1.56
 8 mu         0.8      0.990       0.978  0.536            1.67
 9 mu         0.9      0.910       0.859  0.270            1.94
10 mu_1       0.1      0.846       0.136  0.000000540      5.30
11 mu_1       0.2      1.00        0.882  0.0276           3.90
12 mu_1       0.3      0.961       0.957  0.230            2.06
13 mu_1       0.4      1.01        0.962  0.502            1.61
14 mu_1       0.5      1.01        0.992  0.410            1.98
15 mu_1       0.6      1.01        0.999  0.584            1.64
16 mu_1       0.7      1.01        0.985  0.525            1.58
17 mu_1       0.8      0.989       0.973  0.531            1.68
18 mu_1       0.9      0.909       0.859  0.261            1.93
19 mu_0       0.1      0.744       0.0695 0.000000141      6.32
20 mu_0       0.2      1.01        0.871  0.0156           3.73
21 mu_0       0.3      0.960       0.941  0.211            1.99
22 mu_0       0.4      1.00        0.961  0.482            1.64
23 mu_0       0.5      1.01        0.999  0.403            1.96
24 mu_0       0.6      1.02        0.998  0.576            1.65
25 mu_0       0.7      1.01        0.989  0.490            1.56
26 mu_0       0.8      0.991       0.989  0.557            1.62
27 mu_0       0.9      0.917       0.908  0.355            1.96
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.473     8.78e-34  6.66e-79     47.3 
 2 mu         0.2      0.787     2.79e-18  1.14e-52     44.6 
 3 mu         0.3      1.11      7.64e-10  1.84e-37     46.8 
 4 mu         0.4      1.11      1.41e- 5  8.40e-27     13.7 
 5 mu         0.5      1.31      6.99e- 3  1.14e-18     26.0 
 6 mu         0.6      0.925     6.09e- 2  4.70e-16     13.7 
 7 mu         0.7      0.983     2.24e- 1  8.37e-25      8.13
 8 mu         0.8      1.39      9.37e- 2  1.31e-37     15.9 
 9 mu         0.9      1.50      5.08e- 6  4.01e-60     34.7 
10 mu_1       0.1      0.684     7.03e-33  6.30e-78     68.3 
11 mu_1       0.2      0.766     8.58e-18  5.41e-52     32.2 
12 mu_1       0.3      1.10      1.82e- 9  5.80e-37     40.8 
13 mu_1       0.4      1.14      2.53e- 5  1.99e-26     12.6 
14 mu_1       0.5      1.31      8.09e- 3  2.16e-18     26.3 
15 mu_1       0.6      0.900     6.92e- 2  1.13e-16     13.4 
16 mu_1       0.7      1.01      1.94e- 1  1.73e-25      8.45
17 mu_1       0.8      1.39      9.71e- 2  2.37e-38     15.6 
18 mu_1       0.9      1.51      3.76e- 6  6.43e-61     34.8 
19 mu_0       0.1      0.450     1.94e-34  3.98e-80     44.9 
20 mu_0       0.2      0.792     1.35e-18  7.69e-54     47.7 
21 mu_0       0.3      1.12      3.10e-10  1.41e-38     49.4 
22 mu_0       0.4      1.09      6.86e- 6  7.53e-28     14.6 
23 mu_0       0.5      1.31      4.37e- 3  1.22e-19     25.7 
24 mu_0       0.6      0.961     4.73e- 2  1.01e-15     14.2 
25 mu_0       0.7      0.930     2.60e- 1  2.39e-24      7.39
26 mu_0       0.8      1.43      6.32e- 2  5.60e-37     16.9 
27 mu_0       0.9      1.41      1.66e- 5  3.43e-59     34.2 
[1] "Total run time was 369.643 seconds"
