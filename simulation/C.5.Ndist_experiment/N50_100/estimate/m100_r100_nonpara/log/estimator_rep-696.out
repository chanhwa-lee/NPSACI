
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7452"
[1] "cluster size dist'n: "

 50  51  52  54  55  57  58  59  60  62  64  65  66  67  68  69  70  71  72  73 
  2   3   3   1   1   2   4   3   1   1   3   1   3   3   8   2   5   3   2   1 
 74  75  76  77  78  79  81  82  84  85  86  87  88  89  90  91  92  93  94  95 
  2   4   2   2   3   1   2   2   1   1   1   2   1   2   2   2   3   2   3   2 
 96  97  98  99 100 
  1   1   2   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03551 0.33763 0.61279 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4358 3094 
[1] "treatment indicator table: "

   0    1 
2922 4530 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3671
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3781
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 442.084 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.280 0.0669
 2 mu         0.1   0.2 0.399 0.114 
 3 mu         0.1   0.3 0.456 0.128 
 4 mu         0.1   0.4 0.472 0.120 
 5 mu         0.1   0.5 0.479 0.123 
 6 mu         0.2   0.1 0.278 0.0395
 7 mu         0.2   0.2 0.400 0.0890
 8 mu         0.2   0.3 0.461 0.0975
 9 mu         0.2   0.4 0.491 0.0830
10 mu         0.2   0.5 0.507 0.0822
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.820        0.179 0.00000101       6.63
 2 mu         0.2      0.946        0.853 0.0687           2.70
 3 mu         0.3      0.985        0.971 0.433            1.94
 4 mu         0.4      0.960        0.936 0.478            1.52
 5 mu         0.5      0.964        0.960 0.504            1.43
 6 mu         0.6      1.00         1.00  0.472            1.36
 7 mu         0.7      1.01         0.998 0.597            1.37
 8 mu         0.8      1.03         1.03  0.384            2.24
 9 mu         0.9      1.10         1.05  0.0604           2.90
10 mu_1       0.1      0.850        0.304 0.00000285       5.29
11 mu_1       0.2      0.952        0.860 0.0973           2.63
12 mu_1       0.3      0.984        0.990 0.445            1.98
13 mu_1       0.4      0.959        0.929 0.485            1.47
14 mu_1       0.5      0.966        0.967 0.490            1.41
15 mu_1       0.6      1.00         1.01  0.478            1.37
16 mu_1       0.7      1.01         1.00  0.587            1.40
17 mu_1       0.8      1.03         1.03  0.387            2.26
18 mu_1       0.9      1.10         1.05  0.0558           2.89
19 mu_0       0.1      0.817        0.165 0.000000807      6.77
20 mu_0       0.2      0.944        0.842 0.0615           2.73
21 mu_0       0.3      0.986        0.970 0.428            1.94
22 mu_0       0.4      0.962        0.934 0.472            1.57
23 mu_0       0.5      0.961        0.948 0.517            1.44
24 mu_0       0.6      1.00         0.997 0.462            1.35
25 mu_0       0.7      1.01         0.993 0.619            1.38
26 mu_0       0.8      1.03         1.01  0.375            2.13
27 mu_0       0.9      1.08         1.04  0.102            3.00
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.74      4.01e-24  7.03e-67    148.  
 2 mu         0.2      1.03      9.97e-13  2.94e-43     51.1 
 3 mu         0.3      0.806     1.11e- 6  1.08e-29     24.7 
 4 mu         0.4      0.813     1.75e- 3  2.67e-20      9.80
 5 mu         0.5      0.973     1.01e- 1  2.93e-13      6.37
 6 mu         0.6      1.05      3.12e- 1  3.16e-17      6.94
 7 mu         0.7      0.964     2.09e- 1  1.02e-26      7.00
 8 mu         0.8      1.20      3.03e- 3  1.22e-40      9.75
 9 mu         0.9      1.60      3.55e- 9  3.70e-65     39.6 
10 mu_1       0.1      2.27      2.77e-23  6.32e-66    188.  
11 mu_1       0.2      0.781     3.06e-12  1.32e-42     32.4 
12 mu_1       0.3      0.865     2.19e- 6  3.24e-29     25.5 
13 mu_1       0.4      0.799     2.75e- 3  6.01e-20      8.16
14 mu_1       0.5      0.995     9.82e- 2  5.27e-13      6.71
15 mu_1       0.6      1.04      2.91e- 1  7.99e-18      6.73
16 mu_1       0.7      0.964     1.77e- 1  2.21e-27      6.78
17 mu_1       0.8      1.21      2.36e- 3  2.32e-41     10.3 
18 mu_1       0.9      1.60      2.26e- 9  6.23e-66     39.6 
19 mu_0       0.1      1.68      1.38e-24  7.90e-68    144.  
20 mu_0       0.2      1.09      4.80e-13  3.72e-44     55.7 
21 mu_0       0.3      0.780     6.52e- 7  1.56e-30     24.4 
22 mu_0       0.4      0.823     1.16e- 3  4.50e-21     10.9 
23 mu_0       0.5      0.951     7.38e- 2  5.93e-14      6.03
24 mu_0       0.6      1.07      2.93e- 1  6.71e-17      7.64
25 mu_0       0.7      0.964     2.24e- 1  2.89e-26      7.50
26 mu_0       0.8      1.15      5.79e- 3  5.19e-40      7.76
27 mu_0       0.9      1.59      1.51e- 8  3.14e-64     40.1 
[1] "Total run time was 446.687 seconds"
