
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7729"
[1] "cluster size dist'n: "

 50  51  52  54  55  58  59  60  61  63  64  65  66  67  68  70  71  73  74  75 
  2   2   2   2   3   2   2   1   2   2   2   3   4   2   1   4   1   2   4   2 
 76  77  78  79  80  81  82  84  85  86  88  89  90  91  92  93  94  95  96  97 
  1   2   1   6   2   1   1   2   3   3   4   1   5   1   2   1   3   6   3   1 
 98 100 
  3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0194  0.3001  0.5770  0.9979  6.7255 
[1] "event indicator table: "

   0    1 
4592 3137 
[1] "treatment indicator table: "

   0    1 
3016 4713 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3873
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3856
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 364.351 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.355 0.0523
 2 mu         0.1   0.2 0.437 0.0672
 3 mu         0.1   0.3 0.537 0.0725
 4 mu         0.1   0.4 0.541 0.0629
 5 mu         0.1   0.5 0.558 0.0616
 6 mu         0.2   0.1 0.368 0.0541
 7 mu         0.2   0.2 0.440 0.0536
 8 mu         0.2   0.3 0.527 0.0507
 9 mu         0.2   0.4 0.536 0.0509
10 mu         0.2   0.5 0.576 0.0483
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.846        0.772  1.34e- 9      3.28
 2 mu         0.2      0.980        0.970  8.31e- 4      2.91
 3 mu         0.3      0.960        0.961  2.00e- 1      1.88
 4 mu         0.4      0.999        1.00   5.53e- 1      1.57
 5 mu         0.5      0.993        0.955  5.19e- 1      1.59
 6 mu         0.6      1.01         0.995  6.50e- 1      1.42
 7 mu         0.7      1.01         1.00   5.82e- 1      1.56
 8 mu         0.8      1.02         1.02   5.67e- 1      1.48
 9 mu         0.9      1.04         1.00   4.90e- 1      1.84
10 mu_1       0.1      0.893        0.849  4.78e- 9      2.77
11 mu_1       0.2      0.973        0.989  1.54e- 3      2.61
12 mu_1       0.3      0.961        0.950  2.63e- 1      1.86
13 mu_1       0.4      1.00         0.997  5.27e- 1      1.55
14 mu_1       0.5      0.991        0.951  5.32e- 1      1.61
15 mu_1       0.6      1.01         1.00   6.53e- 1      1.40
16 mu_1       0.7      1.01         0.994  5.92e- 1      1.55
17 mu_1       0.8      1.02         1.02   5.50e- 1      1.49
18 mu_1       0.9      1.04         1.01   4.84e- 1      1.85
19 mu_0       0.1      0.841        0.761  9.55e-10      3.33
20 mu_0       0.2      0.982        0.965  6.54e- 4      2.98
21 mu_0       0.3      0.959        0.957  1.73e- 1      1.89
22 mu_0       0.4      0.997        0.999  5.70e- 1      1.59
23 mu_0       0.5      0.996        0.959  5.07e- 1      1.57
24 mu_0       0.6      1.00         0.991  6.44e- 1      1.46
25 mu_0       0.7      1.01         1.01   5.58e- 1      1.61
26 mu_0       0.8      1.02         1.02   6.07e- 1      1.44
27 mu_0       0.9      1.04         1.02   5.38e- 1      1.79
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.0104      2.09e-24  5.43e-78     0.703
 2 mu         0.2    0.628       1.54e-12  8.29e-52    21.1  
 3 mu         0.3    1.17        2.87e- 6  1.17e-36    22.0  
 4 mu         0.4    1.13        6.77e- 3  4.57e-26     9.41 
 5 mu         0.5    1.27        4.33e- 2  6.54e-19     9.21 
 6 mu         0.6    0.925       1.43e- 1  2.28e-13     7.73 
 7 mu         0.7    0.962       4.26e- 2  3.78e-18     7.41 
 8 mu         0.8    0.939       1.15e- 3  6.65e-29    12.3  
 9 mu         0.9    1.17        2.26e- 9  3.76e-48    19.7  
10 mu_1       0.1    0.0213      1.19e-23  5.08e-77     1.36 
11 mu_1       0.2    0.733       4.63e-12  3.88e-51    22.3  
12 mu_1       0.3    1.19        5.71e- 6  3.64e-36    20.3  
13 mu_1       0.4    1.13        9.77e- 3  1.07e-25    10.1  
14 mu_1       0.5    1.26        3.09e- 2  1.31e-18     9.35 
15 mu_1       0.6    0.912       1.15e- 1  3.81e-13     7.46 
16 mu_1       0.7    0.968       3.75e- 2  1.14e-18     7.56 
17 mu_1       0.8    0.942       8.26e- 4  1.76e-29    12.8  
18 mu_1       0.9    1.17        1.45e- 9  8.84e-49    19.4  
19 mu_0       0.1    0.00925     9.92e-25  0            0.630
20 mu_0       0.2    0.602       7.82e-13  0           20.8  
21 mu_0       0.3    1.17        1.64e- 6  0           22.8  
22 mu_0       0.4    1.12        4.35e- 3  0            8.96 
23 mu_0       0.5    1.28        4.56e- 2  0            9.06 
24 mu_0       0.6    0.945       1.36e- 1  0            8.12 
25 mu_0       0.7    0.949       3.42e- 2  0            7.06 
26 mu_0       0.8    0.927       2.05e- 3  0           10.3  
27 mu_0       0.9    1.11        1.51e- 9  0           21.9  
[1] "Total run time was 367.595 seconds"
