
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7545"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69  70  71 
  4   1   1   2   3   1   4   2   4   3   1   5   1   2   1   1   3   2   1   1 
 72  73  74  75  77  78  79  80  82  84  85  86  87  88  89  90  91  92  93  94 
  1   2   2   2   2   2   6   1   2   4   1   1   2   1   1   2   2   1   1   4 
 95  96  97  98  99 100 
  2   5   4   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03979 0.36274 0.61630 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4554 2991 
[1] "treatment indicator table: "

   0    1 
2782 4763 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3651
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3894
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 428.267 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.610 0.145 
 2 mu         0.1   0.2 0.831 0.193 
 3 mu         0.1   0.3 0.982 0.233 
 4 mu         0.1   0.4 1.06  0.253 
 5 mu         0.1   0.5 1.16  0.272 
 6 mu         0.2   0.1 0.361 0.0430
 7 mu         0.2   0.2 0.501 0.0579
 8 mu         0.2   0.3 0.598 0.0765
 9 mu         0.2   0.4 0.646 0.0740
10 mu         0.2   0.5 0.712 0.0788
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.87         0.723  1.38e-17     33.9 
 2 mu         0.2      1.18         0.947  1.23e- 7      8.54
 3 mu         0.3      0.983        0.924  3.24e- 3      3.45
 4 mu         0.4      0.994        0.976  2.91e- 1      1.92
 5 mu         0.5      0.990        0.993  4.40e- 1      1.54
 6 mu         0.6      0.999        0.979  5.53e- 1      1.64
 7 mu         0.7      0.966        0.971  4.76e- 1      1.52
 8 mu         0.8      0.935        0.923  4.85e- 1      1.60
 9 mu         0.9      1.04         1.04   1.66e- 1      2.52
10 mu_1       0.1      1.97         0.731  6.06e-17     37.7 
11 mu_1       0.2      1.14         0.962  2.72e- 7      7.71
12 mu_1       0.3      0.982        0.912  4.84e- 3      3.69
13 mu_1       0.4      0.994        0.988  3.37e- 1      1.84
14 mu_1       0.5      0.990        0.986  4.53e- 1      1.54
15 mu_1       0.6      0.999        0.981  5.58e- 1      1.63
16 mu_1       0.7      0.963        0.973  4.73e- 1      1.52
17 mu_1       0.8      0.936        0.934  4.74e- 1      1.63
18 mu_1       0.9      1.04         1.04   1.56e- 1      2.57
19 mu_0       0.1      1.85         0.715  8.63e-18     33.5 
20 mu_0       0.2      1.19         0.946  8.61e- 8      8.82
21 mu_0       0.3      0.984        0.928  2.55e- 3      3.34
22 mu_0       0.4      0.994        0.968  2.61e- 1      2.04
23 mu_0       0.5      0.990        1.00   4.26e- 1      1.53
24 mu_0       0.6      0.999        0.987  5.44e- 1      1.66
25 mu_0       0.7      0.972        0.972  4.82e- 1      1.51
26 mu_0       0.8      0.928        0.904  4.45e- 1      1.53
27 mu_0       0.9      1.03         1.01   2.46e- 1      2.06
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.129     8.14e-28  2.18e-86      9.39
 2 mu         0.2      1.56      1.40e-15  5.40e-58     76.6 
 3 mu         0.3      1.92      8.41e- 9  1.69e-41     42.1 
 4 mu         0.4      1.17      1.73e- 4  6.77e-30     19.7 
 5 mu         0.5      1.18      2.71e- 2  5.25e-21      9.89
 6 mu         0.6      0.890     1.11e- 1  7.15e-14      8.12
 7 mu         0.7      1.13      1.67e- 1  1.91e-17      8.01
 8 mu         0.8      1.21      2.33e- 2  3.14e-28     10.7 
 9 mu         0.9      1.06      3.47e- 7  1.12e-48     31.9 
10 mu_1       0.1      0.201     5.37e-27  2.09e-85     12.7 
11 mu_1       0.2      1.79      4.65e-15  2.59e-57     84.4 
12 mu_1       0.3      1.83      1.93e- 8  5.42e-41     45.4 
13 mu_1       0.4      1.13      2.18e- 4  1.62e-29     15.9 
14 mu_1       0.5      1.17      3.34e- 2  1.01e-20     10.7 
15 mu_1       0.6      0.881     1.25e- 1  1.14e-13      7.57
16 mu_1       0.7      1.14      1.32e- 1  4.87e-18      7.98
17 mu_1       0.8      1.20      1.89e- 2  9.81e-29     11.0 
18 mu_1       0.9      1.08      2.50e- 7  3.12e-49     34.2 
19 mu_0       0.1      0.121     3.07e-28  9.80e-88      9.02
20 mu_0       0.2      1.50      5.79e-16  2.73e-59     74.7 
21 mu_0       0.3      1.96      3.74e- 9  9.78e-43     40.7 
22 mu_0       0.4      1.19      1.08e- 4  4.56e-31     22.2 
23 mu_0       0.5      1.19      2.06e- 2  4.24e-22      9.76
24 mu_0       0.6      0.904     1.21e- 1  7.23e-15      8.95
25 mu_0       0.7      1.09      1.27e- 1  5.17e-17      8.10
26 mu_0       0.8      1.23      3.00e- 2  1.18e-27      9.61
27 mu_0       0.9      0.912     1.22e- 6  8.42e-48     14.5 
[1] "Total run time was 431.765 seconds"
