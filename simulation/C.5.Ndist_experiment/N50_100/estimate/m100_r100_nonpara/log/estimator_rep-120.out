
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7478"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  60  61  62  63  64  65  66  67  69  73  74  75  77  78 
  3   4   6   4   3   3   3   5   1   1   2   2   3   1   4   1   1   1   2   1 
 80  81  83  84  85  86  87  88  89  90  91  92  93  94  95  96  98  99 100 
  6   4   3   3   1   1   1   1   3   4   1   2   4   3   1   3   4   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03852 0.37003 0.62777 1.00000 5.20228 
[1] "event indicator table: "

   0    1 
4471 3007 
[1] "treatment indicator table: "

   0    1 
2621 4857 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3660
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3818
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 582.954 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0810
 2 mu         0.1   0.2 0.391 0.0915
 3 mu         0.1   0.3 0.473 0.115 
 4 mu         0.1   0.4 0.510 0.122 
 5 mu         0.1   0.5 0.554 0.134 
 6 mu         0.2   0.1 0.387 0.0515
 7 mu         0.2   0.2 0.464 0.0560
 8 mu         0.2   0.3 0.555 0.0788
 9 mu         0.2   0.4 0.610 0.0823
10 mu         0.2   0.5 0.661 0.0909
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.724        0.282  9.03e-15     14.9 
 2 mu         0.2      0.995        0.933  4.11e- 6      4.57
 3 mu         0.3      0.988        0.983  1.43e- 2      2.20
 4 mu         0.4      0.983        0.987  2.91e- 1      1.65
 5 mu         0.5      0.986        0.992  4.43e- 1      1.53
 6 mu         0.6      0.989        0.997  6.16e- 1      1.44
 7 mu         0.7      0.993        0.995  6.18e- 1      1.45
 8 mu         0.8      1.01         1.00   5.70e- 1      1.47
 9 mu         0.9      0.992        0.965  2.43e- 1      2.05
10 mu_1       0.1      0.783        0.398  3.67e-14     15.5 
11 mu_1       0.2      1.01         0.907  8.37e- 6      4.98
12 mu_1       0.3      0.984        0.977  1.95e- 2      2.10
13 mu_1       0.4      0.984        0.986  3.23e- 1      1.70
14 mu_1       0.5      0.986        0.999  4.58e- 1      1.50
15 mu_1       0.6      0.988        0.989  6.12e- 1      1.43
16 mu_1       0.7      0.994        0.997  6.18e- 1      1.43
17 mu_1       0.8      1.01         1.01   5.69e- 1      1.46
18 mu_1       0.9      0.992        0.972  2.34e- 1      2.09
19 mu_0       0.1      0.717        0.267  5.96e-15     14.9 
20 mu_0       0.2      0.992        0.929  3.04e- 6      4.46
21 mu_0       0.3      0.990        0.975  1.20e- 2      2.25
22 mu_0       0.4      0.983        1.00   2.69e- 1      1.62
23 mu_0       0.5      0.985        0.991  4.29e- 1      1.55
24 mu_0       0.6      0.989        0.995  6.23e- 1      1.48
25 mu_0       0.7      0.991        0.998  6.19e- 1      1.48
26 mu_0       0.8      1.01         1.00   5.77e- 1      1.49
27 mu_0       0.9      0.992        0.990  3.21e- 1      1.77
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.694     1.20e-29  2.54e-73     69.4 
 2 mu         0.2      1.05      2.60e-16  3.83e-49     94.5 
 3 mu         0.3      1.29      1.71e- 9  4.12e-35     33.5 
 4 mu         0.4      1.08      4.59e- 5  2.93e-25     26.9 
 5 mu         0.5      0.906     2.36e- 2  1.00e-17      6.32
 6 mu         0.6      1.02      5.81e- 2  1.70e-13      7.44
 7 mu         0.7      0.986     2.74e- 1  3.46e-21      7.29
 8 mu         0.8      1.41      1.68e- 1  1.82e-32      8.29
 9 mu         0.9      1.18      5.40e- 5  2.54e-52     13.4 
10 mu_1       0.1      1.04      8.05e-29  2.42e-72    104.  
11 mu_1       0.2      0.858     8.92e-16  1.83e-48     70.9 
12 mu_1       0.3      1.38      3.94e- 9  1.31e-34     38.4 
13 mu_1       0.4      1.03      7.66e- 5  6.98e-25     23.1 
14 mu_1       0.5      0.923     2.71e- 2  1.91e-17      6.71
15 mu_1       0.6      1.01      6.66e- 2  4.26e-14      7.13
16 mu_1       0.7      1.01      2.36e- 1  7.40e-22      7.22
17 mu_1       0.8      1.41      1.45e- 1  3.41e-33      8.56
18 mu_1       0.9      1.18      4.30e- 5  4.23e-53     14.1 
19 mu_0       0.1      0.656     4.42e-30  1.33e-74     65.6 
20 mu_0       0.2      1.09      1.02e-16  2.25e-50    100.  
21 mu_0       0.3      1.25      7.51e-10  2.77e-36     31.4 
22 mu_0       0.4      1.11      2.55e- 5  2.30e-26     29.4 
23 mu_0       0.5      0.889     1.48e- 2  9.41e-19      6.08
24 mu_0       0.6      1.04      4.48e- 2  3.62e-13      7.91
25 mu_0       0.7      0.936     2.35e- 1  9.79e-21      7.45
26 mu_0       0.8      1.44      1.28e- 1  7.74e-32      7.78
27 mu_0       0.9      1.17      1.53e- 4  2.15e-51     11.7 
[1] "Total run time was 587.237 seconds"
