
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7200"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  64  65  66  68  69  70  71  73 
  4   5   3   4   1   7   4   1   2   1   1   3   1   4   3   2   1   2   2   3 
 75  76  77  78  79  80  81  82  83  84  88  89  90  91  92  93  95  97  98  99 
  2   3   1   2   4   3   3   1   1   4   2   3   2   1   2   1   1   2   2   3 
100 
  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03412 0.35275 0.61825 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4242 2958 
[1] "treatment indicator table: "

   0    1 
2729 4471 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3684
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3516
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 460.081 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.676 0.224 
 2 mu         0.1   0.2 0.860 0.294 
 3 mu         0.1   0.3 0.964 0.321 
 4 mu         0.1   0.4 1.06  0.364 
 5 mu         0.1   0.5 1.15  0.383 
 6 mu         0.2   0.1 0.343 0.0362
 7 mu         0.2   0.2 0.465 0.0564
 8 mu         0.2   0.3 0.525 0.0461
 9 mu         0.2   0.4 0.582 0.0693
10 mu         0.2   0.5 0.619 0.0511
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.92        0.0764  7.42e-10     48.5 
 2 mu         0.2      1.12        0.994   1.66e- 3      3.80
 3 mu         0.3      0.993       1.00    2.99e- 1      1.93
 4 mu         0.4      0.988       0.977   4.79e- 1      1.66
 5 mu         0.5      1.00        1.01    7.15e- 1      1.48
 6 mu         0.6      0.991       1.01    7.18e- 1      1.27
 7 mu         0.7      1.00        1.01    6.83e- 1      1.46
 8 mu         0.8      1.00        1.02    6.17e- 1      1.48
 9 mu         0.9      1.09        1.08    4.88e- 2      2.06
10 mu_1       0.1      1.56        0.143   2.49e- 9     28.1 
11 mu_1       0.2      1.10        1.04    2.86e- 3      2.93
12 mu_1       0.3      0.981       0.972   3.78e- 1      1.76
13 mu_1       0.4      0.992       0.978   5.01e- 1      1.63
14 mu_1       0.5      1.00        0.999   7.17e- 1      1.49
15 mu_1       0.6      0.990       0.998   7.20e- 1      1.27
16 mu_1       0.7      1.01        1.00    6.81e- 1      1.47
17 mu_1       0.8      1.00        1.02    6.07e- 1      1.48
18 mu_1       0.9      1.09        1.08    4.51e- 2      2.06
19 mu_0       0.1      1.96        0.0690  5.48e-10     51.7 
20 mu_0       0.2      1.12        1.02    1.36e- 3      4.02
21 mu_0       0.3      0.998       1.00    2.65e- 1      2.01
22 mu_0       0.4      0.985       0.968   4.65e- 1      1.68
23 mu_0       0.5      1.00        1.00    7.08e- 1      1.47
24 mu_0       0.6      0.992       1.00    6.92e- 1      1.28
25 mu_0       0.7      1.00        1.00    6.87e- 1      1.43
26 mu_0       0.8      1.01        1.00    6.55e- 1      1.50
27 mu_0       0.9      1.06        1.06    8.24e- 2      2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.0104      5.55e-26  5.48e-87     1.04 
 2 mu         0.2    0.485       4.14e-14  2.71e-58    42.5  
 3 mu         0.3    0.870       4.68e- 8  1.27e-41    20.3  
 4 mu         0.4    1.16        6.61e- 4  6.79e-30    14.9  
 5 mu         0.5    1.04        1.52e- 1  6.58e-21     9.34 
 6 mu         0.6    1.02        4.55e- 1  1.08e-13     6.06 
 7 mu         0.7    1.13        4.40e- 1  8.11e-14     7.17 
 8 mu         0.8    1.07        2.72e- 2  1.23e-23    10.3  
 9 mu         0.9    1.37        8.02e- 8  1.26e-41    33.8  
10 mu_1       0.1    0.0233      3.61e-25  5.26e-86     2.33 
11 mu_1       0.2    0.566       1.34e-13  1.30e-57    47.7  
12 mu_1       0.3    0.878       1.08e- 7  4.08e-41    20.6  
13 mu_1       0.4    1.19        1.05e- 3  1.63e-29    14.0  
14 mu_1       0.5    1.01        1.97e- 1  1.26e-20     9.05 
15 mu_1       0.6    1.04        4.07e- 1  1.72e-13     6.31 
16 mu_1       0.7    1.12        4.19e- 1  3.25e-14     7.17 
17 mu_1       0.8    1.08        2.18e- 2  4.31e-24    10.7  
18 mu_1       0.9    1.39        5.74e- 8  3.95e-42    36.0  
19 mu_0       0.1    0.00897     2.15e-26  2.43e-88     0.897
20 mu_0       0.2    0.465       1.82e-14  1.35e-59    41.3  
21 mu_0       0.3    0.867       2.25e- 8  7.28e-43    22.5  
22 mu_0       0.4    1.14        4.02e- 4  4.53e-31    15.4  
23 mu_0       0.5    1.06        1.21e- 1  5.27e-22     9.63 
24 mu_0       0.6    0.991       4.02e- 1  1.08e-14     5.68 
25 mu_0       0.7    1.15        3.60e- 1  1.94e-13     7.17 
26 mu_0       0.8    1.05        4.89e- 2  4.41e-23     8.81 
27 mu_0       0.9    1.15        2.85e- 7  9.09e-41    20.8  
[1] "Total run time was 464.787 seconds"
