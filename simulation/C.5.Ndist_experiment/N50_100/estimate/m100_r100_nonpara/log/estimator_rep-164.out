
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7477"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  63  65  67  68  69  70  71  72 
  1   5   3   1   1   4   4   1   1   1   2   1   1   3   2   4   6   1   2   4 
 73  74  75  76  77  79  81  82  83  84  86  87  88  89  90  91  93  94  95  97 
  3   2   3   1   2   1   4   2   2   1   2   2   3   2   2   2   1   4   3   2 
 98  99 100 
  4   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03066 0.33812 0.60745 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4442 3035 
[1] "treatment indicator table: "

   0    1 
2747 4730 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3728
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3749
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 504.677 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.284 0.0476
 2 mu         0.1   0.2 0.343 0.0592
 3 mu         0.1   0.3 0.389 0.0745
 4 mu         0.1   0.4 0.445 0.0801
 5 mu         0.1   0.5 0.456 0.0853
 6 mu         0.2   0.1 0.322 0.0254
 7 mu         0.2   0.2 0.388 0.0335
 8 mu         0.2   0.3 0.448 0.0410
 9 mu         0.2   0.4 0.515 0.0412
10 mu         0.2   0.5 0.540 0.0477
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.877        0.250 0.00000000215      5.74
 2 mu         0.2      1.01         0.842 0.00264            2.89
 3 mu         0.3      1.01         0.976 0.383              2.75
 4 mu         0.4      0.982        0.941 0.429              1.88
 5 mu         0.5      0.984        0.975 0.527              1.43
 6 mu         0.6      0.989        0.969 0.671              1.38
 7 mu         0.7      1.02         1.00  0.657              1.49
 8 mu         0.8      0.999        0.985 0.623              1.46
 9 mu         0.9      0.955        0.927 0.233              1.77
10 mu_1       0.1      0.954        0.399 0.00000000771      5.77
11 mu_1       0.2      0.998        0.885 0.00475            3.03
12 mu_1       0.3      1.01         0.974 0.467              2.62
13 mu_1       0.4      0.978        0.932 0.438              1.82
14 mu_1       0.5      0.986        0.974 0.528              1.46
15 mu_1       0.6      0.989        0.965 0.667              1.38
16 mu_1       0.7      1.02         0.994 0.653              1.48
17 mu_1       0.8      0.998        0.981 0.620              1.47
18 mu_1       0.9      0.955        0.928 0.229              1.77
19 mu_0       0.1      0.868        0.234 0.00000000153      5.74
20 mu_0       0.2      1.01         0.834 0.00212            2.87
21 mu_0       0.3      1.00         0.993 0.347              2.81
22 mu_0       0.4      0.984        0.949 0.424              1.91
23 mu_0       0.5      0.983        0.974 0.527              1.44
24 mu_0       0.6      0.989        0.974 0.677              1.39
25 mu_0       0.7      1.01         1.01  0.636              1.51
26 mu_0       0.8      1.00         0.975 0.634              1.45
27 mu_0       0.9      0.962        0.938 0.267              1.73
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000170     1.52e-30  1.17e-81    0.0148
 2 mu         0.2   0.518        2.44e-16  1.42e-55   40.7   
 3 mu         0.3   1.27         1.54e- 9  9.76e-41   35.1   
 4 mu         0.4   0.971        9.01e- 5  3.05e-30    8.82  
 5 mu         0.5   1.18         4.03e- 2  4.21e-22    9.13  
 6 mu         0.6   1.05         2.54e- 1  1.89e-15    8.26  
 7 mu         0.7   1.17         1.63e- 1  1.40e-17   11.6   
 8 mu         0.8   1.25         1.70e- 2  3.21e-29   20.9   
 9 mu         0.9   0.716        4.54e- 8  2.87e-50   24.1   
10 mu_1       0.1   0.000427     1.08e-29  1.14e-80    0.0363
11 mu_1       0.2   0.662        7.73e-16  6.96e-55   49.9   
12 mu_1       0.3   1.25         3.45e- 9  3.25e-40   28.6   
13 mu_1       0.4   0.988        1.43e- 4  7.62e-30    9.83  
14 mu_1       0.5   1.18         3.93e- 2  8.43e-22    8.99  
15 mu_1       0.6   1.04         2.50e- 1  3.15e-15    8.01  
16 mu_1       0.7   1.18         1.92e- 1  4.90e-18   12.8   
17 mu_1       0.8   1.24         1.36e- 2  9.84e-30   20.0   
18 mu_1       0.9   0.715        3.05e- 8  7.82e-51   24.7   
19 mu_0       0.1   0.000141     5.02e-31  0           0.0124
20 mu_0       0.2   0.482        1.12e-16  0          38.5   
21 mu_0       0.3   1.27         7.56e-10  0          37.8   
22 mu_0       0.4   0.960        4.93e- 5  0           8.16  
23 mu_0       0.5   1.19         2.95e- 2  0           9.26  
24 mu_0       0.6   1.06         2.03e- 1  0           8.64  
25 mu_0       0.7   1.14         1.17e- 1  0          12.6   
26 mu_0       0.8   1.29         3.05e- 2  0          24.3   
27 mu_0       0.9   0.724        1.32e- 7  0          17.9   
[1] "Total run time was 509.872 seconds"
