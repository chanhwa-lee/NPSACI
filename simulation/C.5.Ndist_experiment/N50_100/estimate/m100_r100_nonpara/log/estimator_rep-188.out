
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7582"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  62  63  64  66  67  68  71  72  74 
  1   1   3   1   3   2   3   3   1   2   1   2   5   2   1   2   1   4   2   5 
 75  76  77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93  94  96 
  2   4   2   2   3   2   3   1   1   2   1   2   3   3   4   2   2   2   1   5 
 97  98  99 100 
  3   3   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04652 0.38292 0.63937 1.00000 5.23720 
[1] "event indicator table: "

   0    1 
4542 3040 
[1] "treatment indicator table: "

   0    1 
2589 4993 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3828
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3754
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 417.307 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.236 0.0578
 2 mu         0.1   0.2 0.240 0.0695
 3 mu         0.1   0.3 0.284 0.0663
 4 mu         0.1   0.4 0.304 0.0763
 5 mu         0.1   0.5 0.286 0.0714
 6 mu         0.2   0.1 0.332 0.0467
 7 mu         0.2   0.2 0.369 0.0520
 8 mu         0.2   0.3 0.428 0.0514
 9 mu         0.2   0.4 0.459 0.0576
10 mu         0.2   0.5 0.463 0.0552
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.493       0.0247  5.83e-16      6.95
 2 mu         0.2      0.904       0.663   4.34e- 7      6.82
 3 mu         0.3      0.979       0.974   4.54e- 3      2.92
 4 mu         0.4      0.982       0.961   2.85e- 1      1.99
 5 mu         0.5      0.970       0.940   2.46e- 1      1.82
 6 mu         0.6      1.01        1.02    5.75e- 1      1.62
 7 mu         0.7      1.02        0.994   6.00e- 1      1.64
 8 mu         0.8      1.01        0.970   3.39e- 1      1.70
 9 mu         0.9      1.07        0.976   1.77e- 2      5.79
10 mu_1       0.1      0.564       0.0508  2.58e-15      7.02
11 mu_1       0.2      0.913       0.699   9.73e- 7      6.04
12 mu_1       0.3      0.990       0.970   6.90e- 3      3.17
13 mu_1       0.4      0.978       0.951   2.30e- 1      1.90
14 mu_1       0.5      0.972       0.930   2.69e- 1      1.87
15 mu_1       0.6      1.01        1.03    5.80e- 1      1.63
16 mu_1       0.7      1.02        0.987   5.69e- 1      1.64
17 mu_1       0.8      1.01        0.972   3.50e- 1      1.70
18 mu_1       0.9      1.07        0.968   1.58e- 2      5.93
19 mu_0       0.1      0.485       0.0218  3.61e-16      7.09
20 mu_0       0.2      0.901       0.629   2.99e- 7      7.01
21 mu_0       0.3      0.973       0.968   3.53e- 3      2.82
22 mu_0       0.4      0.984       0.974   2.53e- 1      2.06
23 mu_0       0.5      0.968       0.933   2.23e- 1      1.76
24 mu_0       0.6      1.01        1.01    5.67e- 1      1.60
25 mu_0       0.7      1.02        0.984   6.19e- 1      1.65
26 mu_0       0.8      1.00        0.968   2.96e- 1      1.66
27 mu_0       0.9      1.06        1.05    3.45e- 2      4.50
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000586     4.80e-27  1.30e-73    0.0542
 2 mu         0.2   0.175        4.07e-15  1.98e-49   10.1   
 3 mu         0.3   1.03         1.32e- 8  1.24e-35   31.8   
 4 mu         0.4   1.27         1.41e- 4  6.74e-26   22.6   
 5 mu         0.5   1.86         3.49e- 2  2.12e-18   75.8   
 6 mu         0.6   1.04         1.11e- 1  2.44e-12   12.3   
 7 mu         0.7   0.699        1.24e- 1  6.07e-14    6.04  
 8 mu         0.8   1.17         4.63e- 2  1.57e-24    9.44  
 9 mu         0.9   2.46         1.97e- 6  4.56e-44   73.0   
10 mu_1       0.1   0.00158      2.75e-26  1.16e-72    0.146 
11 mu_1       0.2   0.242        1.42e-14  9.66e-49   13.6   
12 mu_1       0.3   1.09         2.97e- 8  4.02e-35   31.8   
13 mu_1       0.4   1.29         2.34e- 4  1.64e-25   23.5   
14 mu_1       0.5   1.86         4.06e- 2  4.13e-18   76.6   
15 mu_1       0.6   1.01         8.74e- 2  3.97e-12   10.4   
16 mu_1       0.7   0.692        1.22e- 1  2.60e-14    5.83  
17 mu_1       0.8   1.20         3.68e- 2  5.90e-25    9.81  
18 mu_1       0.9   2.47         1.42e- 6  1.52e-44   71.8   
19 mu_0       0.1   0.000476     2.02e-27  1.14e-74    0.0440
20 mu_0       0.2   0.158        1.53e-15  6.12e-51    9.24  
21 mu_0       0.3   1.01         6.32e- 9  4.36e-37   31.8   
22 mu_0       0.4   1.26         8.05e- 5  2.77e-27   22.0   
23 mu_0       0.5   1.86         2.30e- 2  1.05e-19   75.1   
24 mu_0       0.6   1.09         1.07e- 1  1.51e-13   15.2   
25 mu_0       0.7   0.713        8.64e- 2  1.42e-13    6.53  
26 mu_0       0.8   1.04         3.98e- 2  5.51e-24    8.04  
27 mu_0       0.9   2.33         6.95e- 6  3.19e-43   83.6   
[1] "Total run time was 421.901 seconds"
