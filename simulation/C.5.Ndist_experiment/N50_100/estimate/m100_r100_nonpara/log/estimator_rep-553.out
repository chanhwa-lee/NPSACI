
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7467"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  59  60  61  62  63  64  65  66  68  69  70  71  73 
  3   1   1   1   3   3   4   2   1   4   2   3   3   3   2   2   4   3   2   4 
 74  75  76  77  78  79  80  82  83  84  86  87  88  89  90  91  94  95  96  97 
  1   3   2   2   2   1   2   1   2   1   4   3   1   3   2   5   1   1   3   1 
 98  99 100 
  3   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03081 0.32360 0.59654 1.00000 6.63858 
[1] "event indicator table: "

   0    1 
4383 3084 
[1] "treatment indicator table: "

   0    1 
2743 4724 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3560
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3907
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 357.363 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.431 0.0725
 2 mu         0.1   0.2 0.541 0.0811
 3 mu         0.1   0.3 0.595 0.0866
 4 mu         0.1   0.4 0.720 0.102 
 5 mu         0.1   0.5 0.767 0.106 
 6 mu         0.2   0.1 0.297 0.0382
 7 mu         0.2   0.2 0.383 0.0273
 8 mu         0.2   0.3 0.434 0.0244
 9 mu         0.2   0.4 0.545 0.0484
10 mu         0.2   0.5 0.594 0.0581
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.15         0.709 0.0000159      7.80
 2 mu         0.2      0.905        0.886 0.0359         2.28
 3 mu         0.3      0.996        0.941 0.350          1.88
 4 mu         0.4      1.02         1.01  0.584          1.51
 5 mu         0.5      1.02         1.00  0.564          1.47
 6 mu         0.6      1.01         0.982 0.653          1.72
 7 mu         0.7      1.01         1.02  0.576          1.45
 8 mu         0.8      1.00         0.968 0.491          1.83
 9 mu         0.9      0.958        0.937 0.114          1.89
10 mu_1       0.1      1.08         0.878 0.0000472      6.24
11 mu_1       0.2      0.903        0.874 0.0563         2.39
12 mu_1       0.3      1.01         0.950 0.341          1.87
13 mu_1       0.4      1.02         1.01  0.552          1.48
14 mu_1       0.5      1.02         1.01  0.568          1.48
15 mu_1       0.6      1.00         0.988 0.654          1.74
16 mu_1       0.7      1.01         1.03  0.577          1.47
17 mu_1       0.8      1.00         0.964 0.500          1.84
18 mu_1       0.9      0.957        0.943 0.110          1.88
19 mu_0       0.1      1.15         0.693 0.0000125      7.97
20 mu_0       0.2      0.905        0.893 0.0307         2.26
21 mu_0       0.3      0.992        0.955 0.342          1.91
22 mu_0       0.4      1.02         1.01  0.589          1.52
23 mu_0       0.5      1.02         1.01  0.560          1.45
24 mu_0       0.6      1.01         0.988 0.635          1.68
25 mu_0       0.7      1.01         1.02  0.574          1.39
26 mu_0       0.8      1.00         0.978 0.452          1.76
27 mu_0       0.9      0.967        0.936 0.149          2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0332     2.34e-28  6.96e-76      3.23
 2 mu         0.2     1.28       6.75e-16  2.65e-49     86.7 
 3 mu         0.3     1.11       2.32e- 9  4.92e-34     23.7 
 4 mu         0.4     0.877      4.92e- 5  1.85e-23      9.27
 5 mu         0.5     0.899      1.43e- 2  1.57e-15      9.87
 6 mu         0.6     0.873      1.00e- 1  1.11e-13      5.75
 7 mu         0.7     1.16       1.80e- 1  3.21e-22     13.0 
 8 mu         0.8     1.34       3.26e- 2  6.53e-35     12.5 
 9 mu         0.9     1.29       5.28e- 7  1.80e-57     42.4 
10 mu_1       0.1     0.0627     1.63e-27  6.27e-75      6.06
11 mu_1       0.2     1.34       2.36e-15  1.19e-48     81.3 
12 mu_1       0.3     1.09       5.48e- 9  1.48e-33     20.8 
13 mu_1       0.4     0.863      8.29e- 5  4.16e-23      8.96
14 mu_1       0.5     0.910      1.41e- 2  2.83e-15     10.3 
15 mu_1       0.6     0.866      1.05e- 1  3.47e-14      5.94
16 mu_1       0.7     1.18       1.71e- 1  8.59e-23     13.6 
17 mu_1       0.8     1.33       2.66e- 2  1.53e-35     12.7 
18 mu_1       0.9     1.30       3.85e- 7  3.75e-58     43.6 
19 mu_0       0.1     0.0299     7.60e-29  7.73e-77      2.92
20 mu_0       0.2     1.26       2.40e-16  3.32e-50     88.1 
21 mu_0       0.3     1.11       9.65e-10  7.03e-35     25.6 
22 mu_0       0.4     0.886      2.67e- 5  3.08e-24      9.48
23 mu_0       0.5     0.887      9.09e- 3  1.13e-16      9.45
24 mu_0       0.6     0.885      7.30e- 2  2.26e-13      6.02
25 mu_0       0.7     1.10       1.52e- 1  8.68e-22     11.5 
26 mu_0       0.8     1.38       5.64e- 2  2.65e-34     11.6 
27 mu_0       0.9     1.23       1.81e- 6  1.46e-56     31.0 
[1] "Total run time was 360.487 seconds"
