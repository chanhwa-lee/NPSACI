
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7258"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  59  60  63  64  65  66  67  69  70  71  72  74  75 
  1   1   6   4   4   6   2   4   2   3   3   2   1   1   3   4   3   3   5   2 
 76  77  80  81  82  83  84  85  86  88  89  92  93  94  95  96  97  99 100 
  5   2   1   2   1   1   1   2   2   1   6   1   3   1   4   1   1   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03037 0.33949 0.61238 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4379 2879 
[1] "treatment indicator table: "

   0    1 
2530 4728 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3676
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3582
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 411.414 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.430 0.147 
 2 mu         0.1   0.2 0.520 0.189 
 3 mu         0.1   0.3 0.568 0.213 
 4 mu         0.1   0.4 0.632 0.232 
 5 mu         0.1   0.5 0.691 0.252 
 6 mu         0.2   0.1 0.322 0.0377
 7 mu         0.2   0.2 0.386 0.0510
 8 mu         0.2   0.3 0.427 0.0489
 9 mu         0.2   0.4 0.487 0.0524
10 mu         0.2   0.5 0.535 0.0582
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.08        0.0729  1.18e-13     35.7 
 2 mu         0.2      0.903       0.720   1.95e- 5      3.89
 3 mu         0.3      0.989       0.934   3.61e- 2      2.76
 4 mu         0.4      0.954       0.959   4.44e- 1      1.93
 5 mu         0.5      0.993       0.972   4.85e- 1      1.55
 6 mu         0.6      1.02        0.997   6.18e- 1      1.99
 7 mu         0.7      0.995       0.983   6.39e- 1      1.36
 8 mu         0.8      1.03        0.999   5.12e- 1      1.67
 9 mu         0.9      1.09        1.06    2.28e- 1      2.98
10 mu_1       0.1      1.05        0.118   4.62e-13     29.7 
11 mu_1       0.2      0.934       0.765   3.82e- 5      3.74
12 mu_1       0.3      0.985       0.955   4.79e- 2      2.63
13 mu_1       0.4      0.956       0.951   4.62e- 1      1.95
14 mu_1       0.5      0.997       0.980   4.94e- 1      1.60
15 mu_1       0.6      1.02        0.997   6.26e- 1      1.98
16 mu_1       0.7      0.995       0.989   6.43e- 1      1.38
17 mu_1       0.8      1.03        1.00    5.10e- 1      1.70
18 mu_1       0.9      1.09        1.07    2.18e- 1      2.98
19 mu_0       0.1      1.08        0.0660  8.03e-14     36.3 
20 mu_0       0.2      0.895       0.706   1.48e- 5      3.92
21 mu_0       0.3      0.991       0.951   3.10e- 2      2.82
22 mu_0       0.4      0.954       0.948   4.23e- 1      1.91
23 mu_0       0.5      0.990       0.965   4.76e- 1      1.50
24 mu_0       0.6      1.02        1.00    6.04e- 1      2.01
25 mu_0       0.7      0.995       0.990   6.30e- 1      1.35
26 mu_0       0.8      1.02        1.01    5.20e- 1      1.55
27 mu_0       0.9      1.07        1.07    3.24e- 1      3.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00789     3.21e-27  7.62e-70     0.461
 2 mu         0.2    0.712       1.72e-14  1.84e-46    41.8  
 3 mu         0.3    1.03        5.96e- 8  3.91e-33    23.1  
 4 mu         0.4    0.646       3.45e- 4  8.81e-24     9.97 
 5 mu         0.5    0.907       6.28e- 2  1.23e-16    23.1  
 6 mu         0.6    1.22        1.69e- 1  6.31e-11    12.2  
 7 mu         0.7    1.21        3.79e- 1  3.39e-15     8.79 
 8 mu         0.8    1.72        6.61e- 2  3.00e-25    15.2  
 9 mu         0.9    2.39        2.23e- 6  1.37e-43    51.5  
10 mu_1       0.1    0.0186      2.13e-26  6.75e-69     1.06 
11 mu_1       0.2    0.860       4.99e-14  8.76e-46    48.3  
12 mu_1       0.3    0.967       1.34e- 7  1.24e-32    20.9  
13 mu_1       0.4    0.646       5.76e- 4  2.09e-23    10.6  
14 mu_1       0.5    0.933       6.65e- 2  2.34e-16    24.6  
15 mu_1       0.6    1.24        1.64e- 1  9.99e-11    10.8  
16 mu_1       0.7    1.20        3.98e- 1  1.31e-15     9.32 
17 mu_1       0.8    1.74        5.50e- 2  1.01e-25    15.8  
18 mu_1       0.9    2.40        1.59e- 6  4.11e-44    52.7  
19 mu_0       0.1    0.00671     1.20e-27  9.70e-71     0.394
20 mu_0       0.2    0.676       9.02e-15  1.14e-47    40.2  
21 mu_0       0.3    1.06        2.76e- 8  2.76e-34    25.4  
22 mu_0       0.4    0.646       1.88e- 4  7.25e-25     9.52 
23 mu_0       0.5    0.880       3.93e- 2  1.22e-17    21.7  
24 mu_0       0.6    1.20        1.12e- 1  7.79e-12    14.3  
25 mu_0       0.7    1.21        3.77e- 1  8.26e-15     7.53 
26 mu_0       0.8    1.64        1.11e- 1  1.09e-24    12.6  
27 mu_0       0.9    2.26        7.96e- 6  1.00e-42    40.7  
[1] "Total run time was 414.88 seconds"
