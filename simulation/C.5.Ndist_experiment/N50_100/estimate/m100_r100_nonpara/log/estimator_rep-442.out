
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7625"
[1] "cluster size dist'n: "

 50  52  53  54  55  58  59  60  62  64  65  67  68  69  70  71  72  73  74  76 
  3   4   2   3   2   1   2   2   1   1   2   3   2   2   4   3   3   2   7   2 
 77  78  79  80  81  82  83  84  85  86  87  89  90  91  92  93  94  95  96  97 
  1   3   2   2   3   3   2   2   2   3   1   1   2   2   1   3   3   1   2   4 
 98  99 100 
  4   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03406 0.35204 0.61074 1.00000 6.88678 
[1] "event indicator table: "

   0    1 
4475 3150 
[1] "treatment indicator table: "

   0    1 
2891 4734 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3872
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3753
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 437.904 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.397 0.0913
 2 mu         0.1   0.2 0.492 0.0985
 3 mu         0.1   0.3 0.587 0.123 
 4 mu         0.1   0.4 0.604 0.121 
 5 mu         0.1   0.5 0.653 0.134 
 6 mu         0.2   0.1 0.350 0.0620
 7 mu         0.2   0.2 0.442 0.0559
 8 mu         0.2   0.3 0.541 0.0750
 9 mu         0.2   0.4 0.566 0.0737
10 mu         0.2   0.5 0.632 0.0851
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.925        0.317 0.000000421      9.47
 2 mu         0.2      0.991        0.937 0.0271           3.78
 3 mu         0.3      1.00         0.977 0.240            2.10
 4 mu         0.4      1.00         0.968 0.484            1.66
 5 mu         0.5      1.03         1.01  0.627            1.60
 6 mu         0.6      1.01         0.977 0.655            1.52
 7 mu         0.7      0.997        0.980 0.564            1.45
 8 mu         0.8      0.996        1.00  0.584            1.54
 9 mu         0.9      1.02         0.983 0.281            2.07
10 mu_1       0.1      0.842        0.381 0.00000132       7.16
11 mu_1       0.2      0.999        0.949 0.0430           3.61
12 mu_1       0.3      0.999        0.968 0.279            2.06
13 mu_1       0.4      1.01         0.960 0.471            1.65
14 mu_1       0.5      1.03         1.01  0.636            1.58
15 mu_1       0.6      1.00         0.975 0.661            1.51
16 mu_1       0.7      0.996        0.973 0.555            1.44
17 mu_1       0.8      0.997        0.998 0.580            1.54
18 mu_1       0.9      1.02         0.989 0.284            2.10
19 mu_0       0.1      0.934        0.299 0.000000320      9.72
20 mu_0       0.2      0.989        0.926 0.0231           3.82
21 mu_0       0.3      1.00         0.968 0.223            2.12
22 mu_0       0.4      1.00         0.970 0.494            1.67
23 mu_0       0.5      1.03         1.02  0.619            1.61
24 mu_0       0.6      1.01         0.980 0.645            1.55
25 mu_0       0.7      0.997        0.986 0.585            1.48
26 mu_0       0.8      0.993        0.990 0.581            1.54
27 mu_0       0.9      1.02         0.983 0.258            1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000814     6.50e-28  6.38e-77    0.0440
 2 mu         0.2   0.360        8.91e-15  2.74e-51   11.7   
 3 mu         0.3   0.781        1.25e- 7  1.96e-36   15.3   
 4 mu         0.4   1.16         1.25e- 3  5.03e-26   17.7   
 5 mu         0.5   1.13         1.01e- 1  4.36e-18    9.49  
 6 mu         0.6   0.825        1.69e- 1  9.22e-12    6.50  
 7 mu         0.7   0.835        4.55e- 2  2.73e-18    7.26  
 8 mu         0.8   1.24         2.87e- 3  9.21e-30   12.5   
 9 mu         0.9   1.91         3.67e- 9  1.46e-50   38.7   
10 mu_1       0.1   0.00194      4.33e-27  6.03e-76    0.108 
11 mu_1       0.2   0.447        2.65e-14  1.29e-50   14.0   
12 mu_1       0.3   0.803        2.59e- 7  6.16e-36   14.4   
13 mu_1       0.4   1.19         1.92e- 3  1.19e-25   17.9   
14 mu_1       0.5   1.11         1.15e- 1  8.24e-18    9.98  
15 mu_1       0.6   0.811        1.29e- 1  1.45e-11    6.17  
16 mu_1       0.7   0.844        4.58e- 2  8.77e-19    7.60  
17 mu_1       0.8   1.25         2.26e- 3  2.76e-30   12.9   
18 mu_1       0.9   1.90         2.60e- 9  3.90e-51   39.0   
19 mu_0       0.1   0.000689     2.41e-28  3.89e-78    0.0368
20 mu_0       0.2   0.339        4.52e-15  1.88e-52   11.1   
21 mu_0       0.3   0.772        6.70e- 8  1.53e-37   15.6   
22 mu_0       0.4   1.14         8.10e- 4  4.60e-27   17.7   
23 mu_0       0.5   1.16         7.09e- 2  4.79e-19    9.00  
24 mu_0       0.6   0.845        1.76e- 1  1.27e-12    6.99  
25 mu_0       0.7   0.813        4.79e- 2  7.06e-18    6.47  
26 mu_0       0.8   1.19         4.53e- 3  3.50e-29   11.5   
27 mu_0       0.9   2.00         1.33e- 8  1.11e-49   36.4   
[1] "Total run time was 441.733 seconds"
