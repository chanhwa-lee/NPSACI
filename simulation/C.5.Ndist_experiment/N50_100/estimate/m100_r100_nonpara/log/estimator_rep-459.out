
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7629"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  59  60  61  62  63  64  65  66  67  68  69  71  72 
  5   1   2   2   2   2   2   2   2   1   2   2   1   1   3   3   2   2   4   2 
 73  74  75  76  77  80  81  82  83  84  85  86  88  90  91  92  93  95  96  98 
  3   5   2   1   2   1   2   1   1   1   2   3   2   5   1   4   5   3   3   4 
 99 100 
  4   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02876 0.36453 0.62637 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4555 3074 
[1] "treatment indicator table: "

   0    1 
2794 4835 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3918
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3711
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.872 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.378 0.0678
 2 mu         0.1   0.2 0.453 0.0772
 3 mu         0.1   0.3 0.529 0.0905
 4 mu         0.1   0.4 0.571 0.0825
 5 mu         0.1   0.5 0.627 0.0955
 6 mu         0.2   0.1 0.339 0.0341
 7 mu         0.2   0.2 0.420 0.0386
 8 mu         0.2   0.3 0.494 0.0428
 9 mu         0.2   0.4 0.548 0.0400
10 mu         0.2   0.5 0.597 0.0426
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.962        0.842  0.00115       4.12
 2 mu         0.2      1.09         1.07   0.231         2.51
 3 mu         0.3      0.993        0.964  0.347         1.89
 4 mu         0.4      0.984        0.951  0.548         1.54
 5 mu         0.5      0.989        0.974  0.587         1.43
 6 mu         0.6      0.985        0.994  0.555         1.35
 7 mu         0.7      0.999        0.997  0.524         1.56
 8 mu         0.8      1.02         1.04   0.576         1.66
 9 mu         0.9      0.999        0.949  0.428         2.04
10 mu_1       0.1      0.967        0.783  0.00271       3.88
11 mu_1       0.2      1.09         1.09   0.231         2.45
12 mu_1       0.3      0.986        0.955  0.364         1.81
13 mu_1       0.4      0.984        0.974  0.555         1.54
14 mu_1       0.5      0.989        0.972  0.582         1.40
15 mu_1       0.6      0.985        0.993  0.560         1.36
16 mu_1       0.7      1.00         0.997  0.526         1.56
17 mu_1       0.8      1.02         1.03   0.587         1.65
18 mu_1       0.9      0.999        0.951  0.417         2.05
19 mu_0       0.1      0.962        0.828  0.000979      4.14
20 mu_0       0.2      1.09         1.06   0.232         2.53
21 mu_0       0.3      0.996        0.968  0.337         1.93
22 mu_0       0.4      0.984        0.957  0.544         1.55
23 mu_0       0.5      0.989        0.971  0.592         1.47
24 mu_0       0.6      0.985        0.990  0.547         1.36
25 mu_0       0.7      0.996        0.993  0.519         1.55
26 mu_0       0.8      1.02         1.04   0.532         1.68
27 mu_0       0.9      1.00         0.951  0.426         1.99
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0142     2.91e-27  1.20e-83      1.32
 2 mu         0.2     0.653      2.22e-14  1.05e-56     20.7 
 3 mu         0.3     1.40       6.57e- 8  4.94e-41     33.4 
 4 mu         0.4     1.04       2.52e- 4  5.47e-30     13.6 
 5 mu         0.5     1.00       3.09e- 2  1.67e-21     12.0 
 6 mu         0.6     1.44       9.33e- 2  1.14e-14     10.8 
 7 mu         0.7     1.35       9.94e- 2  1.14e-18     14.5 
 8 mu         0.8     0.834      2.75e- 2  1.02e-29      9.67
 9 mu         0.9     1.17       1.01e- 6  1.51e-49     10.4 
10 mu_1       0.1     0.0274     1.88e-26  1.17e-82      2.53
11 mu_1       0.2     0.752      6.74e-14  5.06e-56     19.9 
12 mu_1       0.3     1.42       1.56e- 7  1.59e-40     32.2 
13 mu_1       0.4     1.02       4.38e- 4  1.32e-29     13.1 
14 mu_1       0.5     1.02       3.46e- 2  3.23e-21     12.0 
15 mu_1       0.6     1.47       1.03e- 1  1.84e-14     10.5 
16 mu_1       0.7     1.31       9.49e- 2  3.53e-19     13.9 
17 mu_1       0.8     0.839      2.30e- 2  2.76e-30      9.91
18 mu_1       0.9     1.18       7.26e- 7  3.89e-50     10.9 
19 mu_0       0.1     0.0127     1.15e-27  4.32e-85      1.18
20 mu_0       0.2     0.628      1.09e-14  4.22e-58     21.0 
21 mu_0       0.3     1.39       2.72e- 8  2.28e-42     33.9 
22 mu_0       0.4     1.06       1.29e- 4  2.94e-31     14.0 
23 mu_0       0.5     0.988      2.68e- 2  1.08e-22     12.0 
24 mu_0       0.6     1.40       1.02e- 1  9.21e-16     11.3 
25 mu_0       0.7     1.42       8.39e- 2  2.99e-18     16.2 
26 mu_0       0.8     0.815      4.07e- 2  4.01e-29      8.70
27 mu_0       0.9     1.11       3.57e- 6  1.15e-48     11.7 
[1] "Total run time was 445.439 seconds"
