
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7341"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  71  72 
  2   7   2   3   3   4   1   3   1   2   2   1   2   2   1   2   4   2   1   1 
 73  74  75  76  77  78  79  80  81  82  83  86  87  88  89  91  92  93  94  95 
  3   2   3   1   1   1   1   4   4   3   2   1   1   4   2   2   2   3   3   2 
 96  97  98  99 100 
  1   3   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02901 0.31378 0.59636 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4333 3008 
[1] "treatment indicator table: "

   0    1 
2836 4505 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3728
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3613
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 366.823 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.392 0.0403
 2 mu         0.1   0.2 0.510 0.0629
 3 mu         0.1   0.3 0.546 0.0631
 4 mu         0.1   0.4 0.586 0.0664
 5 mu         0.1   0.5 0.621 0.0800
 6 mu         0.2   0.1 0.345 0.0217
 7 mu         0.2   0.2 0.439 0.0331
 8 mu         0.2   0.3 0.480 0.0344
 9 mu         0.2   0.4 0.524 0.0368
10 mu         0.2   0.5 0.548 0.0470
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.01         0.908  0.000761      4.22
 2 mu         0.2      0.991        0.967  0.344         2.09
 3 mu         0.3      0.992        0.981  0.322         2.03
 4 mu         0.4      0.989        0.979  0.467         1.69
 5 mu         0.5      1.00         0.983  0.668         1.42
 6 mu         0.6      1.02         1.02   0.584         1.40
 7 mu         0.7      1.03         1.02   0.522         1.73
 8 mu         0.8      0.978        0.957  0.593         1.39
 9 mu         0.9      1.01         0.990  0.298         2.27
10 mu_1       0.1      0.967        0.863  0.00169       3.57
11 mu_1       0.2      1.00         0.955  0.396         2.01
12 mu_1       0.3      0.990        0.977  0.313         2.04
13 mu_1       0.4      0.990        0.977  0.509         1.63
14 mu_1       0.5      1.00         0.986  0.678         1.43
15 mu_1       0.6      1.02         1.02   0.584         1.40
16 mu_1       0.7      1.03         1.02   0.532         1.73
17 mu_1       0.8      0.977        0.962  0.601         1.39
18 mu_1       0.9      1.01         1.00   0.292         2.31
19 mu_0       0.1      1.01         0.895  0.000658      4.29
20 mu_0       0.2      0.988        0.965  0.331         2.13
21 mu_0       0.3      0.993        0.985  0.325         2.02
22 mu_0       0.4      0.989        0.995  0.440         1.74
23 mu_0       0.5      1.00         0.988  0.657         1.42
24 mu_0       0.6      1.01         1.02   0.583         1.40
25 mu_0       0.7      1.03         1.01   0.498         1.72
26 mu_0       0.8      0.984        0.962  0.560         1.43
27 mu_0       0.9      1.00         0.971  0.357         1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.103      8.19e-25  1.16e-72      6.78
 2 mu         0.2     1.12       1.19e-12  1.75e-47     45.1 
 3 mu         0.3     0.732      6.50e- 7  5.57e-33     13.8 
 4 mu         0.4     0.926      2.10e- 3  6.76e-23     14.2 
 5 mu         0.5     1.23       4.16e- 2  2.71e-15     11.5 
 6 mu         0.6     0.959      4.82e- 2  4.85e-12      8.35
 7 mu         0.7     0.679      6.18e- 2  6.68e-20      6.28
 8 mu         0.8     1.34       6.73e- 3  3.48e-32     10.3 
 9 mu         0.9     1.80       2.41e- 8  3.07e-54     36.5 
10 mu_1       0.1     0.176      4.67e-24  1.06e-71     11.2 
11 mu_1       0.2     1.17       3.54e-12  7.97e-47     50.2 
12 mu_1       0.3     0.693      1.38e- 6  1.70e-32     12.5 
13 mu_1       0.4     0.973      3.04e- 3  1.54e-22     12.8 
14 mu_1       0.5     1.22       5.74e- 2  4.96e-15     10.9 
15 mu_1       0.6     0.943      4.40e- 2  1.33e-12      7.89
16 mu_1       0.7     0.689      6.04e- 2  2.12e-20      6.68
17 mu_1       0.8     1.36       5.05e- 3  9.66e-33     10.3 
18 mu_1       0.9     1.79       1.68e- 8  7.58e-55     37.1 
19 mu_0       0.1     0.0951     3.47e-25  1.11e-73      6.30
20 mu_0       0.2     1.11       6.04e-13  1.88e-48     43.9 
21 mu_0       0.3     0.749      3.37e- 7  6.84e-34     14.4 
22 mu_0       0.4     0.895      2.07e- 3  9.69e-24     15.1 
23 mu_0       0.5     1.24       2.93e- 2  4.67e-16     12.1 
24 mu_0       0.6     0.984      5.06e- 2  1.01e-11      9.03
25 mu_0       0.7     0.656      4.41e- 2  1.73e-19      5.34
26 mu_0       0.8     1.26       1.34e- 2  1.35e-31     10.5 
27 mu_0       0.9     1.97       8.99e- 8  2.39e-53     31.2 
[1] "Total run time was 370.012 seconds"
