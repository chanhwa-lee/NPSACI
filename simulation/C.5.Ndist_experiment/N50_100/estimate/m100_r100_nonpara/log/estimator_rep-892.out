
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7555"
[1] "cluster size dist'n: "

51 53 54 55 56 57 58 59 60 62 63 64 65 67 68 70 72 74 75 76 77 78 79 80 81 83 
 4  1  3  3  1  3  1  3  3  5  1  3  4  3  3  1  4  1  1  3  3  1  3  5  1  1 
84 85 86 87 89 90 91 92 93 94 95 96 97 98 99 
 1  2  1  1  1  2  2  5  3  5  2  2  3  1  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0322  0.3307  0.5974  1.0000  7.0000 
[1] "event indicator table: "

   0    1 
4467 3088 
[1] "treatment indicator table: "

   0    1 
2904 4651 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3766
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3789
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 441.934 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.392 0.105 
 2 mu         0.1   0.2 0.437 0.0938
 3 mu         0.1   0.3 0.495 0.0971
 4 mu         0.1   0.4 0.543 0.0960
 5 mu         0.1   0.5 0.558 0.0999
 6 mu         0.2   0.1 0.364 0.0804
 7 mu         0.2   0.2 0.421 0.0703
 8 mu         0.2   0.3 0.481 0.0713
 9 mu         0.2   0.4 0.529 0.0689
10 mu         0.2   0.5 0.547 0.0718
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.873        0.350 0.000000119       5.96
 2 mu         0.2      0.934        0.871 0.0150            2.45
 3 mu         0.3      0.937        0.905 0.397             1.64
 4 mu         0.4      1.00         0.999 0.504             1.73
 5 mu         0.5      1.02         1.00  0.583             1.48
 6 mu         0.6      1.01         1.02  0.583             1.70
 7 mu         0.7      1.01         0.988 0.610             1.63
 8 mu         0.8      1.02         1.02  0.601             1.53
 9 mu         0.9      1.02         0.978 0.267             2.73
10 mu_1       0.1      0.865        0.458 0.000000355       4.83
11 mu_1       0.2      0.931        0.867 0.0228            2.40
12 mu_1       0.3      0.944        0.902 0.395             1.60
13 mu_1       0.4      1.01         1.00  0.517             1.68
14 mu_1       0.5      1.02         1.00  0.593             1.50
15 mu_1       0.6      1.01         1.00  0.599             1.69
16 mu_1       0.7      1.01         0.995 0.611             1.64
17 mu_1       0.8      1.02         1.02  0.601             1.55
18 mu_1       0.9      1.02         0.980 0.261             2.73
19 mu_0       0.1      0.874        0.332 0.0000000930      6.25
20 mu_0       0.2      0.935        0.867 0.0131            2.46
21 mu_0       0.3      0.934        0.909 0.398             1.66
22 mu_0       0.4      1.00         0.988 0.496             1.77
23 mu_0       0.5      1.02         1.01  0.573             1.47
24 mu_0       0.6      1.01         1.02  0.559             1.72
25 mu_0       0.7      1.02         0.981 0.606             1.62
26 mu_0       0.8      1.02         1.00  0.603             1.54
27 mu_0       0.9      1.01         0.997 0.323             2.69
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0130     4.31e-25  2.72e-91      1.30
 2 mu         0.2     0.423      2.52e-13  5.38e-63     28.7 
 3 mu         0.3     1.19       4.54e- 7  1.92e-46     21.9 
 4 mu         0.4     1.10       4.30e- 3  1.07e-34     15.0 
 5 mu         0.5     0.962      1.25e- 1  1.37e-25      5.97
 6 mu         0.6     1.82       1.85e- 1  3.80e-18     43.6 
 7 mu         0.7     1.31       1.07e- 1  1.62e-17     15.3 
 8 mu         0.8     0.811      3.93e- 3  3.11e-28     12.1 
 9 mu         0.9     1.80       3.34e- 9  2.23e-48     34.5 
10 mu_1       0.1     0.0254     2.85e-24  2.72e-90      2.54
11 mu_1       0.2     0.472      7.42e-13  2.69e-62     28.0 
12 mu_1       0.3     1.26       9.08e- 7  6.40e-46     22.7 
13 mu_1       0.4     1.05       6.41e- 3  2.66e-34     15.2 
14 mu_1       0.5     0.992      1.14e- 1  2.74e-25      6.05
15 mu_1       0.6     1.84       1.51e- 1  6.34e-18     45.1 
16 mu_1       0.7     1.28       9.82e- 2  4.51e-18     14.4 
17 mu_1       0.8     0.805      2.90e- 3  9.83e-29     12.0 
18 mu_1       0.9     1.82       2.23e- 9  6.25e-49     34.8 
19 mu_0       0.1     0.0117     1.62e-25  0             1.16
20 mu_0       0.2     0.411      1.29e-13  0            28.9 
21 mu_0       0.3     1.16       2.55e- 7  0            21.5 
22 mu_0       0.4     1.13       2.83e- 3  0            14.8 
23 mu_0       0.5     0.932      1.29e- 1  0             5.89
24 mu_0       0.6     1.78       1.49e- 1  0            41.3 
25 mu_0       0.7     1.39       1.28e- 1  0            17.5 
26 mu_0       0.8     0.834      7.65e- 3  0            12.2 
27 mu_0       0.9     1.57       7.48e- 9  0            31.7 
[1] "Total run time was 446.263 seconds"
