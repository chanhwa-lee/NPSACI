
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7389"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  58  59  60  61  62  63  64  65  66  68  69  70  72  73 
  2   1   3   2   1   3   3   1   1   1   6   3   4   5   3   3   4   3   3   1 
 74  75  76  77  78  79  80  81  82  83  85  87  88  89  90  91  92  93  95  96 
  3   2   2   3   1   2   2   2   1   2   2   1   2   3   1   2   2   1   2   2 
 97  98  99 100 
  2   2   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03775 0.36121 0.61435 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4366 3023 
[1] "treatment indicator table: "

   0    1 
2990 4399 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3560
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3829
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 479.338 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.346 0.0502
 2 mu         0.1   0.2 0.460 0.0670
 3 mu         0.1   0.3 0.545 0.0875
 4 mu         0.1   0.4 0.640 0.117 
 5 mu         0.1   0.5 0.668 0.116 
 6 mu         0.2   0.1 0.348 0.0357
 7 mu         0.2   0.2 0.464 0.0485
 8 mu         0.2   0.3 0.536 0.0605
 9 mu         0.2   0.4 0.619 0.0831
10 mu         0.2   0.5 0.648 0.0748
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.934        0.399 0.000000293      5.24
 2 mu         0.2      1.01         0.956 0.0246           2.10
 3 mu         0.3      0.986        0.983 0.259            1.59
 4 mu         0.4      0.984        0.954 0.532            1.71
 5 mu         0.5      1.02         1.00  0.629            1.49
 6 mu         0.6      0.982        0.996 0.579            1.44
 7 mu         0.7      0.969        0.954 0.477            1.68
 8 mu         0.8      0.994        1.01  0.412            1.80
 9 mu         0.9      0.993        0.946 0.149            2.32
10 mu_1       0.1      0.932        0.480 0.000000831      4.20
11 mu_1       0.2      1.02         0.977 0.0360           2.09
12 mu_1       0.3      0.980        0.979 0.231            1.66
13 mu_1       0.4      0.988        0.970 0.529            1.67
14 mu_1       0.5      1.02         1.00  0.636            1.50
15 mu_1       0.6      0.979        0.993 0.570            1.43
16 mu_1       0.7      0.969        0.952 0.467            1.73
17 mu_1       0.8      0.995        1.01  0.407            1.79
18 mu_1       0.9      0.992        0.944 0.152            2.34
19 mu_0       0.1      0.934        0.380 0.000000233      5.36
20 mu_0       0.2      1.01         0.951 0.0217           2.13
21 mu_0       0.3      0.988        0.992 0.271            1.65
22 mu_0       0.4      0.981        0.962 0.522            1.73
23 mu_0       0.5      1.02         1.02  0.614            1.48
24 mu_0       0.6      0.985        0.993 0.578            1.47
25 mu_0       0.7      0.970        0.972 0.499            1.57
26 mu_0       0.8      0.990        0.972 0.430            1.81
27 mu_0       0.9      0.994        0.937 0.122            2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.161     7.48e-27  2.22e-63     13.9 
 2 mu         0.2      1.03      1.78e-13  1.84e-41     42.0 
 3 mu         0.3      1.01      1.42e- 6  7.74e-29     14.5 
 4 mu         0.4      1.66      8.92e- 3  4.63e-20     35.0 
 5 mu         0.5      1.66      1.03e- 1  1.92e-13     36.7 
 6 mu         0.6      1.17      2.25e- 1  2.13e-14     10.3 
 7 mu         0.7      1.27      1.54e- 1  1.39e-22      7.12
 8 mu         0.8      2.04      3.09e- 3  1.26e-34     52.7 
 9 mu         0.9      1.12      1.26e- 9  6.96e-56     21.7 
10 mu_1       0.1      0.266     4.36e-26  2.02e-62     22.4 
11 mu_1       0.2      1.03      5.18e-13  8.38e-41     33.8 
12 mu_1       0.3      1.02      2.72e- 6  2.36e-28     12.8 
13 mu_1       0.4      1.75      1.04e- 2  1.06e-19     39.5 
14 mu_1       0.5      1.58      8.56e- 2  3.50e-13     33.2 
15 mu_1       0.6      1.17      2.12e- 1  5.70e-15     10.3 
16 mu_1       0.7      1.29      1.52e- 1  3.20e-23      7.55
17 mu_1       0.8      2.05      2.27e- 3  2.54e-35     53.4 
18 mu_1       0.9      1.11      8.98e-10  1.24e-56     21.7 
19 mu_0       0.1      0.149     3.48e-27  2.13e-64     13.0 
20 mu_0       0.2      1.03      9.30e-14  1.98e-42     44.0 
21 mu_0       0.3      1.00      8.62e- 7  9.55e-30     15.3 
22 mu_0       0.4      1.60      5.94e- 3  6.67e-21     31.9 
23 mu_0       0.5      1.74      9.64e- 2  3.31e-14     40.3 
24 mu_0       0.6      1.17      2.34e- 1  4.46e-14     10.2 
25 mu_0       0.7      1.22      2.18e- 1  3.90e-22      7.43
26 mu_0       0.8      2.04      6.34e- 3  5.30e-34     50.0 
27 mu_0       0.9      1.14      4.40e- 9  5.84e-55     21.7 
[1] "Total run time was 483.748 seconds"
