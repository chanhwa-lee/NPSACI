
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7447"
[1] "cluster size dist'n: "

 51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  70  71  72 
  2   5   3   2   4   2   2   1   2   4   2   1   4   2   1   2   1   1   2   2 
 73  74  75  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93 
  3   1   4   3   2   1   1   1   3   2   1   4   2   1   3   2   2   2   1   1 
 94  95  96  97  98 100 
  2   3   4   3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03389 0.34754 0.60797 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4417 3030 
[1] "treatment indicator table: "

   0    1 
2687 4760 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3772
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3675
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 362.918 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.295 0.0710
 2 mu         0.1   0.2 0.374 0.0941
 3 mu         0.1   0.3 0.404 0.0937
 4 mu         0.1   0.4 0.456 0.110 
 5 mu         0.1   0.5 0.482 0.115 
 6 mu         0.2   0.1 0.335 0.0434
 7 mu         0.2   0.2 0.425 0.0620
 8 mu         0.2   0.3 0.466 0.0504
 9 mu         0.2   0.4 0.524 0.0652
10 mu         0.2   0.5 0.554 0.0629
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.703       0.0582 0.0000000102      13.9 
 2 mu         0.2      0.907       0.844  0.0102             2.76
 3 mu         0.3      0.994       0.998  0.331              1.90
 4 mu         0.4      1.02        0.998  0.446              1.64
 5 mu         0.5      1.04        1.03   0.731              1.45
 6 mu         0.6      0.998       0.991  0.710              1.34
 7 mu         0.7      1.00        1.01   0.636              1.36
 8 mu         0.8      0.983       0.974  0.470              1.63
 9 mu         0.9      0.950       0.958  0.0383             2.59
10 mu_1       0.1      0.727       0.106  0.0000000324       9.58
11 mu_1       0.2      0.932       0.882  0.0164             2.80
12 mu_1       0.3      0.997       0.997  0.311              1.86
13 mu_1       0.4      1.03        1.01   0.474              1.61
14 mu_1       0.5      1.04        1.03   0.712              1.48
15 mu_1       0.6      0.997       0.993  0.708              1.34
16 mu_1       0.7      1.01        1.01   0.641              1.38
17 mu_1       0.8      0.982       0.970  0.467              1.61
18 mu_1       0.9      0.951       0.956  0.0345             2.65
19 mu_0       0.1      0.700       0.0529 0.00000000773     14.3 
20 mu_0       0.2      0.901       0.823  0.00866            2.76
21 mu_0       0.3      0.992       0.993  0.340              1.92
22 mu_0       0.4      1.02        0.994  0.427              1.66
23 mu_0       0.5      1.04        1.03   0.749              1.44
24 mu_0       0.6      1.00        0.985  0.711              1.33
25 mu_0       0.7      1.00        1.01   0.625              1.31
26 mu_0       0.8      0.989       0.967  0.479              1.68
27 mu_0       0.9      0.947       0.934  0.0724             2.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.00107      6.42e-28  9.92e-83    0.105 
 2 mu         0.2   0.310        4.89e-15  1.53e-55   23.4   
 3 mu         0.3   0.761        7.19e- 8  9.51e-40   13.3   
 4 mu         0.4   1.06         8.77e- 4  1.20e-28   13.8   
 5 mu         0.5   1.07         9.91e- 2  3.82e-20   11.0   
 6 mu         0.6   0.886        2.45e- 1  2.51e-13    4.86  
 7 mu         0.7   1.05         2.13e- 1  4.02e-15    7.51  
 8 mu         0.8   1.29         2.21e- 2  1.21e-24    8.91  
 9 mu         0.9   1.53         4.29e- 7  8.74e-42   30.8   
10 mu_1       0.1   0.00249      4.00e-27  9.50e-82    0.241 
11 mu_1       0.2   0.379        1.51e-14  7.35e-55   27.0   
12 mu_1       0.3   0.805        1.55e- 7  3.04e-39   14.6   
13 mu_1       0.4   1.06         1.31e- 3  2.88e-28   13.4   
14 mu_1       0.5   1.06         1.08e- 1  7.31e-20   10.3   
15 mu_1       0.6   0.885        2.12e- 1  4.01e-13    4.92  
16 mu_1       0.7   1.06         2.51e- 1  1.33e-15    7.53  
17 mu_1       0.8   1.29         1.73e- 2  3.49e-25    8.93  
18 mu_1       0.9   1.53         3.13e- 7  2.24e-42   32.2   
19 mu_0       0.1   0.000916     2.69e-28  4.64e-84    0.0894
20 mu_0       0.2   0.293        2.34e-15  8.07e-57   22.5   
21 mu_0       0.3   0.742        3.61e- 8  5.72e-41   12.7   
22 mu_0       0.4   1.05         5.87e- 4  8.43e-30   14.1   
23 mu_0       0.5   1.08         9.54e- 2  3.21e-21   11.6   
24 mu_0       0.6   0.887        2.44e- 1  2.64e-14    4.83  
25 mu_0       0.7   1.03         2.36e- 1  1.03e-14    7.49  
26 mu_0       0.8   1.29         3.71e- 2  4.65e-24    8.81  
27 mu_0       0.9   1.50         1.47e- 6  6.72e-41   33.7   
[1] "Total run time was 366.213 seconds"
