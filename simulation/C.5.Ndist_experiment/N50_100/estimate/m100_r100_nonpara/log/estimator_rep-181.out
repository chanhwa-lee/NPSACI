
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7318"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 59 60 61 62 64 65 67 68 69 70 72 74 75 76 77 78 79 82 
 2  2  2  3  3  1  6  4  1  3  3  2  3  2  1  1  2  5  3  1  3  1  2  6  6  3 
83 84 85 86 87 88 89 91 92 94 95 96 97 98 99 
 3  1  2  2  1  1  1  3  2  1  2  5  3  1  1 
[1] "observed time summary: "
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.000000 0.009937 0.262892 0.541495 0.917128 6.000000 
[1] "event indicator table: "

   0    1 
4272 3046 
[1] "treatment indicator table: "

   0    1 
2933 4385 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3528
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3790
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 412.424 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.399 0.0527
 2 mu         0.1   0.2 0.491 0.0620
 3 mu         0.1   0.3 0.554 0.0711
 4 mu         0.1   0.4 0.617 0.0993
 5 mu         0.1   0.5 0.632 0.107 
 6 mu         0.2   0.1 0.418 0.0390
 7 mu         0.2   0.2 0.521 0.0486
 8 mu         0.2   0.3 0.562 0.0445
 9 mu         0.2   0.4 0.624 0.0608
10 mu         0.2   0.5 0.657 0.0636
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.857        0.693 0.0000000292      4.73
 2 mu         0.2      0.959        0.951 0.0138            2.73
 3 mu         0.3      0.979        0.984 0.214             1.64
 4 mu         0.4      0.997        0.969 0.561             1.75
 5 mu         0.5      0.992        0.980 0.567             1.30
 6 mu         0.6      0.986        0.975 0.699             1.39
 7 mu         0.7      1.02         1.01  0.575             1.41
 8 mu         0.8      1.04         1.04  0.504             1.67
 9 mu         0.9      1.03         1.02  0.186             2.25
10 mu_1       0.1      0.888        0.760 0.0000000890      4.20
11 mu_1       0.2      0.959        0.945 0.0216            2.66
12 mu_1       0.3      0.981        0.995 0.233             1.64
13 mu_1       0.4      0.999        0.975 0.561             1.75
14 mu_1       0.5      0.991        0.979 0.559             1.33
15 mu_1       0.6      0.987        0.977 0.681             1.42
16 mu_1       0.7      1.02         1.01  0.573             1.41
17 mu_1       0.8      1.04         1.04  0.495             1.67
18 mu_1       0.9      1.03         1.01  0.175             2.26
19 mu_0       0.1      0.854        0.679 0.0000000225      4.79
20 mu_0       0.2      0.959        0.950 0.0119            2.75
21 mu_0       0.3      0.978        0.984 0.190             1.65
22 mu_0       0.4      0.995        0.963 0.560             1.76
23 mu_0       0.5      0.994        0.987 0.576             1.28
24 mu_0       0.6      0.985        0.981 0.680             1.34
25 mu_0       0.7      1.01         1.02  0.579             1.42
26 mu_0       0.8      1.04         1.05  0.509             1.69
27 mu_0       0.9      1.02         1.05  0.239             2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.06      2.60e-25  1.41e-82    193.  
 2 mu         0.2      1.35      1.67e-13  3.88e-55     44.5 
 3 mu         0.3      0.988     3.75e- 7  3.16e-39     15.6 
 4 mu         0.4      0.853     1.43e- 3  4.56e-28      9.18
 5 mu         0.5      0.799     6.32e- 2  1.51e-19      6.31
 6 mu         0.6      1.09      2.22e- 1  1.01e-17      8.04
 7 mu         0.7      1.15      1.57e- 1  8.16e-26      8.30
 8 mu         0.8      1.16      1.64e- 2  1.31e-37      8.80
 9 mu         0.9      1.21      6.07e- 8  7.12e-61     17.7 
10 mu_1       0.1      1.80      1.66e-24  1.34e-81    156.  
11 mu_1       0.2      1.32      5.07e-13  1.84e-54     37.1 
12 mu_1       0.3      0.967     8.20e- 7  9.98e-39     14.6 
13 mu_1       0.4      0.845     2.26e- 3  1.08e-27      8.52
14 mu_1       0.5      0.801     8.51e- 2  2.86e-19      5.89
15 mu_1       0.6      1.11      1.76e- 1  1.37e-18      8.58
16 mu_1       0.7      1.14      1.54e- 1  9.45e-27      8.54
17 mu_1       0.8      1.18      1.29e- 2  1.95e-38      9.05
18 mu_1       0.9      1.19      4.27e- 8  1.32e-61     17.6 
19 mu_0       0.1      2.09      1.04e-25  8.08e-84    197.  
20 mu_0       0.2      1.36      8.21e-14  2.50e-56     46.3 
21 mu_0       0.3      0.997     1.84e- 7  2.32e-40     16.0 
22 mu_0       0.4      0.859     8.36e- 4  3.92e-29      9.62
23 mu_0       0.5      0.797     4.13e- 2  1.56e-20      6.73
24 mu_0       0.6      1.06      1.78e- 1  2.33e-17      7.24
25 mu_0       0.7      1.18      9.11e- 2  2.50e-25      8.70
26 mu_0       0.8      1.08      3.01e- 2  5.45e-37      7.81
27 mu_0       0.9      1.37      2.22e- 7  5.93e-60     18.6 
[1] "Total run time was 415.868 seconds"
