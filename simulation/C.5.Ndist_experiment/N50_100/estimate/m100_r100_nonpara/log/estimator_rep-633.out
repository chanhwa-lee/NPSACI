
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7425"
[1] "cluster size dist'n: "

 51  53  54  55  56  57  58  59  60  61  62  63  65  66  68  69  71  72  73  74 
  4   5   1   2   2   3   2   5   2   4   1   1   3   5   1   4   2   1   1   2 
 75  76  77  80  81  82  83  84  85  87  88  89  90  91  92  93  94  95  96  97 
  1   1   2   1   3   1   5   3   6   2   1   2   2   1   2   3   5   2   2   2 
 98 100 
  1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03051 0.33346 0.60673 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4437 2988 
[1] "treatment indicator table: "

   0    1 
2914 4511 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3857
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3568
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.834 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.446 0.0665
 2 mu         0.1   0.2 0.585 0.0797
 3 mu         0.1   0.3 0.640 0.0820
 4 mu         0.1   0.4 0.692 0.0878
 5 mu         0.1   0.5 0.712 0.0876
 6 mu         0.2   0.1 0.388 0.0423
 7 mu         0.2   0.2 0.517 0.0472
 8 mu         0.2   0.3 0.568 0.0448
 9 mu         0.2   0.4 0.623 0.0456
10 mu         0.2   0.5 0.653 0.0448
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.11         0.560 0.0000325      7.68
 2 mu         0.2      1.06         1.02  0.128          4.48
 3 mu         0.3      0.973        0.973 0.378          1.79
 4 mu         0.4      0.994        0.993 0.509          1.48
 5 mu         0.5      1.01         1.03  0.571          1.47
 6 mu         0.6      1.01         1.01  0.578          1.33
 7 mu         0.7      1.00         0.994 0.664          1.38
 8 mu         0.8      0.989        0.998 0.339          1.67
 9 mu         0.9      0.976        1.00  0.00138        2.25
10 mu_1       0.1      1.15         0.728 0.0000841      6.90
11 mu_1       0.2      1.05         1.00  0.163          3.99
12 mu_1       0.3      0.970        0.966 0.359          1.90
13 mu_1       0.4      0.997        0.996 0.512          1.50
14 mu_1       0.5      1.01         1.04  0.597          1.50
15 mu_1       0.6      1.01         1.00  0.574          1.33
16 mu_1       0.7      1.00         0.993 0.645          1.39
17 mu_1       0.8      0.987        0.993 0.323          1.67
18 mu_1       0.9      0.976        0.999 0.00119        2.28
19 mu_0       0.1      1.10         0.542 0.0000267      7.77
20 mu_0       0.2      1.07         0.996 0.118          4.60
21 mu_0       0.3      0.975        0.974 0.386          1.74
22 mu_0       0.4      0.991        0.991 0.498          1.54
23 mu_0       0.5      1.01         1.03  0.541          1.44
24 mu_0       0.6      1.01         1.02  0.582          1.35
25 mu_0       0.7      0.998        0.988 0.686          1.41
26 mu_0       0.8      0.993        0.982 0.388          1.65
27 mu_0       0.9      0.979        1.03  0.00304        2.16
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.17      2.13e-25  1.64e-74    112.  
 2 mu         0.2      0.839     2.66e-13  9.92e-50     29.7 
 3 mu         0.3      1.05      9.83e- 7  2.40e-35     21.5 
 4 mu         0.4      1.29      3.58e- 3  3.04e-25     17.2 
 5 mu         0.5      1.05      1.29e- 1  1.62e-17      8.39
 6 mu         0.6      1.06      3.64e- 1  6.96e-17      7.58
 7 mu         0.7      1.10      6.88e- 2  1.21e-25      8.12
 8 mu         0.8      1.21      5.17e- 3  2.18e-38     15.4 
 9 mu         0.9      3.91      1.71e- 9  1.05e-60    123.  
10 mu_1       0.1      1.50      1.27e-24  1.57e-73    141.  
11 mu_1       0.2      0.817     8.48e-13  4.73e-49     18.8 
12 mu_1       0.3      1.08      1.95e- 6  7.63e-35     20.1 
13 mu_1       0.4      1.27      3.68e- 3  7.24e-25     17.8 
14 mu_1       0.5      1.04      1.06e- 1  3.09e-17      8.65
15 mu_1       0.6      1.06      3.54e- 1  1.47e-17      8.07
16 mu_1       0.7      1.09      5.44e- 2  2.19e-26      8.43
17 mu_1       0.8      1.23      4.04e- 3  3.45e-39     16.0 
18 mu_1       0.9      4.04      1.24e- 9  1.48e-61    129.  
19 mu_0       0.1      1.13      9.53e-26  8.39e-76    109.  
20 mu_0       0.2      0.844     1.21e-13  5.70e-51     32.4 
21 mu_0       0.3      1.03      5.71e- 7  1.58e-36     22.1 
22 mu_0       0.4      1.30      2.10e- 3  2.33e-26     16.8 
23 mu_0       0.5      1.05      9.24e- 2  1.49e-18      8.13
24 mu_0       0.6      1.04      3.58e- 1  1.52e-16      6.85
25 mu_0       0.7      1.12      6.63e- 2  3.53e-25      7.38
26 mu_0       0.8      1.14      6.53e- 3  9.53e-38     13.5 
27 mu_0       0.9      2.72      5.98e- 9  9.21e-60     63.5 
[1] "Total run time was 425.499 seconds"
