
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7675"
[1] "cluster size dist'n: "

 52  53  54  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71  73  74 
  1   1   7   4   1   3   1   1   2   2   3   1   3   1   4   2   4   1   4   1 
 75  77  78  79  80  81  82  83  85  86  87  88  89  90  91  92  93  94  95  96 
  2   1   1   2   1   3   1   3   1   5   4   1   1   2   4   1   1   5   6   1 
 99 100 
  3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03152 0.33765 0.60437 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4596 3079 
[1] "treatment indicator table: "

   0    1 
2799 4876 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3865
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3810
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 490.336 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.373 0.0568
 2 mu         0.1   0.2 0.489 0.0703
 3 mu         0.1   0.3 0.567 0.0815
 4 mu         0.1   0.4 0.603 0.0819
 5 mu         0.1   0.5 0.652 0.0857
 6 mu         0.2   0.1 0.375 0.0324
 7 mu         0.2   0.2 0.468 0.0359
 8 mu         0.2   0.3 0.538 0.0439
 9 mu         0.2   0.4 0.570 0.0426
10 mu         0.2   0.5 0.619 0.0485
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.13         0.656 0.00000504      7.42
 2 mu         0.2      1.11         1.03  0.138           2.92
 3 mu         0.3      1.03         1.04  0.326           1.88
 4 mu         0.4      1.03         1.00  0.550           1.84
 5 mu         0.5      1.01         0.993 0.635           1.76
 6 mu         0.6      1.00         1.00  0.521           1.47
 7 mu         0.7      1.00         0.989 0.537           1.56
 8 mu         0.8      0.998        1.01  0.458           1.50
 9 mu         0.9      0.968        0.950 0.276           2.37
10 mu_1       0.1      1.13         0.723 0.0000136       5.19
11 mu_1       0.2      1.10         1.02  0.189           2.85
12 mu_1       0.3      1.03         1.03  0.340           1.82
13 mu_1       0.4      1.03         0.977 0.567           1.88
14 mu_1       0.5      1.01         0.989 0.638           1.73
15 mu_1       0.6      1.00         1.01  0.508           1.48
16 mu_1       0.7      1.00         0.981 0.539           1.57
17 mu_1       0.8      0.999        1.01  0.458           1.51
18 mu_1       0.9      0.966        0.944 0.265           2.36
19 mu_0       0.1      1.13         0.633 0.00000409      7.67
20 mu_0       0.2      1.12         1.03  0.125           2.94
21 mu_0       0.3      1.03         1.04  0.320           1.90
22 mu_0       0.4      1.03         1.01  0.538           1.82
23 mu_0       0.5      1.01         0.988 0.633           1.80
24 mu_0       0.6      1.00         1.01  0.540           1.46
25 mu_0       0.7      1.00         0.994 0.534           1.53
26 mu_0       0.8      0.996        0.989 0.460           1.45
27 mu_0       0.9      0.984        0.958 0.178           2.47
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00709     2.09e-28  4.63e-85     0.597
 2 mu         0.2    0.418       7.02e-15  1.61e-57    17.9  
 3 mu         0.3    0.380       1.38e- 7  1.71e-41     9.83 
 4 mu         0.4    1.10        2.36e- 3  3.36e-30    16.5  
 5 mu         0.5    1.45        1.14e- 1  1.60e-21    20.6  
 6 mu         0.6    1.34        1.47e- 1  1.58e-14    20.8  
 7 mu         0.7    0.820       8.02e- 2  8.26e-19     6.18 
 8 mu         0.8    0.982       9.77e- 3  3.29e-29    11.8  
 9 mu         0.9    1.74        5.81e- 8  1.04e-47    55.1  
10 mu_1       0.1    0.0139      1.36e-27  4.48e-84     1.13 
11 mu_1       0.2    0.465       2.14e-14  7.79e-57    20.1  
12 mu_1       0.3    0.391       2.78e- 7  5.52e-41     7.92 
13 mu_1       0.4    1.17        3.18e- 3  8.14e-30    15.7  
14 mu_1       0.5    1.44        1.47e- 1  3.10e-21    20.4  
15 mu_1       0.6    1.33        1.44e- 1  2.55e-14    21.2  
16 mu_1       0.7    0.808       8.22e- 2  2.24e-19     6.22 
17 mu_1       0.8    0.992       9.75e- 3  7.80e-30    11.4  
18 mu_1       0.9    1.76        4.01e- 8  2.20e-48    55.4  
19 mu_0       0.1    0.00634     8.54e-29  1.62e-86     0.538
20 mu_0       0.2    0.406       3.44e-15  6.35e-59    17.3  
21 mu_0       0.3    0.375       7.74e- 8  7.72e-43    10.6  
22 mu_0       0.4    1.06        1.56e- 3  1.77e-31    17.1  
23 mu_0       0.5    1.46        9.87e- 2  1.01e-22    20.9  
24 mu_0       0.6    1.36        1.67e- 1  1.25e-15    20.2  
25 mu_0       0.7    0.848       7.08e- 2  2.23e-18     7.63 
26 mu_0       0.8    0.940       1.18e- 2  1.33e-28    13.1  
27 mu_0       0.9    1.58        2.21e- 7  8.45e-47    52.8  
[1] "Total run time was 494.282 seconds"
