
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7535"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  59  60  61  62  63  64  65  66  67  68  69  71  72 
  1   2   4   2   3   2   3   1   2   1   3   3   3   2   1   1   2   3   4   2 
 73  74  75  76  77  79  80  81  82  83  85  86  87  88  89  90  91  92  93  94 
  4   1   1   2   2   2   5   1   3   2   1   2   1   2   3   2   2   2   2   1 
 95  96  97  98  99 100 
  1   3   1   1   4   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02975 0.33911 0.59979 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4625 2910 
[1] "treatment indicator table: "

   0    1 
2636 4899 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3777
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3758
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 357.45 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.555 0.210 
 2 mu         0.1   0.2 0.661 0.257 
 3 mu         0.1   0.3 0.751 0.298 
 4 mu         0.1   0.4 0.837 0.322 
 5 mu         0.1   0.5 0.896 0.334 
 6 mu         0.2   0.1 0.315 0.0681
 7 mu         0.2   0.2 0.381 0.0664
 8 mu         0.2   0.3 0.451 0.0678
 9 mu         0.2   0.4 0.485 0.0771
10 mu         0.2   0.5 0.533 0.0677
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.55        0.0503 0.0000000308     50.9 
 2 mu         0.2      0.996       0.749  0.00193           5.93
 3 mu         0.3      0.946       0.895  0.154             3.31
 4 mu         0.4      1.00        0.939  0.208             2.02
 5 mu         0.5      1.01        0.980  0.441             1.86
 6 mu         0.6      0.974       0.970  0.501             1.47
 7 mu         0.7      0.997       0.990  0.425             1.75
 8 mu         0.8      0.994       0.974  0.562             1.71
 9 mu         0.9      0.991       0.952  0.220             2.28
10 mu_1       0.1      1.61        0.100  0.0000000985     46.3 
11 mu_1       0.2      0.966       0.735  0.00375           5.12
12 mu_1       0.3      0.953       0.893  0.167             3.64
13 mu_1       0.4      1.01        0.949  0.227             2.04
14 mu_1       0.5      1.00        0.982  0.458             1.91
15 mu_1       0.6      0.974       0.968  0.481             1.46
16 mu_1       0.7      0.998       0.986  0.431             1.75
17 mu_1       0.8      0.993       0.979  0.572             1.72
18 mu_1       0.9      0.991       0.959  0.207             2.31
19 mu_0       0.1      1.55        0.0452 0.0000000232     51.5 
20 mu_0       0.2      1.00        0.755  0.00148           6.13
21 mu_0       0.3      0.943       0.876  0.130             3.16
22 mu_0       0.4      1.00        0.927  0.195             2.07
23 mu_0       0.5      1.01        0.986  0.424             1.82
24 mu_0       0.6      0.976       0.966  0.521             1.50
25 mu_0       0.7      0.994       0.998  0.410             1.74
26 mu_0       0.8      0.995       0.997  0.523             1.70
27 mu_0       0.9      0.984       0.942  0.329             2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0396     3.32e-29  3.95e-86      3.93
 2 mu         0.2     1.08       3.85e-16  7.72e-59     84.4 
 3 mu         0.3     2.93       5.03e- 9  6.25e-43    242.  
 4 mu         0.4     1.46       8.31e- 5  1.07e-31     33.1 
 5 mu         0.5     1.38       2.81e- 2  4.92e-23     32.7 
 6 mu         0.6     1.36       1.84e- 1  5.05e-16     12.5 
 7 mu         0.7     1.65       4.25e- 1  4.11e-21     21.3 
 8 mu         0.8     1.93       7.15e- 2  3.71e-32     46.3 
 9 mu         0.9     1.77       1.28e- 6  1.16e-51     32.8 
10 mu_1       0.1     0.0647     2.03e-28  3.86e-85      6.39
11 mu_1       0.2     1.39       1.29e-15  3.78e-58    114.  
12 mu_1       0.3     2.73       1.17e- 8  2.04e-42    217.  
13 mu_1       0.4     1.51       1.37e- 4  2.63e-31     37.2 
14 mu_1       0.5     1.34       2.87e- 2  9.62e-23     29.4 
15 mu_1       0.6     1.37       1.73e- 1  8.24e-16     13.0 
16 mu_1       0.7     1.67       4.25e- 1  9.53e-22     20.7 
17 mu_1       0.8     1.91       6.19e- 2  7.54e-33     45.6 
18 mu_1       0.9     1.80       9.13e- 7  2.10e-52     33.2 
19 mu_0       0.1     0.0368     1.44e-29  9.43e-88      3.66
20 mu_0       0.2     0.999      1.59e-16  2.07e-60     77.0 
21 mu_0       0.3     3.02       2.17e- 9  1.92e-44    252.  
22 mu_0       0.4     1.43       4.74e- 5  3.85e-33     30.4 
23 mu_0       0.5     1.43       2.17e- 2  2.12e-24     36.1 
24 mu_0       0.6     1.34       2.25e- 1  2.72e-17     11.7 
25 mu_0       0.7     1.60       4.51e- 1  1.15e-20     22.7 
26 mu_0       0.8     2.01       7.30e- 2  1.55e-31     49.1 
27 mu_0       0.9     1.51       4.54e- 6  9.73e-51     30.5 
[1] "Total run time was 360.787 seconds"
