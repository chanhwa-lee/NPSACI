
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7644"
[1] "cluster size dist'n: "

 50  51  53  55  56  57  58  59  60  61  62  63  65  67  68  69  70  71  72  73 
  1   2   2   4   1   2   2   2   3   1   4   4   2   2   1   2   1   2   7   4 
 74  75  79  80  81  82  83  84  85  86  87  88  89  90  92  93  94  95  96  97 
  2   1   2   3   2   1   1   2   2   2   1   2   3   6   3   3   2   1   2   3 
 98  99 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02689 0.32518 0.58816 1.00000 6.89115 
[1] "event indicator table: "

   0    1 
4496 3148 
[1] "treatment indicator table: "

   0    1 
2954 4690 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3830
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 387.921 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.375 0.0736
 2 mu         0.1   0.2 0.499 0.0794
 3 mu         0.1   0.3 0.561 0.0981
 4 mu         0.1   0.4 0.601 0.0864
 5 mu         0.1   0.5 0.649 0.0845
 6 mu         0.2   0.1 0.363 0.0379
 7 mu         0.2   0.2 0.430 0.0542
 8 mu         0.2   0.3 0.504 0.0617
 9 mu         0.2   0.4 0.535 0.0509
10 mu         0.2   0.5 0.564 0.0429
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.07         0.872  6.93e-10      7.78
 2 mu         0.2      0.924        0.915  1.22e- 3      2.86
 3 mu         0.3      0.979        0.970  1.20e- 1      2.25
 4 mu         0.4      1.01         0.972  5.94e- 1      1.73
 5 mu         0.5      1.01         0.983  6.23e- 1      1.53
 6 mu         0.6      0.971        0.960  5.85e- 1      1.63
 7 mu         0.7      0.999        0.993  6.75e- 1      1.85
 8 mu         0.8      1.05         1.02   2.69e- 1      1.60
 9 mu         0.9      0.998        0.956  3.04e- 1      1.73
10 mu_1       0.1      1.06         0.856  2.45e- 9      6.32
11 mu_1       0.2      0.916        0.873  2.16e- 3      2.45
12 mu_1       0.3      0.985        0.985  1.36e- 1      2.31
13 mu_1       0.4      1.02         0.967  5.93e- 1      1.74
14 mu_1       0.5      1.00         0.980  6.33e- 1      1.50
15 mu_1       0.6      0.971        0.966  5.76e- 1      1.66
16 mu_1       0.7      1.00         0.992  6.84e- 1      1.84
17 mu_1       0.8      1.05         1.02   2.70e- 1      1.60
18 mu_1       0.9      0.998        0.955  2.88e- 1      1.72
19 mu_0       0.1      1.08         0.860  4.98e-10      7.94
20 mu_0       0.2      0.926        0.923  9.81e- 4      2.96
21 mu_0       0.3      0.977        0.968  1.13e- 1      2.22
22 mu_0       0.4      1.01         0.966  5.95e- 1      1.74
23 mu_0       0.5      1.01         0.990  6.13e- 1      1.56
24 mu_0       0.6      0.970        0.956  5.92e- 1      1.58
25 mu_0       0.7      0.996        0.985  6.54e- 1      1.87
26 mu_0       0.8      1.04         1.02   2.65e- 1      1.60
27 mu_0       0.9      1.01         0.967  3.34e- 1      1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.44      9.64e-25  2.58e-73    339.  
 2 mu         0.2      1.46      2.08e-12  3.90e-49     47.7 
 3 mu         0.3      1.35      2.19e- 6  4.19e-35     21.1 
 4 mu         0.4      1.38      3.44e- 3  2.98e-25     15.5 
 5 mu         0.5      1.17      2.53e- 2  4.71e-18     10.6 
 6 mu         0.6      1.24      2.00e- 1  3.77e-26      8.61
 7 mu         0.7      1.25      8.24e- 2  1.08e-36      9.01
 8 mu         0.8      0.888     1.58e- 2  1.16e-51     10.7 
 9 mu         0.9      1.36      2.25e- 7  2.13e-77     13.3 
10 mu_1       0.1      1.26      5.82e-24  2.46e-72    114.  
11 mu_1       0.2      1.57      6.03e-12  1.86e-48     50.0 
12 mu_1       0.3      1.35      1.11e- 6  1.33e-34     24.0 
13 mu_1       0.4      1.37      5.25e- 3  7.11e-25     13.6 
14 mu_1       0.5      1.17      2.97e- 2  3.18e-19     11.4 
15 mu_1       0.6      1.25      1.66e- 1  2.12e-27      9.07
16 mu_1       0.7      1.24      7.82e- 2  5.19e-38      8.81
17 mu_1       0.8      0.886     1.51e- 2  4.87e-53     10.3 
18 mu_1       0.9      1.38      1.56e- 7  7.96e-79     13.9 
19 mu_0       0.1      3.69      4.24e-25  1.35e-74    364.  
20 mu_0       0.2      1.44      1.10e-12  2.29e-50     47.1 
21 mu_0       0.3      1.35      1.33e- 6  2.82e-36     20.3 
22 mu_0       0.4      1.39      2.27e- 3  2.34e-26     17.0 
23 mu_0       0.5      1.18      2.32e- 2  9.58e-19      9.74
24 mu_0       0.6      1.23      1.40e- 1  9.11e-26      8.90
25 mu_0       0.7      1.28      6.44e- 2  3.47e-36      9.47
26 mu_0       0.8      0.896     1.16e- 2  5.58e-51     12.4 
27 mu_0       0.9      1.19      8.43e- 7  2.05e-76     10.6 
[1] "Total run time was 391.032 seconds"
