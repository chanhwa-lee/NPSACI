
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7625"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  60  61  62  63  65  66  67  68  69  70  71  72 
  2   2   2   2   3   2   1   2   1   3   1   3   3   3   1   2   2   6   1   1 
 73  74  75  76  77  78  79  80  81  82  84  85  87  88  89  90  91  92  93  94 
  3   1   1   2   3   3   1   2   2   1   5   3   1   2   2   1   2   2   1   3 
 95  96  97  98  99 100 
  3   3   4   3   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02722 0.32647 0.59015 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4536 3089 
[1] "treatment indicator table: "

   0    1 
2848 4777 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3795
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3830
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 366.766 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.413 0.0505
 2 mu         0.1   0.2 0.497 0.0514
 3 mu         0.1   0.3 0.565 0.0728
 4 mu         0.1   0.4 0.621 0.0939
 5 mu         0.1   0.5 0.658 0.0863
 6 mu         0.2   0.1 0.381 0.0364
 7 mu         0.2   0.2 0.453 0.0334
 8 mu         0.2   0.3 0.534 0.0472
 9 mu         0.2   0.4 0.593 0.0515
10 mu         0.2   0.5 0.621 0.0471
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.997        0.940   0.00186      4.27
 2 mu         0.2      0.955        0.954   0.167        1.94
 3 mu         0.3      0.979        0.955   0.380        1.90
 4 mu         0.4      1.02         0.981   0.510        1.79
 5 mu         0.5      0.997        0.995   0.646        1.59
 6 mu         0.6      1.01         1.02    0.517        1.43
 7 mu         0.7      1.01         1.01    0.678        1.39
 8 mu         0.8      1.03         1.04    0.537        1.50
 9 mu         0.9      1.03         1.01    0.366        1.88
10 mu_1       0.1      0.981        0.874   0.00406      3.28
11 mu_1       0.2      0.952        0.953   0.178        2.00
12 mu_1       0.3      0.982        0.974   0.364        1.79
13 mu_1       0.4      1.02         0.972   0.536        1.74
14 mu_1       0.5      0.996        0.988   0.632        1.58
15 mu_1       0.6      1.01         1.02    0.508        1.45
16 mu_1       0.7      1.01         1.01    0.688        1.39
17 mu_1       0.8      1.03         1.04    0.539        1.49
18 mu_1       0.9      1.03         1.01    0.364        1.89
19 mu_0       0.1      0.998        0.941   0.00162      4.42
20 mu_0       0.2      0.956        0.942   0.157        1.93
21 mu_0       0.3      0.978        0.954   0.387        1.94
22 mu_0       0.4      1.02         0.996   0.489        1.82
23 mu_0       0.5      0.998        0.993   0.645        1.59
24 mu_0       0.6      1.01         1.02    0.532        1.46
25 mu_0       0.7      1.02         1.00    0.653        1.38
26 mu_0       0.8      1.03         1.04    0.530        1.51
27 mu_0       0.9      1.04         1.05    0.388        1.79
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02      9.39e-28  3.66e-85    102.  
 2 mu         0.2      0.492     3.89e-15  2.26e-57     18.9 
 3 mu         0.3      0.920     1.57e- 8  3.16e-41     19.3 
 4 mu         0.4      0.842     1.94e- 4  2.49e-30      8.95
 5 mu         0.5      1.09      2.32e- 2  1.76e-22     10.6 
 6 mu         0.6      0.977     2.57e- 1  7.14e-22      8.37
 7 mu         0.7      1.11      1.70e- 1  2.43e-31      9.08
 8 mu         0.8      1.02      1.53e- 2  6.64e-45      7.68
 9 mu         0.9      1.09      1.25e- 7  2.23e-68     16.2 
10 mu_1       0.1      0.727     5.84e-27  3.51e-84     71.8 
11 mu_1       0.2      0.584     1.28e-14  1.09e-56     21.1 
12 mu_1       0.3      0.905     3.47e- 8  1.01e-40     19.6 
13 mu_1       0.4      0.865     3.25e- 4  6.23e-30      8.87
14 mu_1       0.5      1.09      3.16e- 2  3.52e-22     10.8 
15 mu_1       0.6      0.979     2.53e- 1  8.40e-23      7.97
16 mu_1       0.7      1.12      1.49e- 1  2.45e-32      9.16
17 mu_1       0.8      1.01      1.20e- 2  5.86e-46      7.78
18 mu_1       0.9      1.10      8.87e- 8  1.75e-69     16.2 
19 mu_0       0.1      1.05      3.94e-28  0           105.  
20 mu_0       0.2      0.469     1.66e-15  0            18.3 
21 mu_0       0.3      0.926     7.74e- 9  0            19.2 
22 mu_0       0.4      0.827     1.07e- 4  0             9.25
23 mu_0       0.5      1.09      1.89e- 2  0            10.4 
24 mu_0       0.6      0.973     2.23e- 1  0             8.97
25 mu_0       0.7      1.10      1.30e- 1  0             8.91
26 mu_0       0.8      1.04      2.22e- 2  0             9.02
27 mu_0       0.9      1.08      3.16e- 7  0            16.0 
[1] "Total run time was 369.727 seconds"
