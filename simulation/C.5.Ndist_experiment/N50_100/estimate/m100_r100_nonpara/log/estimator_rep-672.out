
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7583"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  69  70  71 
  1   2   2   1   1   3   4   1   2   1   1   2   1   3   2   2   2   4   1   2 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 
  3   4   2   3   3   3   1   4   1   2   3   1   2   1   3   3   4   3   1   1 
 93  94  96  97  98  99 100 
  2   2   2   1   1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03489 0.34577 0.60745 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4446 3137 
[1] "treatment indicator table: "

   0    1 
2860 4723 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3803
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3780
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 422.588 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.411 0.0634
 2 mu         0.1   0.2 0.577 0.0706
 3 mu         0.1   0.3 0.702 0.103 
 4 mu         0.1   0.4 0.726 0.0919
 5 mu         0.1   0.5 0.773 0.0986
 6 mu         0.2   0.1 0.341 0.0297
 7 mu         0.2   0.2 0.443 0.0320
 8 mu         0.2   0.3 0.523 0.0394
 9 mu         0.2   0.4 0.558 0.0375
10 mu         0.2   0.5 0.625 0.0453
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.14         0.896 0.000000261      4.92
 2 mu         0.2      1.02         0.925 0.0244           2.42
 3 mu         0.3      0.987        0.981 0.223            1.81
 4 mu         0.4      0.947        0.881 0.376            1.85
 5 mu         0.5      0.976        0.953 0.444            1.89
 6 mu         0.6      1.03         1.02  0.426            1.56
 7 mu         0.7      1.01         0.980 0.473            1.67
 8 mu         0.8      1.05         1.05  0.479            1.86
 9 mu         0.9      1.06         0.991 0.378            2.18
10 mu_1       0.1      1.11         0.962 0.000000791      4.09
11 mu_1       0.2      1.02         0.954 0.0371           2.49
12 mu_1       0.3      0.978        0.956 0.249            1.86
13 mu_1       0.4      0.947        0.864 0.369            1.84
14 mu_1       0.5      0.982        0.956 0.465            1.85
15 mu_1       0.6      1.03         1.01  0.427            1.56
16 mu_1       0.7      1.01         0.983 0.469            1.69
17 mu_1       0.8      1.05         1.04  0.486            1.86
18 mu_1       0.9      1.06         0.987 0.378            2.23
19 mu_0       0.1      1.14         0.882 0.000000202      5.12
20 mu_0       0.2      1.02         0.923 0.0212           2.40
21 mu_0       0.3      0.991        0.973 0.211            1.78
22 mu_0       0.4      0.948        0.894 0.380            1.87
23 mu_0       0.5      0.970        0.954 0.424            1.92
24 mu_0       0.6      1.03         1.01  0.424            1.55
25 mu_0       0.7      1.01         0.980 0.482            1.62
26 mu_0       0.8      1.04         1.05  0.452            1.84
27 mu_0       0.9      1.06         1.01  0.384            2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      4.28      5.42e-27  3.01e-79     378. 
 2 mu         0.2      0.839     6.61e-14  1.64e-53      24.2
 3 mu         0.3      1.85      1.98e- 7  1.53e-38      41.7
 4 mu         0.4      1.90      7.80e- 4  5.34e-28      30.9
 5 mu         0.5      1.82      1.56e- 2  6.68e-20      46.3
 6 mu         0.6      1.53      8.76e- 2  1.14e-15      34.4
 7 mu         0.7      1.22      3.41e- 2  3.88e-23      27.5
 8 mu         0.8      1.25      2.87e- 3  6.98e-34      21.1
 9 mu         0.9      1.29      3.00e- 9  1.53e-52      17.6
10 mu_1       0.1      3.85      3.32e-26  2.91e-78     329. 
11 mu_1       0.2      0.866     1.99e-13  7.91e-53      27.6
12 mu_1       0.3      1.92      3.99e- 7  4.92e-38      46.9
13 mu_1       0.4      1.89      1.20e- 3  1.29e-27      32.1
14 mu_1       0.5      1.81      1.19e- 2  1.29e-19      44.3
15 mu_1       0.6      1.48      8.74e- 2  1.66e-16      33.6
16 mu_1       0.7      1.25      2.84e- 2  4.83e-24      28.8
17 mu_1       0.8      1.24      2.09e- 3  7.58e-35      21.1
18 mu_1       0.9      1.31      2.01e- 9  1.48e-53      17.7
19 mu_0       0.1      4.33      2.33e-27  1.13e-80     383. 
20 mu_0       0.2      0.833     3.29e-14  6.90e-55      23.4
21 mu_0       0.3      1.82      1.12e- 7  7.35e-40      39.4
22 mu_0       0.4      1.90      5.02e- 4  3.00e-29      32.0
23 mu_0       0.5      1.83      1.34e- 2  4.50e-21      48.4
24 mu_0       0.6      1.60      1.02e- 1  2.61e-15      35.6
25 mu_0       0.7      1.16      4.01e- 2  1.18e-22      24.3
26 mu_0       0.8      1.33      4.21e- 3  3.18e-33      21.1
27 mu_0       0.9      1.18      1.19e- 8  1.40e-51      16.5
[1] "Total run time was 426.126 seconds"
