
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7444"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  59  60  61  62  63  66  67  68  69  70  72  73  74 
  1   3   2   2   1   1   4   3   1   2   4   4   1   5   6   3   1   3   1   3 
 75  76  77  78  79  80  81  82  83  85  86  87  88  89  90  92  94  96  97  98 
  4   3   1   4   2   2   1   1   1   3   2   2   3   2   1   3   4   3   2   2 
 99 100 
  2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03819 0.37485 0.63604 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4461 2983 
[1] "treatment indicator table: "

   0    1 
2609 4835 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3666
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3778
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 419.006 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.175 0.0522
 2 mu         0.1   0.2 0.290 0.0671
 3 mu         0.1   0.3 0.300 0.0731
 4 mu         0.1   0.4 0.305 0.0777
 5 mu         0.1   0.5 0.334 0.0830
 6 mu         0.2   0.1 0.273 0.0277
 7 mu         0.2   0.2 0.413 0.0320
 8 mu         0.2   0.3 0.448 0.0356
 9 mu         0.2   0.4 0.469 0.0383
10 mu         0.2   0.5 0.516 0.0385
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.610       0.0391 0.00000000282     10.8 
 2 mu         0.2      0.957       0.872  0.00182            2.80
 3 mu         0.3      0.973       0.963  0.284              2.00
 4 mu         0.4      1.02        0.982  0.457              1.61
 5 mu         0.5      1.00        0.982  0.533              1.55
 6 mu         0.6      0.970       0.952  0.521              1.50
 7 mu         0.7      1.00        0.979  0.556              1.46
 8 mu         0.8      1.01        1.01   0.605              1.44
 9 mu         0.9      1.02        0.969  0.218              2.09
10 mu_1       0.1      0.628       0.0785 0.0000000102       8.74
11 mu_1       0.2      0.981       0.928  0.00334            2.62
12 mu_1       0.3      0.972       0.935  0.358              1.90
13 mu_1       0.4      1.02        0.978  0.468              1.65
14 mu_1       0.5      0.996       0.979  0.561              1.52
15 mu_1       0.6      0.971       0.961  0.522              1.50
16 mu_1       0.7      1.00        0.983  0.563              1.46
17 mu_1       0.8      1.01        1.01   0.595              1.45
18 mu_1       0.9      1.02        0.973  0.211              2.12
19 mu_0       0.1      0.608       0.0347 0.00000000199     11.0 
20 mu_0       0.2      0.951       0.872  0.00143            2.84
21 mu_0       0.3      0.973       0.953  0.251              2.04
22 mu_0       0.4      1.02        0.990  0.441              1.58
23 mu_0       0.5      1.00        0.986  0.506              1.57
24 mu_0       0.6      0.969       0.956  0.520              1.49
25 mu_0       0.7      0.999       0.983  0.541              1.45
26 mu_0       0.8      1.01        1.00   0.641              1.39
27 mu_0       0.9      1.02        0.960  0.289              1.92
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00206     3.45e-30  7.70e-72     0.189
 2 mu         0.2    0.551       2.07e-17  3.26e-47    24.4  
 3 mu         0.3    2.52        3.02e-10  5.29e-33    90.5  
 4 mu         0.4    1.27        3.35e- 5  4.21e-23    22.3  
 5 mu         0.5    1.03        6.65e- 3  1.30e-15    10.2  
 6 mu         0.6    1.10        1.11e- 1  1.02e- 9    11.0  
 7 mu         0.7    1.07        2.31e- 1  8.44e-15     6.50 
 8 mu         0.8    1.23        1.34e- 1  2.20e-25     7.70 
 9 mu         0.9    1.38        7.58e- 6  8.95e-45    25.6  
10 mu_1       0.1    0.00507     2.65e-29  7.10e-71     0.457
11 mu_1       0.2    0.742       7.22e-17  1.51e-46    29.5  
12 mu_1       0.3    2.53        7.16e-10  1.63e-32    92.6  
13 mu_1       0.4    1.19        5.73e- 5  9.72e-23    17.2  
14 mu_1       0.5    1.04        6.72e- 3  2.40e-15     9.76 
15 mu_1       0.6    1.10        1.08e- 1  1.56e- 9    11.3  
16 mu_1       0.7    1.07        2.32e- 1  3.39e-15     6.41 
17 mu_1       0.8    1.23        1.35e- 1  7.72e-26     7.57 
18 mu_1       0.9    1.38        5.64e- 6  2.80e-45    26.3  
19 mu_0       0.1    0.00173     8.90e-31  6.65e-73     0.159
20 mu_0       0.2    0.503       7.83e-18  3.17e-48    23.1  
21 mu_0       0.3    2.51        1.25e-10  5.88e-34    89.7  
22 mu_0       0.4    1.32        1.77e- 5  5.46e-24    25.8  
23 mu_0       0.5    1.02        6.97e- 3  2.02e-16    11.5  
24 mu_0       0.6    1.10        8.70e- 2  1.98e-10    10.6  
25 mu_0       0.7    1.05        1.81e- 1  2.02e-14     6.69 
26 mu_0       0.8    1.20        1.26e- 1  7.89e-25     8.22 
27 mu_0       0.9    1.38        2.47e- 5  6.43e-44    19.9  
[1] "Total run time was 424.995 seconds"
