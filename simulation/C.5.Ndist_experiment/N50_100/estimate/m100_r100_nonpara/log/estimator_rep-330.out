
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7536"
[1] "cluster size dist'n: "

 50  51  52  53  57  58  59  60  61  62  63  64  65  66  68  69  71  72  73  74 
  2   2   1   2   3   3   1   3   1   4   2   1   2   2   3   3   3   4   1   3 
 75  76  78  79  80  81  82  83  85  88  89  90  91  93  94  95  97  98 100 
  7   1   3   3   2   1   4   5   4   1   3   4   3   5   2   1   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0322  0.3408  0.6023  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4551 2985 
[1] "treatment indicator table: "

   0    1 
2754 4782 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3620
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3916
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 451.268 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.482 0.0842
 2 mu         0.1   0.2 0.583 0.105 
 3 mu         0.1   0.3 0.627 0.106 
 4 mu         0.1   0.4 0.673 0.115 
 5 mu         0.1   0.5 0.678 0.111 
 6 mu         0.2   0.1 0.419 0.0525
 7 mu         0.2   0.2 0.505 0.0620
 8 mu         0.2   0.3 0.550 0.0622
 9 mu         0.2   0.4 0.589 0.0677
10 mu         0.2   0.5 0.595 0.0644
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.07         0.659 0.00000000313      9.06
 2 mu         0.2      1.08         0.958 0.00320            6.74
 3 mu         0.3      1.02         0.951 0.325              2.04
 4 mu         0.4      1.00         1.02  0.498              1.80
 5 mu         0.5      0.985        0.978 0.465              1.66
 6 mu         0.6      1.01         1.01  0.643              1.57
 7 mu         0.7      1.00         0.983 0.722              1.55
 8 mu         0.8      0.997        0.974 0.597              1.69
 9 mu         0.9      1.03         0.993 0.427              1.91
10 mu_1       0.1      1.10         0.673 0.0000000104      12.3 
11 mu_1       0.2      1.06         0.969 0.00540            4.86
12 mu_1       0.3      1.02         0.971 0.311              2.15
13 mu_1       0.4      1.00         1.01  0.492              1.82
14 mu_1       0.5      0.986        0.980 0.443              1.62
15 mu_1       0.6      1.01         1.01  0.651              1.55
16 mu_1       0.7      1.00         0.980 0.717              1.55
17 mu_1       0.8      0.997        0.975 0.600              1.71
18 mu_1       0.9      1.03         0.986 0.415              1.94
19 mu_0       0.1      1.07         0.645 0.00000000232      8.86
20 mu_0       0.2      1.08         0.955 0.00265            7.21
21 mu_0       0.3      1.02         0.949 0.313              1.99
22 mu_0       0.4      1.01         1.01  0.485              1.80
23 mu_0       0.5      0.985        0.973 0.487              1.71
24 mu_0       0.6      1.01         1.01  0.629              1.60
25 mu_0       0.7      1.00         0.979 0.719              1.56
26 mu_0       0.8      0.999        0.968 0.566              1.64
27 mu_0       0.9      1.02         0.997 0.501              1.92
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      4.52      7.32e-32  3.89e-82    371.  
 2 mu         0.2      0.876     9.50e-18  1.69e-54     44.3 
 3 mu         0.3      0.746     1.19e- 9  1.58e-38     18.4 
 4 mu         0.4      1.05      3.73e- 5  2.23e-27     10.1 
 5 mu         0.5      1.35      1.26e- 2  6.42e-19     14.0 
 6 mu         0.6      0.924     1.14e- 1  3.70e-16     17.6 
 7 mu         0.7      1.24      7.26e- 2  1.99e-24      8.51
 8 mu         0.8      0.943     4.53e- 2  2.08e-36      6.30
 9 mu         0.9      1.47      6.48e- 7  2.55e-57     20.2 
10 mu_1       0.1      5.26      5.04e-31  3.62e-81    417.  
11 mu_1       0.2      0.572     3.09e-17  7.86e-54     26.3 
12 mu_1       0.3      0.821     2.58e- 9  4.90e-38     20.2 
13 mu_1       0.4      1.08      5.20e- 5  5.19e-27      9.87
14 mu_1       0.5      1.34      1.76e- 2  1.19e-18     13.5 
15 mu_1       0.6      0.909     9.81e- 2  6.93e-17     16.7 
16 mu_1       0.7      1.24      5.87e- 2  3.20e-25      8.88
17 mu_1       0.8      0.950     4.74e- 2  2.93e-37      6.62
18 mu_1       0.9      1.46      4.95e- 7  3.19e-58     19.9 
19 mu_0       0.1      4.44      2.53e-32  3.03e-83    366.  
20 mu_0       0.2      0.952     4.16e-18  1.48e-55     49.2 
21 mu_0       0.3      0.714     5.16e-10  1.58e-39     17.6 
22 mu_0       0.4      1.03      2.43e- 5  2.61e-28     10.4 
23 mu_0       0.5      1.36      1.10e- 2  8.99e-20     14.5 
24 mu_0       0.6      0.947     1.13e- 1  8.20e-16     18.9 
25 mu_0       0.7      1.22      5.23e- 2  5.90e-24      9.26
26 mu_0       0.8      0.914     3.13e- 2  9.25e-36      5.52
27 mu_0       0.9      1.54      2.04e- 6  2.26e-56     22.7 
[1] "Total run time was 455.423 seconds"
