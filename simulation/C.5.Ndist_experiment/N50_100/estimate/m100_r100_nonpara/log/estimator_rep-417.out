
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7293"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  60  61  62  64  65  66  67  68  69  70  71  72 
  3   4   2   2   3   4   1   2   1   2   5   2   3   1   4   3   4   3   1   4 
 73  74  75  76  77  78  79  80  81  82  84  85  86  87  89  91  92  93  94  95 
  1   1   2   1   3   2   1   1   3   3   2   1   1   4   3   3   2   1   1   1 
 96  97  98  99 100 
  4   2   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02414 0.31131 0.57478 0.97828 6.45608 
[1] "event indicator table: "

   0    1 
4367 2926 
[1] "treatment indicator table: "

   0    1 
2801 4492 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3482
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3811
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 370.194 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.440 0.0776
 2 mu         0.1   0.2 0.508 0.0845
 3 mu         0.1   0.3 0.537 0.0744
 4 mu         0.1   0.4 0.545 0.0703
 5 mu         0.1   0.5 0.584 0.0794
 6 mu         0.2   0.1 0.361 0.0374
 7 mu         0.2   0.2 0.428 0.0435
 8 mu         0.2   0.3 0.476 0.0410
 9 mu         0.2   0.4 0.513 0.0450
10 mu         0.2   0.5 0.546 0.0493
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.980        0.876 0.0000389      4.83
 2 mu         0.2      0.976        0.938 0.0830         2.20
 3 mu         0.3      0.959        0.921 0.406          2.12
 4 mu         0.4      0.971        0.958 0.472          1.87
 5 mu         0.5      0.968        0.970 0.549          1.36
 6 mu         0.6      1.02         0.994 0.634          1.56
 7 mu         0.7      1.02         1.00  0.602          1.62
 8 mu         0.8      0.991        0.958 0.600          1.47
 9 mu         0.9      1.06         1.01  0.300          2.14
10 mu_1       0.1      0.952        0.886 0.0000963      3.29
11 mu_1       0.2      0.968        0.921 0.132          2.28
12 mu_1       0.3      0.965        0.936 0.435          2.18
13 mu_1       0.4      0.966        0.959 0.502          1.82
14 mu_1       0.5      0.973        0.967 0.561          1.37
15 mu_1       0.6      1.02         1.01  0.622          1.57
16 mu_1       0.7      1.02         0.999 0.607          1.62
17 mu_1       0.8      0.990        0.957 0.598          1.47
18 mu_1       0.9      1.06         1.01  0.291          2.16
19 mu_0       0.1      0.983        0.831 0.0000325      5.05
20 mu_0       0.2      0.978        0.948 0.0708         2.25
21 mu_0       0.3      0.956        0.919 0.389          2.10
22 mu_0       0.4      0.974        0.956 0.451          1.90
23 mu_0       0.5      0.963        0.965 0.536          1.36
24 mu_0       0.6      1.02         0.977 0.651          1.55
25 mu_0       0.7      1.02         1.01  0.588          1.62
26 mu_0       0.8      0.992        0.970 0.610          1.51
27 mu_0       0.9      1.06         1.01  0.381          2.02
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.220     2.98e-26  6.84e-73     17.5 
 2 mu         0.2      1.18      3.34e-15  5.80e-48     27.4 
 3 mu         0.3      0.763     1.22e- 8  1.41e-33     10.3 
 4 mu         0.4      0.876     2.92e- 4  1.50e-23     11.9 
 5 mu         0.5      1.02      1.86e- 2  5.78e-16     15.5 
 6 mu         0.6      0.963     2.17e- 1  4.07e-14      9.45
 7 mu         0.7      1.35      3.26e- 1  4.15e-22      8.59
 8 mu         0.8      1.27      2.82e- 2  6.44e-34     32.0 
 9 mu         0.9      1.29      2.44e- 7  7.98e-55     27.9 
10 mu_1       0.1      0.347     2.15e-25  6.31e-72     26.1 
11 mu_1       0.2      1.18      1.17e-14  2.68e-47     26.1 
12 mu_1       0.3      0.743     2.64e- 8  4.34e-33     10.8 
13 mu_1       0.4      0.891     3.93e- 4  3.46e-23     12.0 
14 mu_1       0.5      1.02      2.36e- 2  1.07e-15     16.3 
15 mu_1       0.6      0.969     2.16e- 1  1.17e-14      9.68
16 mu_1       0.7      1.37      3.38e- 1  1.02e-22      8.60
17 mu_1       0.8      1.26      2.49e- 2  1.39e-34     33.5 
18 mu_1       0.9      1.30      1.79e- 7  1.53e-55     28.2 
19 mu_0       0.1      0.206     9.22e-27  5.85e-74     16.5 
20 mu_0       0.2      1.18      1.26e-15  5.58e-49     27.7 
21 mu_0       0.3      0.771     6.16e- 9  1.55e-34     10.5 
22 mu_0       0.4      0.865     1.71e- 4  1.92e-24     11.8 
23 mu_0       0.5      1.02      1.26e- 2  8.89e-17     14.8 
24 mu_0       0.6      0.954     1.87e- 1  8.41e-14      9.10
25 mu_0       0.7      1.30      3.66e- 1  1.14e-21      8.56
26 mu_0       0.8      1.33      2.96e- 2  2.67e-33     26.1 
27 mu_0       0.9      1.24      8.41e- 7  6.61e-54     25.1 
[1] "Total run time was 373.176 seconds"
