
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7542"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  68  70  71 
  2   3   1   2   1   2   1   1   2   1   2   3   2   6   3   4   1   2   3   4 
 72  73  75  76  77  78  80  81  82  83  85  86  87  88  89  90  91  92  93  94 
  1   1   1   2   2   1   2   3   2   3   2   1   4   2   6   2   1   3   3   2 
 95  96  98  99 100 
  1   3   2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03345 0.34848 0.61182 1.00000 5.34660 
[1] "event indicator table: "

   0    1 
4556 2986 
[1] "treatment indicator table: "

   0    1 
2697 4845 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3821
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3721
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 480.045 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.371 0.0860
 2 mu         0.1   0.2 0.479 0.117 
 3 mu         0.1   0.3 0.530 0.125 
 4 mu         0.1   0.4 0.568 0.133 
 5 mu         0.1   0.5 0.606 0.141 
 6 mu         0.2   0.1 0.361 0.0475
 7 mu         0.2   0.2 0.453 0.0511
 8 mu         0.2   0.3 0.511 0.0538
 9 mu         0.2   0.4 0.566 0.0632
10 mu         0.2   0.5 0.603 0.0607
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.991        0.213 0.000000105      23.4 
 2 mu         0.2      1.03         0.956 0.0136            4.42
 3 mu         0.3      1.01         0.974 0.285             2.02
 4 mu         0.4      0.992        0.928 0.384             1.64
 5 mu         0.5      0.988        0.999 0.581             1.57
 6 mu         0.6      1.01         1.00  0.525             1.66
 7 mu         0.7      1.03         1.02  0.530             1.85
 8 mu         0.8      0.995        0.974 0.543             1.55
 9 mu         0.9      0.957        0.941 0.180             2.06
10 mu_1       0.1      0.987        0.332 0.000000317      14.3 
11 mu_1       0.2      1.03         0.920 0.0206            4.21
12 mu_1       0.3      1.01         0.958 0.321             2.04
13 mu_1       0.4      0.991        0.960 0.411             1.55
14 mu_1       0.5      0.989        0.995 0.591             1.58
15 mu_1       0.6      1.01         0.994 0.520             1.65
16 mu_1       0.7      1.02         1.03  0.529             1.83
17 mu_1       0.8      0.995        0.982 0.533             1.56
18 mu_1       0.9      0.957        0.938 0.170             2.10
19 mu_0       0.1      0.992        0.203 0.0000000818     24.4 
20 mu_0       0.2      1.03         0.947 0.0119            4.47
21 mu_0       0.3      1.01         0.983 0.270             2.01
22 mu_0       0.4      0.993        0.941 0.367             1.70
23 mu_0       0.5      0.987        0.996 0.572             1.56
24 mu_0       0.6      1.01         1.00  0.533             1.67
25 mu_0       0.7      1.03         1.02  0.533             1.89
26 mu_0       0.8      0.995        0.969 0.584             1.51
27 mu_0       0.9      0.960        0.926 0.246             2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000192     1.81e-31  3.39e-71    0.0187
 2 mu         0.2   0.242        9.76e-17  7.19e-48   20.6   
 3 mu         0.3   0.856        5.21e- 9  2.62e-34   13.4   
 4 mu         0.4   1.61         1.43e- 4  9.16e-25   30.9   
 5 mu         0.5   1.49         5.78e- 2  1.92e-17   19.9   
 6 mu         0.6   1.32         1.34e- 1  1.48e-11   17.3   
 7 mu         0.7   1.16         3.68e- 1  2.92e-17   18.7   
 8 mu         0.8   1.96         2.16e- 2  2.60e-28   33.9   
 9 mu         0.9   1.74         2.01e- 7  2.94e-48   36.0   
10 mu_1       0.1   0.000462     1.35e-30  3.26e-70    0.0447
11 mu_1       0.2   0.303        2.98e-16  3.46e-47   24.6   
12 mu_1       0.3   0.932        1.11e- 8  8.40e-34   12.3   
13 mu_1       0.4   1.65         2.31e- 4  2.21e-24   33.3   
14 mu_1       0.5   1.45         7.56e- 2  3.70e-17   18.2   
15 mu_1       0.6   1.32         1.25e- 1  2.37e-11   17.8   
16 mu_1       0.7   1.17         3.99e- 1  9.97e-18   20.5   
17 mu_1       0.8   1.97         1.67e- 2  7.77e-29   32.5   
18 mu_1       0.9   1.75         1.44e- 7  7.80e-49   37.2   
19 mu_0       0.1   0.000162     5.14e-32  1.39e-72    0.0158
20 mu_0       0.2   0.226        4.75e-17  3.33e-49   19.6   
21 mu_0       0.3   0.824        2.68e- 9  1.38e-35   14.6   
22 mu_0       0.4   1.58         8.07e- 5  5.66e-26   31.0   
23 mu_0       0.5   1.53         4.33e- 2  1.42e-18   22.7   
24 mu_0       0.6   1.32         9.15e- 2  1.37e-12   16.6   
25 mu_0       0.7   1.13         2.26e- 1  7.40e-17   14.4   
26 mu_0       0.8   1.92         4.09e- 2  9.88e-28   39.1   
27 mu_0       0.9   1.68         7.17e- 7  2.23e-47   25.8   
[1] "Total run time was 483.383 seconds"
