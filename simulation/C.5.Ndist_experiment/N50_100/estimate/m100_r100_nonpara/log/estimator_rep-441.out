
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7496"
[1] "cluster size dist'n: "

 50  52  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  3   3   3   1   2   1   2   2   3   1   3   2   6   2   5   2   1   3   1   2 
 72  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92  93 
  1   1   1   1   2   1   2   1   3   4   3   1   2   2   4   1   1   1   3   1 
 94  95  96  97  98  99 100 
  1   1   5   3   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02226 0.30044 0.57987 0.99806 6.00000 
[1] "event indicator table: "

   0    1 
4300 3196 
[1] "treatment indicator table: "

   0    1 
3128 4368 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3756
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3740
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 439.803 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.429 0.0503
 2 mu         0.1   0.2 0.489 0.0610
 3 mu         0.1   0.3 0.536 0.0688
 4 mu         0.1   0.4 0.612 0.0809
 5 mu         0.1   0.5 0.664 0.100 
 6 mu         0.2   0.1 0.339 0.0291
 7 mu         0.2   0.2 0.387 0.0300
 8 mu         0.2   0.3 0.433 0.0329
 9 mu         0.2   0.4 0.497 0.0436
10 mu         0.2   0.5 0.538 0.0601
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.20         0.722  0.00110       4.74
 2 mu         0.2      1.00         0.908  0.278         2.82
 3 mu         0.3      0.981        0.951  0.434         2.23
 4 mu         0.4      0.993        0.982  0.387         1.61
 5 mu         0.5      1.02         1.00   0.589         1.64
 6 mu         0.6      0.991        1.01   0.680         1.49
 7 mu         0.7      0.986        0.971  0.612         1.54
 8 mu         0.8      1.03         1.01   0.483         1.61
 9 mu         0.9      1.01         0.958  0.0823        2.61
10 mu_1       0.1      1.14         0.928  0.00255       3.93
11 mu_1       0.2      0.995        0.905  0.301         2.98
12 mu_1       0.3      0.980        0.985  0.442         2.00
13 mu_1       0.4      0.995        0.977  0.421         1.64
14 mu_1       0.5      1.02         1.00   0.593         1.60
15 mu_1       0.6      0.989        1.01   0.670         1.49
16 mu_1       0.7      0.988        0.973  0.609         1.55
17 mu_1       0.8      1.02         1.01   0.474         1.62
18 mu_1       0.9      1.01         0.954  0.0769        2.64
19 mu_0       0.1      1.21         0.724  0.000934      4.92
20 mu_0       0.2      1.00         0.905  0.273         2.78
21 mu_0       0.3      0.982        0.941  0.419         2.33
22 mu_0       0.4      0.991        0.978  0.363         1.64
23 mu_0       0.5      1.01         0.996  0.585         1.67
24 mu_0       0.6      0.994        1.02   0.676         1.48
25 mu_0       0.7      0.981        0.965  0.621         1.52
26 mu_0       0.8      1.03         1.03   0.516         1.55
27 mu_0       0.9      1.01         0.988  0.131         2.30
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.340     1.68e-22  1.45e-75     19.6 
 2 mu         0.2      1.76      1.14e-11  4.92e-51     66.1 
 3 mu         0.3      1.05      3.49e- 6  9.06e-37     22.3 
 4 mu         0.4      1.23      6.76e- 3  1.00e-26     11.4 
 5 mu         0.5      1.11      1.16e- 1  5.13e-19     12.8 
 6 mu         0.6      1.22      2.84e- 1  8.18e-13     24.7 
 7 mu         0.7      1.14      7.88e- 2  4.26e-20      8.63
 8 mu         0.8      0.705     2.25e- 3  4.37e-32      6.06
 9 mu         0.9      1.65      2.18e- 9  1.37e-53     40.3 
10 mu_1       0.1      0.564     9.76e-22  1.40e-74     31.6 
11 mu_1       0.2      1.73      3.66e-11  2.37e-50     69.6 
12 mu_1       0.3      1.00      7.17e- 6  2.91e-36     20.0 
13 mu_1       0.4      1.24      7.29e- 3  2.42e-26     12.1 
14 mu_1       0.5      1.11      9.19e- 2  9.91e-19     14.6 
15 mu_1       0.6      1.22      3.16e- 1  1.31e-12     23.5 
16 mu_1       0.7      1.14      7.48e- 2  1.33e-20      8.89
17 mu_1       0.8      0.694     2.00e- 3  1.19e-32      6.38
18 mu_1       0.9      1.73      1.44e- 9  3.33e-54     42.0 
19 mu_0       0.1      0.315     7.83e-23  0            18.2 
20 mu_0       0.2      1.77      5.38e-12  0            65.2 
21 mu_0       0.3      1.07      1.90e- 6  0            23.8 
22 mu_0       0.4      1.22      4.88e- 3  0            10.8 
23 mu_0       0.5      1.10      1.22e- 1  0            11.1 
24 mu_0       0.6      1.22      2.37e- 1  0            26.5 
25 mu_0       0.7      1.16      1.11e- 1  0             8.03
26 mu_0       0.8      0.749     3.56e- 3  0             6.99
27 mu_0       0.9      0.977     4.54e- 9  0            25.2 
[1] "Total run time was 443.62 seconds"
