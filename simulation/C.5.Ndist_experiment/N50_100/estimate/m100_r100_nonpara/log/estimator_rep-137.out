
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7436"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  59  60  61  63  65  66  67  68  69  70  71  72  73 
  3   3   3   2   4   2   5   1   2   3   1   2   2   1   1   2   3   1   5   1 
 74  76  77  78  80  81  82  83  84  85  87  88  90  92  93  94  95  96  97  98 
  1   4   2   5   4   3   1   3   3   2   3   2   2   3   4   1   1   4   1   2 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03168 0.33935 0.59510 1.00000 6.49954 
[1] "event indicator table: "

   0    1 
4422 3014 
[1] "treatment indicator table: "

   0    1 
2874 4562 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3707
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3729
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 376.387 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.389 0.0738
 2 mu         0.1   0.2 0.450 0.0808
 3 mu         0.1   0.3 0.489 0.0655
 4 mu         0.1   0.4 0.528 0.0653
 5 mu         0.1   0.5 0.545 0.0634
 6 mu         0.2   0.1 0.362 0.0334
 7 mu         0.2   0.2 0.460 0.0449
 8 mu         0.2   0.3 0.506 0.0371
 9 mu         0.2   0.4 0.552 0.0365
10 mu         0.2   0.5 0.571 0.0312
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.894        0.660  0.000277      5.45
 2 mu         0.2      1.00         0.976  0.135         2.21
 3 mu         0.3      1.06         1.06   0.454         1.78
 4 mu         0.4      0.992        1.01   0.447         1.57
 5 mu         0.5      0.999        0.967  0.475         1.76
 6 mu         0.6      0.986        0.991  0.533         1.52
 7 mu         0.7      0.995        0.977  0.573         1.43
 8 mu         0.8      1.01         0.982  0.633         1.63
 9 mu         0.9      0.986        0.977  0.0773        1.88
10 mu_1       0.1      0.907        0.742  0.000629      4.52
11 mu_1       0.2      1.02         0.991  0.150         2.08
12 mu_1       0.3      1.06         1.07   0.463         1.78
13 mu_1       0.4      0.990        1.02   0.453         1.54
14 mu_1       0.5      0.998        0.971  0.466         1.80
15 mu_1       0.6      0.985        0.996  0.534         1.52
16 mu_1       0.7      0.996        0.983  0.566         1.44
17 mu_1       0.8      1.01         0.990  0.625         1.65
18 mu_1       0.9      0.987        0.980  0.0709        1.91
19 mu_0       0.1      0.892        0.649  0.000238      5.68
20 mu_0       0.2      1.00         0.953  0.131         2.25
21 mu_0       0.3      1.06         1.06   0.450         1.82
22 mu_0       0.4      0.994        1.01   0.443         1.59
23 mu_0       0.5      0.999        0.966  0.483         1.72
24 mu_0       0.6      0.986        0.979  0.532         1.51
25 mu_0       0.7      0.993        0.979  0.588         1.40
26 mu_0       0.8      1.01         0.983  0.639         1.57
27 mu_0       0.9      0.984        0.968  0.135         1.66
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.55      7.24e-26  4.07e-74    206.  
 2 mu         0.2      0.361     2.09e-13  6.92e-50     11.3 
 3 mu         0.3      0.651     2.42e- 7  8.50e-36     20.6 
 4 mu         0.4      0.821     9.87e- 4  7.06e-26     12.9 
 5 mu         0.5      0.936     7.02e- 2  2.89e-18     11.2 
 6 mu         0.6      0.972     2.08e- 1  9.89e-20     13.3 
 7 mu         0.7      0.984     1.09e- 1  9.30e-29      9.02
 8 mu         0.8      1.10      7.00e- 3  9.81e-42     14.3 
 9 mu         0.9      1.52      2.24e- 8  2.96e-64     20.8 
10 mu_1       0.1      2.36      4.53e-25  3.93e-73    174.  
11 mu_1       0.2      0.334     5.92e-13  3.33e-49      8.60
12 mu_1       0.3      0.680     5.04e- 7  2.73e-35     21.3 
13 mu_1       0.4      0.836     1.52e- 3  1.70e-25     13.5 
14 mu_1       0.5      0.941     7.95e- 2  5.57e-18     12.5 
15 mu_1       0.6      0.974     1.73e- 1  1.39e-20     12.4 
16 mu_1       0.7      0.986     9.01e- 2  1.12e-29      9.39
17 mu_1       0.8      1.10      7.00e- 3  1.03e-42     14.2 
18 mu_1       0.9      1.52      1.60e- 8  2.77e-65     20.7 
19 mu_0       0.1      2.57      3.02e-26  0           210.  
20 mu_0       0.2      0.368     1.04e-13  0            12.4 
21 mu_0       0.3      0.638     1.30e- 7  0            20.3 
22 mu_0       0.4      0.811     6.15e- 4  0            12.5 
23 mu_0       0.5      0.930     5.60e- 2  0             9.99
24 mu_0       0.6      0.969     2.26e- 1  0            14.8 
25 mu_0       0.7      0.979     1.44e- 1  0             8.16
26 mu_0       0.8      1.10      1.30e- 2  0            14.6 
27 mu_0       0.9      1.51      5.85e- 8  0            22.0 
[1] "Total run time was 379.652 seconds"
