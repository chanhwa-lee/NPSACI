
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7475"
[1] "cluster size dist'n: "

51 52 53 54 55 56 57 59 60 61 63 65 66 67 68 69 70 71 72 73 74 75 77 78 79 80 
 1  2  2  5  2  2  4  3  5  2  5  1  2  1  1  2  1  1  3  3  1  3  1  3  2  1 
81 82 83 84 85 86 87 88 89 91 92 93 94 95 96 97 98 99 
 1  4  1  3  1  2  2  3  4  2  4  3  3  1  1  2  1  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02251 0.31653 0.58478 1.00000 6.24794 
[1] "event indicator table: "

   0    1 
4327 3148 
[1] "treatment indicator table: "

   0    1 
2935 4540 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3775
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3700
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 571.638 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.625 0.196 
 2 mu         0.1   0.2 0.757 0.226 
 3 mu         0.1   0.3 0.802 0.244 
 4 mu         0.1   0.4 0.843 0.254 
 5 mu         0.1   0.5 0.860 0.267 
 6 mu         0.2   0.1 0.465 0.0910
 7 mu         0.2   0.2 0.555 0.0922
 8 mu         0.2   0.3 0.587 0.0903
 9 mu         0.2   0.4 0.615 0.0854
10 mu         0.2   0.5 0.627 0.0836
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.39        0.0875  7.74e-11     37.4 
 2 mu         0.2      1.04        0.848   6.58e- 4      9.45
 3 mu         0.3      1.06        0.997   1.75e- 1      3.23
 4 mu         0.4      0.980       0.938   2.83e- 1      2.22
 5 mu         0.5      0.973       0.965   4.57e- 1      1.59
 6 mu         0.6      1.02        1.00    6.90e- 1      1.58
 7 mu         0.7      0.983       0.956   5.22e- 1      1.50
 8 mu         0.8      0.942       0.964   2.50e- 1      1.53
 9 mu         0.9      0.919       0.892   4.54e- 4      2.24
10 mu_1       0.1      1.49        0.152   2.89e-10     44.7 
11 mu_1       0.2      1.02        0.860   1.24e- 3      7.15
12 mu_1       0.3      1.06        0.973   2.18e- 1      3.33
13 mu_1       0.4      0.975       0.945   2.71e- 1      2.05
14 mu_1       0.5      0.976       0.968   4.80e- 1      1.58
15 mu_1       0.6      1.02        0.990   6.81e- 1      1.58
16 mu_1       0.7      0.982       0.957   5.14e- 1      1.50
17 mu_1       0.8      0.939       0.958   2.42e- 1      1.52
18 mu_1       0.9      0.919       0.901   3.97e- 4      2.34
19 mu_0       0.1      1.37        0.0803  5.39e-11     36.6 
20 mu_0       0.2      1.05        0.845   5.13e- 4     10.3 
21 mu_0       0.3      1.06        0.989   1.57e- 1      3.19
22 mu_0       0.4      0.984       0.936   2.91e- 1      2.33
23 mu_0       0.5      0.971       0.952   4.34e- 1      1.61
24 mu_0       0.6      1.02        0.996   6.93e- 1      1.59
25 mu_0       0.7      0.986       0.946   5.40e- 1      1.51
26 mu_0       0.8      0.952       0.961   2.78e- 1      1.56
27 mu_0       0.9      0.917       0.890   9.64e- 4      1.82
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.251     8.43e-26  1.21e-84      16.9
 2 mu         0.2      1.82      1.55e-13  1.33e-56      72.9
 3 mu         0.3      1.55      2.34e- 7  2.43e-40      31.8
 4 mu         0.4      1.59      2.06e- 3  6.24e-29      16.3
 5 mu         0.5      1.60      8.20e- 2  3.23e-20      19.9
 6 mu         0.6      1.50      2.54e- 1  2.93e-13      14.4
 7 mu         0.7      1.53      1.74e- 1  4.59e-21      11.9
 8 mu         0.8      1.16      1.08e- 2  1.40e-32      10.8
 9 mu         0.9      1.29      3.46e- 9  6.18e-53      43.6
10 mu_1       0.1      0.430     4.77e-25  1.15e-83      28.2
11 mu_1       0.2      1.82      4.76e-13  6.31e-56      60.7
12 mu_1       0.3      1.53      4.89e- 7  7.70e-40      32.9
13 mu_1       0.4      1.62      2.68e- 3  1.48e-28      17.9
14 mu_1       0.5      1.57      8.39e- 2  6.13e-20      18.4
15 mu_1       0.6      1.50      2.89e- 1  8.20e-14      13.8
16 mu_1       0.7      1.54      1.92e- 1  1.09e-21      11.8
17 mu_1       0.8      1.13      8.45e- 3  2.92e-33      11.4
18 mu_1       0.9      1.32      2.45e- 9  1.14e-53      45.8
19 mu_0       0.1      0.231     4.03e-26  6.78e-86      15.7
20 mu_0       0.2      1.82      6.91e-14  8.39e-58      75.9
21 mu_0       0.3      1.56      1.24e- 7  1.75e-41      31.4
22 mu_0       0.4      1.58      1.72e- 3  5.26e-30      16.5
23 mu_0       0.5      1.63      7.33e- 2  3.26e-21      21.3
24 mu_0       0.6      1.49      1.84e- 1  3.71e-14      15.4
25 mu_0       0.7      1.50      1.80e- 1  1.27e-20      12.3
26 mu_0       0.8      1.26      2.02e- 2  5.85e-32      12.0
27 mu_0       0.9      1.04      1.26e- 8  5.15e-52      23.9
[1] "Total run time was 575.47 seconds"
