
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7215"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69  70 
  5   2   1   2   3   2   1   1   3   3   4   4   1   4   1   2   2   2   2   6 
 71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  90  91  92 
  2   2   1   2   2   1   1   2   2   3   5   2   1   1   1   1   2   1   3   2 
 93  95  96  97  98  99 100 
  2   2   3   1   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05244 0.39537 0.65040 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4324 2891 
[1] "treatment indicator table: "

   0    1 
2564 4651 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3555
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3660
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 455.278 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.418 0.109 
 2 mu         0.1   0.2 0.480 0.106 
 3 mu         0.1   0.3 0.500 0.108 
 4 mu         0.1   0.4 0.569 0.122 
 5 mu         0.1   0.5 0.613 0.129 
 6 mu         0.2   0.1 0.386 0.0672
 7 mu         0.2   0.2 0.467 0.0570
 8 mu         0.2   0.3 0.504 0.0535
 9 mu         0.2   0.4 0.573 0.0632
10 mu         0.2   0.5 0.625 0.0665
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02        0.0336  5.74e-11     17.1 
 2 mu         0.2      1.12        0.822   6.70e- 4      9.90
 3 mu         0.3      0.994       0.949   1.83e- 1      2.07
 4 mu         0.4      0.988       0.963   3.65e- 1      1.94
 5 mu         0.5      1.01        0.992   5.60e- 1      1.82
 6 mu         0.6      0.992       0.968   6.52e- 1      1.43
 7 mu         0.7      0.987       1.01    6.58e- 1      1.39
 8 mu         0.8      1.01        0.989   5.64e- 1      1.54
 9 mu         0.9      0.993       0.949   3.89e- 1      3.72
10 mu_1       0.1      1.08        0.0672  2.02e-10     10.9 
11 mu_1       0.2      1.09        0.883   1.19e- 3      9.36
12 mu_1       0.3      0.992       0.974   2.09e- 1      2.15
13 mu_1       0.4      0.986       0.969   3.68e- 1      1.90
14 mu_1       0.5      1.01        0.993   5.69e- 1      1.79
15 mu_1       0.6      0.989       0.956   6.44e- 1      1.43
16 mu_1       0.7      0.989       1.01    6.52e- 1      1.39
17 mu_1       0.8      1.01        0.990   5.63e- 1      1.53
18 mu_1       0.9      0.993       0.945   3.83e- 1      3.75
19 mu_0       0.1      1.01        0.0299  4.14e-11     17.8 
20 mu_0       0.2      1.13        0.810   5.41e- 4     10.0 
21 mu_0       0.3      0.995       0.948   1.72e- 1      2.10
22 mu_0       0.4      0.989       0.953   3.64e- 1      1.97
23 mu_0       0.5      1.01        0.987   5.51e- 1      1.85
24 mu_0       0.6      0.996       0.992   6.65e- 1      1.42
25 mu_0       0.7      0.981       0.997   6.60e- 1      1.39
26 mu_0       0.8      1.01        1.02    5.63e- 1      1.57
27 mu_0       0.9      0.997       0.956   4.40e- 1      3.46
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0725     2.12e-28  1.10e-69      6.18
 2 mu         0.2     0.462      1.12e-15  1.04e-44     26.6 
 3 mu         0.3     0.430      2.40e- 9  1.94e-30     14.7 
 4 mu         0.4     0.604      9.44e- 5  1.27e-20      8.27
 5 mu         0.5     0.779      1.18e- 2  2.47e-13      9.35
 6 mu         0.6     1.08       2.36e- 1  1.08e-13     13.0 
 7 mu         0.7     1.18       5.14e- 1  1.67e-21      8.75
 8 mu         0.8     1.13       1.01e- 1  5.12e-33      7.72
 9 mu         0.9     0.937      1.82e- 5  2.26e-53     21.0 
10 mu_1       0.1     0.125      1.29e-27  9.67e-69     10.3 
11 mu_1       0.2     0.443      4.14e-15  4.55e-44     22.2 
12 mu_1       0.3     0.437      5.54e- 9  5.67e-30     13.3 
13 mu_1       0.4     0.621      1.67e- 4  2.79e-20      8.43
14 mu_1       0.5     0.799      1.46e- 2  4.32e-13      8.95
15 mu_1       0.6     1.08       2.89e- 1  2.99e-14     13.9 
16 mu_1       0.7     1.20       5.08e- 1  3.99e-22      8.70
17 mu_1       0.8     1.11       9.27e- 2  1.07e-33      7.34
18 mu_1       0.9     0.938      1.39e- 5  4.18e-54     21.2 
19 mu_0       0.1     0.0667     9.15e-29  1.52e-70      5.72
20 mu_0       0.2     0.467      3.60e-16  1.61e-45     27.7 
21 mu_0       0.3     0.427      1.16e- 9  3.43e-31     15.3 
22 mu_0       0.4     0.593      4.59e- 5  2.62e-21      8.16
23 mu_0       0.5     0.759      6.99e- 3  6.10e-14      9.76
24 mu_0       0.6     1.07       1.61e- 1  2.24e-13     12.1 
25 mu_0       0.7     1.15       4.49e- 1  4.65e-21     10.5 
26 mu_0       0.8     1.17       7.09e- 2  2.13e-32      9.27
27 mu_0       0.9     0.930      5.67e- 5  1.88e-52     20.0 
[1] "Total run time was 459.022 seconds"
