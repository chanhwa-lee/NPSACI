
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7497"
[1] "cluster size dist'n: "

 50  51  53  54  57  59  60  61  62  63  64  65  66  67  68  69  70  71  73  74 
  2   3   1   3   1   3   1   4   2   3   5   3   3   3   2   2   3   4   1   4 
 75  76  77  78  80  81  82  83  84  85  86  87  88  90  91  92  93  95  96  97 
  1   2   2   3   1   1   3   5   1   2   2   3   2   2   1   1   1   2   2   3 
 98 100 
  1   6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03891 0.34846 0.62216 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4470 3027 
[1] "treatment indicator table: "

   0    1 
2717 4780 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3875
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3622
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 424.289 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.757 0.400 
 2 mu         0.1   0.2 0.860 0.455 
 3 mu         0.1   0.3 0.946 0.503 
 4 mu         0.1   0.4 1.06  0.566 
 5 mu         0.1   0.5 1.11  0.597 
 6 mu         0.2   0.1 0.419 0.0763
 7 mu         0.2   0.2 0.483 0.0709
 8 mu         0.2   0.3 0.537 0.0827
 9 mu         0.2   0.4 0.606 0.104 
10 mu         0.2   0.5 0.637 0.104 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.61         0.137  5.00e-11     82.5 
 2 mu         0.2      1.02         0.884  1.98e- 4      5.60
 3 mu         0.3      0.950        0.898  7.44e- 2      2.77
 4 mu         0.4      0.988        0.970  3.58e- 1      1.92
 5 mu         0.5      0.997        0.971  6.21e- 1      1.51
 6 mu         0.6      1.01         1.00   5.89e- 1      1.91
 7 mu         0.7      1.02         1.01   6.79e- 1      1.50
 8 mu         0.8      1.01         1.01   4.68e- 1      1.56
 9 mu         0.9      1.01         0.947  4.25e- 1      2.18
10 mu_1       0.1      1.11         0.224  1.92e-10     25.9 
11 mu_1       0.2      1.01         0.876  3.83e- 4      4.40
12 mu_1       0.3      0.949        0.912  9.81e- 2      2.39
13 mu_1       0.4      0.991        0.967  3.83e- 1      1.83
14 mu_1       0.5      0.997        0.979  6.11e- 1      1.50
15 mu_1       0.6      1.02         1.01   5.96e- 1      1.92
16 mu_1       0.7      1.02         1.01   6.83e- 1      1.49
17 mu_1       0.8      1.01         1.01   4.66e- 1      1.57
18 mu_1       0.9      1.01         0.939  4.14e- 1      2.22
19 mu_0       0.1      1.67         0.127  3.41e-11     89.4 
20 mu_0       0.2      1.02         0.892  1.52e- 4      6.07
21 mu_0       0.3      0.950        0.901  6.42e- 2      2.93
22 mu_0       0.4      0.986        0.964  3.42e- 1      1.98
23 mu_0       0.5      0.998        0.967  6.31e- 1      1.55
24 mu_0       0.6      1.01         0.978  5.78e- 1      1.91
25 mu_0       0.7      1.02         0.997  6.70e- 1      1.54
26 mu_0       0.8      1.00         1.00   4.79e- 1      1.50
27 mu_0       0.9      1.02         0.964  3.92e- 1      1.86
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0230     8.41e-31  3.26e-72      1.40
 2 mu         0.2     1.56       1.20e-16  2.21e-46    100.  
 3 mu         0.3     2.04       2.10e- 9  1.21e-32     42.4 
 4 mu         0.4     1.68       9.96e- 5  4.75e-23     28.6 
 5 mu         0.5     0.952      4.04e- 2  9.01e-16      8.96
 6 mu         0.6     1.09       1.71e- 1  5.10e-10      7.51
 7 mu         0.7     1.22       4.03e- 1  1.25e-15      6.99
 8 mu         0.8     1.38       5.89e- 2  1.10e-26     13.1 
 9 mu         0.9     0.911      5.67e- 7  6.31e-47     15.2 
10 mu_1       0.1     0.0530     5.07e-30  2.87e-71      3.13
11 mu_1       0.2     1.82       3.91e-16  1.03e-45    112.  
12 mu_1       0.3     1.96       4.40e- 9  3.76e-32     34.7 
13 mu_1       0.4     1.63       1.69e- 4  1.10e-22     29.3 
14 mu_1       0.5     0.922      4.29e- 2  1.68e-15      9.49
15 mu_1       0.6     1.12       1.49e- 1  7.91e-10      7.01
16 mu_1       0.7     1.21       3.60e- 1  5.00e-16      6.74
17 mu_1       0.8     1.39       5.72e- 2  3.86e-27     13.2 
18 mu_1       0.9     0.894      3.92e- 7  1.96e-47     15.7 
19 mu_0       0.1     0.0197     3.71e-31  4.34e-73      1.21
20 mu_0       0.2     1.49       4.74e-17  1.93e-47     97.3 
21 mu_0       0.3     2.07       1.11e- 9  1.21e-33     47.0 
22 mu_0       0.4     1.71       5.31e- 5  5.52e-24     28.2 
23 mu_0       0.5     0.982      2.72e- 2  1.26e-16      8.43
24 mu_0       0.6     1.05       1.59e- 1  8.90e-11      8.31
25 mu_0       0.7     1.25       4.06e- 1  3.00e-15      7.58
26 mu_0       0.8     1.32       5.80e- 2  3.97e-26     12.9 
27 mu_0       0.9     1.06       2.14e- 6  4.54e-46     13.0 
[1] "Total run time was 427.851 seconds"
