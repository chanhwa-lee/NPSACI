
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 8002"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  58  59  60  61  62  63  66  68  71  72  73  74  75  76 
  1   1   2   1   2   2   3   2   2   2   1   2   1   2   1   1   2   1   4   3 
 77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 
  2   3   3   2   2   2   3   3   1   2   1   1   4   3   4   3   4   4   5   2 
 97  98  99 100 
  2   3   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04191 0.37897 0.63843 1.00000 8.00000 
[1] "event indicator table: "

   0    1 
4803 3199 
[1] "treatment indicator table: "

   0    1 
2951 5051 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3940
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 4062
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 385.124 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.436 0.0961
 2 mu         0.1   0.2 0.588 0.0757
 3 mu         0.1   0.3 0.643 0.0770
 4 mu         0.1   0.4 0.683 0.0754
 5 mu         0.1   0.5 0.718 0.0791
 6 mu         0.2   0.1 0.340 0.0675
 7 mu         0.2   0.2 0.460 0.0416
 8 mu         0.2   0.3 0.506 0.0401
 9 mu         0.2   0.4 0.539 0.0353
10 mu         0.2   0.5 0.568 0.0360
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.27         1.04   0.000287      5.29
 2 mu         0.2      1.05         1.05   0.230         1.98
 3 mu         0.3      0.993        0.981  0.521         1.69
 4 mu         0.4      1.00         0.971  0.578         1.54
 5 mu         0.5      0.976        0.969  0.518         1.34
 6 mu         0.6      1.01         0.994  0.678         1.45
 7 mu         0.7      1.00         1.02   0.500         1.37
 8 mu         0.8      0.982        0.996  0.483         1.51
 9 mu         0.9      0.960        0.943  0.165         2.27
10 mu_1       0.1      1.22         0.957  0.000675      4.64
11 mu_1       0.2      1.04         1.05   0.249         1.84
12 mu_1       0.3      0.992        0.986  0.535         1.68
13 mu_1       0.4      1.00         0.966  0.572         1.51
14 mu_1       0.5      0.976        0.961  0.517         1.32
15 mu_1       0.6      1.01         1.00   0.687         1.45
16 mu_1       0.7      1.00         1.01   0.494         1.38
17 mu_1       0.8      0.981        0.994  0.485         1.52
18 mu_1       0.9      0.961        0.942  0.160         2.26
19 mu_0       0.1      1.28         1.03   0.000244      5.36
20 mu_0       0.2      1.06         1.04   0.225         2.05
21 mu_0       0.3      0.993        0.982  0.499         1.70
22 mu_0       0.4      1.00         0.961  0.582         1.55
23 mu_0       0.5      0.976        0.963  0.518         1.37
24 mu_0       0.6      1.01         0.992  0.664         1.46
25 mu_0       0.7      1.00         1.03   0.513         1.38
26 mu_0       0.8      0.988        1.00   0.472         1.48
27 mu_0       0.9      0.951        0.946  0.212         2.39
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000469     1.20e-28  1.42e-83    0.0247
 2 mu         0.2   0.364        3.45e-15  1.39e-55   17.7   
 3 mu         0.3   0.813        4.71e- 8  2.22e-39   22.2   
 4 mu         0.4   0.648        1.15e- 3  1.48e-28    8.49  
 5 mu         0.5   1.03         9.68e- 2  2.32e-20    7.25  
 6 mu         0.6   1.13         1.62e- 1  9.19e-14    7.35  
 7 mu         0.7   0.688        1.16e- 1  3.67e-16    8.16  
 8 mu         0.8   1.16         2.03e- 3  2.85e-26   13.7   
 9 mu         0.9   1.81         5.92e-10  1.63e-44   21.8   
10 mu_1       0.1   0.00119      7.65e-28  1.33e-82    0.0626
11 mu_1       0.2   0.472        1.05e-14  6.52e-55   22.4   
12 mu_1       0.3   0.780        9.79e- 8  6.96e-39   18.7   
13 mu_1       0.4   0.664        1.76e- 3  3.59e-28    8.91  
14 mu_1       0.5   1.05         1.09e- 1  4.48e-20    7.68  
15 mu_1       0.6   1.12         1.38e- 1  1.48e-13    8.03  
16 mu_1       0.7   0.679        1.04e- 1  1.25e-16    7.63  
17 mu_1       0.8   1.17         1.55e- 3  8.48e-27   13.9   
18 mu_1       0.9   1.82         4.00e-10  4.31e-45   22.6   
19 mu_0       0.1   0.000389     3.73e-29  9.46e-85    0.0205
20 mu_0       0.2   0.337        1.68e-15  1.04e-56   16.5   
21 mu_0       0.3   0.827        2.53e- 8  1.52e-40   23.7   
22 mu_0       0.4   0.638        7.27e- 4  8.25e-30    8.22  
23 mu_0       0.5   1.00         6.96e- 2  1.55e-21    7.33  
24 mu_0       0.6   1.15         2.22e- 1  7.66e-15    6.79  
25 mu_0       0.7   0.708        1.41e- 1  9.32e-16    9.38  
26 mu_0       0.8   1.12         3.95e- 3  1.08e-25   13.0   
27 mu_0       0.9   1.68         2.32e- 9  1.24e-43   22.3   
[1] "Total run time was 388.306 seconds"
