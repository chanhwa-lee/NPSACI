
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7584"
[1] "cluster size dist'n: "

50 51 52 53 54 56 58 59 61 62 63 64 65 66 67 68 69 71 72 73 75 76 77 79 80 81 
 2  1  1  2  2  2  5  2  2  3  3  4  2  3  2  1  3  2  5  1  1  3  2  1  2  1 
82 83 84 85 86 87 88 90 91 92 93 94 95 96 97 98 99 
 2  1  2  4  2  4  2  2  1  4  2  6  4  2  1  1  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03083 0.32829 0.59816 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4528 3056 
[1] "treatment indicator table: "

   0    1 
2920 4664 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3853
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3731
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 369.941 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.427 0.0631
 2 mu         0.1   0.2 0.539 0.0726
 3 mu         0.1   0.3 0.583 0.0747
 4 mu         0.1   0.4 0.627 0.0805
 5 mu         0.1   0.5 0.672 0.0855
 6 mu         0.2   0.1 0.379 0.0396
 7 mu         0.2   0.2 0.480 0.0489
 8 mu         0.2   0.3 0.527 0.0510
 9 mu         0.2   0.4 0.571 0.0507
10 mu         0.2   0.5 0.606 0.0501
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.05         0.542 0.000000744      8.37
 2 mu         0.2      0.996        0.852 0.0123           6.47
 3 mu         0.3      1.01         1.01  0.355            2.26
 4 mu         0.4      1.02         1.00  0.459            2.38
 5 mu         0.5      1.01         1.03  0.381            1.65
 6 mu         0.6      1.01         0.985 0.560            1.52
 7 mu         0.7      0.976        0.986 0.534            1.40
 8 mu         0.8      1.01         1.00  0.472            1.68
 9 mu         0.9      1.07         0.963 0.231            2.50
10 mu_1       0.1      1.05         0.688 0.00000239       9.97
11 mu_1       0.2      0.993        0.874 0.0206           5.78
12 mu_1       0.3      1.01         0.975 0.347            2.33
13 mu_1       0.4      1.02         1.01  0.472            2.30
14 mu_1       0.5      1.02         1.02  0.370            1.61
15 mu_1       0.6      1.00         0.995 0.545            1.52
16 mu_1       0.7      0.977        0.980 0.535            1.40
17 mu_1       0.8      1.01         1.00  0.474            1.71
18 mu_1       0.9      1.07         0.956 0.239            2.51
19 mu_0       0.1      1.05         0.525 0.000000561      8.19
20 mu_0       0.2      0.997        0.874 0.0102           6.64
21 mu_0       0.3      1.01         1.02  0.353            2.22
22 mu_0       0.4      1.02         1.01  0.442            2.43
23 mu_0       0.5      1.01         1.03  0.392            1.72
24 mu_0       0.6      1.01         0.998 0.545            1.52
25 mu_0       0.7      0.976        0.979 0.533            1.42
26 mu_0       0.8      1.00         1.01  0.463            1.56
27 mu_0       0.9      1.07         1.00  0.159            2.34
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00359     2.86e-25  1.79e-83     0.298
 2 mu         0.2    1.02        9.98e-13  5.55e-56    46.1  
 3 mu         0.3    2.13        5.02e- 7  5.16e-40    56.7  
 4 mu         0.4    1.13        2.60e- 3  8.69e-29    28.7  
 5 mu         0.5    1.31        9.69e- 2  3.45e-20    13.9  
 6 mu         0.6    1.33        2.25e- 1  2.72e-13    15.6  
 7 mu         0.7    1.03        1.54e- 1  4.06e-18     8.51 
 8 mu         0.8    1.39        3.39e- 3  3.64e-29    18.5  
 9 mu         0.9    1.87        1.95e- 9  5.77e-49    42.8  
10 mu_1       0.1    0.00814     1.67e-24  1.72e-82     0.642
11 mu_1       0.2    1.27        3.11e-12  2.66e-55    49.8  
12 mu_1       0.3    2.02        1.11e- 6  1.65e-39    51.1  
13 mu_1       0.4    1.12        4.00e- 3  2.08e-28    29.2  
14 mu_1       0.5    1.32        6.62e- 2  6.62e-20    13.1  
15 mu_1       0.6    1.32        2.25e- 1  4.35e-13    15.4  
16 mu_1       0.7    1.04        1.70e- 1  1.25e-18     8.59 
17 mu_1       0.8    1.40        2.59e- 3  9.81e-30    18.6  
18 mu_1       0.9    1.90        1.37e- 9  1.38e-49    43.7  
19 mu_0       0.1    0.00309     1.32e-25  8.31e-85     0.259
20 mu_0       0.2    0.956       4.64e-13  2.89e-57    45.2  
21 mu_0       0.3    2.17        2.63e- 7  3.07e-41    59.0  
22 mu_0       0.4    1.13        1.67e- 3  6.04e-30    28.4  
23 mu_0       0.5    1.30        8.42e- 2  2.88e-21    14.7  
24 mu_0       0.6    1.35        2.43e- 1  2.84e-14    15.9  
25 mu_0       0.7    1.03        9.11e- 2  1.06e-17     8.33 
26 mu_0       0.8    1.35        4.48e- 3  1.43e-28    18.1  
27 mu_0       0.9    1.54        7.18e- 9  4.53e-48    35.3  
[1] "Total run time was 373.09 seconds"
