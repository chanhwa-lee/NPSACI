
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7350"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  1   4   3   5   1   4   3   3   3   2   1   1   2   3   3   1   2   3   1   2 
 71  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  90  91  92 
  3   1   1   2   1   1   1   2   2   2   1   3   1   2   2   2   2   2   4   4 
 93  95  96  97  98  99 100 
  3   2   1   3   1   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03531 0.34004 0.60790 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4313 3037 
[1] "treatment indicator table: "

   0    1 
2838 4512 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3750
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3600
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 437.715 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.259 0.0706
 2 mu         0.1   0.2 0.292 0.0897
 3 mu         0.1   0.3 0.294 0.0872
 4 mu         0.1   0.4 0.337 0.0756
 5 mu         0.1   0.5 0.365 0.113 
 6 mu         0.2   0.1 0.344 0.0646
 7 mu         0.2   0.2 0.400 0.0835
 8 mu         0.2   0.3 0.424 0.0824
 9 mu         0.2   0.4 0.486 0.0704
10 mu         0.2   0.5 0.522 0.106 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.668        0.314 0.00000000412      4.06
 2 mu         0.2      1.02         0.880 0.00351            4.46
 3 mu         0.3      1.02         1.01  0.216              2.29
 4 mu         0.4      0.966        0.967 0.397              1.44
 5 mu         0.5      0.996        0.983 0.507              1.38
 6 mu         0.6      0.992        0.998 0.642              1.40
 7 mu         0.7      0.990        0.985 0.693              1.58
 8 mu         0.8      0.992        0.996 0.542              1.44
 9 mu         0.9      1.02         0.987 0.141              2.25
10 mu_1       0.1      0.680        0.358 0.0000000145       3.24
11 mu_1       0.2      1.05         0.951 0.00621            4.25
12 mu_1       0.3      1.01         1.01  0.273              2.16
13 mu_1       0.4      0.968        0.987 0.431              1.48
14 mu_1       0.5      0.997        0.982 0.518              1.36
15 mu_1       0.6      0.991        0.999 0.644              1.39
16 mu_1       0.7      0.991        0.991 0.690              1.61
17 mu_1       0.8      0.991        0.988 0.533              1.46
18 mu_1       0.9      1.02         0.994 0.134              2.29
19 mu_0       0.1      0.666        0.293 0.00000000297      4.15
20 mu_0       0.2      1.02         0.873 0.00283            4.52
21 mu_0       0.3      1.03         1.01  0.192              2.35
22 mu_0       0.4      0.966        0.959 0.373              1.46
23 mu_0       0.5      0.994        0.984 0.496              1.42
24 mu_0       0.6      0.994        1.00  0.640              1.40
25 mu_0       0.7      0.988        0.976 0.698              1.52
26 mu_0       0.8      0.997        1.01  0.552              1.48
27 mu_0       0.9      0.988        0.988 0.210              2.03
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.294     2.44e-24  9.67e-74     27.0 
 2 mu         0.2      2.28      1.56e-13  1.64e-47    165.  
 3 mu         0.3      0.918     2.62e- 7  1.77e-32     41.1 
 4 mu         0.4      0.879     2.64e- 3  3.37e-22     12.7 
 5 mu         0.5      1.11      1.78e- 1  3.14e-15      6.55
 6 mu         0.6      1.32      3.37e- 1  5.35e-12     11.6 
 7 mu         0.7      1.23      1.93e- 1  1.97e-19      9.05
 8 mu         0.8      0.730     1.25e- 2  2.04e-30     10.3 
 9 mu         0.9      2.12      2.67e- 8  7.18e-50     29.2 
10 mu_1       0.1      0.518     1.61e-23  8.61e-73     46.6 
11 mu_1       0.2      2.14      5.36e-13  7.29e-47    143.  
12 mu_1       0.3      0.853     5.36e- 7  5.26e-32     37.2 
13 mu_1       0.4      0.908     4.12e- 3  7.90e-22     12.6 
14 mu_1       0.5      1.13      1.71e- 1  5.89e-15      6.70
15 mu_1       0.6      1.33      3.38e- 1  1.54e-12     11.3 
16 mu_1       0.7      1.21      1.85e- 1  4.87e-20      8.77
17 mu_1       0.8      0.722     9.60e- 3  4.40e-31     10.2 
18 mu_1       0.9      2.16      1.91e- 8  1.38e-50     30.3 
19 mu_0       0.1      0.269     9.24e-25  1.18e-74     24.8 
20 mu_0       0.2      2.32      6.14e-14  2.25e-48    171.  
21 mu_0       0.3      0.946     1.44e- 7  2.79e-33     42.7 
22 mu_0       0.4      0.859     1.52e- 3  3.47e-23     12.8 
23 mu_0       0.5      1.09      1.31e- 1  3.87e-16      6.69
24 mu_0       0.6      1.31      2.99e- 1  1.11e-11     12.1 
25 mu_0       0.7      1.26      2.26e- 1  5.44e-19      9.72
26 mu_0       0.8      0.761     1.85e- 2  8.42e-30     10.6 
27 mu_0       0.9      1.73      9.48e- 8  5.94e-49     28.7 
[1] "Total run time was 441.61 seconds"
