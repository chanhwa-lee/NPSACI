
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7700"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  61  62  63  64  65  66  67  68  69  70 
  2   2   1   1   2   4   3   3   1   2   1   3   3   3   1   1   3   2   1   3 
 71  73  74  75  79  80  81  84  85  86  87  88  89  90  91  92  94  95  96  97 
  3   2   1   1   2   2   1   1   1   4   3   3   2   2   2   6   2   4   5   2 
 98  99 100 
  1   2   6 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04615 0.38059 0.63663 1.00000 6.58421 
[1] "event indicator table: "

   0    1 
4538 3162 
[1] "treatment indicator table: "

   0    1 
2683 5017 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3858
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3842
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 371.122 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.358 0.102 
 2 mu         0.1   0.2 0.435 0.0908
 3 mu         0.1   0.3 0.474 0.0872
 4 mu         0.1   0.4 0.503 0.0819
 5 mu         0.1   0.5 0.565 0.0860
 6 mu         0.2   0.1 0.267 0.0444
 7 mu         0.2   0.2 0.405 0.0365
 8 mu         0.2   0.3 0.436 0.0363
 9 mu         0.2   0.4 0.490 0.0385
10 mu         0.2   0.5 0.552 0.0491
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.875        0.292  8.18e-15      5.56
 2 mu         0.2      1.01         0.953  5.05e- 6      4.45
 3 mu         0.3      1.01         1.01   1.05e- 2      2.32
 4 mu         0.4      0.949        0.930  3.72e- 1      1.86
 5 mu         0.5      0.986        1.00   6.03e- 1      1.49
 6 mu         0.6      1.03         1.02   6.88e- 1      1.46
 7 mu         0.7      1.01         0.976  5.16e- 1      1.53
 8 mu         0.8      0.982        0.975  6.72e- 1      1.47
 9 mu         0.9      0.948        0.939  2.88e- 1      1.72
10 mu_1       0.1      0.890        0.461  3.27e-14      4.17
11 mu_1       0.2      1.03         0.956  1.15e- 5      4.51
12 mu_1       0.3      1.00         1.01   1.63e- 2      2.10
13 mu_1       0.4      0.949        0.941  3.89e- 1      1.82
14 mu_1       0.5      0.991        1.01   6.27e- 1      1.50
15 mu_1       0.6      1.03         1.02   7.05e- 1      1.46
16 mu_1       0.7      1.00         0.984  5.12e- 1      1.52
17 mu_1       0.8      0.982        0.978  6.48e- 1      1.48
18 mu_1       0.9      0.947        0.938  2.82e- 1      1.73
19 mu_0       0.1      0.874        0.273  5.45e-15      5.72
20 mu_0       0.2      1.01         0.945  3.44e- 6      4.43
21 mu_0       0.3      1.02         1.02   8.05e- 3      2.42
22 mu_0       0.4      0.948        0.929  3.27e- 1      1.89
23 mu_0       0.5      0.982        0.995  5.79e- 1      1.49
24 mu_0       0.6      1.03         1.02   6.63e- 1      1.46
25 mu_0       0.7      1.01         0.976  5.26e- 1      1.53
26 mu_0       0.8      0.983        0.971  7.21e- 1      1.45
27 mu_0       0.9      0.954        0.957  2.22e- 1      1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.53      3.76e-30  5.09e-74    152.  
 2 mu         0.2      2.88      1.62e-16  8.63e-49    232.  
 3 mu         0.3      3.69      9.99e-10  1.97e-34    187.  
 4 mu         0.4      1.70      2.05e- 5  1.61e-24     81.0 
 5 mu         0.5      0.923     7.70e- 3  5.71e-17      8.05
 6 mu         0.6      1.12      1.45e- 1  2.49e-22     16.1 
 7 mu         0.7      1.29      4.09e- 1  3.13e-32     11.3 
 8 mu         0.8      1.12      1.52e- 1  1.93e-46      9.72
 9 mu         0.9      1.25      4.74e- 5  4.56e-71     15.6 
10 mu_1       0.1      1.21      2.68e-29  4.70e-73    118.  
11 mu_1       0.2      3.33      4.97e-16  3.99e-48    264.  
12 mu_1       0.3      3.64      2.32e- 9  6.20e-34    205.  
13 mu_1       0.4      1.56      3.52e- 5  3.78e-24     66.8 
14 mu_1       0.5      0.910     9.24e- 3  1.08e-16      7.96
15 mu_1       0.6      1.13      1.48e- 1  3.23e-23     16.1 
16 mu_1       0.7      1.31      3.91e- 1  3.48e-33     11.8 
17 mu_1       0.8      1.11      1.30e- 1  1.88e-47      9.84
18 mu_1       0.9      1.25      3.59e- 5  3.94e-72     16.4 
19 mu_0       0.1      1.57      1.27e-30  4.30e-75    155.  
20 mu_0       0.2      2.77      7.80e-17  8.21e-50    224.  
21 mu_0       0.3      3.71      4.31e-10  1.62e-35    179.  
22 mu_0       0.4      1.79      1.07e- 5  1.54e-25     90.5 
23 mu_0       0.5      0.935     5.20e- 3  6.56e-18      8.13
24 mu_0       0.6      1.11      1.21e- 1  5.75e-22     16.1 
25 mu_0       0.7      1.26      3.54e- 1  9.62e-32     10.3 
26 mu_0       0.8      1.19      1.15e- 1  8.91e-46      9.23
27 mu_0       0.9      1.21      1.47e- 4  4.20e-70     16.0 
[1] "Total run time was 374.041 seconds"
