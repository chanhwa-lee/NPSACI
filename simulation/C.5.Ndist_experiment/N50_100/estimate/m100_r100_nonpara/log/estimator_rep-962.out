
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7286"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  71  72 
  4   4   2   2   3   3   1   4   3   2   1   1   1   4   3   1   2   3   5   2 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  93 
  4   1   2   3   2   1   4   1   1   2   1   1   1   3   2   2   2   2   2   1 
 94  95  96  97  98  99 100 
  2   1   1   1   2   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04154 0.37156 0.63828 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4293 2993 
[1] "treatment indicator table: "

   0    1 
2522 4764 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3753
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3533
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 396.29 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.471 0.118 
 2 mu         0.1   0.2 0.516 0.123 
 3 mu         0.1   0.3 0.562 0.109 
 4 mu         0.1   0.4 0.579 0.103 
 5 mu         0.1   0.5 0.613 0.112 
 6 mu         0.2   0.1 0.436 0.0929
 7 mu         0.2   0.2 0.484 0.0924
 8 mu         0.2   0.3 0.530 0.0642
 9 mu         0.2   0.4 0.547 0.0439
10 mu         0.2   0.5 0.583 0.0554
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.897        0.230 0.0000204     10.5 
 2 mu         0.2      0.915        0.846 0.00783        2.50
 3 mu         0.3      0.939        0.901 0.0834         3.10
 4 mu         0.4      0.940        0.914 0.425          1.86
 5 mu         0.5      0.987        0.973 0.262          2.03
 6 mu         0.6      1.03         1.03  0.644          1.70
 7 mu         0.7      1.05         1.05  0.592          1.76
 8 mu         0.8      1.01         1.01  0.573          1.59
 9 mu         0.9      1.00         0.985 0.453          1.71
10 mu_1       0.1      0.886        0.344 0.0000558      8.10
11 mu_1       0.2      0.923        0.838 0.0101         2.43
12 mu_1       0.3      0.939        0.858 0.0969         2.94
13 mu_1       0.4      0.941        0.925 0.425          1.73
14 mu_1       0.5      0.991        0.983 0.269          1.98
15 mu_1       0.6      1.03         1.02  0.652          1.71
16 mu_1       0.7      1.05         1.06  0.600          1.75
17 mu_1       0.8      1.01         1.00  0.577          1.60
18 mu_1       0.9      1.00         0.987 0.445          1.69
19 mu_0       0.1      0.898        0.216 0.0000164     10.8 
20 mu_0       0.2      0.913        0.843 0.00726        2.56
21 mu_0       0.3      0.939        0.910 0.0776         3.17
22 mu_0       0.4      0.939        0.905 0.417          1.94
23 mu_0       0.5      0.984        0.970 0.255          2.08
24 mu_0       0.6      1.02         1.04  0.595          1.70
25 mu_0       0.7      1.05         1.06  0.570          1.78
26 mu_0       0.8      1.02         1.01  0.555          1.55
27 mu_0       0.9      1.01         0.960 0.448          1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     3.23       2.94e-28  1.32e-80    323.  
 2 mu         0.2     0.0615     1.41e-15  8.06e-55      2.51
 3 mu         0.3     0.762      6.63e- 9  8.59e-40     26.0 
 4 mu         0.4     1.62       9.19e- 5  3.51e-29     41.0 
 5 mu         0.5     1.24       4.08e- 2  5.26e-21     17.2 
 6 mu         0.6     1.25       2.11e- 1  2.51e-15     12.5 
 7 mu         0.7     1.10       2.20e- 1  8.15e-22     18.1 
 8 mu         0.8     1.14       3.87e- 2  4.95e-31     21.9 
 9 mu         0.9     1.09       7.11e- 7  6.95e-47     20.1 
10 mu_1       0.1     1.17       1.84e-27  1.29e-79    117.  
11 mu_1       0.2     0.0610     4.93e-15  3.94e-54      2.65
12 mu_1       0.3     0.878      1.54e- 8  2.80e-39     26.9 
13 mu_1       0.4     1.62       1.48e- 4  8.57e-29     38.1 
14 mu_1       0.5     1.24       5.19e- 2  1.03e-20     18.5 
15 mu_1       0.6     1.24       1.96e- 1  1.52e-16     12.4 
16 mu_1       0.7     1.08       2.27e- 1  4.24e-23     17.7 
17 mu_1       0.8     1.16       3.17e- 2  2.25e-32     22.5 
18 mu_1       0.9     1.09       5.26e- 7  2.81e-48     20.8 
19 mu_0       0.1     3.45       1.22e-28  3.33e-82    345.  
20 mu_0       0.2     0.0617     5.69e-16  2.29e-56      3.02
21 mu_0       0.3     0.713      2.87e- 9  2.79e-41     25.6 
22 mu_0       0.4     1.63       5.22e- 5  1.33e-30     43.0 
23 mu_0       0.5     1.25       3.71e- 2  2.39e-22     15.9 
24 mu_0       0.6     1.25       1.96e- 1  1.23e-15     13.1 
25 mu_0       0.7     1.14       1.75e- 1  2.62e-21     19.1 
26 mu_0       0.8     1.07       6.55e- 2  2.38e-30     19.6 
27 mu_0       0.9     1.09       2.38e- 6  6.70e-46     14.2 
[1] "Total run time was 399.383 seconds"
