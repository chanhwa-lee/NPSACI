
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7459"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  2   2   4   4   1   1   1   2   1   2   2   3   1   4   4   1   4   3   3   2 
 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92 
  4   1   1   4   1   2   2   1   2   2   2   1   1   2   2   1   2   3   1   1 
 93  94  95  96  97  98 100 
  1   1   2   4   3   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04951 0.40768 0.66320 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4548 2911 
[1] "treatment indicator table: "

   0    1 
2445 5014 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3832
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3627
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 468.946 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.280 0.122 
 2 mu         0.1   0.2 0.278 0.113 
 3 mu         0.1   0.3 0.308 0.128 
 4 mu         0.1   0.4 0.301 0.124 
 5 mu         0.1   0.5 0.329 0.131 
 6 mu         0.2   0.1 0.319 0.0988
 7 mu         0.2   0.2 0.342 0.0912
 8 mu         0.2   0.3 0.377 0.0939
 9 mu         0.2   0.4 0.382 0.0878
10 mu         0.2   0.5 0.421 0.0977
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.294    0.0000424  2.24e-13      9.81
 2 mu         0.2      0.551    0.206      3.76e- 6      3.07
 3 mu         0.3      0.963    0.845      5.45e- 3      3.37
 4 mu         0.4      1.01     0.943      2.10e- 1      2.17
 5 mu         0.5      1.01     0.974      5.79e- 1      1.70
 6 mu         0.6      0.998    0.990      5.70e- 1      1.92
 7 mu         0.7      0.989    0.972      6.53e- 1      1.41
 8 mu         0.8      1.01     0.995      6.23e- 1      1.47
 9 mu         0.9      1.05     1.01       8.16e- 2      2.16
10 mu_1       0.1      0.384    0.000121   8.65e-13     12.4 
11 mu_1       0.2      0.606    0.290      8.90e- 6      3.56
12 mu_1       0.3      0.973    0.865      8.75e- 3      3.18
13 mu_1       0.4      1.01     0.960      2.63e- 1      2.12
14 mu_1       0.5      1.01     0.969      5.93e- 1      1.65
15 mu_1       0.6      0.997    0.987      5.72e- 1      1.90
16 mu_1       0.7      0.989    0.970      6.52e- 1      1.41
17 mu_1       0.8      1.01     0.994      6.21e- 1      1.46
18 mu_1       0.9      1.06     1.01       7.67e- 2      2.18
19 mu_0       0.1      0.284    0.0000332  1.53e-13      9.52
20 mu_0       0.2      0.538    0.183      2.48e- 6      3.24
21 mu_0       0.3      0.958    0.808      4.04e- 3      3.45
22 mu_0       0.4      1.01     0.944      1.75e- 1      2.32
23 mu_0       0.5      1.01     0.982      5.64e- 1      1.76
24 mu_0       0.6      1.00     0.991      5.68e- 1      1.95
25 mu_0       0.7      0.988    0.966      6.55e- 1      1.41
26 mu_0       0.8      1.01     0.986      6.27e- 1      1.52
27 mu_0       0.9      1.05     0.999      1.26e- 1      1.95
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00802     1.06e-32  1.21e-79     0.781
 2 mu         0.2    0.468       7.36e-19  2.33e-52    25.6  
 3 mu         0.3    1.97        5.96e-11  1.27e-36    63.4  
 4 mu         0.4    1.62        3.45e- 6  1.16e-25    42.1  
 5 mu         0.5    1.08        6.05e- 3  2.21e-17    11.6  
 6 mu         0.6    0.971       1.99e- 1  2.77e-11     7.25 
 7 mu         0.7    1.20        4.43e- 1  2.96e-10     5.61 
 8 mu         0.8    1.17        2.49e- 1  8.87e-17    16.9  
 9 mu         0.9    1.07        4.21e- 5  9.83e-31    20.5  
10 mu_1       0.1    0.0183      8.01e-32  1.11e-78     1.77 
11 mu_1       0.2    0.614       2.47e-18  1.07e-51    29.0  
12 mu_1       0.3    2.09        1.44e-10  3.90e-36    62.8  
13 mu_1       0.4    1.49        6.30e- 6  2.66e-25    35.6  
14 mu_1       0.5    1.08        7.48e- 3  4.07e-17    12.0  
15 mu_1       0.6    0.962       2.09e- 1  4.40e-11     7.29 
16 mu_1       0.7    1.22        4.09e- 1  9.59e-11     5.54 
17 mu_1       0.8    1.17        2.46e- 1  2.51e-17    18.1  
18 mu_1       0.9    1.07        3.31e- 5  4.27e-31    19.5  
19 mu_0       0.1    0.00688     3.02e-33  1.07e-80     0.671
20 mu_0       0.2    0.431       3.01e-19  2.33e-53    24.7  
21 mu_0       0.3    1.92        2.35e-11  1.45e-37    63.7  
22 mu_0       0.4    1.70        1.55e- 6  1.54e-26    46.4  
23 mu_0       0.5    1.08        4.07e- 3  3.54e-18    11.1  
24 mu_0       0.6    0.984       1.45e- 1  3.34e-12     7.20 
25 mu_0       0.7    1.17        4.15e- 1  7.64e-10     6.11 
26 mu_0       0.8    1.15        3.53e- 1  3.43e-16    12.1  
27 mu_0       0.9    1.11        1.24e- 4  5.98e-30    29.2  
[1] "Total run time was 472.916 seconds"
