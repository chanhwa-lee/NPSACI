
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7583"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70  72 
  2   1   1   3   3   3   4   2   1   1   3   2   1   1   2   3   4   1   1   5 
 73  74  75  76  78  79  80  81  82  84  85  86  87  88  89  91  92  93  94  95 
  2   1   4   2   1   4   2   1   1   1   3   4   4   4   1   1   2   3   3   3 
 96  98  99 100 
  2   4   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04259 0.37563 0.63027 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4558 3025 
[1] "treatment indicator table: "

   0    1 
2638 4945 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3698
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3885
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 363.381 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.316 0.0720
 2 mu         0.1   0.2 0.442 0.0878
 3 mu         0.1   0.3 0.488 0.0885
 4 mu         0.1   0.4 0.576 0.108 
 5 mu         0.1   0.5 0.574 0.100 
 6 mu         0.2   0.1 0.345 0.0540
 7 mu         0.2   0.2 0.454 0.0658
 8 mu         0.2   0.3 0.519 0.0638
 9 mu         0.2   0.4 0.560 0.0604
10 mu         0.2   0.5 0.574 0.0563
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.822        0.304 0.00000000584      6.99
 2 mu         0.2      0.979        0.960 0.00781            2.81
 3 mu         0.3      0.930        0.866 0.240              1.77
 4 mu         0.4      1.00         0.980 0.324              1.56
 5 mu         0.5      1.00         0.977 0.687              1.43
 6 mu         0.6      1.01         1.01  0.683              1.57
 7 mu         0.7      1.01         0.998 0.559              1.45
 8 mu         0.8      0.993        0.994 0.583              1.61
 9 mu         0.9      1.02         0.979 0.418              1.71
10 mu_1       0.1      0.863        0.437 0.0000000187       6.25
11 mu_1       0.2      0.975        0.925 0.0128             2.70
12 mu_1       0.3      0.934        0.881 0.251              1.74
13 mu_1       0.4      1.00         0.971 0.338              1.54
14 mu_1       0.5      1.00         0.969 0.672              1.43
15 mu_1       0.6      1.01         1.01  0.674              1.58
16 mu_1       0.7      1.01         1.01  0.567              1.45
17 mu_1       0.8      0.994        0.991 0.588              1.63
18 mu_1       0.9      1.02         0.978 0.402              1.71
19 mu_0       0.1      0.817        0.289 0.00000000441      7.17
20 mu_0       0.2      0.979        0.978 0.00657            2.84
21 mu_0       0.3      0.929        0.867 0.236              1.80
22 mu_0       0.4      1.00         0.987 0.315              1.58
23 mu_0       0.5      1.00         0.983 0.693              1.44
24 mu_0       0.6      1.01         1.00  0.688              1.55
25 mu_0       0.7      1.01         1.01  0.541              1.46
26 mu_0       0.8      0.988        0.987 0.563              1.51
27 mu_0       0.9      1.02         0.975 0.568              1.76
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     14.6       2.63e-30  8.66e-75   1458.  
 2 mu         0.2      0.807     6.17e-17  5.22e-49     61.2 
 3 mu         0.3      0.533     1.34e- 9  3.75e-34     15.5 
 4 mu         0.4      0.555     1.77e- 5  8.09e-24      5.81
 5 mu         0.5      0.852     1.16e- 2  5.08e-16      7.54
 6 mu         0.6      0.938     1.80e- 1  1.23e-16      6.10
 7 mu         0.7      1.21      2.96e- 1  3.06e-24      7.98
 8 mu         0.8      1.07      8.44e- 2  2.88e-36      8.03
 9 mu         0.9      1.48      5.49e- 6  3.53e-59     21.0 
10 mu_1       0.1      8.80      1.60e-29  7.93e-74    871.  
11 mu_1       0.2      0.664     2.10e-16  2.39e-48     54.2 
12 mu_1       0.3      0.559     3.13e- 9  1.14e-33     15.8 
13 mu_1       0.4      0.564     3.09e- 5  1.85e-23      5.97
14 mu_1       0.5      0.865     1.60e- 2  9.30e-16      7.36
15 mu_1       0.6      0.945     1.87e- 1  1.22e-17      5.99
16 mu_1       0.7      1.22      2.59e- 1  2.61e-25      7.88
17 mu_1       0.8      1.07      9.25e- 2  6.37e-37      8.25
18 mu_1       0.9      1.48      4.18e- 6  6.94e-60     21.4 
19 mu_0       0.1     15.3       1.15e-30  8.10e-76   1524.  
20 mu_0       0.2      0.843     2.47e-17  5.50e-50     62.9 
21 mu_0       0.3      0.522     5.69e-10  4.51e-35     15.3 
22 mu_0       0.4      0.548     8.82e- 6  1.14e-24      6.10
23 mu_0       0.5      0.838     7.62e- 3  8.55e-17      7.71
24 mu_0       0.6      0.927     1.52e- 1  2.89e-16      6.26
25 mu_0       0.7      1.18      3.32e- 1  9.59e-24      8.20
26 mu_0       0.8      1.08      8.75e- 2  1.18e-35      7.15
27 mu_0       0.9      1.49      1.73e- 5  2.90e-58     17.7 
[1] "Total run time was 366.965 seconds"
