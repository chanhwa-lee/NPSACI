
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7356"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  7   1   2   1   3   2   2   2   2   2   1   3   3   2   1   1   4   2   1   2 
 71  72  73  74  76  77  78  79  80  81  82  84  85  87  88  89  90  91  92  93 
  1   2   2   1   2   1   8   4   2   2   4   1   1   3   4   1   2   1   2   3 
 94  96  97  98  99 100 
  2   1   2   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03139 0.33108 0.60171 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4353 3003 
[1] "treatment indicator table: "

   0    1 
2734 4622 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3638
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3718
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 390.731 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.276 0.0889
 2 mu         0.1   0.2 0.350 0.0805
 3 mu         0.1   0.3 0.340 0.0907
 4 mu         0.1   0.4 0.409 0.0931
 5 mu         0.1   0.5 0.457 0.0989
 6 mu         0.2   0.1 0.328 0.0514
 7 mu         0.2   0.2 0.415 0.0454
 8 mu         0.2   0.3 0.434 0.0533
 9 mu         0.2   0.4 0.505 0.0538
10 mu         0.2   0.5 0.550 0.0568
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.698       0.0776  1.03e-11      7.07
 2 mu         0.2      0.969       0.868   2.32e- 4      4.43
 3 mu         0.3      0.945       0.844   1.01e- 1      3.04
 4 mu         0.4      1.02        0.981   3.99e- 1      1.73
 5 mu         0.5      0.989       0.980   4.98e- 1      1.60
 6 mu         0.6      0.999       1.01    5.57e- 1      1.47
 7 mu         0.7      0.985       0.998   6.46e- 1      1.44
 8 mu         0.8      1.02        1.01    5.80e- 1      1.50
 9 mu         0.9      0.974       0.949   1.54e- 1      1.99
10 mu_1       0.1      0.812       0.148   3.67e-11      7.05
11 mu_1       0.2      0.946       0.908   4.16e- 4      3.59
12 mu_1       0.3      0.961       0.854   1.24e- 1      2.81
13 mu_1       0.4      1.02        0.990   4.14e- 1      1.69
14 mu_1       0.5      0.989       0.983   5.07e- 1      1.60
15 mu_1       0.6      0.999       1.01    5.62e- 1      1.47
16 mu_1       0.7      0.984       0.995   6.38e- 1      1.46
17 mu_1       0.8      1.02        1.01    5.68e- 1      1.51
18 mu_1       0.9      0.974       0.952   1.45e- 1      2.04
19 mu_0       0.1      0.685       0.0697  7.41e-12      7.08
20 mu_0       0.2      0.975       0.844   1.86e- 4      4.64
21 mu_0       0.3      0.939       0.848   9.14e- 2      3.14
22 mu_0       0.4      1.02        0.983   3.89e- 1      1.75
23 mu_0       0.5      0.989       0.977   4.90e- 1      1.60
24 mu_0       0.6      1.00        1.02    5.48e- 1      1.47
25 mu_0       0.7      0.985       0.994   6.15e- 1      1.41
26 mu_0       0.8      1.02        0.999   6.32e- 1      1.45
27 mu_0       0.9      0.980       0.965   2.38e- 1      1.80
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00168     8.92e-26  4.23e-78     0.165
 2 mu         0.2    0.351       4.61e-14  4.09e-51    19.0  
 3 mu         0.3    1.14        9.47e- 8  1.48e-35    21.6  
 4 mu         0.4    1.10        1.00e- 3  1.01e-24    16.7  
 5 mu         0.5    1.27        1.00e- 1  1.55e-16    61.7  
 6 mu         0.6    1.18        5.01e- 1  3.11e-10     8.53 
 7 mu         0.7    1.14        3.63e- 1  1.39e-15     7.22 
 8 mu         0.8    0.913       1.89e- 2  3.65e-26     8.58 
 9 mu         0.9    3.63        3.71e- 8  2.09e-45    67.4  
10 mu_1       0.1    0.00402     6.03e-25  3.89e-77     0.394
11 mu_1       0.2    0.448       1.49e-13  1.88e-50    22.6  
12 mu_1       0.3    1.18        1.94e- 7  4.55e-35    18.8  
13 mu_1       0.4    1.08        1.57e- 3  2.33e-24    16.2  
14 mu_1       0.5    1.27        1.04e- 1  2.85e-16    61.0  
15 mu_1       0.6    1.20        5.12e- 1  4.93e-10     8.53 
16 mu_1       0.7    1.12        4.18e- 1  5.20e-16     6.84 
17 mu_1       0.8    0.908       1.56e- 2  1.19e-26     8.15 
18 mu_1       0.9    3.73        2.63e- 8  6.05e-46    69.7  
19 mu_0       0.1    0.00142     3.21e-26  3.80e-79     0.140
20 mu_0       0.2    0.327       2.04e-14  4.13e-52    18.1  
21 mu_0       0.3    1.13        5.20e- 8  1.71e-36    22.9  
22 mu_0       0.4    1.11        6.24e- 4  1.36e-25    17.1  
23 mu_0       0.5    1.27        8.53e- 2  2.51e-17    62.4  
24 mu_0       0.6    1.15        3.60e- 1  3.79e-11    10.8  
25 mu_0       0.7    1.18        3.45e- 1  3.43e-15     8.49 
26 mu_0       0.8    0.934       2.63e- 2  1.35e-25    10.3  
27 mu_0       0.9    2.71        1.36e- 7  1.54e-44    54.5  
[1] "Total run time was 394.276 seconds"
