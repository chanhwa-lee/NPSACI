
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7525"
[1] "cluster size dist'n: "

 51  52  53  54  55  57  58  59  60  61  62  63  64  65  66  67  68  69  71  72 
  3   2   2   3   3   1   2   3   1   1   3   1   6   2   1   4   4   1   2   1 
 74  75  76  77  78  80  81  82  83  84  85  86  90  92  93  94  95  97  98  99 
  4   1   1   4   3   2   3   2   2   2   4   2   2   2   2   3   1   4   2   1 
100 
  7 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03249 0.34693 0.59843 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4492 3033 
[1] "treatment indicator table: "

   0    1 
2787 4738 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3886
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3639
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 375.24 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.428 0.127 
 2 mu         0.1   0.2 0.519 0.174 
 3 mu         0.1   0.3 0.589 0.185 
 4 mu         0.1   0.4 0.652 0.190 
 5 mu         0.1   0.5 0.686 0.198 
 6 mu         0.2   0.1 0.394 0.0431
 7 mu         0.2   0.2 0.469 0.0636
 8 mu         0.2   0.3 0.535 0.0610
 9 mu         0.2   0.4 0.587 0.0468
10 mu         0.2   0.5 0.621 0.0477
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.08         0.187 0.00000419     28.6 
 2 mu         0.2      1.02         0.893 0.0531          3.09
 3 mu         0.3      0.988        0.899 0.282           2.47
 4 mu         0.4      0.991        0.978 0.495           1.78
 5 mu         0.5      1.00         0.997 0.587           1.59
 6 mu         0.6      0.995        0.959 0.663           1.48
 7 mu         0.7      1.02         1.00  0.661           1.35
 8 mu         0.8      0.971        0.986 0.535           1.64
 9 mu         0.9      0.985        0.928 0.364           2.23
10 mu_1       0.1      1.08         0.309 0.0000114      22.2 
11 mu_1       0.2      1.01         0.897 0.0723          2.76
12 mu_1       0.3      0.990        0.897 0.338           2.40
13 mu_1       0.4      0.989        0.977 0.504           1.84
14 mu_1       0.5      1.00         0.987 0.572           1.63
15 mu_1       0.6      0.995        0.960 0.666           1.48
16 mu_1       0.7      1.02         1.00  0.660           1.33
17 mu_1       0.8      0.970        0.991 0.533           1.67
18 mu_1       0.9      0.987        0.920 0.363           2.24
19 mu_0       0.1      1.08         0.172 0.00000339     29.3 
20 mu_0       0.2      1.03         0.889 0.0483          3.17
21 mu_0       0.3      0.986        0.904 0.258           2.50
22 mu_0       0.4      0.991        0.981 0.488           1.74
23 mu_0       0.5      1.00         0.996 0.602           1.60
24 mu_0       0.6      0.995        0.947 0.659           1.50
25 mu_0       0.7      1.02         1.00  0.666           1.39
26 mu_0       0.8      0.973        0.960 0.542           1.51
27 mu_0       0.9      0.969        0.951 0.380           2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00784     2.24e-28  8.19e-74     0.566
 2 mu         0.2    1.18        7.93e-15  2.47e-48    59.7  
 3 mu         0.3    1.33        1.97e- 8  1.18e-33    17.5  
 4 mu         0.4    1.06        3.70e- 4  1.91e-23    21.7  
 5 mu         0.5    1.15        2.35e- 2  9.61e-16    16.7  
 6 mu         0.6    1.15        2.09e- 1  2.48e-11     9.53 
 7 mu         0.7    1.07        2.20e- 1  2.35e-19    10.3  
 8 mu         0.8    1.26        3.11e- 2  1.84e-31    10.6  
 9 mu         0.9    0.941       6.59e- 8  3.25e-53    22.1  
10 mu_1       0.1    0.0179      1.37e-27  7.50e-73     1.27 
11 mu_1       0.2    1.36        2.68e-14  1.13e-47    67.0  
12 mu_1       0.3    1.30        4.22e- 8  3.61e-33    16.7  
13 mu_1       0.4    1.03        5.76e- 4  4.38e-23    19.8  
14 mu_1       0.5    1.18        2.23e- 2  1.76e-15    17.9  
15 mu_1       0.6    1.14        1.80e- 1  9.28e-12     8.52 
16 mu_1       0.7    1.07        2.13e- 1  7.55e-20     9.77 
17 mu_1       0.8    1.27        2.51e- 2  5.16e-32    10.5  
18 mu_1       0.9    0.924       4.52e- 8  8.11e-54    22.5  
19 mu_0       0.1    0.00672     9.65e-29  7.75e-75     0.488
20 mu_0       0.2    1.13        3.22e-15  2.63e-49    57.9  
21 mu_0       0.3    1.35        1.00e- 8  1.44e-34    19.4  
22 mu_0       0.4    1.08        2.33e- 4  2.71e-24    22.9  
23 mu_0       0.5    1.12        1.66e- 2  1.64e-16    15.5  
24 mu_0       0.6    1.17        2.61e- 1  4.81e-11    11.1  
25 mu_0       0.7    1.06        2.00e- 1  6.09e-19    11.7  
26 mu_0       0.8    1.24        5.50e- 2  7.14e-31    11.2  
27 mu_0       0.9    1.10        2.52e- 7  2.52e-52    18.8  
[1] "Total run time was 378.243 seconds"
