
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7172"
[1] "cluster size dist'n: "

50 51 52 53 54 55 56 57 58 59 60 62 63 64 66 67 69 70 71 73 74 75 76 77 78 80 
 6  7  1  3  6  1  1  2  1  1  2  3  1  3  1  1  4  2  2  5  1  3  2  1  2  6 
81 82 83 84 85 86 87 88 89 90 91 92 93 94 96 97 98 99 
 1  2  3  1  2  3  2  1  1  2  2  3  1  3  1  2  1  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02247 0.32171 0.59587 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4207 2965 
[1] "treatment indicator table: "

   0    1 
2871 4301 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3590
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3582
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 387.66 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.414 0.0599
 2 mu         0.1   0.2 0.550 0.0643
 3 mu         0.1   0.3 0.586 0.0641
 4 mu         0.1   0.4 0.603 0.0611
 5 mu         0.1   0.5 0.619 0.0625
 6 mu         0.2   0.1 0.423 0.0667
 7 mu         0.2   0.2 0.526 0.0606
 8 mu         0.2   0.3 0.570 0.0510
 9 mu         0.2   0.4 0.616 0.0508
10 mu         0.2   0.5 0.638 0.0474
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.06         0.768  0.000992      4.09
 2 mu         0.2      1.04         0.956  0.223         2.71
 3 mu         0.3      0.997        0.957  0.378         2.08
 4 mu         0.4      1.02         1.02   0.449         1.70
 5 mu         0.5      1.01         1.03   0.587         1.52
 6 mu         0.6      1.02         0.982  0.531         1.75
 7 mu         0.7      1.03         0.997  0.669         1.61
 8 mu         0.8      1.01         0.987  0.574         1.62
 9 mu         0.9      1.00         0.964  0.356         1.95
10 mu_1       0.1      1.07         0.835  0.00225       3.99
11 mu_1       0.2      1.04         0.977  0.285         2.40
12 mu_1       0.3      1.00         0.947  0.413         2.05
13 mu_1       0.4      1.02         1.02   0.457         1.65
14 mu_1       0.5      1.01         1.03   0.582         1.55
15 mu_1       0.6      1.02         0.984  0.522         1.77
16 mu_1       0.7      1.03         0.993  0.665         1.59
17 mu_1       0.8      1.01         0.990  0.559         1.62
18 mu_1       0.9      1.00         0.964  0.342         1.97
19 mu_0       0.1      1.05         0.739  0.000852      4.10
20 mu_0       0.2      1.04         0.955  0.207         2.79
21 mu_0       0.3      0.996        0.953  0.363         2.09
22 mu_0       0.4      1.02         1.03   0.444         1.74
23 mu_0       0.5      1.01         1.03   0.593         1.50
24 mu_0       0.6      1.01         0.985  0.544         1.74
25 mu_0       0.7      1.03         0.992  0.624         1.67
26 mu_0       0.8      1.01         0.975  0.601         1.63
27 mu_0       0.9      1.00         0.969  0.375         1.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.09      4.27e-22  4.37e-68    156.  
 2 mu         0.2      0.727     1.27e-11  1.16e-44     19.5 
 3 mu         0.3      0.547     7.81e- 6  3.71e-31      9.07
 4 mu         0.4      0.934     3.38e- 3  9.35e-22     12.1 
 5 mu         0.5      1.28      5.98e- 2  1.18e-14     15.6 
 6 mu         0.6      1.04      1.56e- 1  1.01e-19     19.7 
 7 mu         0.7      1.06      5.68e- 2  4.49e-28      9.65
 8 mu         0.8      1.21      7.81e- 3  5.42e-40      9.72
 9 mu         0.9      0.928     3.78e- 9  1.47e-60     22.2 
10 mu_1       0.1      1.57      2.52e-21  4.02e-67     85.6 
11 mu_1       0.2      0.688     3.98e-11  5.32e-44     21.2 
12 mu_1       0.3      0.560     1.56e- 5  1.14e-30      9.73
13 mu_1       0.4      0.994     5.45e- 3  2.15e-21     13.8 
14 mu_1       0.5      1.27      7.89e- 2  2.17e-14     14.3 
15 mu_1       0.6      1.03      1.14e- 1  9.25e-21     18.5 
16 mu_1       0.7      1.06      6.77e- 2  3.52e-29      9.31
17 mu_1       0.8      1.21      6.19e- 3  3.71e-41      9.86
18 mu_1       0.9      0.921     2.49e- 9  8.96e-62     22.7 
19 mu_0       0.1      2.15      1.95e-22  3.96e-69    164.  
20 mu_0       0.2      0.737     5.92e-12  1.18e-45     19.1 
21 mu_0       0.3      0.541     4.48e- 6  4.31e-32      8.79
22 mu_0       0.4      0.894     2.52e- 3  1.27e-22     11.0 
23 mu_0       0.5      1.30      4.76e- 2  1.92e-15     17.0 
24 mu_0       0.6      1.05      1.63e- 1  2.39e-19     21.4 
25 mu_0       0.7      1.06      4.80e- 2  1.42e-27     10.5 
26 mu_0       0.8      1.20      8.62e- 3  2.56e-39      9.63
27 mu_0       0.9      0.991     1.53e- 8  1.39e-59     18.1 
[1] "Total run time was 391.012 seconds"
