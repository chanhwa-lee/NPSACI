
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7429"
[1] "cluster size dist'n: "

 50  51  53  54  56  57  58  59  60  62  63  64  65  67  68  69  70  71  72  73 
  4   1   1   1   1   2   6   4   5   2   1   5   1   1   3   1   2   1   4   1 
 74  75  76  77  79  80  81  82  84  85  86  88  89  90  91  92  93  94  95  96 
  2   3   5   4   2   2   1   5   3   1   3   2   2   1   1   2   3   1   1   1 
 97  98  99 100 
  3   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03575 0.34143 0.60349 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4448 2981 
[1] "treatment indicator table: "

   0    1 
2692 4737 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3747
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3682
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 412.662 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.214 0.0676
 2 mu         0.1   0.2 0.310 0.0757
 3 mu         0.1   0.3 0.350 0.0868
 4 mu         0.1   0.4 0.393 0.110 
 5 mu         0.1   0.5 0.427 0.118 
 6 mu         0.2   0.1 0.278 0.0370
 7 mu         0.2   0.2 0.386 0.0356
 8 mu         0.2   0.3 0.453 0.0398
 9 mu         0.2   0.4 0.507 0.0582
10 mu         0.2   0.5 0.539 0.0626
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.779       0.0583 0.000000547     11.5 
 2 mu         0.2      0.970       0.932  0.0189           3.85
 3 mu         0.3      1.02        0.984  0.225            2.08
 4 mu         0.4      0.983       0.930  0.540            1.63
 5 mu         0.5      0.992       1.01   0.615            1.37
 6 mu         0.6      0.981       0.954  0.573            1.32
 7 mu         0.7      1.01        1.02   0.618            1.64
 8 mu         0.8      1.03        1.02   0.687            1.51
 9 mu         0.9      0.974       0.960  0.233            1.96
10 mu_1       0.1      0.830       0.115  0.00000168       7.48
11 mu_1       0.2      0.977       0.947  0.0294           3.59
12 mu_1       0.3      1.02        0.993  0.230            2.01
13 mu_1       0.4      0.982       0.936  0.557            1.64
14 mu_1       0.5      0.992       1.01   0.628            1.36
15 mu_1       0.6      0.981       0.957  0.577            1.32
16 mu_1       0.7      1.01        1.01   0.606            1.65
17 mu_1       0.8      1.02        1.02   0.684            1.51
18 mu_1       0.9      0.974       0.963  0.225            1.99
19 mu_0       0.1      0.774       0.0523 0.000000422     12.0 
20 mu_0       0.2      0.969       0.918  0.0162           3.92
21 mu_0       0.3      1.02        0.970  0.223            2.12
22 mu_0       0.4      0.983       0.946  0.510            1.63
23 mu_0       0.5      0.992       1.00   0.603            1.40
24 mu_0       0.6      0.981       0.969  0.567            1.31
25 mu_0       0.7      1.00        1.03   0.646            1.63
26 mu_0       0.8      1.03        1.04   0.664            1.52
27 mu_0       0.9      0.975       0.950  0.305            1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0411     3.84e-28  9.28e-79      4.09
 2 mu         0.2     0.676      9.54e-16  5.04e-52     33.0 
 3 mu         0.3     1.33       4.38e- 9  1.40e-36     24.2 
 4 mu         0.4     0.939      9.72e- 5  8.33e-26     23.9 
 5 mu         0.5     0.916      1.30e- 2  1.22e-17      7.20
 6 mu         0.6     1.23       2.33e- 1  3.44e-11     16.0 
 7 mu         0.7     1.29       3.88e- 1  2.71e-17     11.6 
 8 mu         0.8     1.53       7.99e- 2  1.07e-28     11.0 
 9 mu         0.9     0.946      1.53e- 6  2.15e-49     15.0 
10 mu_1       0.1     0.0780     2.45e-27  8.61e-78      7.76
11 mu_1       0.2     0.774      3.27e-15  2.34e-51     31.3 
12 mu_1       0.3     1.29       9.69e- 9  4.31e-36     21.8 
13 mu_1       0.4     0.940      1.62e- 4  1.93e-25     22.9 
14 mu_1       0.5     0.926      1.52e- 2  2.27e-17      6.84
15 mu_1       0.6     1.26       2.48e- 1  5.31e-11     16.7 
16 mu_1       0.7     1.28       4.37e- 1  9.87e-18     11.2 
17 mu_1       0.8     1.54       6.60e- 2  3.40e-29     11.4 
18 mu_1       0.9     0.936      1.15e- 6  6.08e-50     15.7 
19 mu_0       0.1     0.0370     1.55e-28  7.44e-80      3.68
20 mu_0       0.2     0.651      3.74e-16  4.55e-53     33.5 
21 mu_0       0.3     1.35       2.10e- 9  1.44e-37     25.5 
22 mu_0       0.4     0.938      5.41e- 5  1.00e-26     24.5 
23 mu_0       0.5     0.905      1.01e- 2  1.77e-18      7.56
24 mu_0       0.6     1.19       1.76e- 1  6.20e-12     15.0 
25 mu_0       0.7     1.30       3.48e- 1  6.73e-17     12.4 
26 mu_0       0.8     1.49       1.19e- 1  3.97e-28      9.58
27 mu_0       0.9     1.04       4.98e- 6  1.60e-48     14.2 
[1] "Total run time was 416.124 seconds"
