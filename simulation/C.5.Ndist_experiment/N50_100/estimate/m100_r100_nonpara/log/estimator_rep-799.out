
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7574"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  62  63  64  65  66  67  68  69  70  71  72 
  3   2   3   2   1   1   4   2   3   2   2   2   2   2   1   3   2   1   3   1 
 73  74  75  76  77  78  79  80  81  82  83  84  86  87  88  89  92  93  94  95 
  4   1   2   1   2   1   4   1   2   1   3   1   5   5   1   2   3   5   2   3 
 96  97  98  99 100 
  1   1   1   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03841 0.33717 0.60423 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4531 3043 
[1] "treatment indicator table: "

   0    1 
2622 4952 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3772
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 500.592 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.298 0.0707
 2 mu         0.1   0.2 0.394 0.0948
 3 mu         0.1   0.3 0.501 0.108 
 4 mu         0.1   0.4 0.589 0.135 
 5 mu         0.1   0.5 0.647 0.146 
 6 mu         0.2   0.1 0.321 0.0571
 7 mu         0.2   0.2 0.439 0.0802
 8 mu         0.2   0.3 0.554 0.0964
 9 mu         0.2   0.4 0.636 0.113 
10 mu         0.2   0.5 0.702 0.127 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.887       0.0147  2.58e-12     10.5 
 2 mu         0.2      1.12        0.677   1.02e- 4     19.4 
 3 mu         0.3      0.997       0.876   9.30e- 2      2.69
 4 mu         0.4      0.967       0.965   2.56e- 1      2.18
 5 mu         0.5      1.02        0.999   5.09e- 1      1.73
 6 mu         0.6      1.03        1.04    6.11e- 1      1.62
 7 mu         0.7      1.01        0.996   6.03e- 1      1.50
 8 mu         0.8      1.02        0.991   5.06e- 1      1.69
 9 mu         0.9      0.965       0.944   2.55e- 1      2.17
10 mu_1       0.1      0.987       0.0305  9.64e-12     15.3 
11 mu_1       0.2      1.10        0.836   1.93e- 4     15.4 
12 mu_1       0.3      0.984       0.888   1.20e- 1      2.61
13 mu_1       0.4      0.971       0.961   2.83e- 1      2.19
14 mu_1       0.5      1.02        1.00    5.18e- 1      1.69
15 mu_1       0.6      1.02        1.03    6.19e- 1      1.64
16 mu_1       0.7      1.01        0.996   6.10e- 1      1.52
17 mu_1       0.8      1.02        0.991   4.85e- 1      1.70
18 mu_1       0.9      0.964       0.943   2.39e- 1      2.21
19 mu_0       0.1      0.876       0.0129  1.80e-12     10.5 
20 mu_0       0.2      1.12        0.681   7.94e- 5     20.5 
21 mu_0       0.3      1.00        0.900   8.13e- 2      2.72
22 mu_0       0.4      0.964       0.959   2.38e- 1      2.18
23 mu_0       0.5      1.01        1.01    5.00e- 1      1.77
24 mu_0       0.6      1.03        1.04    6.00e- 1      1.60
25 mu_0       0.7      1.00        0.993   5.65e- 1      1.53
26 mu_0       0.8      1.02        1.01    5.04e- 1      1.66
27 mu_0       0.9      0.976       0.975   1.86e- 1      2.04
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0649     3.44e-28  3.07e-78      6.45
 2 mu         0.2     2.07       9.62e-16  2.63e-51    119.  
 3 mu         0.3     1.58       6.03e- 9  3.17e-36     80.5 
 4 mu         0.4     1.01       1.97e- 4  9.31e-26     40.1 
 5 mu         0.5     1.51       2.03e- 2  8.41e-18     13.3 
 6 mu         0.6     1.27       3.27e- 1  1.71e-11     16.4 
 7 mu         0.7     1.50       2.60e- 1  4.08e-16     18.2 
 8 mu         0.8     1.31       4.90e- 2  4.15e-27     20.4 
 9 mu         0.9     2.01       7.76e- 6  5.28e-47     84.1 
10 mu_1       0.1     0.140      2.37e-27  2.80e-77     13.9 
11 mu_1       0.2     2.37       3.46e-15  1.20e-50    128.  
12 mu_1       0.3     1.33       1.25e- 8  9.88e-36     66.3 
13 mu_1       0.4     1.06       3.25e- 4  2.18e-25     39.6 
14 mu_1       0.5     1.53       2.23e- 2  1.57e-17     14.8 
15 mu_1       0.6     1.24       3.68e- 1  2.66e-11     15.2 
16 mu_1       0.7     1.53       3.03e- 1  1.44e-16     19.3 
17 mu_1       0.8     1.29       3.97e- 2  1.28e-27     19.5 
18 mu_1       0.9     2.04       5.85e- 6  1.45e-47     88.3 
19 mu_0       0.1     0.0566     1.04e-28  3.07e-79      5.62
20 mu_0       0.2     1.99       3.39e-16  2.73e-52    116.  
21 mu_0       0.3     1.68       3.25e- 9  2.92e-37     86.5 
22 mu_0       0.4     0.979      1.11e- 4  1.00e-26     40.4 
23 mu_0       0.5     1.49       1.52e- 2  1.09e-18     11.8 
24 mu_0       0.6     1.32       2.72e- 1  2.75e-12     18.2 
25 mu_0       0.7     1.43       3.25e- 1  1.02e-15     15.8 
26 mu_0       0.8     1.40       7.40e- 2  1.56e-26     23.7 
27 mu_0       0.9     1.70       2.27e- 5  3.97e-46     46.1 
[1] "Total run time was 505.451 seconds"
