
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7466"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  68  69  71 
  2   4   1   2   1   3   1   2   2   1   3   1   5   1   3   2   1   4   3   2 
 72  73  74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92 
  1   1   2   2   1   3   1   2   5   3   3   1   2   5   1   1   1   3   2   2 
 93  94  96  97  98 100 
  3   2   2   2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0288  0.3397  0.5992  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4420 3046 
[1] "treatment indicator table: "

   0    1 
2692 4774 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3740
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3726
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 338.72 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.457 0.116 
 2 mu         0.1   0.2 0.565 0.142 
 3 mu         0.1   0.3 0.628 0.153 
 4 mu         0.1   0.4 0.699 0.171 
 5 mu         0.1   0.5 0.729 0.174 
 6 mu         0.2   0.1 0.441 0.0727
 7 mu         0.2   0.2 0.547 0.0848
 8 mu         0.2   0.3 0.609 0.0833
 9 mu         0.2   0.4 0.668 0.0913
10 mu         0.2   0.5 0.705 0.0844
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.03        0.0935 0.000000837     16.0 
 2 mu         0.2      1.09        0.959  0.0178           3.43
 3 mu         0.3      1.00        0.946  0.119            2.36
 4 mu         0.4      0.989       0.977  0.473            1.91
 5 mu         0.5      0.993       0.993  0.596            1.69
 6 mu         0.6      1.00        0.982  0.686            1.68
 7 mu         0.7      1.02        1.02   0.600            1.69
 8 mu         0.8      0.965       0.967  0.430            1.48
 9 mu         0.9      1.03        1.00   0.100            3.26
10 mu_1       0.1      1.02        0.170  0.00000293      11.3 
11 mu_1       0.2      1.10        0.996  0.0312           3.09
12 mu_1       0.3      0.997       0.948  0.126            2.30
13 mu_1       0.4      0.987       0.976  0.492            1.96
14 mu_1       0.5      0.995       0.989  0.587            1.62
15 mu_1       0.6      1.01        0.983  0.704            1.65
16 mu_1       0.7      1.02        1.01   0.590            1.70
17 mu_1       0.8      0.964       0.961  0.430            1.47
18 mu_1       0.9      1.03        1.01   0.0967           3.33
19 mu_0       0.1      1.03        0.0839 0.000000605     16.6 
20 mu_0       0.2      1.09        0.956  0.0145           3.68
21 mu_0       0.3      1.01        0.964  0.116            2.39
22 mu_0       0.4      0.990       0.984  0.461            1.88
23 mu_0       0.5      0.991       0.984  0.589            1.75
24 mu_0       0.6      1.00        0.989  0.652            1.72
25 mu_0       0.7      1.02        1.03   0.624            1.68
26 mu_0       0.8      0.970       0.953  0.430            1.49
27 mu_0       0.9      1.00        0.988  0.131            2.75
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0422     6.00e-31  1.58e-68      2.63
 2 mu         0.2     1.45       1.87e-16  6.29e-45     67.2 
 3 mu         0.3     0.979      5.70e- 9  2.30e-32     22.8 
 4 mu         0.4     0.688      1.27e- 4  1.67e-23     11.0 
 5 mu         0.5     1.03       1.21e- 2  1.10e-16     10.9 
 6 mu         0.6     1.06       2.23e- 1  3.54e-11     15.0 
 7 mu         0.7     1.05       1.48e- 1  1.80e-18      7.27
 8 mu         0.8     1.36       3.51e- 2  6.24e-30      8.46
 9 mu         0.9     2.00       6.38e- 8  1.57e-50     28.1 
10 mu_1       0.1     0.0868     4.51e-30  1.36e-67      5.52
11 mu_1       0.2     1.57       5.73e-16  3.06e-44     70.5 
12 mu_1       0.3     0.898      1.32e- 8  7.46e-32     22.9 
13 mu_1       0.4     0.711      2.02e- 4  4.07e-23     10.0 
14 mu_1       0.5     1.04       1.76e- 2  2.15e-16     10.3 
15 mu_1       0.6     1.05       2.28e- 1  2.64e-11     14.1 
16 mu_1       0.7     1.06       1.62e- 1  5.81e-19      7.49
17 mu_1       0.8     1.39       3.11e- 2  1.76e-30      8.18
18 mu_1       0.9     1.99       4.58e- 8  3.93e-51     27.7 
19 mu_0       0.1     0.0373     2.02e-31  2.45e-69      2.31
20 mu_0       0.2     1.41       9.05e-17  2.13e-46     66.4 
21 mu_0       0.3     1.01       2.49e- 9  8.88e-34     22.7 
22 mu_0       0.4     0.673      7.79e- 5  7.53e-25     11.6 
23 mu_0       0.5     1.02       8.31e- 3  5.96e-18     11.5 
24 mu_0       0.6     1.08       1.80e- 1  2.40e-12     16.4 
25 mu_0       0.7     1.00       1.46e- 1  4.65e-18      7.88
26 mu_0       0.8     1.28       2.61e- 2  2.41e-29      9.87
27 mu_0       0.9     2.11       2.25e- 7  1.21e-49     31.6 
[1] "Total run time was 342.552 seconds"
