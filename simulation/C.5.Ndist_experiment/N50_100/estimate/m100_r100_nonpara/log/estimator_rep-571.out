
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7714"
[1] "cluster size dist'n: "

 52  53  54  55  57  58  59  61  62  63  64  65  66  68  69  70  71  72  73  74 
  1   3   5   2   1   1   2   1   1   1   2   3   2   2   1   4   4   2   3   2 
 75  76  77  78  79  80  81  82  83  84  85  87  88  89  92  93  94  95  96  97 
  2   2   1   3   7   1   1   2   1   2   6   2   3   2   3   3   4   1   3   3 
 98 100 
  2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04263 0.36226 0.61035 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4559 3155 
[1] "treatment indicator table: "

   0    1 
2955 4759 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3843
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3871
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 387.1 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.377 0.0639
 2 mu         0.1   0.2 0.468 0.0880
 3 mu         0.1   0.3 0.526 0.103 
 4 mu         0.1   0.4 0.584 0.106 
 5 mu         0.1   0.5 0.671 0.109 
 6 mu         0.2   0.1 0.317 0.0290
 7 mu         0.2   0.2 0.389 0.0426
 8 mu         0.2   0.3 0.438 0.0510
 9 mu         0.2   0.4 0.487 0.0475
10 mu         0.2   0.5 0.569 0.0453
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.14         0.496 0.00000608      9.45
 2 mu         0.2      1.02         0.947 0.0858          3.53
 3 mu         0.3      1.07         1.01  0.227           3.87
 4 mu         0.4      1.01         1.01  0.236           2.19
 5 mu         0.5      0.989        1.00  0.508           1.55
 6 mu         0.6      1.00         0.976 0.648           1.59
 7 mu         0.7      0.977        0.968 0.573           1.43
 8 mu         0.8      0.966        0.957 0.480           1.39
 9 mu         0.9      1.05         0.988 0.284           2.12
10 mu_1       0.1      1.15         0.633 0.0000178      10.1 
11 mu_1       0.2      1.04         0.985 0.124           3.68
12 mu_1       0.3      1.07         1.01  0.252           3.84
13 mu_1       0.4      1.01         1.01  0.248           2.22
14 mu_1       0.5      0.988        1.01  0.532           1.53
15 mu_1       0.6      1.00         0.979 0.650           1.59
16 mu_1       0.7      0.976        0.970 0.563           1.43
17 mu_1       0.8      0.966        0.960 0.465           1.39
18 mu_1       0.9      1.05         0.995 0.283           2.16
19 mu_0       0.1      1.14         0.472 0.00000478      9.38
20 mu_0       0.2      1.02         0.936 0.0753          3.50
21 mu_0       0.3      1.08         1.01  0.216           3.88
22 mu_0       0.4      1.02         0.992 0.227           2.17
23 mu_0       0.5      0.989        0.994 0.484           1.58
24 mu_0       0.6      1.00         0.977 0.645           1.59
25 mu_0       0.7      0.980        0.963 0.598           1.44
26 mu_0       0.8      0.964        0.941 0.517           1.40
27 mu_0       0.9      1.04         1.02  0.300           1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00178     4.85e-26  3.41e-82    0.110 
 2 mu         0.2    0.786       2.58e-13  1.48e-55   57.9   
 3 mu         0.3    1.64        5.61e- 7  4.67e-40   46.5   
 4 mu         0.4    1.28        5.24e- 3  3.88e-29   22.4   
 5 mu         0.5    0.884       6.06e- 2  9.46e-21    8.57  
 6 mu         0.6    1.18        1.34e- 1  5.40e-14   15.9   
 7 mu         0.7    1.36        1.19e- 1  1.16e-17   17.2   
 8 mu         0.8    1.41        6.25e- 3  4.57e-29   16.9   
 9 mu         0.9    0.927       4.07e- 8  1.29e-49   14.1   
10 mu_1       0.1    0.00410     2.90e-25  3.30e-81    0.251 
11 mu_1       0.2    0.950       8.60e-13  7.18e-55   67.8   
12 mu_1       0.3    1.65        1.15e- 6  1.51e-39   45.7   
13 mu_1       0.4    1.23        7.67e- 3  9.38e-29   20.7   
14 mu_1       0.5    0.904       6.00e- 2  1.83e-20    8.71  
15 mu_1       0.6    1.18        1.60e- 1  8.70e-14   16.7   
16 mu_1       0.7    1.37        9.73e- 2  3.86e-18   17.4   
17 mu_1       0.8    1.41        4.86e- 3  1.34e-29   16.9   
18 mu_1       0.9    0.913       3.02e- 8  3.36e-50   13.8   
19 mu_0       0.1    0.00152     2.16e-26  1.24e-83    0.0946
20 mu_0       0.2    0.745       1.08e-13  6.05e-57   55.5   
21 mu_0       0.3    1.64        3.08e- 7  2.18e-41   46.8   
22 mu_0       0.4    1.31        3.61e- 3  2.11e-30   23.6   
23 mu_0       0.5    0.864       5.94e- 2  6.17e-22    8.43  
24 mu_0       0.6    1.17        1.70e- 1  4.40e-15   14.7   
25 mu_0       0.7    1.35        1.60e- 1  2.95e-17   16.8   
26 mu_0       0.8    1.43        8.44e- 3  1.75e-28   16.9   
27 mu_0       0.9    1.05        1.35e- 7  9.89e-49   16.7   
[1] "Total run time was 390.476 seconds"
