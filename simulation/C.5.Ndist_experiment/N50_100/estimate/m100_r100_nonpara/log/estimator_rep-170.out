
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7485"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  63  65  66  67  68  69  70  71  72 
  3   4   2   5   1   2   3   1   1   2   3   1   1   2   2   2   1   5   2   4 
 74  75  76  77  78  79  80  81  82  83  84  85  86  89  90  92  93  94  95  96 
  4   3   1   1   3   3   2   1   1   2   2   2   3   1   2   1   4   2   4   2 
 97  98  99 100 
  3   1   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03047 0.35716 0.63582 1.00000 6.27631 
[1] "event indicator table: "

   0    1 
4487 2998 
[1] "treatment indicator table: "

   0    1 
2744 4741 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3671
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 422.239 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.490 0.146 
 2 mu         0.1   0.2 0.578 0.137 
 3 mu         0.1   0.3 0.644 0.144 
 4 mu         0.1   0.4 0.688 0.145 
 5 mu         0.1   0.5 0.705 0.140 
 6 mu         0.2   0.1 0.406 0.0796
 7 mu         0.2   0.2 0.489 0.0706
 8 mu         0.2   0.3 0.541 0.0700
 9 mu         0.2   0.4 0.571 0.0664
10 mu         0.2   0.5 0.604 0.0665
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.00         0.190  1.18e- 9     11.7 
 2 mu         0.2      0.899        0.820  1.82e- 3      2.74
 3 mu         0.3      1.03         0.958  2.10e- 1      2.57
 4 mu         0.4      1.05         1.02   4.01e- 1      2.25
 5 mu         0.5      1.04         1.02   6.15e- 1      1.53
 6 mu         0.6      1.00         0.992  5.47e- 1      1.56
 7 mu         0.7      0.987        0.984  6.60e- 1      1.46
 8 mu         0.8      0.981        0.973  5.59e- 1      1.59
 9 mu         0.9      0.985        0.974  3.77e- 1      1.65
10 mu_1       0.1      1.02         0.324  3.95e- 9      7.26
11 mu_1       0.2      0.915        0.851  3.06e- 3      2.93
12 mu_1       0.3      1.04         0.952  2.50e- 1      2.77
13 mu_1       0.4      1.05         1.03   3.89e- 1      2.12
14 mu_1       0.5      1.03         1.02   6.15e- 1      1.55
15 mu_1       0.6      0.998        0.992  5.34e- 1      1.55
16 mu_1       0.7      0.987        0.985  6.79e- 1      1.46
17 mu_1       0.8      0.981        0.972  5.50e- 1      1.60
18 mu_1       0.9      0.986        0.969  3.66e- 1      1.64
19 mu_0       0.1      0.998        0.174  8.77e-10     12.2 
20 mu_0       0.2      0.894        0.815  1.51e- 3      2.70
21 mu_0       0.3      1.03         0.958  1.94e- 1      2.52
22 mu_0       0.4      1.05         1.02   4.09e- 1      2.34
23 mu_0       0.5      1.04         1.04   6.15e- 1      1.52
24 mu_0       0.6      1.00         0.989  5.66e- 1      1.57
25 mu_0       0.7      0.986        0.981  6.05e- 1      1.44
26 mu_0       0.8      0.984        0.966  5.91e- 1      1.52
27 mu_0       0.9      0.976        0.962  4.52e- 1      1.67
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.567     2.46e-27  7.12e-80     48.0 
 2 mu         0.2      1.00      3.19e-15  7.73e-53     62.7 
 3 mu         0.3      1.34      8.67e- 9  3.21e-37     17.1 
 4 mu         0.4      2.00      1.60e- 4  2.55e-26     28.8 
 5 mu         0.5      1.17      1.56e- 2  4.70e-18     13.6 
 6 mu         0.6      1.03      8.37e- 2  3.27e-15     14.9 
 7 mu         0.7      1.33      1.68e- 1  4.87e-23     11.0 
 8 mu         0.8      1.05      9.63e- 2  1.97e-34      7.84
 9 mu         0.9      1.00      2.34e- 6  2.16e-54     20.7 
10 mu_1       0.1      0.783     1.74e-26  6.61e-79     61.5 
11 mu_1       0.2      0.985     1.03e-14  3.59e-52     60.3 
12 mu_1       0.3      1.45      1.89e- 8  9.93e-37     20.8 
13 mu_1       0.4      1.93      2.50e- 4  5.93e-26     27.1 
14 mu_1       0.5      1.13      2.14e- 2  8.72e-18     13.5 
15 mu_1       0.6      1.04      8.54e- 2  6.98e-16     14.5 
16 mu_1       0.7      1.33      1.85e- 1  8.93e-24     11.4 
17 mu_1       0.8      1.04      9.56e- 2  3.15e-35      7.70
18 mu_1       0.9      1.00      1.75e- 6  3.08e-55     21.3 
19 mu_0       0.1      0.543     8.01e-28  5.65e-81     46.5 
20 mu_0       0.2      1.01      1.23e-15  6.90e-54     63.3 
21 mu_0       0.3      1.29      4.28e- 9  3.27e-38     15.5 
22 mu_0       0.4      2.04      9.98e- 5  3.04e-27     29.9 
23 mu_0       0.5      1.20      1.05e- 2  6.71e-19     13.8 
24 mu_0       0.6      1.01      7.49e- 2  7.12e-15     15.4 
25 mu_0       0.7      1.32      9.81e- 2  1.42e-22     12.1 
26 mu_0       0.8      1.09      1.02e- 1  8.57e-34      8.43
27 mu_0       0.9      0.974     7.66e- 6  1.89e-53     15.6 
[1] "Total run time was 426.147 seconds"
