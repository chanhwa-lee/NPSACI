
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7719"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  63  64  65  66  67  68  69  70  71  72 
  4   2   1   1   2   2   1   3   4   1   3   2   1   1   2   1   1   2   2   2 
 74  75  77  78  79  80  81  82  83  84  85  87  88  89  91  92  93  94  95  96 
  2   3   1   2   4   4   2   2   1   2   5   1   5   2   7   1   3   3   2   2 
 97  98  99 100 
  2   1   3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02533 0.32329 0.58662 1.00000 7.56472 
[1] "event indicator table: "

   0    1 
4590 3129 
[1] "treatment indicator table: "

   0    1 
2896 4823 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3824
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3895
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 510.753 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.349 0.0522
 2 mu         0.1   0.2 0.412 0.0500
 3 mu         0.1   0.3 0.464 0.0573
 4 mu         0.1   0.4 0.507 0.0580
 5 mu         0.1   0.5 0.603 0.0694
 6 mu         0.2   0.1 0.334 0.0314
 7 mu         0.2   0.2 0.397 0.0327
 8 mu         0.2   0.3 0.445 0.0376
 9 mu         0.2   0.4 0.501 0.0358
10 mu         0.2   0.5 0.593 0.0527
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.926        0.698 0.00000104       4.34
 2 mu         0.2      0.960        0.901 0.0625           2.77
 3 mu         0.3      0.994        0.998 0.334            1.80
 4 mu         0.4      1.00         0.966 0.474            1.71
 5 mu         0.5      1.01         0.993 0.573            1.58
 6 mu         0.6      1.00         0.986 0.652            1.49
 7 mu         0.7      0.990        0.963 0.565            1.70
 8 mu         0.8      0.971        0.952 0.308            1.61
 9 mu         0.9      1.04         1.01  0.357            1.87
10 mu_1       0.1      0.967        0.801 0.00000310       3.81
11 mu_1       0.2      0.963        0.897 0.0946           2.87
12 mu_1       0.3      0.993        1.01  0.360            1.81
13 mu_1       0.4      1.00         0.956 0.495            1.73
14 mu_1       0.5      1.01         0.991 0.584            1.57
15 mu_1       0.6      1.00         0.987 0.643            1.51
16 mu_1       0.7      0.989        0.975 0.573            1.70
17 mu_1       0.8      0.970        0.949 0.309            1.62
18 mu_1       0.9      1.04         1.01  0.355            1.86
19 mu_0       0.1      0.922        0.671 0.000000816      4.40
20 mu_0       0.2      0.959        0.902 0.0544           2.75
21 mu_0       0.3      0.995        0.998 0.323            1.79
22 mu_0       0.4      0.998        0.968 0.460            1.73
23 mu_0       0.5      1.01         0.988 0.562            1.61
24 mu_0       0.6      1.00         0.994 0.648            1.47
25 mu_0       0.7      0.991        0.979 0.548            1.71
26 mu_0       0.8      0.973        0.949 0.302            1.60
27 mu_0       0.9      1.02         1.02  0.347            1.92
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.17      4.84e-28  6.50e-86      99.3
 2 mu         0.2      0.900     8.90e-16  1.27e-58      60.1
 3 mu         0.3      0.518     4.06e- 9  1.03e-42      14.6
 4 mu         0.4      0.935     1.14e- 4  1.77e-31      11.4
 5 mu         0.5      1.67      2.55e- 2  8.10e-23      69.8
 6 mu         0.6      1.25      1.65e- 1  3.86e-23      13.9
 7 mu         0.7      1.43      8.46e- 2  2.38e-33      10.3
 8 mu         0.8      1.47      6.92e- 2  4.98e-48      16.9
 9 mu         0.9      1.81      2.54e- 6  1.65e-73      27.0
10 mu_1       0.1      2.63      3.17e-27  6.36e-85     137. 
11 mu_1       0.2      0.682     3.16e-15  6.22e-58      41.3
12 mu_1       0.3      0.539     9.23e- 9  3.36e-42      14.9
13 mu_1       0.4      0.984     1.79e- 4  4.33e-31      11.7
14 mu_1       0.5      1.68      2.53e- 2  1.59e-22      70.6
15 mu_1       0.6      1.24      1.43e- 1  5.47e-24      11.7
16 mu_1       0.7      1.44      7.45e- 2  2.90e-34      10.3
17 mu_1       0.8      1.46      6.45e- 2  5.30e-49      17.0
18 mu_1       0.9      1.81      1.84e- 6  1.56e-74      27.1
19 mu_0       0.1      2.11      1.52e-28  1.55e-87      95.2
20 mu_0       0.2      0.955     3.23e-16  3.42e-60      64.8
21 mu_0       0.3      0.509     1.84e- 9  3.16e-44      14.5
22 mu_0       0.4      0.902     6.96e- 5  6.34e-33      11.5
23 mu_0       0.5      1.66      1.67e- 2  3.48e-24      69.1
24 mu_0       0.6      1.25      1.41e- 1  8.83e-23      17.2
25 mu_0       0.7      1.40      9.67e- 2  7.27e-33      10.4
26 mu_0       0.8      1.47      8.36e- 2  2.28e-47      16.2
27 mu_0       0.9      1.81      8.92e- 6  1.51e-72      25.7
[1] "Total run time was 514.466 seconds"
