
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7531"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  58  59  60  62  63  64  65  67  68  69  71  72  73  74 
  2   1   3   2   4   6   2   2   3   2   2   3   3   4   1   3   2   2   1   1 
 76  78  80  81  83  84  85  86  87  88  90  91  92  93  94  95  96  97  98  99 
  5   2   3   2   1   3   3   2   1   1   2   3   4   1   2   4   1   2   3   2 
100 
  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03108 0.34658 0.61475 1.00000 6.58221 
[1] "event indicator table: "

   0    1 
4417 3114 
[1] "treatment indicator table: "

   0    1 
2948 4583 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3717
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3814
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 492.18 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.334 0.0692
 2 mu         0.1   0.2 0.396 0.0781
 3 mu         0.1   0.3 0.508 0.0882
 4 mu         0.1   0.4 0.535 0.0824
 5 mu         0.1   0.5 0.519 0.0761
 6 mu         0.2   0.1 0.360 0.0474
 7 mu         0.2   0.2 0.429 0.0443
 8 mu         0.2   0.3 0.545 0.0678
 9 mu         0.2   0.4 0.585 0.0613
10 mu         0.2   0.5 0.588 0.0533
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.895        0.462 0.00000171      4.63
 2 mu         0.2      1.03         0.969 0.0714          2.93
 3 mu         0.3      1.03         0.998 0.358           1.78
 4 mu         0.4      0.995        0.960 0.586           1.73
 5 mu         0.5      1.01         1.01  0.587           1.56
 6 mu         0.6      0.998        1.01  0.567           1.55
 7 mu         0.7      1.02         1.01  0.595           1.70
 8 mu         0.8      0.979        0.968 0.444           1.59
 9 mu         0.9      1.03         0.979 0.331           3.45
10 mu_1       0.1      0.941        0.607 0.00000476      4.01
11 mu_1       0.2      1.03         0.954 0.102           2.81
12 mu_1       0.3      1.02         0.977 0.330           1.72
13 mu_1       0.4      0.995        0.971 0.611           1.78
14 mu_1       0.5      1.01         1.02  0.589           1.55
15 mu_1       0.6      0.998        1.01  0.564           1.55
16 mu_1       0.7      1.02         1.00  0.588           1.70
17 mu_1       0.8      0.979        0.975 0.432           1.59
18 mu_1       0.9      1.03         0.972 0.319           3.49
19 mu_0       0.1      0.890        0.431 0.00000137      4.75
20 mu_0       0.2      1.04         0.970 0.0636          2.95
21 mu_0       0.3      1.03         1.00  0.370           1.82
22 mu_0       0.4      0.994        0.968 0.570           1.70
23 mu_0       0.5      1.01         1.01  0.586           1.58
24 mu_0       0.6      0.998        1.01  0.571           1.56
25 mu_0       0.7      1.02         1.01  0.612           1.72
26 mu_0       0.8      0.981        0.970 0.473           1.60
27 mu_0       0.9      1.01         0.971 0.388           3.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0766     2.52e-24  2.59e-72      7.03
 2 mu         0.2     1.12       6.65e-13  1.10e-46     49.2 
 3 mu         0.3     0.848      2.51e- 7  5.28e-32     17.2 
 4 mu         0.4     0.909      1.15e- 3  7.17e-22     13.4 
 5 mu         0.5     0.931      5.08e- 2  1.59e-14      6.13
 6 mu         0.6     1.10       1.43e- 1  8.52e-13     13.4 
 7 mu         0.7     1.32       1.91e- 1  2.92e-21      9.60
 8 mu         0.8     1.54       2.57e- 2  5.93e-34     21.9 
 9 mu         0.9     1.46       1.08e- 7  1.16e-56     37.3 
10 mu_1       0.1     0.124      1.49e-23  2.30e-71     11.0 
11 mu_1       0.2     1.20       2.19e-12  4.87e-46     51.7 
12 mu_1       0.3     0.822      5.38e- 7  1.56e-31     17.2 
13 mu_1       0.4     0.922      1.85e- 3  1.59e-21     13.9 
14 mu_1       0.5     0.950      4.41e- 2  3.00e-14      6.51
15 mu_1       0.6     1.10       1.35e- 1  2.98e-13     13.5 
16 mu_1       0.7     1.33       1.88e- 1  8.77e-22      9.80
17 mu_1       0.8     1.55       2.04e- 2  1.56e-34     23.6 
18 mu_1       0.9     1.42       7.46e- 8  2.71e-57     35.7 
19 mu_0       0.1     0.0714     1.14e-24  3.23e-73      6.59
20 mu_0       0.2     1.10       2.79e-13  1.54e-47     48.6 
21 mu_0       0.3     0.859      1.29e- 7  8.46e-33     17.2 
22 mu_0       0.4     0.900      6.90e- 4  1.34e-22     13.0 
23 mu_0       0.5     0.913      3.12e- 2  1.74e-15      6.56
24 mu_0       0.6     1.09       1.15e- 1  1.68e-12     13.3 
25 mu_0       0.7     1.29       1.89e- 1  7.70e-21      9.33
26 mu_0       0.8     1.49       3.78e- 2  2.34e-33     16.1 
27 mu_0       0.9     1.74       3.99e- 7  9.19e-56     51.5 
[1] "Total run time was 495.499 seconds"
