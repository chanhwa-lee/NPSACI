
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7550"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  62  63  64  66  67  68  69  70  71 
  2   4   3   1   1   1   1   2   1   2   2   1   2   4   2   2   1   3   3   2 
 72  73  74  76  77  78  80  82  83  84  85  86  87  88  89  90  92  93  95  96 
  2   4   4   3   2   4   5   2   1   2   2   2   1   2   2   3   2   4   1   3 
 97  98  99 100 
  1   1   3   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02605 0.33869 0.60266 1.00000 5.37398 
[1] "event indicator table: "

   0    1 
4532 3018 
[1] "treatment indicator table: "

   0    1 
2757 4793 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3802
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3748
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 457.367 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.439 0.0697
 2 mu         0.1   0.2 0.543 0.0898
 3 mu         0.1   0.3 0.582 0.0849
 4 mu         0.1   0.4 0.678 0.128 
 5 mu         0.1   0.5 0.703 0.119 
 6 mu         0.2   0.1 0.415 0.0553
 7 mu         0.2   0.2 0.523 0.0721
 8 mu         0.2   0.3 0.562 0.0637
 9 mu         0.2   0.4 0.644 0.100 
10 mu         0.2   0.5 0.669 0.0899
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.04         0.684  0.000308      5.18
 2 mu         0.2      1.05         1.01   0.172         2.44
 3 mu         0.3      1.01         1.00   0.452         1.55
 4 mu         0.4      0.993        1.01   0.467         1.51
 5 mu         0.5      0.976        0.965  0.549         1.48
 6 mu         0.6      0.994        0.971  0.665         1.42
 7 mu         0.7      1.00         0.999  0.698         1.53
 8 mu         0.8      1.00         0.978  0.560         1.55
 9 mu         0.9      1.01         0.993  0.416         1.97
10 mu_1       0.1      1.07         0.848  0.000751      5.18
11 mu_1       0.2      1.04         0.989  0.229         2.47
12 mu_1       0.3      1.01         1.00   0.502         1.55
13 mu_1       0.4      0.992        1.00   0.498         1.51
14 mu_1       0.5      0.975        0.966  0.546         1.47
15 mu_1       0.6      0.996        0.962  0.664         1.41
16 mu_1       0.7      1.00         0.995  0.696         1.55
17 mu_1       0.8      1.00         0.983  0.556         1.57
18 mu_1       0.9      1.01         0.991  0.417         1.96
19 mu_0       0.1      1.03         0.669  0.000258      5.18
20 mu_0       0.2      1.05         1.02   0.157         2.43
21 mu_0       0.3      1.01         1.01   0.430         1.57
22 mu_0       0.4      0.993        1.02   0.446         1.51
23 mu_0       0.5      0.978        0.965  0.551         1.48
24 mu_0       0.6      0.992        0.973  0.667         1.42
25 mu_0       0.7      1.00         1.00   0.704         1.48
26 mu_0       0.8      1.00         1.00   0.576         1.61
27 mu_0       0.9      1.02         1.01   0.400         2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.715     2.61e-30  8.36e-88     70.7 
 2 mu         0.2      0.413     2.70e-16  3.68e-60     29.5 
 3 mu         0.3      0.677     1.35e- 9  5.11e-44     13.5 
 4 mu         0.4      1.00      2.07e- 5  1.37e-32      9.74
 5 mu         0.5      0.853     1.81e- 2  9.38e-24      7.16
 6 mu         0.6      1.13      1.15e- 1  8.36e-18     11.3 
 7 mu         0.7      1.23      2.78e- 1  8.97e-26     11.0 
 8 mu         0.8      1.53      6.16e- 2  3.18e-37     13.6 
 9 mu         0.9      0.901     1.33e- 6  4.37e-57     16.5 
10 mu_1       0.1      0.596     1.71e-29  8.27e-87     58.1 
11 mu_1       0.2      0.432     9.68e-16  1.82e-59     28.5 
12 mu_1       0.3      0.747     3.17e- 9  1.68e-43     11.7 
13 mu_1       0.4      0.973     3.63e- 5  3.38e-32      9.34
14 mu_1       0.5      0.870     1.86e- 2  1.86e-23      7.45
15 mu_1       0.6      1.12      1.28e- 1  1.15e-18     11.3 
16 mu_1       0.7      1.25      2.35e- 1  1.05e-26     11.2 
17 mu_1       0.8      1.52      5.04e- 2  3.27e-38     13.6 
18 mu_1       0.9      0.896     9.88e- 7  3.99e-58     16.9 
19 mu_0       0.1      0.728     1.17e-30  0            72.1 
20 mu_0       0.2      0.409     9.58e-17  0            29.7 
21 mu_0       0.3      0.648     5.68e-10  0            14.2 
22 mu_0       0.4      1.02      1.07e- 5  0            10.0 
23 mu_0       0.5      0.837     1.04e- 2  0             6.86
24 mu_0       0.6      1.13      8.59e- 2  0            11.4 
25 mu_0       0.7      1.17      2.22e- 1  0            10.4 
26 mu_0       0.8      1.55      7.53e- 2  0            13.8 
27 mu_0       0.9      0.951     2.82e- 6  0            14.2 
[1] "Total run time was 460.504 seconds"
