
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7422"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  1   3   2   3   1   2   2   2   5   1   5   2   2   2   1   2   1   1   2   2 
 70  71  72  73  74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90 
  1   5   2   2   3   1   2   1   1   1   2   1   3   1   2   3   1   3   1   2 
 91  92  93  96  97  98  99 100 
  1   2   4   2   3   3   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02474 0.32173 0.58803 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4459 2963 
[1] "treatment indicator table: "

   0    1 
2797 4625 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3677
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3745
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 402.098 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est    se
   <chr>    <dbl> <dbl> <dbl> <dbl>
 1 mu         0.1   0.1 0.562 0.192
 2 mu         0.1   0.2 0.612 0.188
 3 mu         0.1   0.3 0.643 0.182
 4 mu         0.1   0.4 0.675 0.187
 5 mu         0.1   0.5 0.686 0.184
 6 mu         0.2   0.1 0.520 0.142
 7 mu         0.2   0.2 0.580 0.130
 8 mu         0.2   0.3 0.625 0.116
 9 mu         0.2   0.4 0.659 0.114
10 mu         0.2   0.5 0.681 0.105
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.925       0.0990 0.00000249     15.5 
 2 mu         0.2      0.991       0.821  0.0486          4.57
 3 mu         0.3      0.969       0.936  0.334           2.01
 4 mu         0.4      1.01        1.04   0.543           1.56
 5 mu         0.5      1.02        1.03   0.681           1.52
 6 mu         0.6      0.991       0.979  0.701           1.27
 7 mu         0.7      0.987       0.995  0.660           1.35
 8 mu         0.8      1.03        1.01   0.495           1.53
 9 mu         0.9      1.04        1.08   0.167           2.05
10 mu_1       0.1      0.902       0.171  0.00000692     10.9 
11 mu_1       0.2      0.994       0.862  0.0737          4.59
12 mu_1       0.3      0.967       0.958  0.375           1.93
13 mu_1       0.4      1.02        1.06   0.560           1.60
14 mu_1       0.5      1.02        1.02   0.697           1.55
15 mu_1       0.6      0.990       0.977  0.696           1.27
16 mu_1       0.7      0.988       0.988  0.641           1.36
17 mu_1       0.8      1.03        1.00   0.507           1.56
18 mu_1       0.9      1.04        1.07   0.158           2.05
19 mu_0       0.1      0.927       0.0903 0.00000199     16.2 
20 mu_0       0.2      0.990       0.812  0.0423          4.57
21 mu_0       0.3      0.970       0.936  0.317           2.04
22 mu_0       0.4      1.01        1.04   0.531           1.54
23 mu_0       0.5      1.02        1.03   0.663           1.49
24 mu_0       0.6      0.992       0.986  0.698           1.33
25 mu_0       0.7      0.984       1.00   0.672           1.33
26 mu_0       0.8      1.03        1.03   0.449           1.58
27 mu_0       0.9      1.03        1.02   0.252           2.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0374     1.01e-26  5.49e-80      3.33
 2 mu         0.2     0.967      2.03e-14  1.06e-53     47.9 
 3 mu         0.3     0.936      1.00e- 7  1.95e-38     18.2 
 4 mu         0.4     0.966      3.83e- 4  1.04e-27     12.0 
 5 mu         0.5     0.990      4.97e- 2  1.69e-19      8.02
 6 mu         0.6     1.06       3.23e- 1  6.43e-13     12.6 
 7 mu         0.7     1.32       3.09e- 1  6.10e-17     10.3 
 8 mu         0.8     1.50       3.34e- 2  2.42e-27     24.3 
 9 mu         0.9     1.12       4.50e- 8  5.46e-46     24.2 
10 mu_1       0.1     0.0719     6.63e-26  5.25e-79      6.27
11 mu_1       0.2     1.03       6.03e-14  5.07e-53     51.9 
12 mu_1       0.3     0.941      2.27e- 7  6.21e-38     18.8 
13 mu_1       0.4     0.975      6.61e- 4  2.48e-27     11.1 
14 mu_1       0.5     0.983      4.60e- 2  3.23e-19      9.03
15 mu_1       0.6     1.07       2.83e- 1  1.02e-12     11.9 
16 mu_1       0.7     1.33       3.26e- 1  1.89e-17     11.4 
17 mu_1       0.8     1.48       2.79e- 2  6.55e-28     23.5 
18 mu_1       0.9     1.12       3.32e- 8  1.32e-46     24.3 
19 mu_0       0.1     0.0336     3.31e-27  2.65e-81      3.00
20 mu_0       0.2     0.951      1.04e-14  5.76e-55     46.9 
21 mu_0       0.3     0.933      4.58e- 8  1.21e-39     17.9 
22 mu_0       0.4     0.960      1.98e- 4  7.52e-29     12.7 
23 mu_0       0.5     0.996      3.53e- 2  1.47e-20      7.00
24 mu_0       0.6     1.04       2.87e- 1  6.98e-14     13.8 
25 mu_0       0.7     1.28       4.10e- 1  1.59e-16      7.75
26 mu_0       0.8     1.56       5.57e- 2  9.47e-27     27.4 
27 mu_0       0.9     1.10       1.51e- 7  4.28e-45     25.3 
[1] "Total run time was 405.175 seconds"
