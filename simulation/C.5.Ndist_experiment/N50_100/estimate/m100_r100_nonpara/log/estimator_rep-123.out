
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7491"
[1] "cluster size dist'n: "

 50  52  53  54  56  57  58  59  60  61  63  64  65  66  68  69  70  71  72  74 
  7   2   1   2   1   3   4   2   3   1   2   1   2   1   3   4   3   2   3   3 
 76  77  78  79  80  81  83  84  85  86  87  89  90  91  92  93  94  96  97  99 
  3   3   3   1   3   2   1   1   2   2   1   4   1   2   3   2   4   6   3   1 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03955 0.36662 0.63665 1.00000 7.45260 
[1] "event indicator table: "

   0    1 
4465 3026 
[1] "treatment indicator table: "

   0    1 
2697 4794 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3698
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3793
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 453.122 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.266 0.136 
 2 mu         0.1   0.2 0.338 0.136 
 3 mu         0.1   0.3 0.345 0.179 
 4 mu         0.1   0.4 0.390 0.156 
 5 mu         0.1   0.5 0.496 0.129 
 6 mu         0.2   0.1 0.282 0.112 
 7 mu         0.2   0.2 0.351 0.106 
 8 mu         0.2   0.3 0.358 0.149 
 9 mu         0.2   0.4 0.410 0.120 
10 mu         0.2   0.5 0.508 0.0750
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.865       0.0843 0.000000474     16.1 
 2 mu         0.2      0.896       0.705  0.0303           3.12
 3 mu         0.3      0.945       0.924  0.253            2.12
 4 mu         0.4      1.01        0.981  0.329            2.39
 5 mu         0.5      1.00        0.985  0.616            1.52
 6 mu         0.6      0.979       0.978  0.602            1.44
 7 mu         0.7      0.999       1.02   0.653            1.44
 8 mu         0.8      0.994       1.02   0.559            1.48
 9 mu         0.9      0.987       0.972  0.213            2.20
10 mu_1       0.1      0.945       0.159  0.00000144      14.4 
11 mu_1       0.2      0.890       0.724  0.0463           3.31
12 mu_1       0.3      0.954       0.949  0.266            2.07
13 mu_1       0.4      1.02        0.981  0.327            2.36
14 mu_1       0.5      1.00        0.982  0.655            1.52
15 mu_1       0.6      0.979       0.976  0.601            1.43
16 mu_1       0.7      0.999       1.02   0.662            1.44
17 mu_1       0.8      0.994       1.03   0.555            1.50
18 mu_1       0.9      0.987       0.966  0.210            2.22
19 mu_0       0.1      0.856       0.0759 0.000000368     16.3 
20 mu_0       0.2      0.897       0.705  0.0262           3.07
21 mu_0       0.3      0.941       0.912  0.247            2.14
22 mu_0       0.4      1.01        0.993  0.330            2.42
23 mu_0       0.5      1.00        0.985  0.572            1.57
24 mu_0       0.6      0.980       0.970  0.604            1.45
25 mu_0       0.7      0.997       1.01   0.631            1.44
26 mu_0       0.8      0.995       1.02   0.551            1.41
27 mu_0       0.9      0.987       0.972  0.191            2.01
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      7.66      1.03e-28  1.89e-72    741.  
 2 mu         0.2      2.03      1.10e-15  4.51e-47    118.  
 3 mu         0.3      1.08      8.96e- 9  1.65e-32     33.6 
 4 mu         0.4      0.947     1.92e- 4  1.97e-22     16.8 
 5 mu         0.5      0.828     7.22e- 3  6.85e-15      6.41
 6 mu         0.6      0.968     1.80e- 1  8.17e-10      8.69
 7 mu         0.7      1.45      4.75e- 1  4.22e-15     16.4 
 8 mu         0.8      1.72      1.16e- 1  6.84e-24     17.4 
 9 mu         0.9      1.23      1.64e- 6  1.11e-41     25.6 
10 mu_1       0.1      7.82      7.22e-28  1.70e-71    741.  
11 mu_1       0.2      1.42      3.69e-15  2.02e-46     59.2 
12 mu_1       0.3      1.08      2.01e- 8  4.94e-32     35.7 
13 mu_1       0.4      0.920     3.19e- 4  4.40e-22     15.1 
14 mu_1       0.5      0.838     8.34e- 3  1.23e-14      6.11
15 mu_1       0.6      0.975     1.89e- 1  1.36e-10      8.60
16 mu_1       0.7      1.49      4.49e- 1  6.02e-16     17.1 
17 mu_1       0.8      1.70      9.60e- 2  2.29e-24     17.6 
18 mu_1       0.9      1.21      1.27e- 6  3.31e-42     26.1 
19 mu_0       0.1      7.64      2.93e-29  2.19e-73    741.  
20 mu_0       0.2      2.19      4.48e-16  5.87e-48    133.  
21 mu_0       0.3      1.08      4.19e- 9  2.46e-33     32.7 
22 mu_0       0.4      0.964     1.08e- 4  3.41e-23     17.9 
23 mu_0       0.5      0.818     4.47e- 3  1.43e-15      6.70
24 mu_0       0.6      0.958     1.10e- 1  1.24e- 9      8.83
25 mu_0       0.7      1.37      3.84e- 1  1.26e-14     14.7 
26 mu_0       0.8      1.78      1.61e- 1  2.50e-23     16.4 
27 mu_0       0.9      1.36      4.93e- 6  8.15e-41     21.1 
[1] "Total run time was 458.213 seconds"
