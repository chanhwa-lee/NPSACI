
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7252"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  4   4   1   4   1   6   5   1   3   2   3   1   3   1   3   3   1   1   2   3 
 74  75  76  77  78  79  80  81  82  83  84  85  86  88  90  91  92  93  95  96 
  2   4   1   1   2   2   2   2   2   1   2   1   2   3   4   2   4   3   2   1 
 97  98  99 100 
  1   1   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04105 0.36993 0.62533 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4289 2963 
[1] "treatment indicator table: "

   0    1 
2725 4527 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3674
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3578
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 413.975 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.372 0.0411
 2 mu         0.1   0.2 0.464 0.0714
 3 mu         0.1   0.3 0.500 0.0650
 4 mu         0.1   0.4 0.564 0.0825
 5 mu         0.1   0.5 0.579 0.0727
 6 mu         0.2   0.1 0.412 0.0484
 7 mu         0.2   0.2 0.505 0.0594
 8 mu         0.2   0.3 0.537 0.0498
 9 mu         0.2   0.4 0.597 0.0661
10 mu         0.2   0.5 0.616 0.0539
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.963        0.706   0.00186      5.86
 2 mu         0.2      1.02         0.943   0.250        2.76
 3 mu         0.3      0.946        0.927   0.330        2.51
 4 mu         0.4      0.973        0.990   0.498        1.59
 5 mu         0.5      1.02         1.03    0.624        1.63
 6 mu         0.6      1.04         1.03    0.652        1.55
 7 mu         0.7      1.01         0.997   0.671        1.45
 8 mu         0.8      1.01         1.01    0.647        1.71
 9 mu         0.9      0.988        0.958   0.302        1.67
10 mu_1       0.1      0.993        0.663   0.00406      4.35
11 mu_1       0.2      1.01         0.967   0.252        2.69
12 mu_1       0.3      0.943        0.938   0.361        2.55
13 mu_1       0.4      0.978        0.994   0.513        1.57
14 mu_1       0.5      1.02         1.02    0.620        1.62
15 mu_1       0.6      1.04         1.03    0.643        1.55
16 mu_1       0.7      1.01         0.987   0.665        1.46
17 mu_1       0.8      1.01         1.02    0.644        1.67
18 mu_1       0.9      0.988        0.953   0.292        1.69
19 mu_0       0.1      0.959        0.713   0.00161      6.03
20 mu_0       0.2      1.02         0.935   0.249        2.78
21 mu_0       0.3      0.947        0.933   0.317        2.50
22 mu_0       0.4      0.970        0.982   0.484        1.64
23 mu_0       0.5      1.02         1.02    0.628        1.65
24 mu_0       0.6      1.04         1.03    0.656        1.56
25 mu_0       0.7      1.01         1.01    0.685        1.44
26 mu_0       0.8      1.01         1.01    0.636        1.84
27 mu_0       0.9      0.989        0.980   0.394        1.70
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.13      1.84e-28  2.00e-76    297.  
 2 mu         0.2      1.92      2.71e-15  4.29e-51     63.4 
 3 mu         0.3      0.878     5.96e- 8  2.04e-36     19.1 
 4 mu         0.4      0.849     3.78e- 4  3.94e-26     11.7 
 5 mu         0.5      1.13      2.59e- 2  2.74e-18      7.68
 6 mu         0.6      1.20      9.89e- 2  7.25e-15     14.3 
 7 mu         0.7      0.888     8.29e- 2  2.34e-23      5.70
 8 mu         0.8      0.931     5.19e- 3  7.18e-36      6.77
 9 mu         0.9      1.12      2.09e- 8  5.56e-58     16.1 
10 mu_1       0.1      2.61      1.16e-27  1.89e-75    233.  
11 mu_1       0.2      1.75      8.00e-15  2.03e-50     62.7 
12 mu_1       0.3      0.878     1.20e- 7  6.44e-36     19.8 
13 mu_1       0.4      0.856     1.98e- 4  9.31e-26     10.8 
14 mu_1       0.5      1.16      3.21e- 2  5.17e-18      8.26
15 mu_1       0.6      1.17      9.58e- 2  1.99e-15     13.5 
16 mu_1       0.7      0.901     8.69e- 2  5.51e-24      5.83
17 mu_1       0.8      0.928     3.93e- 3  1.48e-36      6.66
18 mu_1       0.9      1.12      1.38e- 8  1.02e-58     16.7 
19 mu_0       0.1      3.19      6.58e-29  1.23e-77    304.  
20 mu_0       0.2      1.97      1.22e-15  2.98e-52     63.6 
21 mu_0       0.3      0.878     2.66e- 8  1.62e-37     18.8 
22 mu_0       0.4      0.843     2.26e- 4  3.65e-27     12.3 
23 mu_0       0.5      1.11      1.77e- 2  3.04e-19      8.23
24 mu_0       0.6      1.24      9.01e- 2  1.51e-14     15.3 
25 mu_0       0.7      0.857     1.02e- 1  6.51e-23      5.40
26 mu_0       0.8      0.945     9.18e- 3  3.00e-35      7.18
27 mu_0       0.9      1.07      8.53e- 8  4.64e-57     11.5 
[1] "Total run time was 417.229 seconds"
