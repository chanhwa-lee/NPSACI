
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7601"
[1] "cluster size dist'n: "

50 51 53 55 56 57 59 61 62 63 64 65 66 67 69 70 71 72 74 75 76 77 78 80 81 82 
 3  3  3  3  2  2  3  1  2  1  3  2  1  1  3  3  3  4  2  3  1  6  1  1  3  4 
83 84 85 86 87 88 90 91 92 93 94 96 97 98 99 
 1  2  1  3  3  2  2  1  3  3  2  4  4  2  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02052 0.31942 0.59491 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4449 3152 
[1] "treatment indicator table: "

   0    1 
3049 4552 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3666
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3935
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 360.061 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.438 0.0681
 2 mu         0.1   0.2 0.544 0.0660
 3 mu         0.1   0.3 0.619 0.0638
 4 mu         0.1   0.4 0.711 0.0889
 5 mu         0.1   0.5 0.770 0.0992
 6 mu         0.2   0.1 0.379 0.0460
 7 mu         0.2   0.2 0.465 0.0467
 8 mu         0.2   0.3 0.505 0.0533
 9 mu         0.2   0.4 0.549 0.0597
10 mu         0.2   0.5 0.602 0.0732
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.10         0.853  0.000207      4.93
 2 mu         0.2      0.960        0.935  0.126         2.45
 3 mu         0.3      1.02         0.997  0.412         1.69
 4 mu         0.4      1.05         1.01   0.612         1.68
 5 mu         0.5      1.01         1.03   0.566         1.54
 6 mu         0.6      0.979        0.959  0.681         1.53
 7 mu         0.7      0.973        0.950  0.504         1.73
 8 mu         0.8      1.02         1.00   0.520         1.56
 9 mu         0.9      1.02         0.972  0.211         2.69
10 mu_1       0.1      1.10         0.927  0.000530      5.00
11 mu_1       0.2      0.960        0.923  0.147         2.34
12 mu_1       0.3      1.03         0.996  0.420         1.69
13 mu_1       0.4      1.05         1.03   0.609         1.70
14 mu_1       0.5      1.01         1.02   0.563         1.56
15 mu_1       0.6      0.978        0.961  0.682         1.52
16 mu_1       0.7      0.973        0.959  0.497         1.73
17 mu_1       0.8      1.02         1.01   0.513         1.56
18 mu_1       0.9      1.02         0.972  0.203         2.73
19 mu_0       0.1      1.10         0.842  0.000171      4.93
20 mu_0       0.2      0.960        0.936  0.121         2.52
21 mu_0       0.3      1.02         0.993  0.408         1.70
22 mu_0       0.4      1.05         1.01   0.613         1.68
23 mu_0       0.5      1.02         1.02   0.555         1.51
24 mu_0       0.6      0.980        0.957  0.662         1.54
25 mu_0       0.7      0.972        0.960  0.518         1.73
26 mu_0       0.8      1.01         0.995  0.465         1.60
27 mu_0       0.9      1.02         0.981  0.287         2.46
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.21      2.16e-27  1.67e-67    235.  
 2 mu         0.2      0.711     1.42e-14  1.25e-45     19.6 
 3 mu         0.3      0.552     7.66e- 8  6.84e-33     12.5 
 4 mu         0.4      0.763     8.82e- 4  6.63e-24     12.0 
 5 mu         0.5      1.27      5.74e- 2  3.89e-17     14.4 
 6 mu         0.6      1.28      1.65e- 1  2.21e-25     10.5 
 7 mu         0.7      1.00      1.52e- 1  3.17e-36     16.6 
 8 mu         0.8      1.36      1.63e- 3  1.00e-51     16.3 
 9 mu         0.9      0.876     5.63e-10  1.64e-78     15.0 
10 mu_1       0.1      2.57      1.32e-26  1.63e-66    147.  
11 mu_1       0.2      0.684     4.41e-14  6.07e-45     23.1 
12 mu_1       0.3      0.542     1.59e- 7  2.22e-32      9.82
13 mu_1       0.4      0.806     1.41e- 3  1.61e-23     12.5 
14 mu_1       0.5      1.29      7.18e- 2  4.87e-18     14.6 
15 mu_1       0.6      1.26      1.88e- 1  2.30e-26      9.89
16 mu_1       0.7      1.00      1.69e- 1  2.83e-37     16.6 
17 mu_1       0.8      1.36      1.20e- 3  7.82e-53     16.4 
18 mu_1       0.9      0.878     3.53e-10  1.14e-79     14.7 
19 mu_0       0.1      3.28      9.35e-28  4.95e-69    245.  
20 mu_0       0.2      0.718     6.61e-15  4.16e-47     18.7 
21 mu_0       0.3      0.557     4.11e- 8  2.60e-34     13.6 
22 mu_0       0.4      0.734     5.42e- 4  2.95e-25     11.6 
23 mu_0       0.5      1.25      6.68e- 2  2.91e-18     14.2 
24 mu_0       0.6      1.30      1.36e- 1  5.17e-25     11.4 
25 mu_0       0.7      0.988     1.56e- 1  9.90e-36     16.6 
26 mu_0       0.8      1.34      2.53e- 3  4.69e-51     15.9 
27 mu_0       0.9      0.856     2.45e- 9  1.54e-77     17.6 
[1] "Total run time was 363.717 seconds"
