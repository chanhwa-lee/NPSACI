
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7357"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  65  66  67  68  69  70  71 
  2   4   2   5   4   3   3   4   1   1   1   2   1   4   1   4   2   2   1   3 
 72  73  76  77  78  80  82  83  84  86  87  88  89  90  91  92  93  94  95  96 
  2   2   2   4   1   1   3   2   2   2   1   2   2   1   3   2   3   1   1   3 
 97  98  99 100 
  4   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04566 0.36397 0.63046 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4413 2944 
[1] "treatment indicator table: "

   0    1 
2726 4631 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3651
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3706
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 410.222 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.488 0.198 
 2 mu         0.1   0.2 0.625 0.239 
 3 mu         0.1   0.3 0.723 0.266 
 4 mu         0.1   0.4 0.764 0.293 
 5 mu         0.1   0.5 0.806 0.313 
 6 mu         0.2   0.1 0.352 0.0687
 7 mu         0.2   0.2 0.464 0.0770
 8 mu         0.2   0.3 0.548 0.0851
 9 mu         0.2   0.4 0.576 0.0851
10 mu         0.2   0.5 0.612 0.0802
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.23        0.0485 0.00000000399     33.8 
 2 mu         0.2      1.03        0.765  0.00143            5.93
 3 mu         0.3      1.01        0.910  0.184              3.31
 4 mu         0.4      0.997       0.985  0.367              1.68
 5 mu         0.5      0.988       0.967  0.609              1.97
 6 mu         0.6      0.969       0.979  0.595              1.34
 7 mu         0.7      0.976       0.983  0.539              1.38
 8 mu         0.8      1.02        1.01   0.436              1.59
 9 mu         0.9      1.03        1.03   0.0572             2.25
10 mu_1       0.1      1.18        0.0934 0.0000000143      34.9 
11 mu_1       0.2      1.01        0.774  0.00262            5.62
12 mu_1       0.3      1.01        0.904  0.233              3.05
13 mu_1       0.4      0.998       0.998  0.367              1.54
14 mu_1       0.5      0.985       0.965  0.634              2.00
15 mu_1       0.6      0.970       0.972  0.609              1.35
16 mu_1       0.7      0.976       0.984  0.541              1.37
17 mu_1       0.8      1.02        1.02   0.439              1.60
18 mu_1       0.9      1.03        1.02   0.0518             2.23
19 mu_0       0.1      1.24        0.0435 0.00000000284     33.6 
20 mu_0       0.2      1.04        0.774  0.00114            6.01
21 mu_0       0.3      1.01        0.919  0.164              3.42
22 mu_0       0.4      0.996       0.982  0.367              1.80
23 mu_0       0.5      0.991       0.971  0.584              1.94
24 mu_0       0.6      0.968       0.975  0.574              1.37
25 mu_0       0.7      0.975       0.974  0.533              1.40
26 mu_0       0.8      1.01        1.01   0.424              1.56
27 mu_0       0.9      1.05        1.02   0.106              2.42
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0186     2.35e-25  9.87e-70      1.29
 2 mu         0.2     0.989      1.94e-14  1.09e-45     49.9 
 3 mu         0.3     1.67       8.69e- 8  4.54e-33     68.9 
 4 mu         0.4     1.24       5.00e- 4  3.85e-24     39.6 
 5 mu         0.5     1.22       4.72e- 2  3.05e-17     15.2 
 6 mu         0.6     1.08       2.60e- 1  1.22e-11     15.8 
 7 mu         0.7     0.986      3.55e- 1  3.35e-18      7.85
 8 mu         0.8     1.39       1.84e- 2  3.94e-29     36.2 
 9 mu         0.9     1.88       8.17e- 8  1.11e-48     59.7 
10 mu_1       0.1     0.0406     1.64e-24  8.57e-69      2.86
11 mu_1       0.2     1.11       6.62e-14  5.36e-45     52.2 
12 mu_1       0.3     1.67       1.91e- 7  1.49e-32     68.1 
13 mu_1       0.4     1.23       8.52e- 4  9.49e-24     37.6 
14 mu_1       0.5     1.20       6.18e- 2  6.01e-17     14.7 
15 mu_1       0.6     1.09       2.53e- 1  2.01e-11     15.6 
16 mu_1       0.7     0.984      3.50e- 1  1.00e-18      7.68
17 mu_1       0.8     1.43       1.51e- 2  1.03e-29     38.6 
18 mu_1       0.9     1.87       6.04e- 8  2.59e-49     61.4 
19 mu_0       0.1     0.0161     7.89e-26  1.44e-70      1.11
20 mu_0       0.2     0.959      7.72e-15  1.86e-47     49.3 
21 mu_0       0.3     1.67       4.23e- 8  8.88e-35     69.2 
22 mu_0       0.4     1.24       2.65e- 4  8.79e-26     41.0 
23 mu_0       0.5     1.25       3.63e- 2  8.34e-19     15.6 
24 mu_0       0.6     1.07       2.75e- 1  4.19e-13     16.0 
25 mu_0       0.7     0.991      3.76e- 1  8.84e-18      8.23
26 mu_0       0.8     1.25       3.17e- 2  1.56e-28     26.4 
27 mu_0       0.9     2.01       2.74e- 7  8.79e-48     50.4 
[1] "Total run time was 414.009 seconds"
