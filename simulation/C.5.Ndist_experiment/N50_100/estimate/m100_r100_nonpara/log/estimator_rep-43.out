
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7257"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70 
  3   2   5   3   2   1   1   5   1   2   1   3   3   1   4   2   1   3   1   4 
 71  72  73  74  75  76  77  79  80  81  82  83  84  85  86  87  88  89  90  91 
  2   2   3   1   2   2   2   2   1   3   2   2   1   3   2   3   2   2   2   1 
 94  95  96  97  98  99 100 
  2   3   1   1   1   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05169 0.38928 0.65232 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4207 3050 
[1] "treatment indicator table: "

   0    1 
2657 4600 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3499
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3758
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 487.739 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.437 0.135 
 2 mu         0.1   0.2 0.554 0.158 
 3 mu         0.1   0.3 0.620 0.179 
 4 mu         0.1   0.4 0.669 0.188 
 5 mu         0.1   0.5 0.698 0.197 
 6 mu         0.2   0.1 0.376 0.0827
 7 mu         0.2   0.2 0.478 0.0880
 8 mu         0.2   0.3 0.542 0.103 
 9 mu         0.2   0.4 0.585 0.0930
10 mu         0.2   0.5 0.611 0.0910
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.09        0.0577  2.18e-11     26.5 
 2 mu         0.2      0.978       0.796   6.74e- 5      5.82
 3 mu         0.3      0.987       0.936   2.88e- 2      5.27
 4 mu         0.4      1.02        1.02    3.27e- 1      3.32
 5 mu         0.5      0.998       0.994   4.65e- 1      1.56
 6 mu         0.6      0.988       0.970   6.65e- 1      1.38
 7 mu         0.7      1.02        0.982   6.12e- 1      1.63
 8 mu         0.8      0.996       0.979   6.34e- 1      1.78
 9 mu         0.9      1.05        1.02    9.86e- 3      2.20
10 mu_1       0.1      1.12        0.118   8.09e-11     25.1 
11 mu_1       0.2      0.985       0.794   1.49e- 4      5.04
12 mu_1       0.3      0.983       0.947   4.31e- 2      4.48
13 mu_1       0.4      1.02        1.01    3.01e- 1      3.25
14 mu_1       0.5      0.996       0.982   4.89e- 1      1.54
15 mu_1       0.6      0.988       0.972   6.70e- 1      1.39
16 mu_1       0.7      1.02        0.985   5.93e- 1      1.66
17 mu_1       0.8      0.996       0.971   6.34e- 1      1.77
18 mu_1       0.9      1.05        1.02    8.71e- 3      2.21
19 mu_0       0.1      1.08        0.0519  1.52e-11     26.6 
20 mu_0       0.2      0.976       0.819   4.69e- 5      6.06
21 mu_0       0.3      0.989       0.939   2.27e- 2      5.61
22 mu_0       0.4      1.01        1.02    3.45e- 1      3.37
23 mu_0       0.5      1.00        1.00    4.42e- 1      1.57
24 mu_0       0.6      0.988       0.968   6.59e- 1      1.36
25 mu_0       0.7      1.01        0.971   6.45e- 1      1.56
26 mu_0       0.8      0.997       0.991   6.31e- 1      1.79
27 mu_0       0.9      1.05        1.02    2.02e- 2      2.05
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.634     9.97e-28  7.58e-86     52.9 
 2 mu         0.2     10.0       6.58e-15  5.27e-58    561.  
 3 mu         0.3      2.65      4.03e- 8  8.40e-42    131.  
 4 mu         0.4      1.22      1.98e- 4  2.20e-30     31.2 
 5 mu         0.5      0.933     2.07e- 2  1.31e-21     15.4 
 6 mu         0.6      1.24      8.07e- 2  5.13e-16     18.5 
 7 mu         0.7      1.16      4.25e- 1  3.01e-25      8.84
 8 mu         0.8      1.12      7.73e- 2  7.06e-39     10.6 
 9 mu         0.9      1.20      4.71e- 6  5.41e-63     48.1 
10 mu_1       0.1      1.13      6.55e-27  7.34e-85     92.8 
11 mu_1       0.2      9.77      2.09e-14  2.55e-57    492.  
12 mu_1       0.3      2.31      9.06e- 8  2.71e-41    100.  
13 mu_1       0.4      1.19      2.86e- 4  5.33e-30     27.9 
14 mu_1       0.5      0.947     2.34e- 2  2.54e-21     14.6 
15 mu_1       0.6      1.24      1.01e- 1  1.45e-16     18.2 
16 mu_1       0.7      1.16      3.90e- 1  7.31e-26      8.28
17 mu_1       0.8      1.12      8.88e- 2  1.50e-39     10.6 
18 mu_1       0.9      1.21      3.50e- 6  1.02e-63     50.0 
19 mu_0       0.1      0.580     3.79e-28  2.63e-87     48.5 
20 mu_0       0.2     10.1       2.99e-15  2.06e-59    578.  
21 mu_0       0.3      2.80      1.87e- 8  3.75e-43    144.  
22 mu_0       0.4      1.24      1.18e- 4  1.15e-31     33.4 
23 mu_0       0.5      0.919     1.26e- 2  8.20e-23     16.2 
24 mu_0       0.6      1.24      6.09e- 2  1.06e-15     19.0 
25 mu_0       0.7      1.15      3.23e- 1  8.33e-25     10.1 
26 mu_0       0.8      1.16      7.50e- 2  2.93e-38     10.6 
27 mu_0       0.9      1.06      1.56e- 5  4.49e-62     31.0 
[1] "Total run time was 491.155 seconds"
