
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7440"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  68  69  70  71 
  4   2   1   3   1   1   3   5   2   2   4   2   1   3   3   2   1   2   1   3 
 72  73  74  75  76  77  78  79  80  82  83  84  85  86  87  88  89  90  91  92 
  2   2   1   2   1   1   5   2   1   2   1   3   1   2   4   2   1   3   1   1 
 93  94  95  96  97  98  99 100 
  1   2   1   4   2   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03384 0.33255 0.58934 0.98818 6.00000 
[1] "event indicator table: "

   0    1 
4442 2998 
[1] "treatment indicator table: "

   0    1 
2707 4733 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3706
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3734
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 350.297 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.293 0.0500
 2 mu         0.1   0.2 0.342 0.0585
 3 mu         0.1   0.3 0.389 0.0680
 4 mu         0.1   0.4 0.424 0.0704
 5 mu         0.1   0.5 0.482 0.0707
 6 mu         0.2   0.1 0.353 0.0378
 7 mu         0.2   0.2 0.415 0.0298
 8 mu         0.2   0.3 0.466 0.0327
 9 mu         0.2   0.4 0.512 0.0350
10 mu         0.2   0.5 0.564 0.0344
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.870        0.614  0.000531      6.00
 2 mu         0.2      1.02         0.965  0.232         2.51
 3 mu         0.3      1.02         1.05   0.355         1.78
 4 mu         0.4      0.974        0.979  0.469         1.62
 5 mu         0.5      0.994        0.983  0.551         1.51
 6 mu         0.6      1.01         1.00   0.655         1.53
 7 mu         0.7      1.00         0.974  0.638         1.51
 8 mu         0.8      0.973        0.961  0.545         1.48
 9 mu         0.9      0.969        0.971  0.349         1.71
10 mu_1       0.1      0.903        0.744  0.00137       6.41
11 mu_1       0.2      1.03         0.955  0.295         2.61
12 mu_1       0.3      1.01         1.04   0.367         1.67
13 mu_1       0.4      0.974        0.986  0.462         1.63
14 mu_1       0.5      0.996        0.980  0.557         1.52
15 mu_1       0.6      1.01         1.00   0.639         1.51
16 mu_1       0.7      1.00         0.976  0.629         1.53
17 mu_1       0.8      0.971        0.957  0.543         1.48
18 mu_1       0.9      0.970        0.976  0.343         1.72
19 mu_0       0.1      0.866        0.613  0.000438      5.96
20 mu_0       0.2      1.02         0.971  0.216         2.48
21 mu_0       0.3      1.02         1.05   0.350         1.83
22 mu_0       0.4      0.974        0.976  0.468         1.62
23 mu_0       0.5      0.992        0.986  0.545         1.49
24 mu_0       0.6      1.01         1.00   0.679         1.56
25 mu_0       0.7      1.00         0.981  0.658         1.49
26 mu_0       0.8      0.977        0.957  0.554         1.47
27 mu_0       0.9      0.965        0.991  0.402         1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00196     4.35e-28  8.07e-75     0.170
 2 mu         0.2    0.276       1.23e-14  1.54e-48    11.0  
 3 mu         0.3    0.911       3.62e- 8  4.89e-35    12.2  
 4 mu         0.4    1.36        3.30e- 4  7.37e-26    26.2  
 5 mu         0.5    1.06        7.34e- 2  9.12e-19    14.3  
 6 mu         0.6    1.21        2.15e- 1  5.28e-13    13.2  
 7 mu         0.7    1.25        2.17e- 1  1.49e-16     9.09 
 8 mu         0.8    1.03        2.74e- 2  7.70e-27     8.17 
 9 mu         0.9    1.42        1.64e- 7  2.20e-45    19.6  
10 mu_1       0.1    0.00455     2.71e-27  7.25e-74     0.391
11 mu_1       0.2    0.343       3.98e-14  6.91e-48    12.6  
12 mu_1       0.3    0.985       7.90e- 8  1.61e-34    11.4  
13 mu_1       0.4    1.35        5.57e- 4  1.82e-25    25.2  
14 mu_1       0.5    1.04        9.64e- 2  1.80e-18    14.3  
15 mu_1       0.6    1.24        1.84e- 1  8.68e-13    13.4  
16 mu_1       0.7    1.25        2.63e- 1  5.00e-17     9.36 
17 mu_1       0.8    1.03        2.08e- 2  2.26e-27     8.19 
18 mu_1       0.9    1.42        1.17e- 7  5.75e-46    19.6  
19 mu_0       0.1    0.00168     1.86e-28  9.06e-76     0.146
20 mu_0       0.2    0.260       5.62e-15  8.67e-50    10.6  
21 mu_0       0.3    0.879       1.79e- 8  9.31e-37    12.5  
22 mu_0       0.4    1.37        1.81e- 4  1.64e-27    26.8  
23 mu_0       0.5    1.08        5.05e- 2  2.43e-20    14.4  
24 mu_0       0.6    1.18        1.80e- 1  1.76e-14    12.9  
25 mu_0       0.7    1.28        1.50e- 1  3.79e-16     8.71 
26 mu_0       0.8    1.04        3.21e- 2  2.94e-26     8.84 
27 mu_0       0.9    1.43        5.92e- 7  1.68e-44    19.8  
[1] "Total run time was 353.954 seconds"
