
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7489"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  64  65  66  67  68  70  71  72  73 
  3   3   3   7   3   5   1   3   1   2   1   4   1   1   3   2   2   1   1   1 
 74  77  79  80  81  82  83  84  85  86  87  88  89  90  91  92  94  96  97  98 
  3   3   1   3   2   1   1   1   1   1   2   2   3   1   2   3   2   1   7   3 
 99 100 
  5   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04747 0.36640 0.63320 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4411 3078 
[1] "treatment indicator table: "

   0    1 
2847 4642 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3717
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3772
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 421.997 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.426 0.0800
 2 mu         0.1   0.2 0.493 0.0968
 3 mu         0.1   0.3 0.560 0.111 
 4 mu         0.1   0.4 0.604 0.121 
 5 mu         0.1   0.5 0.625 0.129 
 6 mu         0.2   0.1 0.313 0.0335
 7 mu         0.2   0.2 0.360 0.0322
 8 mu         0.2   0.3 0.411 0.0345
 9 mu         0.2   0.4 0.444 0.0332
10 mu         0.2   0.5 0.468 0.0359
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.19         0.148 0.000000174     11.4 
 2 mu         0.2      0.903        0.776 0.0174           3.27
 3 mu         0.3      0.975        0.934 0.254            2.10
 4 mu         0.4      1.02         0.993 0.399            1.82
 5 mu         0.5      1.00         0.988 0.540            2.07
 6 mu         0.6      0.978        0.964 0.534            2.03
 7 mu         0.7      0.979        0.972 0.482            1.80
 8 mu         0.8      1.03         1.01  0.548            1.67
 9 mu         0.9      1.12         1.04  0.0673           2.59
10 mu_1       0.1      1.27         0.241 0.000000512     10.7 
11 mu_1       0.2      0.902        0.829 0.0269           3.15
12 mu_1       0.3      0.982        0.945 0.273            2.25
13 mu_1       0.4      1.02         0.981 0.417            1.75
14 mu_1       0.5      1.00         0.981 0.520            2.04
15 mu_1       0.6      0.977        0.958 0.536            2.06
16 mu_1       0.7      0.980        0.976 0.488            1.80
17 mu_1       0.8      1.03         1.03  0.560            1.67
18 mu_1       0.9      1.12         1.05  0.0614           2.58
19 mu_0       0.1      1.18         0.139 0.000000136     11.6 
20 mu_0       0.2      0.903        0.760 0.0150           3.30
21 mu_0       0.3      0.972        0.938 0.246            2.03
22 mu_0       0.4      1.02         1.00  0.387            1.88
23 mu_0       0.5      1.01         0.975 0.560            2.11
24 mu_0       0.6      0.979        0.971 0.520            2.00
25 mu_0       0.7      0.977        0.957 0.469            1.80
26 mu_0       0.8      1.02         0.989 0.494            1.67
27 mu_0       0.9      1.10         1.07  0.120            2.71
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00390     2.26e-22  1.99e-76     0.386
 2 mu         0.2    0.922       1.25e-11  4.79e-50    70.0  
 3 mu         0.3    2.33        4.37e- 6  7.74e-35    57.9  
 4 mu         0.4    3.42        6.20e- 3  2.97e-24   104.   
 5 mu         0.5    1.85        2.01e- 1  2.91e-16    38.3  
 6 mu         0.6    0.968       2.72e- 1  5.44e-10     7.10 
 7 mu         0.7    1.09        2.23e- 1  2.96e-15    12.3  
 8 mu         0.8    1.46        7.95e- 3  2.61e-26    31.9  
 9 mu         0.9    3.03        7.43e- 8  1.50e-46    49.6  
10 mu_1       0.1    0.00947     1.37e-21  1.82e-75     0.935
11 mu_1       0.2    1.16        3.82e-11  2.20e-49    84.8  
12 mu_1       0.3    2.33        8.69e- 6  2.37e-34    46.8  
13 mu_1       0.4    3.49        1.00e- 2  6.81e-24   110.   
14 mu_1       0.5    1.72        2.24e- 1  5.34e-16    32.3  
15 mu_1       0.6    0.966       2.44e- 1  8.32e-10     7.42 
16 mu_1       0.7    1.10        2.02e- 1  1.18e-15    13.5  
17 mu_1       0.8    1.45        5.84e- 3  9.13e-27    31.8  
18 mu_1       0.9    3.10        4.78e- 8  4.65e-47    51.7  
19 mu_0       0.1    0.00328     9.87e-23  1.82e-77     0.325
20 mu_0       0.2    0.861       5.55e-12  4.94e-51    66.3  
21 mu_0       0.3    2.34        2.52e- 6  9.12e-36    62.7  
22 mu_0       0.4    3.38        3.64e- 3  4.08e-25   100.   
23 mu_0       0.5    1.98        1.42e- 1  4.80e-17    44.2  
24 mu_0       0.6    0.970       2.85e- 1  1.12e-10     6.64 
25 mu_0       0.7    1.07        1.68e- 1  7.11e-15     9.39 
26 mu_0       0.8    1.47        1.53e- 2  9.39e-26    32.5  
27 mu_0       0.9    2.37        3.04e- 7  1.08e-45    32.2  
[1] "Total run time was 425.463 seconds"
