
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7331"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  63  64  65  66  67  68  69  70  71 
  3   2   4   3   1   2   2   2   4   3   2   4   1   2   2   3   2   3   2   1 
 73  74  75  76  77  78  79  80  81  82  83  84  86  87  88  89  90  92  93  94 
  1   1   1   8   2   2   5   2   1   2   2   2   1   1   2   1   3   1   1   1 
 95  96  97  98 100 
  1   1   1   2   7 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04462 0.37729 0.64276 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4463 2868 
[1] "treatment indicator table: "

   0    1 
2591 4740 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3693
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 50"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3638
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 352.982 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.313 0.0830
 2 mu         0.1   0.2 0.406 0.112 
 3 mu         0.1   0.3 0.401 0.0949
 4 mu         0.1   0.4 0.383 0.0830
 5 mu         0.1   0.5 0.408 0.0864
 6 mu         0.2   0.1 0.376 0.0584
 7 mu         0.2   0.2 0.491 0.0844
 8 mu         0.2   0.3 0.519 0.0708
 9 mu         0.2   0.4 0.523 0.0597
10 mu         0.2   0.5 0.550 0.0606
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.644       0.0645  2.42e-13      7.76
 2 mu         0.2      0.947       0.852   1.16e- 5      4.35
 3 mu         0.3      0.979       0.964   2.45e- 2      1.91
 4 mu         0.4      1.02        0.975   5.04e- 1      2.23
 5 mu         0.5      0.986       0.973   5.97e- 1      1.38
 6 mu         0.6      1.02        1.01    6.21e- 1      1.49
 7 mu         0.7      0.994       0.978   5.91e- 1      1.49
 8 mu         0.8      0.963       0.949   5.72e- 1      1.46
 9 mu         0.9      0.995       0.958   4.47e- 1      1.72
10 mu_1       0.1      0.752       0.110   1.03e-12     10.3 
11 mu_1       0.2      0.942       0.910   2.47e- 5      3.09
12 mu_1       0.3      0.985       0.966   3.54e- 2      1.86
13 mu_1       0.4      1.02        0.957   5.26e- 1      2.15
14 mu_1       0.5      0.987       0.976   5.70e- 1      1.39
15 mu_1       0.6      1.02        1.00    6.17e- 1      1.49
16 mu_1       0.7      0.992       0.978   5.79e- 1      1.50
17 mu_1       0.8      0.963       0.945   5.71e- 1      1.47
18 mu_1       0.9      0.996       0.960   4.34e- 1      1.72
19 mu_0       0.1      0.632       0.0594  1.55e-13      7.47
20 mu_0       0.2      0.948       0.822   8.29e- 6      4.72
21 mu_0       0.3      0.976       0.960   1.98e- 2      2.02
22 mu_0       0.4      1.02        0.983   4.90e- 1      2.29
23 mu_0       0.5      0.985       0.981   5.92e- 1      1.38
24 mu_0       0.6      1.02        1.01    6.27e- 1      1.48
25 mu_0       0.7      0.997       0.979   6.17e- 1      1.45
26 mu_0       0.8      0.965       0.956   5.76e- 1      1.42
27 mu_0       0.9      0.985       0.958   3.81e- 1      1.70
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.05      3.93e-32  3.44e-72    199.  
 2 mu         0.2      1.30      2.20e-17  4.61e-47     63.6 
 3 mu         0.3      1.31      1.04e- 9  1.29e-32     35.9 
 4 mu         0.4      0.888     8.26e- 5  1.34e-22     16.6 
 5 mu         0.5      1.07      2.08e- 2  3.32e-15     10.8 
 6 mu         0.6      1.18      1.51e- 1  6.83e-10     12.9 
 7 mu         0.7      0.997     3.33e- 1  7.93e-15      5.81
 8 mu         0.8      0.994     3.71e- 2  3.41e-24      8.23
 9 mu         0.9      1.07      1.23e- 7  2.77e-42     12.7 
10 mu_1       0.1      2.45      2.39e-31  3.11e-71    234.  
11 mu_1       0.2      1.15      6.89e-17  2.08e-46     37.4 
12 mu_1       0.3      1.26      2.26e- 9  3.88e-32     31.7 
13 mu_1       0.4      0.888     1.42e- 4  3.03e-22     15.3 
14 mu_1       0.5      1.07      2.84e- 2  6.28e-15     10.8 
15 mu_1       0.6      1.19      1.27e- 1  2.59e-10     13.6 
16 mu_1       0.7      0.979     3.72e- 1  1.33e-15      5.50
17 mu_1       0.8      1.01      3.10e- 2  1.13e-24      8.72
18 mu_1       0.9      1.07      8.65e- 8  8.14e-43     13.4 
19 mu_0       0.1      2.01      1.71e-32  3.66e-73    195.  
20 mu_0       0.2      1.33      1.03e-17  5.52e-48     70.2 
21 mu_0       0.3      1.33      5.22e-10  1.76e-33     37.7 
22 mu_0       0.4      0.888     4.27e- 5  2.14e-23     17.5 
23 mu_0       0.5      1.08      1.41e- 2  3.49e-16     10.9 
24 mu_0       0.6      1.16      2.03e- 1  8.98e-11     11.9 
25 mu_0       0.7      1.04      2.01e- 1  2.33e-14      7.11
26 mu_0       0.8      0.938     5.57e- 2  1.25e-23      6.55
27 mu_0       0.9      1.10      4.66e- 7  2.04e-41     11.0 
[1] "Total run time was 356.305 seconds"
