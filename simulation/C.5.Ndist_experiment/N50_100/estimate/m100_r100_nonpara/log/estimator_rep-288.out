
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7637"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  64  65  66  68  70  71  72  73 
  2   2   2   1   2   3   1   1   2   2   1   3   2   1   1   3   6   1   3   4 
 74  75  76  77  78  79  82  83  84  85  87  88  89  90  91  92  93  95  96  97 
  1   4   3   1   2   3   2   3   4   1   6   2   2   5   2   4   2   2   1   2 
 99 100 
  3   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02324 0.30726 0.57483 0.97946 6.65741 
[1] "event indicator table: "

   0    1 
4476 3161 
[1] "treatment indicator table: "

   0    1 
3145 4492 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3693
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3944
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 409.068 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.457 0.104 
 2 mu         0.1   0.2 0.504 0.0698
 3 mu         0.1   0.3 0.554 0.0669
 4 mu         0.1   0.4 0.595 0.0672
 5 mu         0.1   0.5 0.636 0.0721
 6 mu         0.2   0.1 0.434 0.0895
 7 mu         0.2   0.2 0.479 0.0519
 8 mu         0.2   0.3 0.536 0.0461
 9 mu         0.2   0.4 0.585 0.0422
10 mu         0.2   0.5 0.626 0.0462
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.930        0.695   0.00151      4.29
 2 mu         0.2      1.01         0.984   0.177        2.99
 3 mu         0.3      1.01         1.01    0.436        1.65
 4 mu         0.4      1.00         1.00    0.583        1.60
 5 mu         0.5      0.997        0.969   0.626        1.61
 6 mu         0.6      0.998        0.970   0.707        1.46
 7 mu         0.7      0.999        0.967   0.656        1.42
 8 mu         0.8      0.995        0.971   0.507        1.66
 9 mu         0.9      0.970        0.940   0.110        2.03
10 mu_1       0.1      0.897        0.730   0.00348      4.16
11 mu_1       0.2      1.02         0.991   0.222        3.08
12 mu_1       0.3      1.01         1.02    0.460        1.68
13 mu_1       0.4      1.00         1.01    0.604        1.57
14 mu_1       0.5      0.997        0.968   0.631        1.63
15 mu_1       0.6      0.998        0.975   0.706        1.45
16 mu_1       0.7      1.00         0.979   0.655        1.40
17 mu_1       0.8      0.994        0.981   0.496        1.65
18 mu_1       0.9      0.971        0.940   0.104        2.05
19 mu_0       0.1      0.934        0.680   0.00129      4.31
20 mu_0       0.2      1.01         0.988   0.166        2.96
21 mu_0       0.3      1.01         1.01    0.425        1.67
22 mu_0       0.4      1.00         1.00    0.568        1.61
23 mu_0       0.5      0.997        0.968   0.622        1.59
24 mu_0       0.6      0.999        0.968   0.708        1.49
25 mu_0       0.7      0.998        0.965   0.660        1.47
26 mu_0       0.8      0.997        0.963   0.553        1.68
27 mu_0       0.9      0.964        0.911   0.168        1.99
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.127     7.29e-23  1.13e-78     10.2 
 2 mu         0.2      0.733     6.65e-12  1.09e-51     24.6 
 3 mu         0.3      1.02      2.38e- 6  3.96e-36     18.4 
 4 mu         0.4      1.41      4.61e- 3  2.70e-25     12.8 
 5 mu         0.5      0.991     7.05e- 2  4.14e-17      8.06
 6 mu         0.6      0.875     7.13e- 2  6.65e-14      6.50
 7 mu         0.7      1.07      1.01e- 1  1.18e-21      7.59
 8 mu         0.8      1.32      1.95e- 3  4.75e-33     17.8 
 9 mu         0.9      1.08      2.01e-10  1.65e-53     18.0 
10 mu_1       0.1      0.208     3.77e-22  1.04e-77     16.1 
11 mu_1       0.2      0.701     2.13e-11  5.01e-51     24.0 
12 mu_1       0.3      1.11      4.84e- 6  1.21e-35     18.3 
13 mu_1       0.4      1.40      3.00e- 3  6.21e-25     12.0 
14 mu_1       0.5      0.961     6.84e- 2  7.61e-17      8.54
15 mu_1       0.6      0.889     6.36e- 2  1.76e-14      6.80
16 mu_1       0.7      1.07      9.11e- 2  2.68e-22      7.35
17 mu_1       0.8      1.33      1.53e- 3  9.40e-34     18.8 
18 mu_1       0.9      1.08      1.31e-10  3.62e-54     18.4 
19 mu_0       0.1      0.118     3.74e-23  1.01e-79      9.52
20 mu_0       0.2      0.741     2.99e-12  1.10e-52     25.9 
21 mu_0       0.3      0.984     1.32e- 6  4.57e-37     18.4 
22 mu_0       0.4      1.42      3.71e- 3  3.64e-26     13.3 
23 mu_0       0.5      1.02      8.04e- 2  6.69e-18      7.59
24 mu_0       0.6      0.853     6.60e- 2  1.40e-13      6.03
25 mu_0       0.7      1.08      9.08e- 2  3.32e-21      8.15
26 mu_0       0.8      1.28      3.66e- 3  2.00e-32     14.0 
27 mu_0       0.9      1.11      8.36e-10  1.32e-52     18.8 
[1] "Total run time was 413.481 seconds"
