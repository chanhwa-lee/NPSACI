
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7502"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  59  60  61  62  64  65  66  67  68  69  70  71  73 
  5   1   2   2   4   2   2   1   2   1   1   2   2   2   5   2   1   3   3   2 
 74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  90  91  93  95  96 
  3   1   3   1   4   4   2   5   1   1   1   1   3   3   5   3   3   1   2   1 
 97  98  99 100 
  1   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02447 0.32321 0.58523 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4452 3050 
[1] "treatment indicator table: "

   0    1 
2820 4682 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3702
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3800
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 346.181 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.471 0.0703
 2 mu         0.1   0.2 0.541 0.0593
 3 mu         0.1   0.3 0.570 0.0523
 4 mu         0.1   0.4 0.620 0.0603
 5 mu         0.1   0.5 0.659 0.0599
 6 mu         0.2   0.1 0.423 0.0482
 7 mu         0.2   0.2 0.491 0.0374
 8 mu         0.2   0.3 0.521 0.0290
 9 mu         0.2   0.4 0.565 0.0332
10 mu         0.2   0.5 0.610 0.0353
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.986        0.840 0.0000150      4.86
 2 mu         0.2      0.950        0.975 0.138          1.83
 3 mu         0.3      0.991        0.979 0.344          1.76
 4 mu         0.4      1.01         0.996 0.572          1.61
 5 mu         0.5      1.02         0.992 0.676          1.60
 6 mu         0.6      0.984        0.990 0.516          1.37
 7 mu         0.7      0.988        0.987 0.647          1.37
 8 mu         0.8      0.987        0.983 0.523          1.57
 9 mu         0.9      0.983        0.956 0.149          2.12
10 mu_1       0.1      0.996        0.882 0.0000416      4.10
11 mu_1       0.2      0.949        0.975 0.131          1.79
12 mu_1       0.3      0.995        0.984 0.360          1.73
13 mu_1       0.4      1.01         0.993 0.617          1.56
14 mu_1       0.5      1.01         0.982 0.678          1.63
15 mu_1       0.6      0.983        0.982 0.516          1.38
16 mu_1       0.7      0.988        0.987 0.637          1.39
17 mu_1       0.8      0.987        0.988 0.506          1.57
18 mu_1       0.9      0.984        0.963 0.145          2.11
19 mu_0       0.1      0.985        0.813 0.0000120      4.94
20 mu_0       0.2      0.950        0.967 0.122          1.83
21 mu_0       0.3      0.989        0.968 0.338          1.78
22 mu_0       0.4      1.01         0.994 0.541          1.64
23 mu_0       0.5      1.02         0.991 0.674          1.58
24 mu_0       0.6      0.985        0.983 0.516          1.40
25 mu_0       0.7      0.987        0.988 0.654          1.33
26 mu_0       0.8      0.987        0.961 0.591          1.62
27 mu_0       0.9      0.976        0.925 0.184          2.20
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0798     4.08e-29  8.23e-68      7.92
 2 mu         0.2     0.386      2.44e-16  1.94e-45     16.6 
 3 mu         0.3     0.791      8.72e- 9  1.83e-32     16.5 
 4 mu         0.4     0.836      1.57e- 4  2.32e-23      9.70
 5 mu         0.5     0.730      5.68e- 2  2.07e-16      9.37
 6 mu         0.6     1.46       2.01e- 1  4.92e-17      8.28
 7 mu         0.7     1.27       1.83e- 1  2.83e-26      9.81
 8 mu         0.8     0.850      1.40e- 2  7.62e-40     10.4 
 9 mu         0.9     1.87       2.70e- 8  9.22e-64     29.5 
10 mu_1       0.1     0.124      2.85e-28  7.81e-67     12.2 
11 mu_1       0.2     0.409      8.32e-16  9.21e-45     12.8 
12 mu_1       0.3     0.831      2.01e- 8  5.80e-32     16.7 
13 mu_1       0.4     0.817      2.57e- 4  5.51e-23      9.28
14 mu_1       0.5     0.754      7.60e- 2  3.94e-16      9.04
15 mu_1       0.6     1.49       2.24e- 1  1.27e-17      8.28
16 mu_1       0.7     1.24       1.67e- 1  6.25e-27      9.35
17 mu_1       0.8     0.848      1.28e- 2  1.47e-40     10.9 
18 mu_1       0.9     1.90       1.97e- 8  1.58e-64     30.2 
19 mu_0       0.1     0.0749     1.36e-29  4.63e-69      7.44
20 mu_0       0.2     0.380      1.07e-16  1.23e-46     17.5 
21 mu_0       0.3     0.774      3.83e- 9  1.32e-33     16.4 
22 mu_0       0.4     0.849      8.99e- 5  1.96e-24      9.98
23 mu_0       0.5     0.705      4.99e- 2  2.10e-17      9.71
24 mu_0       0.6     1.42       1.34e- 1  1.04e-16      8.28
25 mu_0       0.7     1.33       1.50e- 1  7.97e-26     10.9 
26 mu_0       0.8     0.855      1.84e- 2  3.22e-39      9.04
27 mu_0       0.9     1.59       9.62e- 8  7.79e-63     22.7 
[1] "Total run time was 349.344 seconds"
