
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7300"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70 
  1   3   4   1   3   2   4   2   3   1   1   7   3   2   2   3   1   1   2   2 
 71  72  73  74  75  76  77  80  81  82  83  84  85  86  87  88  89  90  93  94 
  4   2   2   2   1   3   1   3   3   3   2   1   1   1   2   1   1   1   4   2 
 95  96  98  99 100 
  4   3   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03875 0.35604 0.62097 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4298 3002 
[1] "treatment indicator table: "

   0    1 
2666 4634 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3695
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 53"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3605
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 26"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 366.496 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.392 0.0576
 2 mu         0.1   0.2 0.532 0.0755
 3 mu         0.1   0.3 0.636 0.0994
 4 mu         0.1   0.4 0.664 0.0827
 5 mu         0.1   0.5 0.720 0.0958
 6 mu         0.2   0.1 0.330 0.0310
 7 mu         0.2   0.2 0.440 0.0409
 8 mu         0.2   0.3 0.524 0.0543
 9 mu         0.2   0.4 0.579 0.0420
10 mu         0.2   0.5 0.624 0.0496
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.10         0.787 0.00000678      4.38
 2 mu         0.2      1.03         0.978 0.0683          2.48
 3 mu         0.3      1.03         0.991 0.329           2.15
 4 mu         0.4      0.991        0.979 0.577           1.51
 5 mu         0.5      0.974        0.960 0.463           1.37
 6 mu         0.6      0.997        1.01  0.555           1.34
 7 mu         0.7      0.999        1.00  0.661           1.38
 8 mu         0.8      0.987        0.992 0.504           1.42
 9 mu         0.9      0.983        0.971 0.355           1.79
10 mu_1       0.1      1.05         0.898 0.0000187       3.54
11 mu_1       0.2      1.02         0.993 0.0645          2.50
12 mu_1       0.3      1.03         1.00  0.329           2.11
13 mu_1       0.4      0.986        0.972 0.548           1.49
14 mu_1       0.5      0.976        0.959 0.455           1.36
15 mu_1       0.6      0.997        1.01  0.571           1.35
16 mu_1       0.7      0.999        0.996 0.661           1.38
17 mu_1       0.8      0.986        1.00  0.500           1.41
18 mu_1       0.9      0.984        0.970 0.363           1.79
19 mu_0       0.1      1.10         0.769 0.00000546      4.47
20 mu_0       0.2      1.03         0.963 0.0606          2.49
21 mu_0       0.3      1.02         0.981 0.329           2.17
22 mu_0       0.4      0.994        0.989 0.565           1.52
23 mu_0       0.5      0.973        0.965 0.470           1.39
24 mu_0       0.6      0.997        1.02  0.527           1.37
25 mu_0       0.7      0.999        0.991 0.660           1.37
26 mu_0       0.8      0.991        0.989 0.519           1.44
27 mu_0       0.9      0.977        0.945 0.281           1.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.190     4.16e-26  4.48e-74     12.7 
 2 mu         0.2      0.865     4.23e-14  4.27e-48     26.9 
 3 mu         0.3      0.917     1.47e- 7  1.09e-33     14.6 
 4 mu         0.4      0.771     8.62e- 4  3.28e-24     10.4 
 5 mu         0.5      0.806     1.67e- 2  5.73e-17      6.33
 6 mu         0.6      0.894     2.65e- 1  7.67e-15      5.00
 7 mu         0.7      0.966     1.65e- 1  2.17e-23      9.51
 8 mu         0.8      1.01      1.51e- 2  5.06e-36     11.4 
 9 mu         0.9      1.63      3.80e- 7  2.21e-58     21.7 
10 mu_1       0.1      0.310     2.56e-25  4.02e-73     19.7 
11 mu_1       0.2      0.837     1.47e-13  1.92e-47     23.2 
12 mu_1       0.3      0.922     2.90e- 7  3.46e-33     14.1 
13 mu_1       0.4      0.767     5.41e- 4  7.80e-24      9.61
14 mu_1       0.5      0.818     1.61e- 2  1.09e-16      6.86
15 mu_1       0.6      0.886     2.61e- 1  2.20e-15      4.66
16 mu_1       0.7      0.972     1.38e- 1  5.32e-24      9.86
17 mu_1       0.8      1.02      1.43e- 2  1.09e-36     11.5 
18 mu_1       0.9      1.65      2.89e- 7  4.22e-59     22.3 
19 mu_0       0.1      0.177     1.76e-26  5.08e-75     12.0 
20 mu_0       0.2      0.873     1.60e-14  5.44e-49     27.9 
21 mu_0       0.3      0.915     8.62e- 8  7.61e-35     15.1 
22 mu_0       0.4      0.775     7.07e- 4  2.67e-25     10.9 
23 mu_0       0.5      0.794     1.35e- 2  5.59e-18      5.79
24 mu_0       0.6      0.907     2.16e- 1  1.59e-14      5.64
25 mu_0       0.7      0.951     1.28e- 1  5.98e-23      8.68
26 mu_0       0.8      0.987     1.90e- 2  2.10e-35     11.1 
27 mu_0       0.9      1.46      1.21e- 6  1.83e-57     16.4 
[1] "Total run time was 369.855 seconds"
