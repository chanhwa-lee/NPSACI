
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7446"
[1] "cluster size dist'n: "

 50  51  52  54  56  57  58  59  60  61  62  63  65  66  67  68  69  70  71  72 
  4   2   1   2   3   1   6   2   4   3   3   2   2   1   2   3   2   2   1   1 
 73  76  77  78  79  80  82  83  84  85  86  88  89  90  91  92  93  94  95  96 
  3   3   1   1   6   2   2   3   1   4   1   1   3   2   1   1   3   3   4   1 
 97  98  99 100 
  2   2   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03525 0.33090 0.60445 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4378 3068 
[1] "treatment indicator table: "

   0    1 
2831 4615 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3818
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3628
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 417.872 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.394 0.0870
 2 mu         0.1   0.2 0.448 0.0880
 3 mu         0.1   0.3 0.527 0.105 
 4 mu         0.1   0.4 0.515 0.0907
 5 mu         0.1   0.5 0.561 0.104 
 6 mu         0.2   0.1 0.396 0.0522
 7 mu         0.2   0.2 0.503 0.0669
 8 mu         0.2   0.3 0.616 0.0952
 9 mu         0.2   0.4 0.632 0.0891
10 mu         0.2   0.5 0.695 0.103 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.797        0.277 0.00000000197      9.32
 2 mu         0.2      1.01         0.963 0.000547           3.45
 3 mu         0.3      1.04         1.04  0.0854             3.05
 4 mu         0.4      1.02         0.984 0.555              1.55
 5 mu         0.5      1.01         1.01  0.619              1.75
 6 mu         0.6      0.979        0.983 0.612              1.34
 7 mu         0.7      0.987        0.961 0.597              1.75
 8 mu         0.8      1.01         1.02  0.478              1.69
 9 mu         0.9      0.999        0.936 0.273              2.15
10 mu_1       0.1      0.852        0.385 0.00000000727     11.6 
11 mu_1       0.2      1.03         0.968 0.00103            4.02
12 mu_1       0.3      1.03         1.04  0.113              2.67
13 mu_1       0.4      1.02         0.987 0.561              1.52
14 mu_1       0.5      1.01         1.01  0.630              1.76
15 mu_1       0.6      0.977        0.983 0.614              1.34
16 mu_1       0.7      0.989        0.959 0.592              1.74
17 mu_1       0.8      1.01         1.02  0.483              1.73
18 mu_1       0.9      0.999        0.935 0.260              2.14
19 mu_0       0.1      0.791        0.263 0.00000000138      9.06
20 mu_0       0.2      1.01         0.956 0.000426           3.59
21 mu_0       0.3      1.04         1.04  0.0737             3.22
22 mu_0       0.4      1.02         0.995 0.513              1.57
23 mu_0       0.5      1.02         1.01  0.608              1.74
24 mu_0       0.6      0.982        0.992 0.602              1.35
25 mu_0       0.7      0.982        0.961 0.608              1.76
26 mu_0       0.8      1.00         1.01  0.458              1.57
27 mu_0       0.9      1.00         0.930 0.395              2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     24.1       1.09e-27  2.51e-90   2408.  
 2 mu         0.2      2.27      3.78e-15  3.14e-61    163.  
 3 mu         0.3      1.10      4.86e- 8  2.90e-44     39.8 
 4 mu         0.4      0.905     7.22e- 4  2.80e-32     10.1 
 5 mu         0.5      0.854     8.74e- 2  4.88e-23      5.15
 6 mu         0.6      1.01      2.39e- 1  2.60e-18      6.13
 7 mu         0.7      1.31      3.32e- 1  3.26e-27     10.5 
 8 mu         0.8      1.24      4.42e- 3  5.16e-40     11.2 
 9 mu         0.9      1.42      7.43e- 9  3.11e-62     71.5 
10 mu_1       0.1     20.6       8.22e-27  2.46e-89   2056.  
11 mu_1       0.2      2.11      1.22e-14  1.54e-60    165.  
12 mu_1       0.3      1.05      9.74e- 8  9.46e-44     36.9 
13 mu_1       0.4      0.907     1.13e- 3  6.85e-32     10.9 
14 mu_1       0.5      0.848     9.30e- 2  9.57e-23      5.44
15 mu_1       0.6      1.03      2.47e- 1  3.70e-19      5.84
16 mu_1       0.7      1.32      2.76e- 1  3.98e-28     10.3 
17 mu_1       0.8      1.23      3.30e- 3  5.50e-41     11.1 
18 mu_1       0.9      1.45      5.29e- 9  2.95e-63     73.6 
19 mu_0       0.1     24.5       3.02e-28  5.63e-92   2448.  
20 mu_0       0.2      2.31      1.68e-15  7.93e-63    163.  
21 mu_0       0.3      1.12      2.77e- 8  8.36e-46     41.1 
22 mu_0       0.4      0.904     3.94e- 4  9.42e-34      9.62
23 mu_0       0.5      0.860     5.80e- 2  1.97e-24      5.87
24 mu_0       0.6      0.987     1.73e- 1  5.95e-18      6.57
25 mu_0       0.7      1.28      3.69e- 1  9.94e-27     11.1 
26 mu_0       0.8      1.30      8.90e- 3  2.36e-39     11.7 
27 mu_0       0.9      1.21      2.67e- 8  2.85e-61     53.3 
[1] "Total run time was 421.452 seconds"
