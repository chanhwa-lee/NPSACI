
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7346"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  58  60  62  63  64  65  66  67  68  69  70  71  72  74 
  2   5   1   4   8   1   1   3   4   3   1   2   3   3   1   2   1   2   3   2 
 75  76  77  78  80  81  82  83  85  86  87  88  90  91  92  93  94  95  96  97 
  2   2   3   2   5   1   2   1   1   4   1   1   3   6   3   1   2   2   2   1 
 98 100 
  1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02838 0.31975 0.60119 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4300 3046 
[1] "treatment indicator table: "

   0    1 
2981 4365 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3770
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3576
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 454.03 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.510 0.118 
 2 mu         0.1   0.2 0.609 0.132 
 3 mu         0.1   0.3 0.646 0.130 
 4 mu         0.1   0.4 0.662 0.117 
 5 mu         0.1   0.5 0.666 0.108 
 6 mu         0.2   0.1 0.376 0.0591
 7 mu         0.2   0.2 0.475 0.0686
 8 mu         0.2   0.3 0.515 0.0642
 9 mu         0.2   0.4 0.557 0.0558
10 mu         0.2   0.5 0.575 0.0518
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.01         0.602 0.000000208      4.69
 2 mu         0.2      1.01         0.953 0.0189           3.30
 3 mu         0.3      0.977        0.940 0.395            1.76
 4 mu         0.4      1.01         0.945 0.573            1.64
 5 mu         0.5      0.990        0.975 0.648            1.32
 6 mu         0.6      1.00         0.997 0.616            1.58
 7 mu         0.7      1.01         1.01  0.613            1.57
 8 mu         0.8      0.978        0.976 0.496            1.55
 9 mu         0.9      0.939        0.899 0.188            2.42
10 mu_1       0.1      0.988        0.773 0.000000624      3.92
11 mu_1       0.2      0.999        0.979 0.0289           3.05
12 mu_1       0.3      0.980        0.943 0.394            1.81
13 mu_1       0.4      1.01         0.943 0.580            1.58
14 mu_1       0.5      0.990        0.968 0.648            1.29
15 mu_1       0.6      1.00         0.995 0.613            1.59
16 mu_1       0.7      1.01         1.01  0.621            1.57
17 mu_1       0.8      0.976        0.969 0.493            1.56
18 mu_1       0.9      0.940        0.905 0.180            2.45
19 mu_0       0.1      1.01         0.583 0.000000162      4.78
20 mu_0       0.2      1.01         0.968 0.0164           3.36
21 mu_0       0.3      0.976        0.938 0.395            1.73
22 mu_0       0.4      1.01         0.937 0.569            1.69
23 mu_0       0.5      0.990        0.970 0.649            1.35
24 mu_0       0.6      1.00         1.00  0.621            1.58
25 mu_0       0.7      1.02         0.991 0.594            1.56
26 mu_0       0.8      0.987        0.981 0.506            1.53
27 mu_0       0.9      0.925        0.897 0.168            2.22
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      2.41      2.58e-23  1.46e-71    237.  
 2 mu         0.2      0.585     5.98e-12  1.96e-47     25.1 
 3 mu         0.3      0.624     1.92e- 6  1.85e-33      6.29
 4 mu         0.4      0.945     4.08e- 3  1.13e-23     11.3 
 5 mu         0.5      0.919     1.30e- 1  3.20e-16      5.97
 6 mu         0.6      1.30      1.42e- 1  3.90e-23      9.06
 7 mu         0.7      1.13      2.46e- 1  1.48e-32      8.83
 8 mu         0.8      1.33      1.04e- 2  6.12e-46     16.7 
 9 mu         0.9      1.94      1.89e- 8  5.76e-69     48.8 
10 mu_1       0.1      0.955     1.52e-22  1.38e-70     88.9 
11 mu_1       0.2      0.596     1.92e-11  9.25e-47     21.6 
12 mu_1       0.3      0.665     3.34e- 6  5.80e-33      7.07
13 mu_1       0.4      0.939     6.10e- 3  2.65e-23     11.1 
14 mu_1       0.5      0.947     1.22e- 1  4.91e-17      6.56
15 mu_1       0.6      1.31      1.43e- 1  2.44e-24      9.22
16 mu_1       0.7      1.12      2.43e- 1  7.95e-34      8.29
17 mu_1       0.8      1.35      7.66e- 3  2.87e-47     17.0 
18 mu_1       0.9      1.95      1.24e- 8  2.40e-70     51.0 
19 mu_0       0.1      2.57      1.18e-23  9.46e-73    253.  
20 mu_0       0.2      0.583     2.67e-12  1.43e-48     26.0 
21 mu_0       0.3      0.607     9.76e- 7  1.53e-34      7.03
22 mu_0       0.4      0.949     2.63e- 3  1.09e-24     12.0 
23 mu_0       0.5      0.891     1.19e- 1  3.73e-17      5.38
24 mu_0       0.6      1.29      1.28e- 1  9.39e-23      8.82
25 mu_0       0.7      1.15      1.96e- 1  4.76e-32     10.2 
26 mu_0       0.8      1.25      2.16e- 2  2.94e-45     15.8 
27 mu_0       0.9      1.84      7.74e- 8  5.55e-68     48.3 
[1] "Total run time was 459.585 seconds"
