
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7518"
[1] "cluster size dist'n: "

 50  52  53  54  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 
  2   1   1   1   2   4   2   2   2   5   3   2   3   1   2   4   1   4   1   3 
 72  73  74  75  76  77  79  80  81  82  83  84  85  86  88  89  90  92  93  94 
  2   2   1   2   2   1   4   2   3   3   2   2   1   1   1   3   1   3   4   3 
 95  96  97  98  99 100 
  2   1   1   1   5   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03038 0.32846 0.60567 1.00000 5.85623 
[1] "event indicator table: "

   0    1 
4514 3004 
[1] "treatment indicator table: "

   0    1 
2853 4665 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3736
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3782
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 504.727 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.264 0.0533
 2 mu         0.1   0.2 0.357 0.0474
 3 mu         0.1   0.3 0.437 0.0597
 4 mu         0.1   0.4 0.441 0.0513
 5 mu         0.1   0.5 0.497 0.0753
 6 mu         0.2   0.1 0.260 0.0403
 7 mu         0.2   0.2 0.389 0.0234
 8 mu         0.2   0.3 0.475 0.0320
 9 mu         0.2   0.4 0.497 0.0283
10 mu         0.2   0.5 0.542 0.0343
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.769        0.547  1.08e- 9      5.27
 2 mu         0.2      0.960        0.882  2.35e- 3      2.75
 3 mu         0.3      0.984        0.942  3.61e- 1      1.89
 4 mu         0.4      0.992        0.973  5.06e- 1      1.43
 5 mu         0.5      0.982        0.969  4.76e- 1      1.41
 6 mu         0.6      0.990        0.995  5.50e- 1      1.51
 7 mu         0.7      0.989        0.968  5.91e- 1      1.41
 8 mu         0.8      1.03         1.00   5.23e- 1      1.82
 9 mu         0.9      0.973        0.928  1.16e- 1      2.74
10 mu_1       0.1      0.772        0.611  3.64e- 9      4.38
11 mu_1       0.2      0.972        0.902  4.02e- 3      2.96
12 mu_1       0.3      0.985        0.944  3.75e- 1      1.74
13 mu_1       0.4      0.992        0.973  5.25e- 1      1.44
14 mu_1       0.5      0.983        0.971  4.85e- 1      1.39
15 mu_1       0.6      0.989        1.00   5.46e- 1      1.53
16 mu_1       0.7      0.991        0.975  5.86e- 1      1.42
17 mu_1       0.8      1.03         1.01   5.25e- 1      1.80
18 mu_1       0.9      0.973        0.929  1.08e- 1      2.74
19 mu_0       0.1      0.769        0.533  7.97e-10      5.37
20 mu_0       0.2      0.957        0.902  1.94e- 3      2.82
21 mu_0       0.3      0.984        0.956  3.31e- 1      1.99
22 mu_0       0.4      0.993        0.977  4.93e- 1      1.46
23 mu_0       0.5      0.981        0.971  4.68e- 1      1.44
24 mu_0       0.6      0.991        0.992  5.57e- 1      1.47
25 mu_0       0.7      0.985        0.967  6.05e- 1      1.39
26 mu_0       0.8      1.03         1.01   5.14e- 1      1.86
27 mu_0       0.9      0.977        0.932  1.87e- 1      2.73
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0806     3.43e-29  1.87e-65      7.95
 2 mu         0.2     0.587      1.62e-15  3.48e-42     22.2 
 3 mu         0.3     1.56       9.87e- 9  7.45e-29     31.5 
 4 mu         0.4     1.52       1.22e- 4  2.92e-20     18.0 
 5 mu         0.5     1.16       3.65e- 2  3.34e-14     17.9 
 6 mu         0.6     0.897      8.99e- 2  5.47e-11      7.24
 7 mu         0.7     1.01       1.23e- 1  3.00e-17      6.86
 8 mu         0.8     1.28       1.87e- 2  1.80e-26     11.1 
 9 mu         0.9     1.17       1.26e- 7  7.80e-45     16.2 
10 mu_1       0.1     0.133      2.27e-28  1.66e-64     13.1 
11 mu_1       0.2     0.682      5.38e-15  1.54e-41     18.3 
12 mu_1       0.3     1.60       2.27e- 8  2.21e-28     30.7 
13 mu_1       0.4     1.47       2.11e- 4  6.90e-20     17.2 
14 mu_1       0.5     1.16       3.22e- 2  6.67e-14     18.1 
15 mu_1       0.6     0.878      8.56e- 2  1.50e-11      7.20
16 mu_1       0.7     1.03       9.49e- 2  7.04e-18      7.47
17 mu_1       0.8     1.28       2.05e- 2  3.69e-27     11.2 
18 mu_1       0.9     1.16       9.32e- 8  2.24e-45     15.7 
19 mu_0       0.1     0.0747     1.31e-29  0             7.38
20 mu_0       0.2     0.563      6.75e-16  0            23.2 
21 mu_0       0.3     1.54       4.36e- 9  0            31.9 
22 mu_0       0.4     1.55       6.36e- 5  0            18.5 
23 mu_0       0.5     1.16       2.99e- 2  0            17.6 
24 mu_0       0.6     0.924      7.43e- 2  0             7.30
25 mu_0       0.7     0.978      1.27e- 1  0             5.64
26 mu_0       0.8     1.28       1.66e- 2  0            12.7 
27 mu_0       0.9     1.24       2.30e- 7  0            20.9 
[1] "Total run time was 509.056 seconds"
