
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7747"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  58  60  61  62  63  64  67  68  69  70  72  73  74  76 
  2   3   1   6   3   1   3   3   2   2   1   2   2   1   2   3   4   3   1   1 
 78  79  80  83  84  85  86  87  89  90  91  92  93  94  95  96  97  98  99 100 
  1   1   4   4   3   3   1   3   2   2   3   1   3   3   4   1   4   3   6   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02205 0.29785 0.57170 0.97233 6.00000 
[1] "event indicator table: "

   0    1 
4529 3218 
[1] "treatment indicator table: "

   0    1 
3054 4693 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3761
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3986
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 484.693 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.435 0.0753
 2 mu         0.1   0.2 0.520 0.0677
 3 mu         0.1   0.3 0.576 0.0758
 4 mu         0.1   0.4 0.611 0.0773
 5 mu         0.1   0.5 0.629 0.0779
 6 mu         0.2   0.1 0.344 0.0215
 7 mu         0.2   0.2 0.454 0.0324
 8 mu         0.2   0.3 0.509 0.0359
 9 mu         0.2   0.4 0.538 0.0300
10 mu         0.2   0.5 0.573 0.0321
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.07         0.601 0.0000553      7.60
 2 mu         0.2      1.00         0.962 0.140          2.31
 3 mu         0.3      0.954        0.978 0.286          1.80
 4 mu         0.4      1.01         0.977 0.509          1.66
 5 mu         0.5      1.02         1.00  0.451          1.50
 6 mu         0.6      1.02         0.995 0.615          1.91
 7 mu         0.7      1.03         1.03  0.618          1.84
 8 mu         0.8      1.02         1.01  0.494          1.75
 9 mu         0.9      1.05         0.975 0.131          3.28
10 mu_1       0.1      1.06         0.752 0.000136       6.28
11 mu_1       0.2      0.990        0.912 0.159          2.14
12 mu_1       0.3      0.959        0.973 0.257          1.76
13 mu_1       0.4      1.01         0.974 0.498          1.68
14 mu_1       0.5      1.02         0.997 0.433          1.54
15 mu_1       0.6      1.02         0.985 0.618          1.88
16 mu_1       0.7      1.03         1.02  0.617          1.85
17 mu_1       0.8      1.02         0.999 0.479          1.75
18 mu_1       0.9      1.05         0.965 0.124          3.26
19 mu_0       0.1      1.07         0.598 0.0000464      7.74
20 mu_0       0.2      1.00         0.965 0.135          2.35
21 mu_0       0.3      0.951        0.979 0.288          1.82
22 mu_0       0.4      1.01         0.978 0.506          1.65
23 mu_0       0.5      1.02         0.997 0.469          1.52
24 mu_0       0.6      1.02         1.00  0.610          1.96
25 mu_0       0.7      1.03         1.02  0.618          1.82
26 mu_0       0.8      1.02         1.00  0.554          1.73
27 mu_0       0.9      1.05         0.988 0.192          3.47
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.27      1.19e-27  1.73e-76    126.  
 2 mu         0.2      0.649     2.91e-14  2.35e-50     36.5 
 3 mu         0.3      0.777     4.88e- 7  2.89e-35     10.9 
 4 mu         0.4      0.847     1.88e- 3  9.69e-25     12.1 
 5 mu         0.5      1.45      8.40e- 2  4.39e-17     28.2 
 6 mu         0.6      1.38      1.21e- 1  5.06e-25     13.7 
 7 mu         0.7      0.978     1.26e- 1  1.97e-35     10.5 
 8 mu         0.8      1.26      3.04e- 3  2.76e-50     12.4 
 9 mu         0.9      1.84      1.07e- 9  6.42e-76     40.7 
10 mu_1       0.1      0.711     7.92e-27  1.60e-75     69.3 
11 mu_1       0.2      0.715     8.60e-14  1.09e-49     35.0 
12 mu_1       0.3      0.773     9.55e- 7  8.91e-35     10.4 
13 mu_1       0.4      0.873     2.16e- 3  2.24e-24     13.4 
14 mu_1       0.5      1.49      6.56e- 2  4.82e-18     29.9 
15 mu_1       0.6      1.35      1.12e- 1  4.63e-26     12.1 
16 mu_1       0.7      0.987     1.05e- 1  1.54e-36     11.2 
17 mu_1       0.8      1.26      2.26e- 3  1.89e-51     12.2 
18 mu_1       0.9      1.84      7.70e-10  3.92e-77     42.2 
19 mu_0       0.1      1.33      4.72e-28  1.42e-77    132.  
20 mu_0       0.2      0.633     1.49e-14  2.16e-51     36.9 
21 mu_0       0.3      0.779     2.62e- 7  3.04e-36     11.7 
22 mu_0       0.4      0.830     1.74e- 3  1.19e-25     12.1 
23 mu_0       0.5      1.41      5.74e- 2  1.34e-17     26.5 
24 mu_0       0.6      1.43      1.31e- 1  1.20e-24     16.1 
25 mu_0       0.7      0.958     9.91e- 2  6.20e-35      8.95
26 mu_0       0.8      1.24      6.04e- 3  1.30e-49     13.2 
27 mu_0       0.9      1.77      3.81e- 9  6.06e-75     27.1 
[1] "Total run time was 487.996 seconds"
