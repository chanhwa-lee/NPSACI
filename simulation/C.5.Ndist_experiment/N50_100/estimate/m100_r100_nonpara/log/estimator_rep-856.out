
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7400"
[1] "cluster size dist'n: "

50 51 52 53 54 55 57 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 78 
 3  3  5  1  2  1  3  1  3  1  2  5  5  1  1  3  2  2  1  1  1  2  3  1  1  1 
79 80 81 82 83 84 86 87 89 90 91 92 93 94 96 97 98 
 3  1  5  1  1  3  5  1  4  2  3  3  5  2  2  3  1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04405 0.38615 0.63355 1.00000 5.51519 
[1] "event indicator table: "

   0    1 
4386 3014 
[1] "treatment indicator table: "

   0    1 
2579 4821 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3678
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3722
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 370.531 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.307 0.0875
 2 mu         0.1   0.2 0.402 0.0976
 3 mu         0.1   0.3 0.425 0.103 
 4 mu         0.1   0.4 0.506 0.104 
 5 mu         0.1   0.5 0.572 0.105 
 6 mu         0.2   0.1 0.347 0.0569
 7 mu         0.2   0.2 0.438 0.0550
 8 mu         0.2   0.3 0.474 0.0558
 9 mu         0.2   0.4 0.554 0.0574
10 mu         0.2   0.5 0.601 0.0512
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.938        0.567  5.12e-10     13.9 
 2 mu         0.2      1.03         0.968  1.89e- 3      4.07
 3 mu         0.3      0.960        0.908  9.95e- 2      2.00
 4 mu         0.4      1.01         0.994  4.72e- 1      1.74
 5 mu         0.5      1.02         1.02   4.67e- 1      1.58
 6 mu         0.6      1.01         0.998  6.19e- 1      1.44
 7 mu         0.7      1.00         0.977  5.63e- 1      1.50
 8 mu         0.8      0.985        0.967  5.82e- 1      1.54
 9 mu         0.9      1.02         0.970  4.55e- 1      1.94
10 mu_1       0.1      0.907        0.614  1.78e- 9     11.0 
11 mu_1       0.2      1.02         1.00   3.30e- 3      3.80
12 mu_1       0.3      0.964        0.927  1.17e- 1      1.89
13 mu_1       0.4      1.01         0.991  4.60e- 1      1.66
14 mu_1       0.5      1.02         1.02   4.78e- 1      1.57
15 mu_1       0.6      1.01         1.00   6.16e- 1      1.46
16 mu_1       0.7      1.00         0.975  5.63e- 1      1.51
17 mu_1       0.8      0.985        0.972  5.77e- 1      1.55
18 mu_1       0.9      1.03         0.969  4.48e- 1      1.93
19 mu_0       0.1      0.942        0.525  3.71e-10     14.2 
20 mu_0       0.2      1.03         0.962  1.54e- 3      4.19
21 mu_0       0.3      0.958        0.903  9.20e- 2      2.09
22 mu_0       0.4      1.01         0.982  4.63e- 1      1.79
23 mu_0       0.5      1.02         1.03   4.56e- 1      1.60
24 mu_0       0.6      1.01         1.00   6.22e- 1      1.45
25 mu_0       0.7      1.00         0.991  5.55e- 1      1.47
26 mu_0       0.8      0.985        0.970  5.99e- 1      1.53
27 mu_0       0.9      1.02         0.949  5.18e- 1      2.07
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      4.15      2.10e-31  9.27e-85    413.  
 2 mu         0.2      1.72      1.99e-16  5.73e-57    101.  
 3 mu         0.3      0.693     1.48e- 9  8.00e-41     26.6 
 4 mu         0.4      1.10      2.79e- 5  1.80e-29     16.6 
 5 mu         0.5      0.792     5.41e- 3  8.92e-21      8.36
 6 mu         0.6      0.830     7.57e- 2  8.44e-14      6.74
 7 mu         0.7      1.10      4.08e- 1  1.68e-19      6.72
 8 mu         0.8      1.69      1.47e- 1  2.00e-29     13.8 
 9 mu         0.9      1.17      3.18e- 5  8.90e-47     18.8 
10 mu_1       0.1      4.97      1.28e-30  8.89e-84    493.  
11 mu_1       0.2      1.39      6.83e-16  2.75e-56     70.1 
12 mu_1       0.3      0.688     3.16e- 9  2.56e-40     19.5 
13 mu_1       0.4      1.10      4.95e- 5  4.31e-29     15.3 
14 mu_1       0.5      0.774     7.77e- 3  1.71e-20      8.16
15 mu_1       0.6      0.841     8.60e- 2  1.35e-13      7.11
16 mu_1       0.7      1.13      4.38e- 1  2.87e-20      7.16
17 mu_1       0.8      1.69      1.21e- 1  2.99e-30     14.2 
18 mu_1       0.9      1.17      2.53e- 5  1.18e-47     18.6 
19 mu_0       0.1      4.06      9.11e-32  4.25e-86    404.  
20 mu_0       0.2      1.81      7.23e-17  2.95e-58    112.  
21 mu_0       0.3      0.695     6.83e-10  4.71e-42     29.6 
22 mu_0       0.4      1.10      1.34e- 5  1.23e-30     17.4 
23 mu_0       0.5      0.809     4.13e- 3  7.35e-22      8.56
24 mu_0       0.6      0.815     5.93e- 2  8.70e-15      6.19
25 mu_0       0.7      1.05      3.59e- 1  4.94e-19      5.87
26 mu_0       0.8      1.68      2.33e- 1  8.81e-29     15.2 
27 mu_0       0.9      1.20      9.00e- 5  7.84e-46     20.6 
[1] "Total run time was 373.568 seconds"
