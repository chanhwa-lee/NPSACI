
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7608"
[1] "cluster size dist'n: "

 50  51  55  56  57  58  59  60  62  63  64  65  66  67  68  69  70  71  72  73 
  2   2   5   2   1   5   1   1   2   4   1   4   2   2   2   2   2   3   1   3 
 74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  92  93  94 
  2   1   1   2   3   1   1   2   2   4   1   2   2   1   2   1   3   1   3   1 
 95  96  97  98  99 100 
  3   4   2   5   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04632 0.37972 0.63627 1.00000 7.04356 
[1] "event indicator table: "

   0    1 
4541 3067 
[1] "treatment indicator table: "

   0    1 
2647 4961 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3862
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 778.188 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.257 0.0783
 2 mu         0.1   0.2 0.340 0.0950
 3 mu         0.1   0.3 0.446 0.111 
 4 mu         0.1   0.4 0.459 0.119 
 5 mu         0.1   0.5 0.460 0.127 
 6 mu         0.2   0.1 0.286 0.0480
 7 mu         0.2   0.2 0.375 0.0523
 8 mu         0.2   0.3 0.485 0.0676
 9 mu         0.2   0.4 0.508 0.0688
10 mu         0.2   0.5 0.517 0.0700
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.767       0.0250 0.000000356     16.7 
 2 mu         0.2      0.901       0.750  0.00841          3.32
 3 mu         0.3      0.921       0.903  0.248            2.31
 4 mu         0.4      0.982       0.975  0.360            1.74
 5 mu         0.5      1.00        0.986  0.512            1.50
 6 mu         0.6      0.979       0.976  0.560            1.39
 7 mu         0.7      0.993       0.998  0.506            1.29
 8 mu         0.8      1.04        1.01   0.743            1.64
 9 mu         0.9      1.03        1.01   0.259            1.92
10 mu_1       0.1      0.815       0.0494 0.00000103       9.37
11 mu_1       0.2      0.905       0.791  0.0138           3.45
12 mu_1       0.3      0.920       0.878  0.191            2.24
13 mu_1       0.4      0.991       0.978  0.353            1.72
14 mu_1       0.5      1.00        0.978  0.540            1.48
15 mu_1       0.6      0.979       0.981  0.560            1.38
16 mu_1       0.7      0.994       1.00   0.502            1.31
17 mu_1       0.8      1.04        0.999  0.751            1.65
18 mu_1       0.9      1.03        1.00   0.248            1.93
19 mu_0       0.1      0.761       0.0223 0.000000281     17.5 
20 mu_0       0.2      0.900       0.775  0.00707          3.29
21 mu_0       0.3      0.922       0.894  0.239            2.34
22 mu_0       0.4      0.976       0.953  0.340            1.76
23 mu_0       0.5      1.01        0.986  0.485            1.51
24 mu_0       0.6      0.980       0.969  0.561            1.41
25 mu_0       0.7      0.990       0.994  0.514            1.32
26 mu_0       0.8      1.04        1.02   0.701            1.60
27 mu_0       0.9      1.03        0.990  0.289            1.89
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00493     8.15e-30  1.90e-71     0.492
 2 mu         0.2    0.746       1.17e-16  7.17e-46    68.7  
 3 mu         0.3    0.895       2.58e- 9  3.02e-31    39.1  
 4 mu         0.4    1.02        1.00e- 4  3.51e-21    14.0  
 5 mu         0.5    1.20        1.81e- 2  1.06e-13    10.5  
 6 mu         0.6    0.737       1.05e- 1  1.44e- 9     8.97 
 7 mu         0.7    0.842       2.60e- 1  2.33e-16     5.06 
 8 mu         0.8    1.30        1.12e- 1  1.39e-26     9.47 
 9 mu         0.9    0.827       6.95e- 6  6.26e-45    11.2  
10 mu_1       0.1    0.0108      4.95e-29  1.67e-70     1.08 
11 mu_1       0.2    0.847       3.74e-16  3.15e-45    75.4  
12 mu_1       0.3    0.907       5.56e- 9  8.83e-31    40.8  
13 mu_1       0.4    1.04        1.63e- 4  7.72e-21    11.5  
14 mu_1       0.5    1.17        2.25e- 2  1.87e-13    10.9  
15 mu_1       0.6    0.731       1.29e- 1  5.28e-10     8.97 
16 mu_1       0.7    0.856       2.49e- 1  7.32e-17     5.22 
17 mu_1       0.8    1.31        9.66e- 2  3.81e-27     9.75 
18 mu_1       0.9    0.805       5.27e- 6  1.53e-45    11.0  
19 mu_0       0.1    0.00427     3.26e-30  2.56e-72     0.427
20 mu_0       0.2    0.721       5.26e-17  1.09e-46    67.0  
21 mu_0       0.3    0.890       1.30e- 9  5.22e-32    38.4  
22 mu_0       0.4    1.00        5.66e- 5  7.10e-22    16.0  
23 mu_0       0.5    1.22        1.61e- 2  2.58e-14    10.2  
24 mu_0       0.6    0.746       9.92e- 2  1.69e- 9     8.97 
25 mu_0       0.7    0.808       1.85e- 1  6.07e-16     4.68 
26 mu_0       0.8    1.25        1.74e- 1  5.41e-26     8.35 
27 mu_0       0.9    1.02        2.21e- 5  4.89e-44    13.4  
[1] "Total run time was 783.024 seconds"
