
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7040"
[1] "cluster size dist'n: "

 50  51  53  54  56  58  59  60  61  62  63  64  65  66  67  69  70  71  73  74 
  3   3   4   3   4   4   2   4   5   1   2   5   2   4   4   5   5   3   1   2 
 75  76  78  80  82  83  84  87  88  90  91  92  93  94  97  98 100 
  3   2   1   4   3   1   2   4   1   1   2   1   2   1   1   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02995 0.32567 0.60931 1.00000 6.40004 
[1] "event indicator table: "

   0    1 
4138 2902 
[1] "treatment indicator table: "

   0    1 
2700 4340 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3635
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3405
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 349.587 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.493 0.0928
 2 mu         0.1   0.2 0.538 0.0884
 3 mu         0.1   0.3 0.616 0.100 
 4 mu         0.1   0.4 0.647 0.109 
 5 mu         0.1   0.5 0.678 0.126 
 6 mu         0.2   0.1 0.393 0.0428
 7 mu         0.2   0.2 0.470 0.0395
 8 mu         0.2   0.3 0.538 0.0442
 9 mu         0.2   0.4 0.572 0.0388
10 mu         0.2   0.5 0.614 0.0467
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.01         0.568 0.0000414     12.9 
 2 mu         0.2      1.00         0.934 0.0507         2.68
 3 mu         0.3      0.997        0.970 0.256          2.00
 4 mu         0.4      0.998        0.976 0.504          1.71
 5 mu         0.5      1.01         0.985 0.584          1.47
 6 mu         0.6      1.00         0.991 0.636          1.43
 7 mu         0.7      0.982        0.977 0.581          1.48
 8 mu         0.8      1.01         0.999 0.489          1.90
 9 mu         0.9      0.946        0.928 0.243          2.78
10 mu_1       0.1      0.982        0.678 0.000121       8.71
11 mu_1       0.2      1.01         0.918 0.0671         2.35
12 mu_1       0.3      0.997        0.982 0.285          1.90
13 mu_1       0.4      0.999        0.977 0.543          1.68
14 mu_1       0.5      1.01         0.989 0.586          1.42
15 mu_1       0.6      1.00         0.997 0.649          1.44
16 mu_1       0.7      0.982        0.974 0.594          1.47
17 mu_1       0.8      1.01         0.998 0.478          1.91
18 mu_1       0.9      0.944        0.930 0.228          2.78
19 mu_0       0.1      1.02         0.556 0.0000326     13.3 
20 mu_0       0.2      0.999        0.939 0.0466         2.76
21 mu_0       0.3      0.997        0.968 0.243          2.04
22 mu_0       0.4      0.997        0.974 0.479          1.73
23 mu_0       0.5      1.01         0.988 0.582          1.51
24 mu_0       0.6      1.00         0.983 0.618          1.41
25 mu_0       0.7      0.981        0.977 0.551          1.50
26 mu_0       0.8      1.01         0.992 0.530          1.85
27 mu_0       0.9      0.958        0.900 0.338          2.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      6.65      1.67e-23  3.09e-72    549.  
 2 mu         0.2      1.23      8.00e-13  1.31e-46     42.6 
 3 mu         0.3      0.609     2.23e- 6  6.30e-32     12.3 
 4 mu         0.4      0.956     2.56e- 3  3.73e-22     20.9 
 5 mu         0.5      1.08      9.44e- 2  2.05e-15     12.2 
 6 mu         0.6      1.11      2.04e- 1  3.94e-12     12.6 
 7 mu         0.7      1.02      1.33e- 1  5.51e-18     10.1 
 8 mu         0.8      1.25      4.21e- 3  5.37e-28     21.7 
 9 mu         0.9      2.46      2.40e- 9  1.08e-46     73.2 
10 mu_1       0.1      5.55      1.17e-22  2.74e-71    414.  
11 mu_1       0.2      0.968     2.24e-12  5.81e-46     44.1 
12 mu_1       0.3      0.617     4.69e- 6  1.86e-31     12.3 
13 mu_1       0.4      0.989     4.03e- 3  8.94e-22     21.3 
14 mu_1       0.5      1.08      1.22e- 1  3.93e-15     11.8 
15 mu_1       0.6      1.10      2.29e- 1  4.95e-13     13.5 
16 mu_1       0.7      1.01      1.09e- 1  5.94e-19      9.34
17 mu_1       0.8      1.26      3.24e- 3  1.39e-28     22.2 
18 mu_1       0.9      2.50      1.63e- 9  2.48e-47     74.7 
19 mu_0       0.1      6.77      5.57e-24  3.85e-73    564.  
20 mu_0       0.2      1.29      4.40e-13  1.84e-47     42.2 
21 mu_0       0.3      0.606     1.17e- 6  1.01e-32     12.3 
22 mu_0       0.4      0.934     2.26e- 3  2.48e-23     20.6 
23 mu_0       0.5      1.08      9.41e- 2  1.64e-16     12.5 
24 mu_0       0.6      1.11      1.93e- 1  9.10e-12     11.2 
25 mu_0       0.7      1.04      1.08e- 1  1.70e-17     12.0 
26 mu_0       0.8      1.19      8.06e- 3  2.13e-27     19.5 
27 mu_0       0.9      2.10      9.78e- 9  8.55e-46     58.9 
[1] "Total run time was 355.05 seconds"
