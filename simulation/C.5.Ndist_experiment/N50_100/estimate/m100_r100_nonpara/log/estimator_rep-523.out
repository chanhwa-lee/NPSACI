
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7662"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  57  58  59  60  61  64  65  66  67  68  69  70  71  72 
  1   1   1   6   1   1   4   1   1   4   2   1   1   1   3   1   1   2   2   2 
 73  74  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92  93  94 
  1   3   5   3   3   1   2   4   5   2   4   1   2   2   2   3   1   2   3   1 
 95  96  97  99 100 
  5   3   1   2   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02644 0.33964 0.60068 1.00000 7.40301 
[1] "event indicator table: "

   0    1 
4596 3066 
[1] "treatment indicator table: "

   0    1 
2954 4708 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3789
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3873
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 54"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 419.451 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.463 0.131 
 2 mu         0.1   0.2 0.588 0.156 
 3 mu         0.1   0.3 0.603 0.160 
 4 mu         0.1   0.4 0.639 0.157 
 5 mu         0.1   0.5 0.686 0.161 
 6 mu         0.2   0.1 0.431 0.0809
 7 mu         0.2   0.2 0.565 0.102 
 8 mu         0.2   0.3 0.588 0.0856
 9 mu         0.2   0.4 0.634 0.0801
10 mu         0.2   0.5 0.689 0.0894
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.19         0.507 0.0000000776     22.3 
 2 mu         0.2      1.08         0.981 0.0127            3.84
 3 mu         0.3      1.02         1.00  0.367             2.03
 4 mu         0.4      0.979        0.954 0.603             1.60
 5 mu         0.5      0.994        0.982 0.586             1.44
 6 mu         0.6      0.989        0.969 0.723             1.41
 7 mu         0.7      1.01         1.02  0.637             1.32
 8 mu         0.8      1.02         1.06  0.527             1.75
 9 mu         0.9      0.977        0.965 0.268             1.86
10 mu_1       0.1      1.13         0.711 0.000000245      12.1 
11 mu_1       0.2      1.08         0.993 0.0205            3.64
12 mu_1       0.3      1.01         1.00  0.373             1.96
13 mu_1       0.4      0.980        0.959 0.604             1.61
14 mu_1       0.5      0.994        0.980 0.595             1.46
15 mu_1       0.6      0.989        0.975 0.712             1.42
16 mu_1       0.7      1.01         1.01  0.637             1.33
17 mu_1       0.8      1.02         1.05  0.514             1.76
18 mu_1       0.9      0.977        0.968 0.256             1.86
19 mu_0       0.1      1.19         0.495 0.0000000590     23.4 
20 mu_0       0.2      1.08         0.979 0.0108            3.89
21 mu_0       0.3      1.02         1.00  0.365             2.06
22 mu_0       0.4      0.978        0.944 0.594             1.60
23 mu_0       0.5      0.994        0.988 0.574             1.43
24 mu_0       0.6      0.989        0.966 0.741             1.40
25 mu_0       0.7      1.01         1.02  0.640             1.37
26 mu_0       0.8      1.03         1.06  0.532             1.69
27 mu_0       0.9      0.979        0.972 0.380             1.85
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.05      3.98e-28  1.83e-70    293.  
 2 mu         0.2      1.28      2.79e-15  6.11e-45    103.  
 3 mu         0.3      0.879     2.09e- 8  3.26e-31     27.0 
 4 mu         0.4      1.25      4.33e- 4  3.09e-22     28.8 
 5 mu         0.5      0.861     1.00e- 1  2.21e-15      6.84
 6 mu         0.6      1.09      3.23e- 1  4.49e-15      8.02
 7 mu         0.7      1.32      3.46e- 1  2.71e-22      7.55
 8 mu         0.8      0.774     2.61e- 2  1.83e-33      6.26
 9 mu         0.9      2.12      4.91e- 8  1.44e-54     65.7 
10 mu_1       0.1      2.84      2.86e-27  1.59e-69    262.  
11 mu_1       0.2      1.12      9.14e-15  2.66e-44     94.0 
12 mu_1       0.3      0.957     4.36e- 8  1.03e-30     30.0 
13 mu_1       0.4      1.22      4.30e- 4  7.33e-22     26.2 
14 mu_1       0.5      0.862     9.73e- 2  4.20e-15      6.39
15 mu_1       0.6      1.11      3.60e- 1  6.70e-16      8.28
16 mu_1       0.7      1.31      2.94e- 1  3.46e-23      7.56
17 mu_1       0.8      0.763     2.08e- 2  4.33e-34      6.09
18 mu_1       0.9      2.15      3.53e- 8  3.02e-55     66.7 
19 mu_0       0.1      3.07      1.24e-28  2.64e-71    296.  
20 mu_0       0.2      1.32      1.20e-15  9.93e-46    105.  
21 mu_0       0.3      0.846     1.16e- 8  2.38e-32     25.7 
22 mu_0       0.4      1.27      2.51e- 4  2.64e-23     30.6 
23 mu_0       0.5      0.861     6.84e- 2  2.27e-16      7.28
24 mu_0       0.6      1.06      2.62e- 1  1.02e-14      7.63
25 mu_0       0.7      1.34      3.59e- 1  8.21e-22      7.51
26 mu_0       0.8      0.817     3.10e- 2  7.44e-33      6.92
27 mu_0       0.9      1.82      1.73e- 7  1.17e-53     56.8 
[1] "Total run time was 423.478 seconds"
