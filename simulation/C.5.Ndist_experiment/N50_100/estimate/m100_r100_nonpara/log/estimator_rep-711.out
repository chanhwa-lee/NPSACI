
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7486"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  60  61  62  63  65  66  67  68  69  70  72  73 
  1   2   1   2   3   3   2   3   3   3   3   1   3   3   3   1   2   2   1   1 
 74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  93  94  97 
  2   2   2   3   5   5   4   1   3   3   2   1   3   2   1   2   2   2   3   2 
 98  99 100 
  1   3   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03638 0.35902 0.62102 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4485 3001 
[1] "treatment indicator table: "

   0    1 
2751 4735 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3747
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3739
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 374.118 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.401 0.108 
 2 mu         0.1   0.2 0.476 0.127 
 3 mu         0.1   0.3 0.569 0.123 
 4 mu         0.1   0.4 0.646 0.129 
 5 mu         0.1   0.5 0.695 0.144 
 6 mu         0.2   0.1 0.298 0.0642
 7 mu         0.2   0.2 0.365 0.0776
 8 mu         0.2   0.3 0.443 0.0528
 9 mu         0.2   0.4 0.513 0.0481
10 mu         0.2   0.5 0.565 0.0663
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.13        0.0980 0.000000190     12.8 
 2 mu         0.2      1.01        0.786  0.0326           3.99
 3 mu         0.3      0.989       0.956  0.199            2.32
 4 mu         0.4      0.963       0.936  0.380            1.93
 5 mu         0.5      0.965       0.950  0.557            2.08
 6 mu         0.6      1.03        1.01   0.652            1.84
 7 mu         0.7      1.03        1.03   0.672            1.57
 8 mu         0.8      1.06        1.04   0.501            1.55
 9 mu         0.9      1.03        0.991  0.379            1.87
10 mu_1       0.1      1.11        0.168  0.000000561     12.9 
11 mu_1       0.2      1.02        0.836  0.0488           3.64
12 mu_1       0.3      0.984       0.932  0.209            2.33
13 mu_1       0.4      0.962       0.936  0.378            1.89
14 mu_1       0.5      0.966       0.949  0.573            2.04
15 mu_1       0.6      1.03        1.02   0.651            1.86
16 mu_1       0.7      1.03        1.03   0.671            1.59
17 mu_1       0.8      1.06        1.04   0.499            1.54
18 mu_1       0.9      1.02        0.987  0.363            1.86
19 mu_0       0.1      1.13        0.0901 0.000000148     12.8 
20 mu_0       0.2      1.01        0.766  0.0286           4.08
21 mu_0       0.3      0.990       0.947  0.195            2.39
22 mu_0       0.4      0.964       0.935  0.382            1.96
23 mu_0       0.5      0.964       0.953  0.541            2.12
24 mu_0       0.6      1.02        1.00   0.653            1.82
25 mu_0       0.7      1.03        1.03   0.675            1.51
26 mu_0       0.8      1.05        1.04   0.506            1.56
27 mu_0       0.9      1.05        1.04   0.419            1.98
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0210     1.17e-28  1.55e-70      2.06
 2 mu         0.2     1.50       2.53e-15  2.92e-46     80.7 
 3 mu         0.3     2.65       2.52e- 8  2.76e-32    119.  
 4 mu         0.4     1.02       5.77e- 4  1.41e-22     16.5 
 5 mu         0.5     1.33       4.20e- 2  2.91e-15     28.9 
 6 mu         0.6     1.08       3.21e- 1  5.90e-10     15.4 
 7 mu         0.7     1.44       1.69e- 1  2.59e-16     19.1 
 8 mu         0.8     1.07       2.68e- 2  1.02e-27     10.6 
 9 mu         0.9     1.28       1.10e- 7  2.05e-48     18.5 
10 mu_1       0.1     0.0443     6.72e-28  1.41e-69      4.35
11 mu_1       0.2     1.84       8.83e-15  1.33e-45    103.  
12 mu_1       0.3     2.45       5.36e- 8  8.38e-32    101.  
13 mu_1       0.4     1.04       9.36e- 4  3.22e-22     18.0 
14 mu_1       0.5     1.31       5.42e- 2  5.30e-15     28.0 
15 mu_1       0.6     1.11       3.02e- 1  9.67e-10     15.8 
16 mu_1       0.7     1.43       1.76e- 1  9.43e-17     18.4 
17 mu_1       0.8     1.08       2.14e- 2  3.25e-28     11.1 
18 mu_1       0.9     1.27       7.57e- 8  5.81e-49     18.8 
19 mu_0       0.1     0.0184     5.55e-29  1.53e-71      1.81
20 mu_0       0.2     1.41       9.48e-16  3.24e-47     75.1 
21 mu_0       0.3     2.74       1.30e- 8  3.51e-33    127.  
22 mu_0       0.4     1.01       3.38e- 4  2.09e-23     15.5 
23 mu_0       0.5     1.36       3.12e- 2  4.29e-16     29.8 
24 mu_0       0.6     1.03       3.11e- 1  2.42e-11     14.7 
25 mu_0       0.7     1.48       9.68e- 2  6.42e-16     20.5 
26 mu_0       0.8     1.04       4.61e- 2  3.79e-27     11.0 
27 mu_0       0.9     1.32       3.95e- 7  1.53e-47     16.4 
[1] "Total run time was 377.361 seconds"
