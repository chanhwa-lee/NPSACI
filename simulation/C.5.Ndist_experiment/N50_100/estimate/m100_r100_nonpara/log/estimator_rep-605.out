
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7570"
[1] "cluster size dist'n: "

 52  55  56  58  59  60  62  63  64  65  66  67  68  69  71  72  73  74  75  76 
  1   7   1   4   1   4   2   1   2   4   4   3   2   3   1   6   2   4   2   4 
 78  80  81  82  83  86  87  88  89  90  92  93  94  95  97  98  99 100 
  3   1   1   4   1   4   2   1   6   1   2   3   2   2   2   3   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04427 0.37058 0.62709 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4437 3133 
[1] "treatment indicator table: "

   0    1 
2745 4825 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3829
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3741
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 515.173 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.344 0.135 
 2 mu         0.1   0.2 0.423 0.156 
 3 mu         0.1   0.3 0.454 0.143 
 4 mu         0.1   0.4 0.530 0.155 
 5 mu         0.1   0.5 0.605 0.152 
 6 mu         0.2   0.1 0.356 0.103 
 7 mu         0.2   0.2 0.449 0.115 
 8 mu         0.2   0.3 0.496 0.0868
 9 mu         0.2   0.4 0.582 0.0909
10 mu         0.2   0.5 0.669 0.0777
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.888       0.100  0.00000000231     13.3 
 2 mu         0.2      1.10        0.936  0.00279            3.81
 3 mu         0.3      1.00        0.946  0.260              2.25
 4 mu         0.4      0.978       0.988  0.226              1.84
 5 mu         0.5      0.967       0.960  0.540              1.41
 6 mu         0.6      1.00        0.998  0.606              1.51
 7 mu         0.7      1.01        1.02   0.673              1.63
 8 mu         0.8      1.04        1.01   0.575              1.60
 9 mu         0.9      0.980       0.968  0.160              1.94
10 mu_1       0.1      0.979       0.188  0.00000000792     11.8 
11 mu_1       0.2      1.09        0.918  0.00490            3.42
12 mu_1       0.3      0.995       0.947  0.264              2.07
13 mu_1       0.4      0.977       0.989  0.225              1.81
14 mu_1       0.5      0.968       0.964  0.555              1.41
15 mu_1       0.6      1.00        0.992  0.606              1.50
16 mu_1       0.7      1.01        1.03   0.671              1.66
17 mu_1       0.8      1.04        1.02   0.570              1.61
18 mu_1       0.9      0.979       0.966  0.150              1.98
19 mu_0       0.1      0.878       0.0903 0.00000000168     13.8 
20 mu_0       0.2      1.10        0.927  0.00227            3.94
21 mu_0       0.3      1.00        0.954  0.259              2.33
22 mu_0       0.4      0.978       0.972  0.226              1.85
23 mu_0       0.5      0.967       0.965  0.502              1.43
24 mu_0       0.6      0.999       1.00   0.605              1.52
25 mu_0       0.7      1.01        0.994  0.680              1.56
26 mu_0       0.8      1.04        1.02   0.584              1.54
27 mu_0       0.9      0.991       0.988  0.246              1.68
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00182     1.52e-27  3.57e-72     0.182
 2 mu         0.2    0.353       5.35e-14  1.51e-46    32.6  
 3 mu         0.3    0.879       1.26e- 7  7.28e-32    39.5  
 4 mu         0.4    1.04        1.63e- 3  9.90e-22    17.7  
 5 mu         0.5    1.40        2.11e- 1  3.59e-14    12.9  
 6 mu         0.6    1.37        5.33e- 1  8.16e- 9     9.96 
 7 mu         0.7    1.19        2.81e- 1  8.08e-14     9.36 
 8 mu         0.8    1.39        7.18e- 3  1.08e-22    19.3  
 9 mu         0.9    1.61        4.76e- 9  2.22e-39    38.1  
10 mu_1       0.1    0.00424     9.46e-27  3.17e-71     0.423
11 mu_1       0.2    0.423       1.67e-13  6.72e-46    37.9  
12 mu_1       0.3    0.919       2.70e- 7  2.15e-31    41.1  
13 mu_1       0.4    1.05        2.49e- 3  2.20e-21    15.3  
14 mu_1       0.5    1.43        2.73e- 1  6.38e-14    13.3  
15 mu_1       0.6    1.35        5.29e- 1  1.30e- 8     9.80 
16 mu_1       0.7    1.20        2.28e- 1  2.69e-14     9.05 
17 mu_1       0.8    1.40        5.76e- 3  3.14e-23    20.1  
18 mu_1       0.9    1.63        3.19e- 9  7.70e-40    40.2  
19 mu_0       0.1    0.00155     6.30e-28  4.46e-73     0.155
20 mu_0       0.2    0.335       2.51e-14  2.12e-47    31.2  
21 mu_0       0.3    0.863       6.03e- 8  1.17e-32    38.8  
22 mu_0       0.4    1.04        1.06e- 3  1.85e-22    19.3  
23 mu_0       0.5    1.37        1.49e- 1  8.07e-15    12.4  
24 mu_0       0.6    1.41        4.14e- 1  9.13e-10    10.2  
25 mu_0       0.7    1.17        2.35e- 1  2.07e-13    10.1  
26 mu_0       0.8    1.35        1.34e- 2  4.13e-22    16.3  
27 mu_0       0.9    1.40        1.89e- 8  1.53e-38    19.8  
[1] "Total run time was 519.512 seconds"
