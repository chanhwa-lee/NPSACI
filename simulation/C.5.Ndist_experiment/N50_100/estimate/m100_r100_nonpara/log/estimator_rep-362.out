
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7451"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  61  62  63  64  65  66  67  68  69  70  71  72  74 
  4   1   4   2   3   3   5   3   1   2   1   2   2   2   1   6   2   2   2   1 
 75  76  77  78  79  80  81  82  83  85  86  88  89  90  91  92  93  94  95  96 
  1   4   1   2   2   2   3   2   2   1   2   4   3   3   4   1   4   1   1   1 
 97  98  99 100 
  2   3   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03845 0.35408 0.61173 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4339 3112 
[1] "treatment indicator table: "

   0    1 
2829 4622 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3660
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3791
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 424.269 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.384 0.0989
 2 mu         0.1   0.2 0.464 0.0750
 3 mu         0.1   0.3 0.523 0.0650
 4 mu         0.1   0.4 0.551 0.0794
 5 mu         0.1   0.5 0.567 0.0950
 6 mu         0.2   0.1 0.380 0.0665
 7 mu         0.2   0.2 0.469 0.0551
 8 mu         0.2   0.3 0.535 0.0518
 9 mu         0.2   0.4 0.581 0.0656
10 mu         0.2   0.5 0.601 0.0654
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      0.995        0.617 0.00000578      5.15
 2 mu         0.2      1.07         0.982 0.0328          3.22
 3 mu         0.3      0.996        0.921 0.325           2.39
 4 mu         0.4      1.01         0.969 0.494           1.57
 5 mu         0.5      1.02         1.01  0.557           1.65
 6 mu         0.6      0.984        0.989 0.559           1.54
 7 mu         0.7      1.01         0.971 0.607           1.64
 8 mu         0.8      1.02         1.02  0.518           1.82
 9 mu         0.9      0.979        0.964 0.206           2.17
10 mu_1       0.1      1.01         0.786 0.0000177       4.55
11 mu_1       0.2      1.06         0.986 0.0513          2.97
12 mu_1       0.3      0.995        0.949 0.350           2.39
13 mu_1       0.4      1.01         0.978 0.513           1.57
14 mu_1       0.5      1.02         1.02  0.556           1.60
15 mu_1       0.6      0.983        0.990 0.553           1.52
16 mu_1       0.7      1.01         0.973 0.609           1.64
17 mu_1       0.8      1.02         1.01  0.526           1.81
18 mu_1       0.9      0.977        0.961 0.200           2.15
19 mu_0       0.1      0.994        0.588 0.00000445      5.34
20 mu_0       0.2      1.07         0.972 0.0282          3.29
21 mu_0       0.3      0.996        0.912 0.314           2.39
22 mu_0       0.4      1.01         0.955 0.481           1.58
23 mu_0       0.5      1.02         1.02  0.559           1.71
24 mu_0       0.6      0.986        0.990 0.567           1.56
25 mu_0       0.7      1.00         0.975 0.603           1.64
26 mu_0       0.8      1.01         1.01  0.487           1.88
27 mu_0       0.9      0.998        0.962 0.264           2.42
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.399     6.22e-28  2.85e-73     21.5 
 2 mu         0.2      1.99      2.45e-15  4.30e-48     71.4 
 3 mu         0.3      1.25      1.47e- 8  1.37e-33     18.5 
 4 mu         0.4      1.24      1.71e- 4  1.67e-23     14.3 
 5 mu         0.5      1.06      2.89e- 2  6.70e-16     12.6 
 6 mu         0.6      1.10      8.49e- 2  2.03e-14      7.72
 7 mu         0.7      1.32      2.28e- 1  5.74e-23      7.63
 8 mu         0.8      1.60      5.86e- 2  1.34e-35     14.5 
 9 mu         0.9      1.35      6.75e- 7  5.85e-58     20.3 
10 mu_1       0.1      0.674     3.77e-27  2.61e-72     34.4 
11 mu_1       0.2      1.86      8.33e-15  1.97e-47     61.4 
12 mu_1       0.3      1.24      3.09e- 8  4.18e-33     18.8 
13 mu_1       0.4      1.23      2.90e- 4  3.81e-23     14.2 
14 mu_1       0.5      1.06      2.76e- 2  1.22e-15     12.7 
15 mu_1       0.6      1.11      9.69e- 2  5.83e-15      7.28
16 mu_1       0.7      1.33      1.95e- 1  1.41e-23      7.23
17 mu_1       0.8      1.60      4.94e- 2  2.89e-36     14.0 
18 mu_1       0.9      1.34      4.88e- 7  1.12e-58     20.1 
19 mu_0       0.1      0.369     2.73e-28  2.73e-74     20.1 
20 mu_0       0.2      2.03      9.80e-16  4.63e-49     73.9 
21 mu_0       0.3      1.25      7.03e- 9  1.69e-34     19.2 
22 mu_0       0.4      1.24      9.42e- 5  2.39e-24     14.3 
23 mu_0       0.5      1.06      2.39e- 2  1.15e-16     12.4 
24 mu_0       0.6      1.09      9.28e- 2  4.21e-14      8.40
25 mu_0       0.7      1.29      3.02e- 1  1.58e-22      8.58
26 mu_0       0.8      1.63      6.67e- 2  5.56e-35     16.6 
27 mu_0       0.9      1.42      2.37e- 6  4.84e-57     27.1 
[1] "Total run time was 429.161 seconds"
