
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7612"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  58  59  60  61  62  63  64  65  67  68  70  71  72  75 
  4   3   2   1   4   2   3   2   1   1   2   1   1   2   2   6   2   1   8   2 
 76  77  80  81  82  83  84  86  87  88  89  90  91  92  93  94  95  96  97  98 
  2   3   2   1   1   2   1   2   1   2   2   3   5   4   4   2   3   4   1   3 
 99 100 
  1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03668 0.35620 0.61934 1.00000 6.29740 
[1] "event indicator table: "

   0    1 
4445 3167 
[1] "treatment indicator table: "

   0    1 
2851 4761 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3796
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3816
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 352.346 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.431 0.0656
 2 mu         0.1   0.2 0.495 0.0681
 3 mu         0.1   0.3 0.554 0.0762
 4 mu         0.1   0.4 0.633 0.0874
 5 mu         0.1   0.5 0.730 0.113 
 6 mu         0.2   0.1 0.358 0.0409
 7 mu         0.2   0.2 0.425 0.0340
 8 mu         0.2   0.3 0.481 0.0369
 9 mu         0.2   0.4 0.539 0.0385
10 mu         0.2   0.5 0.596 0.0444
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      1.07         0.825 0.00000104      10.7 
 2 mu         0.2      0.978        0.884 0.0416           2.90
 3 mu         0.3      1.03         0.960 0.228            2.20
 4 mu         0.4      1.03         1.03  0.493            1.68
 5 mu         0.5      1.00         1.02  0.504            1.51
 6 mu         0.6      0.979        0.968 0.591            1.35
 7 mu         0.7      0.994        0.988 0.612            1.48
 8 mu         0.8      0.956        0.941 0.509            1.52
 9 mu         0.9      1.02         1.02  0.338            2.25
10 mu_1       0.1      1.12         0.864 0.00000292      11.0 
11 mu_1       0.2      0.974        0.909 0.0635           2.47
12 mu_1       0.3      1.03         0.961 0.244            2.06
13 mu_1       0.4      1.03         1.04  0.486            1.65
14 mu_1       0.5      1.00         1.02  0.514            1.53
15 mu_1       0.6      0.978        0.976 0.595            1.36
16 mu_1       0.7      0.994        0.993 0.623            1.47
17 mu_1       0.8      0.956        0.946 0.506            1.53
18 mu_1       0.9      1.02         1.01  0.331            2.27
19 mu_0       0.1      1.07         0.803 0.000000833     10.7 
20 mu_0       0.2      0.979        0.872 0.0361           3.01
21 mu_0       0.3      1.03         0.959 0.221            2.25
22 mu_0       0.4      1.03         1.03  0.497            1.69
23 mu_0       0.5      1.01         1.03  0.494            1.49
24 mu_0       0.6      0.980        0.985 0.585            1.34
25 mu_0       0.7      0.995        0.986 0.586            1.48
26 mu_0       0.8      0.956        0.939 0.522            1.52
27 mu_0       0.9      1.01         1.04  0.405            2.11
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0457     3.36e-28  1.38e-66      4.55
 2 mu         0.2     0.473      5.33e-15  1.63e-43     32.6 
 3 mu         0.3     1.36       4.95e- 8  1.90e-31     58.3 
 4 mu         0.4     1.33       8.66e- 4  5.84e-23     24.5 
 5 mu         0.5     1.18       1.28e- 1  1.97e-16     14.6 
 6 mu         0.6     1.17       9.51e- 2  3.67e-11      8.58
 7 mu         0.7     0.907      9.33e- 2  2.97e-15     10.9 
 8 mu         0.8     1.19       6.78e- 3  7.73e-26     11.9 
 9 mu         0.9     1.24       3.84e- 8  3.15e-45     16.2 
10 mu_1       0.1     0.0854     2.13e-27  1.25e-65      8.48
11 mu_1       0.2     0.517      1.77e-14  7.38e-43     30.4 
12 mu_1       0.3     1.43       1.03e- 7  6.17e-31     63.2 
13 mu_1       0.4     1.30       1.35e- 3  1.42e-22     20.0 
14 mu_1       0.5     1.17       1.30e- 1  3.83e-16     13.1 
15 mu_1       0.6     1.17       7.09e- 2  5.95e-11      9.39
16 mu_1       0.7     0.896      8.80e- 2  1.19e-15     10.2 
17 mu_1       0.8     1.20       5.12e- 3  2.72e-26     12.0 
18 mu_1       0.9     1.23       2.61e- 8  9.84e-46     15.9 
19 mu_0       0.1     0.0413     1.36e-28  1.43e-67      4.11
20 mu_0       0.2     0.462      2.37e-15  6.20e-45     33.2 
21 mu_0       0.3     1.33       2.63e- 8  7.66e-33     56.2 
22 mu_0       0.4     1.35       5.39e- 4  2.74e-24     27.6 
23 mu_0       0.5     1.19       8.61e- 2  1.11e-17     16.2 
24 mu_0       0.6     1.16       7.71e- 2  2.58e-12      7.78
25 mu_0       0.7     0.934      1.01e- 1  7.11e-15     12.5 
26 mu_0       0.8     1.13       1.34e- 2  2.78e-25     11.6 
27 mu_0       0.9     1.30       1.49e- 7  2.26e-44     18.4 
[1] "Total run time was 355.528 seconds"
