
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7591"
[1] "cluster size dist'n: "

 50  51  52  53  54  56  57  58  59  60  61  62  63  66  67  68  71  72  73  74 
  5   3   2   1   2   4   1   2   1   3   1   1   1   2   3   3   5   1   1   1 
 76  77  78  79  80  81  82  83  84  86  88  89  90  91  92  94  95  96  98  99 
  4   3   3   1   2   2   2   4   2   3   3   3   2   5   2   1   4   5   2   2 
100 
  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03286 0.35325 0.60532 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4498 3093 
[1] "treatment indicator table: "

   0    1 
2879 4712 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3868
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3723
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 369.931 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.453 0.0924
 2 mu         0.1   0.2 0.576 0.115 
 3 mu         0.1   0.3 0.648 0.126 
 4 mu         0.1   0.4 0.710 0.138 
 5 mu         0.1   0.5 0.783 0.148 
 6 mu         0.2   0.1 0.353 0.0442
 7 mu         0.2   0.2 0.448 0.0556
 8 mu         0.2   0.3 0.511 0.0557
 9 mu         0.2   0.4 0.560 0.0575
10 mu         0.2   0.5 0.618 0.0665
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.23         0.182  4.29e-10     18.2 
 2 mu         0.2      0.996        0.776  1.76e- 3      5.81
 3 mu         0.3      1.03         0.971  1.21e- 1      2.77
 4 mu         0.4      0.973        0.965  3.50e- 1      1.84
 5 mu         0.5      0.997        0.973  6.21e- 1      1.44
 6 mu         0.6      0.991        0.970  6.55e- 1      1.48
 7 mu         0.7      1.03         1.03   7.65e- 1      1.50
 8 mu         0.8      1.05         1.04   5.74e- 1      1.62
 9 mu         0.9      0.924        0.888  1.22e- 1      1.72
10 mu_1       0.1      1.24         0.275  1.50e- 9     13.7 
11 mu_1       0.2      0.985        0.791  3.09e- 3      5.67
12 mu_1       0.3      1.03         0.951  1.03e- 1      2.65
13 mu_1       0.4      0.974        0.962  3.82e- 1      1.77
14 mu_1       0.5      0.997        0.974  6.37e- 1      1.41
15 mu_1       0.6      0.992        0.972  6.56e- 1      1.49
16 mu_1       0.7      1.03         1.03   7.69e- 1      1.51
17 mu_1       0.8      1.04         1.04   5.63e- 1      1.63
18 mu_1       0.9      0.923        0.885  1.14e- 1      1.74
19 mu_0       0.1      1.23         0.170  3.11e-10     18.8 
20 mu_0       0.2      0.999        0.767  1.43e- 3      5.85
21 mu_0       0.3      1.03         0.979  1.29e- 1      2.82
22 mu_0       0.4      0.972        0.962  3.28e- 1      1.89
23 mu_0       0.5      0.996        0.978  6.03e- 1      1.46
24 mu_0       0.6      0.989        0.971  6.55e- 1      1.47
25 mu_0       0.7      1.03         1.02   7.55e- 1      1.48
26 mu_0       0.8      1.05         1.05   6.17e- 1      1.58
27 mu_0       0.9      0.937        0.908  1.91e- 1      1.64
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.121     5.83e-25  2.86e-90      7.75
 2 mu         0.2      2.86      2.75e-13  3.19e-61    127.  
 3 mu         0.3      1.28      2.34e- 7  2.57e-44     46.0 
 4 mu         0.4      1.12      1.27e- 3  2.13e-32     25.1 
 5 mu         0.5      1.08      1.17e- 1  3.10e-23     10.1 
 6 mu         0.6      0.987     2.27e- 1  7.60e-16      7.02
 7 mu         0.7      1.00      1.70e- 1  1.83e-19     12.2 
 8 mu         0.8      0.931     1.09e- 2  1.87e-31      8.65
 9 mu         0.9      1.81      2.33e- 8  5.88e-53     49.5 
10 mu_1       0.1      0.250     3.88e-24  2.78e-89     16.4 
11 mu_1       0.2      3.02      9.27e-13  1.55e-60    134.  
12 mu_1       0.3      1.13      4.95e- 7  8.31e-44     32.4 
13 mu_1       0.4      1.12      1.99e- 3  5.17e-32     22.1 
14 mu_1       0.5      1.09      1.42e- 1  6.01e-23     10.1 
15 mu_1       0.6      0.985     2.42e- 1  1.23e-15      6.53
16 mu_1       0.7      1.00      1.65e- 1  5.71e-20     12.5 
17 mu_1       0.8      0.934     8.22e- 3  5.12e-32      9.05
18 mu_1       0.9      1.85      1.68e- 8  1.43e-53     51.0 
19 mu_0       0.1      0.106     2.17e-25  9.54e-92      6.79
20 mu_0       0.2      2.82      1.13e-13  1.19e-62    125.  
21 mu_0       0.3      1.35      1.22e- 7  1.10e-45     51.8 
22 mu_0       0.4      1.12      7.67e- 4  1.07e-33     27.1 
23 mu_0       0.5      1.08      8.36e- 2  1.86e-24     10.1 
24 mu_0       0.6      0.991     1.79e- 1  5.70e-17      7.76
25 mu_0       0.7      1.00      1.64e- 1  4.76e-19     11.5 
26 mu_0       0.8      0.920     1.44e- 2  7.32e-31      7.04
27 mu_0       0.9      1.46      8.19e- 8  4.60e-52     35.3 
[1] "Total run time was 373.473 seconds"
