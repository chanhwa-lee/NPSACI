
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7357"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  65  66  67  69  70  71  72 
  4   2   2   4   2   4   2   5   1   1   2   1   1   6   3   1   1   3   1   1 
 73  74  75  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92  93  94 
  2   1   1   1   4   1   5   4   3   1   3   4   1   2   3   1   4   1   1   1 
 95  96  98  99 100 
  4   1   2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03332 0.34123 0.60581 1.00000 6.94483 
[1] "event indicator table: "

   0    1 
4267 3090 
[1] "treatment indicator table: "

   0    1 
2820 4537 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3760
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3597
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 482.471 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.355 0.0891
 2 mu         0.1   0.2 0.447 0.109 
 3 mu         0.1   0.3 0.540 0.109 
 4 mu         0.1   0.4 0.577 0.107 
 5 mu         0.1   0.5 0.583 0.109 
 6 mu         0.2   0.1 0.374 0.0509
 7 mu         0.2   0.2 0.478 0.0638
 8 mu         0.2   0.3 0.564 0.0613
 9 mu         0.2   0.4 0.615 0.0532
10 mu         0.2   0.5 0.633 0.0541
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.590 0.0000941     15.5 
 2 mu         0.2      1.15         0.991 0.104          8.20
 3 mu         0.3      1.09         1.07  0.459          2.36
 4 mu         0.4      0.992        0.975 0.569          1.55
 5 mu         0.5      0.980        0.965 0.489          1.40
 6 mu         0.6      0.990        0.991 0.658          1.32
 7 mu         0.7      1.01         0.995 0.621          1.57
 8 mu         0.8      0.967        0.946 0.579          1.38
 9 mu         0.9      1.01         0.961 0.393          2.11
10 mu_1       0.1      1.04         0.735 0.000261      12.6 
11 mu_1       0.2      1.16         1.03  0.147          7.90
12 mu_1       0.3      1.08         1.05  0.497          2.10
13 mu_1       0.4      0.986        0.976 0.536          1.54
14 mu_1       0.5      0.981        0.951 0.495          1.39
15 mu_1       0.6      0.991        0.997 0.665          1.31
16 mu_1       0.7      1.01         0.996 0.604          1.57
17 mu_1       0.8      0.967        0.947 0.569          1.38
18 mu_1       0.9      1.01         0.961 0.387          2.14
19 mu_0       0.1      1.02         0.585 0.0000756     15.8 
20 mu_0       0.2      1.15         0.990 0.0931         8.27
21 mu_0       0.3      1.09         1.06  0.444          2.48
22 mu_0       0.4      0.995        0.973 0.591          1.56
23 mu_0       0.5      0.979        0.967 0.483          1.42
24 mu_0       0.6      0.988        0.990 0.646          1.34
25 mu_0       0.7      1.02         0.998 0.633          1.57
26 mu_0       0.8      0.967        0.963 0.621          1.39
27 mu_0       0.9      1.00         0.957 0.418          1.83
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0170     8.82e-28  1.28e-87     0.933
 2 mu         0.2     2.45       3.31e-14  9.98e-60   127.   
 3 mu         0.3     1.75       2.20e- 7  1.82e-43    65.2  
 4 mu         0.4     1.01       3.26e- 3  5.56e-32    17.0  
 5 mu         0.5     1.03       7.74e- 2  3.97e-23     6.69 
 6 mu         0.6     1.30       2.67e- 1  5.88e-16    10.6  
 7 mu         0.7     1.07       1.45e- 1  4.08e-20     6.29 
 8 mu         0.8     1.52       2.47e- 3  2.44e-32    16.9  
 9 mu         0.9     0.752      1.65e- 8  3.41e-54    14.7  
10 mu_1       0.1     0.0374     5.92e-27  1.25e-86     1.94 
11 mu_1       0.2     2.76       9.55e-14  4.88e-59   132.   
12 mu_1       0.3     1.60       4.37e- 7  5.93e-43    53.6  
13 mu_1       0.4     0.983      5.03e- 3  1.36e-31    16.3  
14 mu_1       0.5     1.05       9.79e- 2  7.78e-23     7.10 
15 mu_1       0.6     1.30       2.41e- 1  9.59e-16    10.9  
16 mu_1       0.7     1.07       1.54e- 1  1.21e-20     6.29 
17 mu_1       0.8     1.53       1.95e- 3  6.35e-33    16.5  
18 mu_1       0.9     0.731      1.14e- 8  7.88e-55    14.7  
19 mu_0       0.1     0.0148     3.22e-28  2.98e-89     0.820
20 mu_0       0.2     2.37       1.56e-14  2.63e-61   125.   
21 mu_0       0.3     1.81       1.27e- 7  5.47e-45    70.1  
22 mu_0       0.4     1.02       2.01e- 3  1.95e-33    17.4  
23 mu_0       0.5     1.01       6.56e- 2  1.67e-24     6.27 
24 mu_0       0.6     1.31       1.90e- 1  3.09e-17    10.3  
25 mu_0       0.7     1.08       1.46e- 1  1.08e-19     6.57 
26 mu_0       0.8     1.47       4.53e- 3  9.66e-32    18.6  
27 mu_0       0.9     0.940      6.25e- 8  2.70e-53    14.7  
[1] "Total run time was 486.382 seconds"
