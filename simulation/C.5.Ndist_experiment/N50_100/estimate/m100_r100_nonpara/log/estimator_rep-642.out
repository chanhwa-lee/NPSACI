
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7622"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  60  61  62  63  64  66  67  68  69  70  71 
  1   1   1   1   3   2   1   2   3   1   5   3   1   1   5   2   2   2   3   2 
 72  73  75  76  77  78  80  81  82  83  85  86  87  88  89  90  91  94  95  96 
  1   2   2   3   3   2   4   1   1   7   2   2   2   1   2   2   5   3   2   3 
 97  98  99 100 
  1   1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02603 0.31431 0.58818 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4564 3058 
[1] "treatment indicator table: "

   0    1 
2741 4881 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3783
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3839
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 440.539 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.353 0.0839
 2 mu         0.1   0.2 0.425 0.111 
 3 mu         0.1   0.3 0.485 0.131 
 4 mu         0.1   0.4 0.501 0.125 
 5 mu         0.1   0.5 0.529 0.129 
 6 mu         0.2   0.1 0.378 0.0641
 7 mu         0.2   0.2 0.461 0.0876
 8 mu         0.2   0.3 0.529 0.104 
 9 mu         0.2   0.4 0.553 0.0924
10 mu         0.2   0.5 0.587 0.0941
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.812       0.0932  1.87e-10      6.91
 2 mu         0.2      0.978       0.882   1.04e- 3      4.07
 3 mu         0.3      0.997       0.988   2.86e- 1      2.15
 4 mu         0.4      0.994       0.940   4.19e- 1      1.94
 5 mu         0.5      1.01        1.02    5.72e- 1      1.46
 6 mu         0.6      1.00        1.02    5.75e- 1      1.40
 7 mu         0.7      0.995       0.980   6.79e- 1      1.48
 8 mu         0.8      1.03        1.01    5.56e- 1      1.65
 9 mu         0.9      1.01        0.956   2.78e- 1      1.88
10 mu_1       0.1      0.751       0.154   6.69e-10      4.83
11 mu_1       0.2      0.990       0.918   1.87e- 3      3.59
12 mu_1       0.3      0.997       1.00    3.47e- 1      1.99
13 mu_1       0.4      0.995       0.942   4.02e- 1      1.92
14 mu_1       0.5      1.01        1.01    5.91e- 1      1.46
15 mu_1       0.6      0.999       1.02    5.73e- 1      1.43
16 mu_1       0.7      0.996       0.977   6.73e- 1      1.46
17 mu_1       0.8      1.03        1.01    5.56e- 1      1.65
18 mu_1       0.9      1.01        0.950   2.65e- 1      1.89
19 mu_0       0.1      0.819       0.0853  1.34e-10      7.53
20 mu_0       0.2      0.975       0.877   8.32e- 4      4.19
21 mu_0       0.3      0.997       0.997   2.57e- 1      2.22
22 mu_0       0.4      0.993       0.950   4.31e- 1      1.96
23 mu_0       0.5      1.01        1.01    5.52e- 1      1.48
24 mu_0       0.6      1.00        1.02    5.79e- 1      1.37
25 mu_0       0.7      0.994       0.968   6.49e- 1      1.54
26 mu_0       0.8      1.02        1.01    5.58e- 1      1.64
27 mu_0       0.9      1.02        0.998   3.78e- 1      1.90
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1  0.0000928     5.54e-30  2.86e-82   0.00506
 2 mu         0.2  0.298         1.93e-16  2.21e-55  14.1    
 3 mu         0.3  0.973         7.37e- 9  9.12e-40  22.1    
 4 mu         0.4  1.27          3.47e- 4  8.64e-29  28.9    
 5 mu         0.5  1.20          3.50e- 2  2.20e-20  12.6    
 6 mu         0.6  1.39          1.63e- 1  1.20e-13  13.9    
 7 mu         0.7  1.15          3.95e- 1  9.20e-17   7.56   
 8 mu         0.8  1.38          3.32e- 2  2.10e-27  11.6    
 9 mu         0.9  0.958         2.11e- 7  1.07e-46  15.4    
10 mu_1       0.1  0.000239      4.04e-29  2.73e-81   0.0128 
11 mu_1       0.2  0.390         6.05e-16  1.06e-54  17.8    
12 mu_1       0.3  0.987         1.51e- 8  2.91e-39  20.6    
13 mu_1       0.4  1.29          5.43e- 4  2.07e-28  29.6    
14 mu_1       0.5  1.20          4.09e- 2  4.21e-20  13.3    
15 mu_1       0.6  1.40          1.55e- 1  1.92e-13  14.5    
16 mu_1       0.7  1.14          3.86e- 1  3.32e-17   7.09   
17 mu_1       0.8  1.38          2.76e- 2  6.65e-28  11.9    
18 mu_1       0.9  0.954         1.50e- 7  3.01e-47  15.1    
19 mu_0       0.1  0.0000766     1.67e-30  1.35e-83   0.00420
20 mu_0       0.2  0.275         9.00e-17  1.17e-56  13.2    
21 mu_0       0.3  0.966         4.05e- 9  5.54e-41  23.2    
22 mu_0       0.4  1.25          2.16e- 4  6.13e-30  28.4    
23 mu_0       0.5  1.20          2.31e- 2  1.87e-21  12.5    
24 mu_0       0.6  1.38          1.22e- 1  1.28e-14  13.0    
25 mu_0       0.7  1.18          3.15e- 1  2.29e-16   8.68   
26 mu_0       0.8  1.37          5.50e- 2  7.86e-27  10.2    
27 mu_0       0.9  0.991         7.40e- 7  8.00e-46  17.6    
[1] "Total run time was 448.244 seconds"
