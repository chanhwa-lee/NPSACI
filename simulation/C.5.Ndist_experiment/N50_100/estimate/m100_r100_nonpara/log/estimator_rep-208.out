
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7669"
[1] "cluster size dist'n: "

 50  52  53  54  55  57  58  60  61  62  63  64  65  67  68  69  70  71  72  73 
  1   2   2   1   1   1   2   2   2   2   2   6   3   3   2   3   2   3   3   4 
 74  75  76  78  79  80  82  83  84  85  86  87  88  90  91  92  93  94  95  96 
  4   1   1   3   1   3   4   1   3   3   2   1   1   2   3   2   2   1   1   3 
 97  98  99 100 
  2   1   6   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03954 0.35785 0.62236 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4549 3120 
[1] "treatment indicator table: "

   0    1 
2762 4907 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3721
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3948
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 884.377 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.345 0.0778
 2 mu         0.1   0.2 0.469 0.103 
 3 mu         0.1   0.3 0.534 0.109 
 4 mu         0.1   0.4 0.567 0.113 
 5 mu         0.1   0.5 0.602 0.120 
 6 mu         0.2   0.1 0.263 0.0328
 7 mu         0.2   0.2 0.375 0.0469
 8 mu         0.2   0.3 0.437 0.0508
 9 mu         0.2   0.4 0.475 0.0541
10 mu         0.2   0.5 0.507 0.0582
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.904       0.0405  1.47e-11      9.21
 2 mu         0.2      0.833       0.603   2.73e- 4      2.86
 3 mu         0.3      0.918       0.867   1.25e- 1      2.25
 4 mu         0.4      0.969       0.942   3.75e- 1      1.83
 5 mu         0.5      1.02        1.04    6.62e- 1      1.46
 6 mu         0.6      1.01        0.996   7.00e- 1      1.51
 7 mu         0.7      1.00        1.01    5.16e- 1      1.64
 8 mu         0.8      0.982       0.972   4.72e- 1      1.95
 9 mu         0.9      1.01        0.972   4.79e- 2      1.95
10 mu_1       0.1      0.880       0.0781  5.44e-11      8.84
11 mu_1       0.2      0.845       0.624   5.05e- 4      3.07
12 mu_1       0.3      0.920       0.868   1.56e- 1      2.27
13 mu_1       0.4      0.976       0.970   3.90e- 1      1.84
14 mu_1       0.5      1.02        1.02    6.69e- 1      1.46
15 mu_1       0.6      1.00        0.995   6.96e- 1      1.49
16 mu_1       0.7      1.00        1.01    5.15e- 1      1.67
17 mu_1       0.8      0.981       0.974   4.64e- 1      1.96
18 mu_1       0.9      1.01        0.969   4.43e- 2      1.99
19 mu_0       0.1      0.907       0.0364  1.03e-11      9.34
20 mu_0       0.2      0.830       0.623   2.15e- 4      2.99
21 mu_0       0.3      0.917       0.862   1.11e- 1      2.24
22 mu_0       0.4      0.964       0.934   3.65e- 1      1.83
23 mu_0       0.5      1.02        1.03    6.55e- 1      1.46
24 mu_0       0.6      1.01        0.993   7.04e- 1      1.54
25 mu_0       0.7      1.00        1.02    5.18e- 1      1.58
26 mu_0       0.8      0.987       0.988   5.03e- 1      1.91
27 mu_0       0.9      1.00        0.994   8.06e- 2      1.72
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.698     2.06e-30  6.31e-72     67.6 
 2 mu         0.2      1.21      5.65e-17  8.45e-47     53.2 
 3 mu         0.3      0.990     4.44e- 9  1.88e-32     60.4 
 4 mu         0.4      0.691     1.20e- 4  4.42e-24     11.3 
 5 mu         0.5      0.681     2.06e- 2  1.38e-17      6.63
 6 mu         0.6      0.847     1.54e- 1  2.78e-12      4.90
 7 mu         0.7      1.34      2.65e- 1  1.56e-17     10.8 
 8 mu         0.8      1.28      6.05e- 2  5.88e-28     20.0 
 9 mu         0.9      1.59      1.44e- 6  1.33e-47     36.1 
10 mu_1       0.1      0.997     1.42e-29  5.70e-71     95.0 
11 mu_1       0.2      1.13      1.85e-16  3.82e-46     40.5 
12 mu_1       0.3      0.939     9.34e- 9  6.28e-32     58.2 
13 mu_1       0.4      0.701     1.92e- 4  1.11e-23     10.6 
14 mu_1       0.5      0.680     2.64e- 2  2.75e-17      6.29
15 mu_1       0.6      0.867     1.84e- 1  4.63e-12      4.75
16 mu_1       0.7      1.36      2.86e- 1  3.14e-18     10.9 
17 mu_1       0.8      1.27      4.97e- 2  1.78e-28     19.2 
18 mu_1       0.9      1.58      1.11e- 6  3.57e-48     36.8 
19 mu_0       0.1      0.665     7.09e-31  0            64.5 
20 mu_0       0.2      1.23      2.43e-17  0            57.1 
21 mu_0       0.3      1.01      2.22e- 9  0            61.4 
22 mu_0       0.4      0.685     6.96e- 5  0            11.8 
23 mu_0       0.5      0.682     1.68e- 2  0             6.97
24 mu_0       0.6      0.817     1.14e- 1  0             5.35
25 mu_0       0.7      1.31      3.11e- 1  0            11.2 
26 mu_0       0.8      1.32      9.98e- 2  0            23.3 
27 mu_0       0.9      1.67      4.11e- 6  0            32.4 
[1] "Total run time was 889.341 seconds"
