
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7751"
[1] "cluster size dist'n: "

 51  52  53  56  57  58  59  60  62  63  64  66  67  68  69  70  71  72  73  74 
  1   1   1   2   2   2   1   2   3   1   4   3   3   2   2   2   4   3   1   4 
 75  76  78  79  80  81  82  83  84  86  87  88  89  90  91  92  93  94  95  96 
  4   4   3   2   1   2   2   1   1   2   5   3   1   3   2   6   2   2   1   2 
 98  99 100 
  3   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03954 0.37630 0.63940 1.00000 7.32523 
[1] "event indicator table: "

   0    1 
4620 3131 
[1] "treatment indicator table: "

   0    1 
2759 4992 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3878
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3873
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 440.751 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.358 0.127 
 2 mu         0.1   0.2 0.459 0.154 
 3 mu         0.1   0.3 0.534 0.128 
 4 mu         0.1   0.4 0.611 0.116 
 5 mu         0.1   0.5 0.639 0.112 
 6 mu         0.2   0.1 0.349 0.111 
 7 mu         0.2   0.2 0.450 0.134 
 8 mu         0.2   0.3 0.517 0.0999
 9 mu         0.2   0.4 0.590 0.0857
10 mu         0.2   0.5 0.613 0.0744
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.07         0.207 0.0000000941      9.94
 2 mu         0.2      1.04         0.916 0.00723           4.17
 3 mu         0.3      1.01         0.962 0.235             2.41
 4 mu         0.4      1.02         1.00  0.428             1.88
 5 mu         0.5      1.03         1.00  0.574             2.02
 6 mu         0.6      1.02         1.01  0.583             1.51
 7 mu         0.7      1.02         0.986 0.524             1.74
 8 mu         0.8      0.978        0.984 0.528             1.44
 9 mu         0.9      0.948        0.935 0.0160            2.21
10 mu_1       0.1      1.09         0.321 0.000000276      10.1 
11 mu_1       0.2      1.04         0.931 0.0109            3.94
12 mu_1       0.3      1.01         0.989 0.264             2.35
13 mu_1       0.4      1.02         1.01  0.408             1.84
14 mu_1       0.5      1.03         1.00  0.591             1.99
15 mu_1       0.6      1.02         1.01  0.575             1.51
16 mu_1       0.7      1.02         0.988 0.528             1.76
17 mu_1       0.8      0.976        0.972 0.525             1.44
18 mu_1       0.9      0.948        0.936 0.0141            2.22
19 mu_0       0.1      1.07         0.192 0.0000000738      9.93
20 mu_0       0.2      1.04         0.913 0.00630           4.23
21 mu_0       0.3      1.01         0.965 0.223             2.45
22 mu_0       0.4      1.02         0.988 0.442             1.90
23 mu_0       0.5      1.03         1.01  0.557             2.04
24 mu_0       0.6      1.02         1.01  0.595             1.51
25 mu_0       0.7      1.02         0.991 0.514             1.69
26 mu_0       0.8      0.987        0.987 0.540             1.49
27 mu_0       0.9      0.944        0.908 0.0332            2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000619     1.56e-29  7.29e-80    0.0463
 2 mu         0.2   0.369        3.26e-16  2.50e-53   25.2   
 3 mu         0.3   0.754        7.16e- 9  6.03e-38   24.3   
 4 mu         0.4   0.797        1.77e- 4  3.68e-27   10.4   
 5 mu         0.5   1.04         3.28e- 2  6.23e-19   15.3   
 6 mu         0.6   0.959        1.42e- 1  2.28e-12   10.3   
 7 mu         0.7   1.09         2.17e- 1  9.93e-20    7.29  
 8 mu         0.8   1.14         2.19e- 2  7.76e-32   10.1   
 9 mu         0.9   1.80         3.72e- 7  1.37e-53   51.0   
10 mu_1       0.1   0.00147      1.08e-28  6.90e-79    0.104 
11 mu_1       0.2   0.448        1.04e-15  1.18e-52   28.3   
12 mu_1       0.3   0.788        1.56e- 8  1.90e-37   22.2   
13 mu_1       0.4   0.775        2.93e- 4  8.70e-27    9.20  
14 mu_1       0.5   1.06         2.82e- 2  1.18e-18   15.6   
15 mu_1       0.6   0.958        1.54e- 1  3.59e-12    9.92  
16 mu_1       0.7   1.09         2.00e- 1  3.18e-20    7.20  
17 mu_1       0.8   1.15         2.04e- 2  2.18e-32   10.1   
18 mu_1       0.9   1.83         2.62e- 7  3.42e-54   52.5   
19 mu_0       0.1   0.000524     5.39e-30  4.31e-81    0.0399
20 mu_0       0.2   0.350        1.47e-16  1.66e-54   24.4   
21 mu_0       0.3   0.739        3.52e- 9  4.58e-39   25.2   
22 mu_0       0.4   0.811        9.97e- 5  3.26e-28   11.1   
23 mu_0       0.5   1.02         3.42e- 2  6.63e-20   15.0   
24 mu_0       0.6   0.961        1.42e- 1  2.17e-13   10.9   
25 mu_0       0.7   1.10         2.25e- 1  2.57e-19    7.50  
26 mu_0       0.8   1.14         3.85e- 2  3.01e-31    9.98  
27 mu_0       0.9   1.51         1.30e- 6  1.06e-52   37.3   
[1] "Total run time was 444.592 seconds"
