
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7398"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  64  65  66  67  68  69  70 
  3   3   2   1   5   3   2   2   4   1   2   2   2   3   3   2   1   1   2   4 
 72  73  74  75  76  77  80  82  83  84  85  86  87  88  89  90  91  92  93  94 
  1   1   3   1   2   1   1   1   2   4   4   5   1   3   2   1   1   2   4   4 
 95  97  98 100 
  1   1   2   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0660  0.4322  0.6720  1.0000  6.3824 
[1] "event indicator table: "

   0    1 
4447 2951 
[1] "treatment indicator table: "

   0    1 
2529 4869 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3695
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 65"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3703
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 378.262 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.422 0.114 
 2 mu         0.1   0.2 0.494 0.0957
 3 mu         0.1   0.3 0.524 0.0922
 4 mu         0.1   0.4 0.580 0.112 
 5 mu         0.1   0.5 0.623 0.113 
 6 mu         0.2   0.1 0.396 0.0968
 7 mu         0.2   0.2 0.470 0.0630
 8 mu         0.2   0.3 0.502 0.0446
 9 mu         0.2   0.4 0.560 0.0676
10 mu         0.2   0.5 0.601 0.0585
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.03         0.221 0.00000285     13.8 
 2 mu         0.2      1.05         0.924 0.0424          2.64
 3 mu         0.3      1.01         0.941 0.268           2.10
 4 mu         0.4      1.02         0.994 0.367           2.19
 5 mu         0.5      1.02         0.987 0.621           2.00
 6 mu         0.6      0.996        0.999 0.554           1.49
 7 mu         0.7      1.01         0.990 0.611           2.03
 8 mu         0.8      1.00         0.995 0.556           1.43
 9 mu         0.9      1.03         1.01  0.309           2.11
10 mu_1       0.1      1.05         0.359 0.00000840     11.3 
11 mu_1       0.2      1.04         0.955 0.0654          2.51
12 mu_1       0.3      1.01         0.955 0.277           2.03
13 mu_1       0.4      1.02         0.996 0.380           2.21
14 mu_1       0.5      1.02         0.994 0.622           2.01
15 mu_1       0.6      0.996        0.995 0.549           1.50
16 mu_1       0.7      1.01         0.993 0.618           2.05
17 mu_1       0.8      1.00         0.993 0.551           1.45
18 mu_1       0.9      1.04         1.02  0.308           2.13
19 mu_0       0.1      1.03         0.208 0.00000223     14.1 
20 mu_0       0.2      1.05         0.889 0.0366          2.71
21 mu_0       0.3      1.01         0.957 0.252           2.13
22 mu_0       0.4      1.02         0.986 0.352           2.18
23 mu_0       0.5      1.02         0.983 0.594           1.98
24 mu_0       0.6      0.996        1.00  0.563           1.49
25 mu_0       0.7      1.01         0.990 0.595           2.00
26 mu_0       0.8      1.00         1.00  0.579           1.44
27 mu_0       0.9      1.01         0.997 0.320           2.10
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00262     6.20e-29  5.59e-78     0.187
 2 mu         0.2    0.707       1.17e-16  4.79e-51    46.3  
 3 mu         0.3    1.09        2.34e- 9  1.52e-35    22.9  
 4 mu         0.4    1.25        5.37e- 5  8.91e-25    16.7  
 5 mu         0.5    0.848       2.26e- 2  1.14e-16     6.64 
 6 mu         0.6    1.27        9.16e- 2  1.77e-10    17.6  
 7 mu         0.7    1.24        1.70e- 1  2.06e-16    11.7  
 8 mu         0.8    1.26        7.63e- 2  9.35e-27     7.44 
 9 mu         0.9    1.52        1.60e- 6  2.37e-45    15.3  
10 mu_1       0.1    0.00627     4.73e-28  5.08e-77     0.422
11 mu_1       0.2    0.863       3.86e-16  2.18e-50    52.3  
12 mu_1       0.3    1.09        5.30e- 9  4.62e-35    21.0  
13 mu_1       0.4    1.23        9.38e- 5  2.03e-24    16.4  
14 mu_1       0.5    0.852       1.90e- 2  2.07e-16     6.36 
15 mu_1       0.6    1.29        1.13e- 1  2.77e-10    18.7  
16 mu_1       0.7    1.23        1.46e- 1  6.67e-17    10.6  
17 mu_1       0.8    1.27        7.57e- 2  2.64e-27     7.57 
18 mu_1       0.9    1.52        1.24e- 6  5.97e-46    15.8  
19 mu_0       0.1    0.00221     1.64e-29  5.59e-79     0.160
20 mu_0       0.2    0.668       4.46e-17  5.39e-52    44.8  
21 mu_0       0.3    1.10        1.07e- 9  1.96e-36    23.8  
22 mu_0       0.4    1.27        2.74e- 5  1.34e-25    16.9  
23 mu_0       0.5    0.843       2.26e- 2  2.05e-17     6.93 
24 mu_0       0.6    1.24        5.83e- 2  2.67e-11    15.9  
25 mu_0       0.7    1.25        1.92e- 1  5.32e-16    14.1  
26 mu_0       0.8    1.23        9.09e- 2  3.62e-26     8.56 
27 mu_0       0.9    1.56        4.82e- 6  1.84e-44    14.8  
[1] "Total run time was 381.552 seconds"
