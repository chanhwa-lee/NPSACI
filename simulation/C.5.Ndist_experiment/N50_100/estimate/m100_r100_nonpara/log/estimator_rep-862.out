
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7485"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  64  65  67  68  69  70  71 
  3   4   1   3   1   2   3   1   2   4   2   1   2   1   1   1   3   3   2   3 
 72  73  74  75  76  77  78  79  80  81  82  83  84  86  87  88  89  90  91  92 
  3   1   3   2   2   2   1   2   1   4   1   1   2   3   3   1   2   2   2   2 
 93  94  95  96  97  99 100 
  2   1   4   1   4   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05891 0.40702 0.67025 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4497 2988 
[1] "treatment indicator table: "

   0    1 
2522 4963 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3752
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 23"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3733
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 426.288 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.341 0.0971
 2 mu         0.1   0.2 0.332 0.0815
 3 mu         0.1   0.3 0.346 0.0877
 4 mu         0.1   0.4 0.369 0.0881
 5 mu         0.1   0.5 0.388 0.0980
 6 mu         0.2   0.1 0.384 0.0915
 7 mu         0.2   0.2 0.397 0.0634
 8 mu         0.2   0.3 0.426 0.0595
 9 mu         0.2   0.4 0.465 0.0559
10 mu         0.2   0.5 0.497 0.0623
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.782       0.107   7.34e-11     11.8 
 2 mu         0.2      0.966       0.879   5.35e- 4      6.15
 3 mu         0.3      0.933       0.889   1.85e- 1      2.08
 4 mu         0.4      1.00        0.994   3.97e- 1      2.36
 5 mu         0.5      0.982       0.980   6.19e- 1      1.51
 6 mu         0.6      0.987       0.989   6.09e- 1      1.35
 7 mu         0.7      1.01        0.992   7.08e- 1      1.72
 8 mu         0.8      0.986       0.981   6.07e- 1      1.38
 9 mu         0.9      1.01        0.965   2.25e- 1      2.12
10 mu_1       0.1      0.872       0.197   2.70e-10     13.2 
11 mu_1       0.2      0.948       0.897   9.91e- 4      5.25
12 mu_1       0.3      0.945       0.884   2.33e- 1      2.15
13 mu_1       0.4      0.999       0.992   3.89e- 1      2.28
14 mu_1       0.5      0.981       0.990   6.30e- 1      1.50
15 mu_1       0.6      0.989       0.998   6.01e- 1      1.35
16 mu_1       0.7      1.00        0.990   7.15e- 1      1.73
17 mu_1       0.8      0.988       0.981   6.06e- 1      1.39
18 mu_1       0.9      1.00        0.964   2.21e- 1      2.14
19 mu_0       0.1      0.772       0.0996  5.15e-11     11.7 
20 mu_0       0.2      0.970       0.887   4.21e- 4      6.38
21 mu_0       0.3      0.929       0.898   1.65e- 1      2.05
22 mu_0       0.4      1.00        0.998   4.03e- 1      2.41
23 mu_0       0.5      0.983       0.985   6.00e- 1      1.53
24 mu_0       0.6      0.983       0.973   6.21e- 1      1.36
25 mu_0       0.7      1.01        1.01    6.92e- 1      1.71
26 mu_0       0.8      0.981       0.979   6.01e- 1      1.38
27 mu_0       0.9      1.02        0.976   2.67e- 1      1.91
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      5.58      3.77e-30  1.24e-89    557.  
 2 mu         0.2      0.989     1.47e-16  3.89e-61     65.7 
 3 mu         0.3      0.740     1.46e- 9  1.59e-44     52.7 
 4 mu         0.4      0.653     4.67e- 5  8.66e-33     11.2 
 5 mu         0.5      1.05      2.66e- 2  9.68e-24     11.0 
 6 mu         0.6      1.61      5.14e- 1  2.57e-17     10.8 
 7 mu         0.7      1.26      5.90e- 1  2.88e-26      6.30
 8 mu         0.8      0.902     5.49e- 2  3.02e-39      7.43
 9 mu         0.9      1.34      1.25e- 6  6.48e-62     28.6 
10 mu_1       0.1      6.42      2.29e-29  1.22e-88    641.  
11 mu_1       0.2      0.786     4.75e-16  1.90e-60     37.8 
12 mu_1       0.3      0.706     3.21e- 9  5.20e-44     49.9 
13 mu_1       0.4      0.679     8.01e- 5  2.12e-32     10.6 
14 mu_1       0.5      1.08      3.65e- 2  1.90e-23     11.8 
15 mu_1       0.6      1.62      4.36e- 1  4.92e-18     11.1 
16 mu_1       0.7      1.24      5.01e- 1  4.72e-27      6.13
17 mu_1       0.8      0.902     4.88e- 2  4.34e-40      7.49
18 mu_1       0.9      1.34      9.26e- 7  8.28e-63     29.3 
19 mu_0       0.1      5.49      1.65e-30  2.85e-91    548.  
20 mu_0       0.2      1.04      6.54e-17  1.00e-62     72.7 
21 mu_0       0.3      0.755     7.06e-10  4.70e-46     53.9 
22 mu_0       0.4      0.636     2.40e- 5  2.98e-34     11.7 
23 mu_0       0.5      1.01      1.91e- 2  3.99e-25     10.2 
24 mu_0       0.6      1.58      5.90e- 1  1.06e-17     10.3 
25 mu_0       0.7      1.31      5.81e- 1  8.48e-26      6.72
26 mu_0       0.8      0.900     8.81e- 2  1.34e-38      7.19
27 mu_0       0.9      1.26      4.16e- 6  5.74e-61     22.9 
[1] "Total run time was 430.019 seconds"
