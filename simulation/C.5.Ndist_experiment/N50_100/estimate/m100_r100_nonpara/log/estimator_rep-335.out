
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7765"
[1] "cluster size dist'n: "

 51  52  53  54  56  57  58  59  60  62  63  64  65  66  67  68  71  72  73  74 
  2   4   1   1   2   2   1   3   1   1   2   2   1   3   1   3   2   4   1   4 
 75  76  77  78  79  80  81  82  84  85  86  87  88  89  91  92  93  94  95  96 
  1   1   1   7   1   2   1   2   3   3   4   3   1   5   1   4   3   7   2   2 
 98  99 100 
  1   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03472 0.36582 0.61475 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
4710 3055 
[1] "treatment indicator table: "

   0    1 
2631 5134 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3809
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3956
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 352.674 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.181 0.0489
 2 mu         0.1   0.2 0.260 0.0633
 3 mu         0.1   0.3 0.282 0.0666
 4 mu         0.1   0.4 0.290 0.0699
 5 mu         0.1   0.5 0.295 0.0752
 6 mu         0.2   0.1 0.280 0.0309
 7 mu         0.2   0.2 0.389 0.0390
 8 mu         0.2   0.3 0.437 0.0376
 9 mu         0.2   0.4 0.465 0.0365
10 mu         0.2   0.5 0.483 0.0390
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.538       0.0466  1.44e- 9     10.6 
 2 mu         0.2      0.882       0.728   4.29e- 4      2.48
 3 mu         0.3      1.04        0.991   6.95e- 2      3.32
 4 mu         0.4      0.978       0.944   2.04e- 1      1.70
 5 mu         0.5      0.961       0.939   6.09e- 1      1.49
 6 mu         0.6      0.984       0.984   5.73e- 1      1.71
 7 mu         0.7      1.01        1.01    5.81e- 1      1.38
 8 mu         0.8      0.997       0.989   4.93e- 1      1.45
 9 mu         0.9      1.04        0.948   1.05e- 1      2.63
10 mu_1       0.1      0.586       0.0898  5.47e- 9      8.96
11 mu_1       0.2      0.920       0.768   8.23e- 4      2.89
12 mu_1       0.3      1.03        0.963   9.30e- 2      3.51
13 mu_1       0.4      0.976       0.948   2.27e- 1      1.71
14 mu_1       0.5      0.960       0.943   5.87e- 1      1.43
15 mu_1       0.6      0.985       0.983   5.80e- 1      1.70
16 mu_1       0.7      1.01        1.01    5.76e- 1      1.39
17 mu_1       0.8      0.996       0.988   4.98e- 1      1.46
18 mu_1       0.9      1.04        0.953   1.01e- 1      2.65
19 mu_0       0.1      0.533       0.0416  9.95e-10     10.8 
20 mu_0       0.2      0.873       0.740   3.30e- 4      2.47
21 mu_0       0.3      1.04        0.982   5.94e- 2      3.40
22 mu_0       0.4      0.979       0.938   1.90e- 1      1.70
23 mu_0       0.5      0.962       0.941   6.24e- 1      1.55
24 mu_0       0.6      0.981       0.992   5.63e- 1      1.71
25 mu_0       0.7      1.01        1.01    5.86e- 1      1.37
26 mu_0       0.8      0.999       0.973   4.75e- 1      1.46
27 mu_0       0.9      1.04        0.964   1.46e- 1      2.50
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00851     1.93e-32  1.07e-79     0.658
 2 mu         0.2    2.05        4.28e-18  3.26e-54   127.   
 3 mu         0.3    1.75        8.27e-11  2.32e-39    60.4  
 4 mu         0.4    1.02        5.90e- 6  7.09e-29    45.8  
 5 mu         0.5    0.928       2.62e- 3  8.51e-21    11.8  
 6 mu         0.6    1.24        6.79e- 2  2.93e-14    14.0  
 7 mu         0.7    1.18        4.15e- 1  7.96e-20     7.45 
 8 mu         0.8    2.13        9.12e- 2  2.41e-31    42.6  
 9 mu         0.9    0.850       1.05e- 5  5.38e-52    18.0  
10 mu_1       0.1    0.0187      1.26e-31  1.04e-78     1.41 
11 mu_1       0.2    2.32        1.59e-17  1.59e-53   137.   
12 mu_1       0.3    1.64        1.85e-10  7.55e-39    59.0  
13 mu_1       0.4    0.996       9.85e- 6  1.73e-28    44.6  
14 mu_1       0.5    0.962       3.24e- 3  1.66e-20    11.5  
15 mu_1       0.6    1.23        8.44e- 2  4.77e-14    14.6  
16 mu_1       0.7    1.20        3.69e- 1  2.47e-20     8.07 
17 mu_1       0.8    2.12        7.82e- 2  6.55e-32    43.1  
18 mu_1       0.9    0.854       7.91e- 6  1.30e-52    18.7  
19 mu_0       0.1    0.00738     7.49e-33  2.72e-81     0.573
20 mu_0       0.2    1.99        1.37e-18  9.37e-56   125.   
21 mu_0       0.3    1.80        3.87e-11  7.61e-41    60.9  
22 mu_0       0.4    1.03        3.27e- 6  2.72e-30    46.6  
23 mu_0       0.5    0.894       1.94e- 3  3.91e-22    12.2  
24 mu_0       0.6    1.25        5.29e- 2  1.68e-15    13.1  
25 mu_0       0.7    1.14        4.39e- 1  2.08e-19     7.63 
26 mu_0       0.8    2.16        1.22e- 1  9.43e-31    40.7  
27 mu_0       0.9    0.814       3.37e- 5  4.21e-51    12.2  
[1] "Total run time was 356.078 seconds"
