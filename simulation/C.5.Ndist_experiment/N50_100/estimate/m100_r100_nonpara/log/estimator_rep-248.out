
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7461"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69  70 
  3   1   2   1   1   2   1   2   2   2   3   2   3   2   2   1   3   1   5   3 
 71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  87  89  90  91  92 
  2   5   6   2   1   1   1   2   1   1   1   3   1   2   2   1   4   2   2   4 
 93  94  96  98  99 100 
  3   2   2   3   1   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04491 0.37112 0.62886 1.00000 5.22265 
[1] "event indicator table: "

   0    1 
4416 3045 
[1] "treatment indicator table: "

   0    1 
2788 4673 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3763
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3698
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 459.63 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.388 0.0718
 2 mu         0.1   0.2 0.469 0.0826
 3 mu         0.1   0.3 0.514 0.0791
 4 mu         0.1   0.4 0.573 0.107 
 5 mu         0.1   0.5 0.599 0.103 
 6 mu         0.2   0.1 0.387 0.0536
 7 mu         0.2   0.2 0.466 0.0575
 8 mu         0.2   0.3 0.508 0.0440
 9 mu         0.2   0.4 0.571 0.0709
10 mu         0.2   0.5 0.600 0.0621
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.966        0.371 0.000000180      8.71
 2 mu         0.2      1.03         0.959 0.0151           3.18
 3 mu         0.3      0.992        0.973 0.299            1.93
 4 mu         0.4      0.959        0.955 0.477            1.56
 5 mu         0.5      0.979        0.962 0.589            1.56
 6 mu         0.6      0.983        0.964 0.618            1.38
 7 mu         0.7      0.983        0.979 0.638            1.39
 8 mu         0.8      1.02         1.01  0.529            1.58
 9 mu         0.9      0.967        0.983 0.306            2.83
10 mu_1       0.1      0.914        0.557 0.000000531      6.54
11 mu_1       0.2      1.04         0.966 0.0229           3.05
12 mu_1       0.3      0.986        0.960 0.367            1.94
13 mu_1       0.4      0.958        0.957 0.468            1.56
14 mu_1       0.5      0.981        0.963 0.598            1.58
15 mu_1       0.6      0.982        0.972 0.631            1.37
16 mu_1       0.7      0.985        0.977 0.650            1.39
17 mu_1       0.8      1.02         1.01  0.526            1.58
18 mu_1       0.9      0.967        0.982 0.299            2.83
19 mu_0       0.1      0.971        0.349 0.000000141      8.95
20 mu_0       0.2      1.02         0.933 0.0131           3.22
21 mu_0       0.3      0.995        0.995 0.270            1.93
22 mu_0       0.4      0.960        0.960 0.478            1.56
23 mu_0       0.5      0.977        0.961 0.580            1.54
24 mu_0       0.6      0.984        0.964 0.598            1.39
25 mu_0       0.7      0.980        0.974 0.610            1.40
26 mu_0       0.8      1.02         1.01  0.542            1.57
27 mu_0       0.9      0.971        0.969 0.368            2.81
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0249     7.13e-27  3.61e-85      2.36
 2 mu         0.2     0.465      3.19e-15  7.93e-57     26.8 
 3 mu         0.3     1.08       2.74e- 8  2.18e-40     23.1 
 4 mu         0.4     1.26       5.31e- 4  7.45e-29     13.4 
 5 mu         0.5     1.05       3.74e- 2  3.39e-20     10.3 
 6 mu         0.6     1.09       1.92e- 1  1.93e-13      8.62
 7 mu         0.7     1.29       2.38e- 1  4.55e-14     10.4 
 8 mu         0.8     1.54       1.06e- 2  1.20e-22     11.7 
 9 mu         0.9     1.47       2.30e- 8  3.12e-40     27.5 
10 mu_1       0.1     0.0490     5.27e-26  3.43e-84      4.57
11 mu_1       0.2     0.526      1.03e-14  3.77e-56     25.9 
12 mu_1       0.3     1.14       5.86e- 8  6.89e-40     25.2 
13 mu_1       0.4     1.24       8.42e- 4  1.77e-28     14.2 
14 mu_1       0.5     1.03       4.69e- 2  6.55e-20      9.20
15 mu_1       0.6     1.10       2.30e- 1  3.12e-13      8.81
16 mu_1       0.7     1.29       2.32e- 1  1.26e-14     10.2 
17 mu_1       0.8     1.55       9.57e- 3  4.49e-23     11.6 
18 mu_1       0.9     1.47       1.64e- 8  1.04e-40     29.0 
19 mu_0       0.1     0.0223     2.07e-27  2.00e-86      2.11
20 mu_0       0.2     0.450      1.42e-15  4.95e-58     27.0 
21 mu_0       0.3     1.06       1.40e- 8  1.55e-41     22.2 
22 mu_0       0.4     1.27       3.24e- 4  6.21e-30     15.0 
23 mu_0       0.5     1.06       3.12e- 2  2.21e-21     11.5 
24 mu_0       0.6     1.07       1.32e- 1  1.58e-14      8.33
25 mu_0       0.7     1.27       2.49e- 1  1.22e-13     10.7 
26 mu_0       0.8     1.50       1.62e- 2  4.19e-22     11.8 
27 mu_0       0.9     1.45       8.22e- 8  2.19e-39     25.7 
[1] "Total run time was 463.286 seconds"
