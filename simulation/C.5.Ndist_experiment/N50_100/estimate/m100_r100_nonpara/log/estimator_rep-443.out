
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7392"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  62  64  65  66  67  68  69  70  71 
  4   1   3   2   3   1   2   1   3   2   3   3   3   1   1   4   1   3   4   1 
 72  73  74  75  76  77  78  79  80  82  84  85  86  88  89  90  92  93  95  96 
  1   5   2   3   2   1   3   1   2   3   3   3   1   3   2   4   2   1   1   3 
 97  98  99 100 
  2   4   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04022 0.36666 0.62334 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4458 2934 
[1] "treatment indicator table: "

   0    1 
2685 4707 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3681
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 96"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3711
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 9"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 395.04 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.501 0.111 
 2 mu         0.1   0.2 0.630 0.130 
 3 mu         0.1   0.3 0.669 0.112 
 4 mu         0.1   0.4 0.707 0.0954
 5 mu         0.1   0.5 0.760 0.0988
 6 mu         0.2   0.1 0.310 0.0809
 7 mu         0.2   0.2 0.409 0.0797
 8 mu         0.2   0.3 0.450 0.0848
 9 mu         0.2   0.4 0.491 0.0943
10 mu         0.2   0.5 0.540 0.0859
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.10         0.790  0.00112       4.23
 2 mu         0.2      1.04         1.02   0.138         2.56
 3 mu         0.3      1.00         1.04   0.344         1.78
 4 mu         0.4      0.964        0.978  0.528         1.41
 5 mu         0.5      0.971        0.980  0.356         1.65
 6 mu         0.6      0.990        0.985  0.602         1.41
 7 mu         0.7      0.996        0.987  0.599         1.59
 8 mu         0.8      0.991        0.971  0.494         1.57
 9 mu         0.9      1.03         1.02   0.600         1.75
10 mu_1       0.1      1.11         0.931  0.00281       4.25
11 mu_1       0.2      1.03         0.964  0.153         2.51
12 mu_1       0.3      1.00         1.04   0.386         1.81
13 mu_1       0.4      0.962        0.986  0.542         1.42
14 mu_1       0.5      0.972        0.975  0.362         1.64
15 mu_1       0.6      0.991        0.989  0.619         1.44
16 mu_1       0.7      0.995        0.988  0.612         1.59
17 mu_1       0.8      0.993        0.975  0.496         1.57
18 mu_1       0.9      1.03         1.02   0.592         1.76
19 mu_0       0.1      1.10         0.792  0.000935      4.23
20 mu_0       0.2      1.04         1.02   0.134         2.62
21 mu_0       0.3      1.00         1.04   0.327         1.78
22 mu_0       0.4      0.965        0.964  0.519         1.41
23 mu_0       0.5      0.970        0.977  0.350         1.67
24 mu_0       0.6      0.988        0.987  0.575         1.37
25 mu_0       0.7      0.999        0.990  0.570         1.61
26 mu_0       0.8      0.986        0.963  0.486         1.54
27 mu_0       0.9      1.03         1.00   0.602         1.68
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.587     6.36e-28  7.16e-78     47.7 
 2 mu         0.2      0.790     1.92e-15  1.94e-51     31.1 
 3 mu         0.3      0.884     1.61e- 8  5.16e-37     14.7 
 4 mu         0.4      1.03      4.91e- 5  1.84e-27     13.5 
 5 mu         0.5      0.721     8.57e- 3  4.45e-20      7.54
 6 mu         0.6      1.01      3.86e- 2  7.02e-15     11.1 
 7 mu         0.7      1.42      2.32e- 1  1.53e-21     13.5 
 8 mu         0.8      1.42      5.38e- 2  1.28e-31     12.6 
 9 mu         0.9      1.26      1.45e- 5  1.08e-51     17.9 
10 mu_1       0.1      0.561     4.49e-27  6.64e-77     39.1 
11 mu_1       0.2      0.838     6.14e-15  9.01e-51     35.7 
12 mu_1       0.3      0.902     3.67e- 8  1.70e-36     16.0 
13 mu_1       0.4      1.01      6.68e- 5  4.55e-27     13.8 
14 mu_1       0.5      0.730     1.02e- 2  8.80e-20      6.82
15 mu_1       0.6      1.04      4.93e- 2  9.60e-16     11.3 
16 mu_1       0.7      1.44      2.22e- 1  1.79e-22     14.0 
17 mu_1       0.8      1.42      4.86e- 2  2.34e-32     12.7 
18 mu_1       0.9      1.27      1.05e- 5  2.76e-52     18.2 
19 mu_0       0.1      0.590     2.08e-28  5.80e-79     48.6 
20 mu_0       0.2      0.778     8.60e-16  1.77e-52     30.0 
21 mu_0       0.3      0.877     7.23e- 9  9.45e-39     14.2 
22 mu_0       0.4      1.04      2.34e- 5  3.94e-29     13.5 
23 mu_0       0.5      0.712     5.66e- 3  1.14e-21      8.25
24 mu_0       0.6      0.976     2.77e- 2  1.43e-15     10.9 
25 mu_0       0.7      1.40      1.84e- 1  4.68e-21     12.4 
26 mu_0       0.8      1.43      9.42e- 2  5.44e-31     12.1 
27 mu_0       0.9      1.25      5.01e- 5  8.36e-51     17.2 
[1] "Total run time was 398.657 seconds"
