
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7241"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  59  60  61  62  64  66  67  68  69  70  71 
  3   5   2   6   1   2   3   1   2   2   1   2   2   1   8   1   3   1   3   1 
 72  73  74  75  76  77  78  79  80  81  82  83  84  87  90  91  92  93  94  95 
  2   3   1   3   3   1   1   1   2   4   2   2   2   1   4   1   4   1   1   2 
 96  98  99 100 
  2   3   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02591 0.31458 0.57508 0.97819 6.05515 
[1] "event indicator table: "

   0    1 
4245 2996 
[1] "treatment indicator table: "

   0    1 
2708 4533 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3604
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 65"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3637
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 11"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 606.263 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.427 0.0794
 2 mu         0.1   0.2 0.544 0.103 
 3 mu         0.1   0.3 0.562 0.111 
 4 mu         0.1   0.4 0.612 0.119 
 5 mu         0.1   0.5 0.669 0.123 
 6 mu         0.2   0.1 0.382 0.0281
 7 mu         0.2   0.2 0.494 0.0420
 8 mu         0.2   0.3 0.523 0.0447
 9 mu         0.2   0.4 0.576 0.0470
10 mu         0.2   0.5 0.625 0.0429
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value  min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>      <dbl>     <dbl>
 1 mu         0.1      1.02         0.379 0.00000319     15.1 
 2 mu         0.2      0.998        0.917 0.0442          2.67
 3 mu         0.3      1.03         0.959 0.346           2.11
 4 mu         0.4      1.00         0.993 0.423           1.59
 5 mu         0.5      0.997        0.972 0.653           1.83
 6 mu         0.6      0.991        0.989 0.658           1.65
 7 mu         0.7      0.968        0.963 0.266           1.46
 8 mu         0.8      1.00         0.979 0.537           1.52
 9 mu         0.9      0.995        0.965 0.421           2.15
10 mu_1       0.1      0.950        0.421 0.00000955      7.86
11 mu_1       0.2      1.01         0.932 0.0676          2.36
12 mu_1       0.3      1.03         0.973 0.361           2.05
13 mu_1       0.4      0.998        0.980 0.457           1.53
14 mu_1       0.5      0.997        0.964 0.659           1.84
15 mu_1       0.6      0.990        1.00  0.680           1.65
16 mu_1       0.7      0.968        0.969 0.258           1.44
17 mu_1       0.8      1.00         0.973 0.537           1.51
18 mu_1       0.9      0.993        0.959 0.424           2.15
19 mu_0       0.1      1.02         0.371 0.00000249     16.1 
20 mu_0       0.2      0.995        0.905 0.0383          2.75
21 mu_0       0.3      1.04         0.969 0.339           2.14
22 mu_0       0.4      1.00         0.979 0.401           1.64
23 mu_0       0.5      0.997        0.981 0.646           1.82
24 mu_0       0.6      0.993        0.985 0.626           1.65
25 mu_0       0.7      0.969        0.972 0.286           1.50
26 mu_0       0.8      0.994        0.961 0.536           1.56
27 mu_0       0.9      1.01         0.990 0.396           2.12
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0357     1.07e-26  8.12e-77      2.51
 2 mu         0.2     1.66       3.31e-14  6.20e-51     62.4 
 3 mu         0.3     1.26       2.80e- 7  5.81e-36     22.0 
 4 mu         0.4     1.37       1.91e- 3  1.71e-25     22.3 
 5 mu         0.5     0.966      4.03e- 2  1.54e-17     10.3 
 6 mu         0.6     1.05       2.77e- 1  3.13e-11      8.05
 7 mu         0.7     1.60       1.70e- 1  1.42e-17     17.3 
 8 mu         0.8     1.21       4.40e- 2  4.93e-28     13.1 
 9 mu         0.9     1.46       2.50e- 7  9.90e-47     21.2 
10 mu_1       0.1     0.0722     7.69e-26  7.60e-76      4.96
11 mu_1       0.2     1.78       9.90e-14  2.90e-50     61.6 
12 mu_1       0.3     1.27       5.69e- 7  1.81e-35     20.0 
13 mu_1       0.4     1.34       2.99e- 3  3.99e-25     21.2 
14 mu_1       0.5     0.955      3.71e- 2  2.89e-17     11.2 
15 mu_1       0.6     1.07       2.59e- 1  4.73e-11      8.15
16 mu_1       0.7     1.61       2.05e- 1  4.22e-18     17.8 
17 mu_1       0.8     1.20       4.16e- 2  1.28e-28     12.8 
18 mu_1       0.9     1.48       1.75e- 7  2.28e-47     21.2 
19 mu_0       0.1     0.0316     3.37e-27  5.82e-78      2.24
20 mu_0       0.2     1.63       1.65e-14  5.00e-52     62.6 
21 mu_0       0.3     1.26       1.56e- 7  5.36e-37     22.9 
22 mu_0       0.4     1.40       1.26e- 3  1.84e-26     23.1 
23 mu_0       0.5     0.978      5.19e- 2  1.99e-18      9.43
24 mu_0       0.6     1.03       1.97e- 1  5.05e-12      9.12
25 mu_0       0.7     1.56       1.46e- 1  3.76e-17     16.2 
26 mu_0       0.8     1.25       2.70e- 2  1.96e-27     14.7 
27 mu_0       0.9     1.31       9.25e- 7  7.85e-46     20.7 
[1] "Total run time was 610.595 seconds"
