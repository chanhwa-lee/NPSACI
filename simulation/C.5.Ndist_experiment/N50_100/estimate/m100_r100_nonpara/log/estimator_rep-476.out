
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7398"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  61  62  63  64  65  66  67  69  70  71  72 
  2   4   2   2   3   4   1   2   2   3   3   1   3   5   2   1   1   1   2   1 
 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  93  94 
  1   1   2   1   2   3   4   3   1   2   1   5   3   4   1   3   3   1   2   2 
 95  96  97  98  99 100 
  3   1   3   1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0268  0.3133  0.5808  0.9909  8.6183 
[1] "event indicator table: "

   0    1 
4408 2990 
[1] "treatment indicator table: "

   0    1 
2832 4566 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3626
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3772
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 418.928 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.304 0.0750
 2 mu         0.1   0.2 0.358 0.0836
 3 mu         0.1   0.3 0.373 0.0736
 4 mu         0.1   0.4 0.400 0.0819
 5 mu         0.1   0.5 0.458 0.0823
 6 mu         0.2   0.1 0.370 0.0518
 7 mu         0.2   0.2 0.445 0.0556
 8 mu         0.2   0.3 0.477 0.0343
 9 mu         0.2   0.4 0.515 0.0430
10 mu         0.2   0.5 0.590 0.0361
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.755        0.188 0.000000949      7.00
 2 mu         0.2      1.03         0.995 0.0349           2.50
 3 mu         0.3      1.02         0.971 0.447            2.06
 4 mu         0.4      0.983        0.990 0.481            1.83
 5 mu         0.5      0.973        0.951 0.528            1.49
 6 mu         0.6      0.980        0.972 0.656            1.39
 7 mu         0.7      0.979        0.971 0.511            1.40
 8 mu         0.8      1.01         0.992 0.488            1.62
 9 mu         0.9      1.05         1.01  0.108            2.44
10 mu_1       0.1      0.902        0.307 0.00000296       8.84
11 mu_1       0.2      1.02         0.971 0.0552           2.58
12 mu_1       0.3      1.02         0.962 0.413            1.97
13 mu_1       0.4      0.980        0.981 0.500            1.82
14 mu_1       0.5      0.973        0.957 0.524            1.47
15 mu_1       0.6      0.980        0.973 0.656            1.40
16 mu_1       0.7      0.979        0.976 0.513            1.42
17 mu_1       0.8      1.02         0.992 0.483            1.61
18 mu_1       0.9      1.05         0.999 0.101            2.44
19 mu_0       0.1      0.739        0.173 0.000000725      6.93
20 mu_0       0.2      1.03         0.967 0.0299           2.60
21 mu_0       0.3      1.02         0.977 0.442            2.10
22 mu_0       0.4      0.984        1.00  0.469            1.83
23 mu_0       0.5      0.973        0.950 0.510            1.50
24 mu_0       0.6      0.979        0.977 0.655            1.38
25 mu_0       0.7      0.980        0.974 0.505            1.37
26 mu_0       0.8      1.01         0.998 0.506            1.64
27 mu_0       0.9      1.04         0.948 0.164            2.41
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      5.91      1.89e-24  4.22e-66    591.  
 2 mu         0.2      1.72      1.86e-13  7.84e-42    163.  
 3 mu         0.3      0.834     4.15e- 7  2.70e-28     12.9 
 4 mu         0.4      1.41      2.29e- 3  6.96e-20     25.0 
 5 mu         0.5      1.06      1.70e- 1  1.70e-13      7.95
 6 mu         0.6      1.11      1.93e- 1  3.72e-12      8.01
 7 mu         0.7      0.980     1.03e- 1  7.24e-19      6.61
 8 mu         0.8      1.23      4.19e- 3  1.29e-28     10.6 
 9 mu         0.9      1.73      5.35e-10  1.15e-45     40.2 
10 mu_1       0.1      7.17      1.16e-23  3.61e-65    717.  
11 mu_1       0.2      1.12      6.54e-13  3.35e-41     99.0 
12 mu_1       0.3      0.928     9.08e- 7  8.40e-28     14.9 
13 mu_1       0.4      1.39      3.17e- 3  1.62e-19     23.4 
14 mu_1       0.5      1.05      2.02e- 1  3.17e-13      8.75
15 mu_1       0.6      1.11      2.07e- 1  7.51e-13      7.72
16 mu_1       0.7      0.988     1.04e- 1  1.25e-19      6.71
17 mu_1       0.8      1.24      3.18e- 3  1.95e-29     10.7 
18 mu_1       0.9      1.75      3.74e-10  1.55e-46     41.7 
19 mu_0       0.1      5.77      8.09e-25  6.76e-67    577.  
20 mu_0       0.2      1.87      6.92e-14  1.41e-42    180.  
21 mu_0       0.3      0.794     2.04e- 7  2.57e-29     13.4 
22 mu_0       0.4      1.43      1.77e- 3  7.73e-21     26.0 
23 mu_0       0.5      1.07      1.61e- 1  2.27e-14      7.14
24 mu_0       0.6      1.11      1.60e- 1  8.17e-12      9.00
25 mu_0       0.7      0.961     1.48e- 1  2.12e-18      6.40
26 mu_0       0.8      1.22      8.21e- 3  5.66e-28     10.4 
27 mu_0       0.9      1.52      1.98e- 9  1.01e-44     26.8 
[1] "Total run time was 421.942 seconds"
