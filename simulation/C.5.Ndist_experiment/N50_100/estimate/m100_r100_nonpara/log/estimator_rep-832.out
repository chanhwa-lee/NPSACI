
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7327"
[1] "cluster size dist'n: "

 50  51  53  55  56  57  58  59  60  61  62  63  64  65  66  67  68  71  72  73 
  2   2   3   6   1   2   1   5   2   3   1   5   3   3   2   1   4   3   3   2 
 75  76  77  79  80  81  82  84  85  86  87  89  90  91  92  93  94  95  96  97 
  1   3   4   2   2   3   2   2   2   3   1   1   1   2   3   2   1   2   5   1 
 98  99 100 
  1   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04185 0.37147 0.63469 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4410 2917 
[1] "treatment indicator table: "

   0    1 
2559 4768 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3621
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3706
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 417.223 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.420 0.102 
 2 mu         0.1   0.2 0.542 0.107 
 3 mu         0.1   0.3 0.616 0.112 
 4 mu         0.1   0.4 0.637 0.108 
 5 mu         0.1   0.5 0.679 0.112 
 6 mu         0.2   0.1 0.372 0.0720
 7 mu         0.2   0.2 0.481 0.0704
 8 mu         0.2   0.3 0.547 0.0708
 9 mu         0.2   0.4 0.567 0.0644
10 mu         0.2   0.5 0.606 0.0644
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.14         0.276 0.00000000605     12.5 
 2 mu         0.2      1.08         0.885 0.00616            6.45
 3 mu         0.3      1.00         0.912 0.166              3.23
 4 mu         0.4      1.00         0.964 0.432              1.96
 5 mu         0.5      1.02         1.00  0.442              1.76
 6 mu         0.6      1.04         1.01  0.583              2.58
 7 mu         0.7      0.996        0.974 0.622              1.94
 8 mu         0.8      0.995        0.974 0.459              2.44
 9 mu         0.9      1.03         0.995 0.105              2.09
10 mu_1       0.1      1.20         0.438 0.0000000196      10.7 
11 mu_1       0.2      1.04         0.801 0.0105             5.09
12 mu_1       0.3      1.00         0.953 0.186              3.48
13 mu_1       0.4      1.00         0.972 0.401              1.75
14 mu_1       0.5      1.02         1.02  0.486              1.75
15 mu_1       0.6      1.04         1.02  0.587              2.61
16 mu_1       0.7      0.994        0.972 0.611              1.90
17 mu_1       0.8      0.995        0.973 0.439              2.49
18 mu_1       0.9      1.03         1.00  0.0994             2.10
19 mu_0       0.1      1.14         0.253 0.00000000455     12.8 
20 mu_0       0.2      1.08         0.902 0.00508            6.79
21 mu_0       0.3      1.00         0.905 0.158              3.12
22 mu_0       0.4      1.00         0.966 0.417              2.10
23 mu_0       0.5      1.02         1.02  0.399              1.77
24 mu_0       0.6      1.05         1.02  0.578              2.54
25 mu_0       0.7      0.999        0.978 0.640              2.03
26 mu_0       0.8      0.993        0.973 0.540              2.20
27 mu_0       0.9      1.01         0.945 0.159              2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00128     2.51e-28  1.12e-72     0.125
 2 mu         0.2    0.560       7.30e-16  5.36e-48    38.2  
 3 mu         0.3    2.22        2.35e- 9  9.93e-34   120.   
 4 mu         0.4    1.12        3.47e- 5  9.23e-24    28.5  
 5 mu         0.5    1.06        1.25e- 2  3.42e-16    17.3  
 6 mu         0.6    1.24        1.83e- 1  1.06e-11    12.6  
 7 mu         0.7    1.57        2.36e- 1  1.15e-19    14.8  
 8 mu         0.8    1.37        1.26e- 1  1.18e-31    16.5  
 9 mu         0.9    2.20        4.83e- 6  3.70e-53    33.7  
10 mu_1       0.1    0.00282     1.80e-27  1.05e-71     0.274
11 mu_1       0.2    0.687       2.40e-15  2.50e-47    41.8  
12 mu_1       0.3    2.30        5.22e- 9  3.09e-33   124.   
13 mu_1       0.4    1.02        6.13e- 5  2.15e-23    22.0  
14 mu_1       0.5    1.10        1.75e- 2  6.37e-16    17.7  
15 mu_1       0.6    1.24        1.95e- 1  3.86e-12    13.0  
16 mu_1       0.7    1.58        2.18e- 1  3.59e-20    14.6  
17 mu_1       0.8    1.35        1.22e- 1  3.22e-32    15.9  
18 mu_1       0.9    2.24        3.62e- 6  8.99e-54    34.9  
19 mu_0       0.1    0.00111     7.87e-29  8.42e-74     0.109
20 mu_0       0.2    0.528       2.53e-16  4.52e-49    37.3  
21 mu_0       0.3    2.18        1.12e- 9  9.56e-35   119.   
22 mu_0       0.4    1.19        1.70e- 5  1.04e-24    32.8  
23 mu_0       0.5    1.01        7.41e- 3  4.61e-17    17.0  
24 mu_0       0.6    1.24        1.27e- 1  1.82e-11    12.1  
25 mu_0       0.7    1.52        2.08e- 1  2.99e-19    15.3  
26 mu_0       0.8    1.44        1.64e- 1  4.60e-31    19.2  
27 mu_0       0.9    1.79        1.58e- 5  2.89e-52    22.7  
[1] "Total run time was 420.689 seconds"
