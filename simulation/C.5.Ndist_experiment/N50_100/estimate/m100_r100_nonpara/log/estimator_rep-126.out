
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7625"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  58  59  60  61  62  63  65  66  67  68  69  71  72 
  2   1   4   1   2   1   1   3   4   1   2   4   2   1   2   2   3   1   1   2 
 73  74  75  76  77  78  80  81  82  83  84  85  86  87  88  89  90  91  94  95 
  3   1   1   3   2   5   2   2   1   1   3   2   1   2   5   2   3   4   3   1 
 96  97  98  99 100 
  2   5   1   4   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03885 0.34475 0.61094 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
4508 3117 
[1] "treatment indicator table: "

   0    1 
2824 4801 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3708
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3917
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 11"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 419.994 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.297 0.0672
 2 mu         0.1   0.2 0.420 0.0725
 3 mu         0.1   0.3 0.490 0.0833
 4 mu         0.1   0.4 0.530 0.0896
 5 mu         0.1   0.5 0.567 0.0987
 6 mu         0.2   0.1 0.284 0.0349
 7 mu         0.2   0.2 0.401 0.0281
 8 mu         0.2   0.3 0.477 0.0357
 9 mu         0.2   0.4 0.531 0.0334
10 mu         0.2   0.5 0.571 0.0468
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.984        0.304 0.000000776      9.43
 2 mu         0.2      1.09         1.03  0.0586           2.58
 3 mu         0.3      1.06         0.985 0.286            2.41
 4 mu         0.4      0.957        0.975 0.524            1.46
 5 mu         0.5      0.990        0.963 0.542            1.95
 6 mu         0.6      0.993        0.977 0.681            1.46
 7 mu         0.7      1.01         1.01  0.551            2.26
 8 mu         0.8      1.03         1.01  0.498            1.79
 9 mu         0.9      1.03         1.04  0.179            2.24
10 mu_1       0.1      1.03         0.491 0.00000225       6.15
11 mu_1       0.2      1.08         1.02  0.0882           2.78
12 mu_1       0.3      1.05         0.989 0.314            2.30
13 mu_1       0.4      0.955        0.980 0.530            1.42
14 mu_1       0.5      0.993        0.962 0.533            2.02
15 mu_1       0.6      0.992        0.975 0.687            1.52
16 mu_1       0.7      1.01         1.01  0.544            2.26
17 mu_1       0.8      1.03         1.02  0.503            1.77
18 mu_1       0.9      1.04         1.04  0.178            2.23
19 mu_0       0.1      0.978        0.289 0.000000612      9.86
20 mu_0       0.2      1.09         0.993 0.0512           2.69
21 mu_0       0.3      1.06         0.988 0.274            2.46
22 mu_0       0.4      0.958        0.975 0.519            1.49
23 mu_0       0.5      0.988        0.964 0.550            1.89
24 mu_0       0.6      0.995        0.988 0.672            1.44
25 mu_0       0.7      1.01         1.01  0.569            2.25
26 mu_0       0.8      1.04         1.01  0.478            1.84
27 mu_0       0.9      1.02         1.05  0.189            2.32
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0194     2.52e-25  3.91e-75      1.63
 2 mu         0.2     0.914      1.77e-13  1.33e-50     51.9 
 3 mu         0.3     0.770      1.59e- 6  2.45e-36     25.5 
 4 mu         0.4     0.976      4.68e- 3  2.71e-26     14.6 
 5 mu         0.5     1.55       1.13e- 1  1.39e-18     15.3 
 6 mu         0.6     1.34       3.56e- 1  2.21e-12     26.8 
 7 mu         0.7     0.996      1.20e- 1  1.69e-14      9.34
 8 mu         0.8     1.46       1.76e- 3  2.24e-24     23.7 
 9 mu         0.9     1.32       1.08e- 9  2.05e-42     18.5 
10 mu_1       0.1     0.0410     1.65e-24  3.77e-74      3.40
11 mu_1       0.2     1.02       5.28e-13  6.40e-50     54.2 
12 mu_1       0.3     0.725      3.08e- 6  7.87e-36     23.5 
13 mu_1       0.4     1.02       7.41e- 3  6.53e-26     15.0 
14 mu_1       0.5     1.58       1.16e- 1  2.67e-18     17.5 
15 mu_1       0.6     1.29       3.86e- 1  3.55e-12     25.4 
16 mu_1       0.7     1.01       1.44e- 1  5.78e-15      9.73
17 mu_1       0.8     1.46       1.27e- 3  7.65e-25     24.4 
18 mu_1       0.9     1.33       7.22e-10  6.23e-43     18.2 
19 mu_0       0.1     0.0170     9.62e-26  1.53e-76      1.43
20 mu_0       0.2     0.887      8.92e-14  5.86e-52     51.3 
21 mu_0       0.3     0.789      9.51e- 7  1.23e-37     26.4 
22 mu_0       0.4     0.945      2.86e- 3  1.59e-27     14.4 
23 mu_0       0.5     1.52       8.89e- 2  9.78e-20     13.2 
24 mu_0       0.6     1.40       3.10e- 1  1.95e-13     28.8 
25 mu_0       0.7     0.967      1.39e- 1  4.11e-14      8.43
26 mu_0       0.8     1.46       3.04e- 3  8.16e-24     20.9 
27 mu_0       0.9     1.24       4.73e- 9  1.49e-41     21.0 
[1] "Total run time was 423.542 seconds"
