
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7637"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  59  61  62  63  64  65  66  67  68  69  71  73 
  3   1   1   3   2   2   1   1   3   4   3   1   2   1   1   5   3   1   4   1 
 74  75  76  77  79  80  81  82  83  84  85  86  87  88  90  91  92  93  94  95 
  1   3   2   5   2   3   1   3   2   1   1   3   1   1   3   2   1   4   4   2 
 96  97  98  99 100 
  3   1   2   1   5 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03374 0.36021 0.60612 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4558 3079 
[1] "treatment indicator table: "

   0    1 
2745 4892 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3751
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3886
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 397.558 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.471 0.0932
 2 mu         0.1   0.2 0.589 0.115 
 3 mu         0.1   0.3 0.623 0.107 
 4 mu         0.1   0.4 0.694 0.111 
 5 mu         0.1   0.5 0.716 0.109 
 6 mu         0.2   0.1 0.362 0.0511
 7 mu         0.2   0.2 0.463 0.0650
 8 mu         0.2   0.3 0.492 0.0506
 9 mu         0.2   0.4 0.560 0.0604
10 mu         0.2   0.5 0.579 0.0497
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.17         0.437 0.0000158     15.6 
 2 mu         0.2      1.00         0.874 0.127          4.97
 3 mu         0.3      0.958        0.902 0.269          1.80
 4 mu         0.4      0.973        0.962 0.476          1.58
 5 mu         0.5      1.03         0.985 0.597          1.85
 6 mu         0.6      1.01         0.981 0.565          1.65
 7 mu         0.7      0.999        1.00  0.559          1.48
 8 mu         0.8      1.05         1.04  0.578          1.71
 9 mu         0.9      0.974        0.936 0.242          2.26
10 mu_1       0.1      1.16         0.465 0.0000403     11.4 
11 mu_1       0.2      0.982        0.850 0.142          3.93
12 mu_1       0.3      0.959        0.924 0.261          1.78
13 mu_1       0.4      0.978        0.962 0.475          1.69
14 mu_1       0.5      1.03         0.995 0.602          1.78
15 mu_1       0.6      1.01         0.978 0.561          1.66
16 mu_1       0.7      1.00         1.00  0.566          1.48
17 mu_1       0.8      1.05         1.04  0.583          1.72
18 mu_1       0.9      0.972        0.923 0.235          2.25
19 mu_0       0.1      1.17         0.418 0.0000130     16.1 
20 mu_0       0.2      1.01         0.872 0.116          5.23
21 mu_0       0.3      0.958        0.941 0.272          1.81
22 mu_0       0.4      0.970        0.958 0.476          1.51
23 mu_0       0.5      1.03         0.987 0.591          1.92
24 mu_0       0.6      1.01         0.994 0.572          1.63
25 mu_0       0.7      0.997        0.968 0.542          1.48
26 mu_0       0.8      1.05         1.04  0.561          1.68
27 mu_0       0.9      0.990        0.998 0.306          2.31
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0361     7.31e-29  2.19e-86      3.53
 2 mu         0.2     0.719      3.34e-16  1.52e-58     53.3 
 3 mu         0.3     0.937      3.62e- 9  2.43e-42     18.7 
 4 mu         0.4     1.26       1.23e- 4  6.36e-31     18.2 
 5 mu         0.5     1.46       3.18e- 2  3.79e-22     11.2 
 6 mu         0.6     1.31       1.41e- 1  4.48e-15      9.58
 7 mu         0.7     1.19       1.11e- 1  1.50e-22      9.24
 8 mu         0.8     0.984      1.77e- 2  4.01e-35      6.70
 9 mu         0.9     1.39       1.85e- 7  1.96e-57     26.2 
10 mu_1       0.1     0.0658     5.25e-28  2.12e-85      6.38
11 mu_1       0.2     0.720      1.20e-15  7.37e-58     48.2 
12 mu_1       0.3     0.987      7.74e- 9  7.83e-42     20.6 
13 mu_1       0.4     1.30       2.15e- 4  1.54e-30     17.9 
14 mu_1       0.5     1.47       3.68e- 2  7.34e-22     11.0 
15 mu_1       0.6     1.29       1.63e- 1  7.24e-15      9.00
16 mu_1       0.7     1.18       1.05e- 1  3.87e-23      9.54
17 mu_1       0.8     0.983      1.41e- 2  9.06e-36      6.40
18 mu_1       0.9     1.39       1.31e- 7  3.95e-58     26.1 
19 mu_0       0.1     0.0328     2.28e-29  7.60e-88      3.21
20 mu_0       0.2     0.719      1.19e-16  5.94e-60     54.5 
21 mu_0       0.3     0.916      1.85e- 9  1.08e-43     17.9 
22 mu_0       0.4     1.24       6.10e- 5  3.31e-32     18.3 
23 mu_0       0.5     1.46       2.26e- 2  2.37e-23     11.4 
24 mu_0       0.6     1.33       1.40e- 1  3.50e-16     10.4 
25 mu_0       0.7     1.20       1.12e- 1  4.10e-22      8.56
26 mu_0       0.8     0.987      1.81e- 2  1.64e-34      7.88
27 mu_0       0.9     1.43       6.69e- 7  1.61e-56     27.3 
[1] "Total run time was 400.687 seconds"
