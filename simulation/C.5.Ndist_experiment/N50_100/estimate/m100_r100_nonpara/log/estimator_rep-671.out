
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7465"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  62  63  64  65  66  67  68  69  70  71 
  4   1   1   1   3   1   2   3   3   1   2   4   2   1   1   1   2   4   4   3 
 72  73  74  75  76  77  78  79  80  81  83  84  85  86  87  88  89  90  91  92 
  4   1   2   3   3   2   1   2   1   3   3   1   2   1   3   1   3   2   3   3 
 93  94  95  96  98  99 100 
  1   3   1   1   2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03734 0.35194 0.61189 1.00000 5.67292 
[1] "event indicator table: "

   0    1 
4472 2993 
[1] "treatment indicator table: "

   0    1 
2763 4702 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3746
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3719
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 376.258 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.339 0.0848
 2 mu         0.1   0.2 0.404 0.0936
 3 mu         0.1   0.3 0.462 0.109 
 4 mu         0.1   0.4 0.465 0.105 
 5 mu         0.1   0.5 0.479 0.104 
 6 mu         0.2   0.1 0.390 0.0680
 7 mu         0.2   0.2 0.464 0.0695
 8 mu         0.2   0.3 0.532 0.0775
 9 mu         0.2   0.4 0.542 0.0659
10 mu         0.2   0.5 0.570 0.0596
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.660       0.0493 0.00000000187      9.46
 2 mu         0.2      0.847       0.798  0.00341            2.61
 3 mu         0.3      0.979       0.951  0.356              2.37
 4 mu         0.4      0.988       0.974  0.541              1.44
 5 mu         0.5      1.00        1.01   0.670              1.33
 6 mu         0.6      0.998       0.993  0.735              1.38
 7 mu         0.7      1.01        1.00   0.579              1.62
 8 mu         0.8      1.02        0.999  0.551              1.78
 9 mu         0.9      1.05        1.03   0.0697             2.37
10 mu_1       0.1      0.744       0.0928 0.00000000656     10.5 
11 mu_1       0.2      0.870       0.782  0.00602            2.55
12 mu_1       0.3      0.983       0.960  0.393              2.28
13 mu_1       0.4      0.988       0.982  0.545              1.47
14 mu_1       0.5      1.00        1.00   0.672              1.31
15 mu_1       0.6      0.998       1.00   0.730              1.38
16 mu_1       0.7      1.01        1.00   0.568              1.62
17 mu_1       0.8      1.02        0.998  0.549              1.77
18 mu_1       0.9      1.05        1.04   0.0646             2.41
19 mu_0       0.1      0.650       0.0441 0.00000000135      9.35
20 mu_0       0.2      0.841       0.788  0.00276            2.69
21 mu_0       0.3      0.977       0.939  0.329              2.45
22 mu_0       0.4      0.989       0.989  0.538              1.41
23 mu_0       0.5      1.00        1.01   0.667              1.35
24 mu_0       0.6      0.998       0.993  0.729              1.38
25 mu_0       0.7      1.01        1.00   0.603              1.60
26 mu_0       0.8      1.01        0.997  0.559              1.78
27 mu_0       0.9      1.04        0.979  0.116              2.15
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000737     2.10e-28  1.56e-87    0.0308
 2 mu         0.2   0.537        2.29e-15  1.22e-59   25.5   
 3 mu         0.3   1.46         1.78e- 8  2.22e-43   32.5   
 4 mu         0.4   1.08         4.15e- 4  6.78e-32   15.3   
 5 mu         0.5   0.799        1.03e- 1  4.85e-23    5.14  
 6 mu         0.6   0.834        1.74e- 1  7.18e-16    3.92  
 7 mu         0.7   0.940        3.22e- 1  3.56e-15    6.25  
 8 mu         0.8   1.30         9.76e- 3  9.28e-26    9.08  
 9 mu         0.9   0.616        6.81e- 8  3.78e-45   27.3   
10 mu_1       0.1   0.00192      1.36e-27  1.52e-86    0.0864
11 mu_1       0.2   0.705        7.03e-15  5.96e-59   32.3   
12 mu_1       0.3   1.46         3.84e- 8  7.24e-43   33.9   
13 mu_1       0.4   1.03         6.97e- 4  1.66e-31   12.4   
14 mu_1       0.5   0.790        1.00e- 1  9.50e-23    5.54  
15 mu_1       0.6   0.839        1.98e- 1  1.17e-15    4.32  
16 mu_1       0.7   0.953        3.27e- 1  1.43e-15    5.95  
17 mu_1       0.8   1.29         7.79e- 3  3.26e-26    9.26  
18 mu_1       0.9   0.607        4.86e- 8  1.18e-45   27.1   
19 mu_0       0.1   0.000605     6.50e-29  3.64e-89    0.0247
20 mu_0       0.2   0.495        1.07e-15  3.21e-61   23.9   
21 mu_0       0.3   1.46         9.00e- 9  6.67e-45   34.7   
22 mu_0       0.4   1.11         2.27e- 4  2.38e-33   17.3   
23 mu_0       0.5   0.808        7.33e- 2  2.04e-24    5.30  
24 mu_0       0.6   0.826        1.63e- 1  3.78e-17    3.98  
25 mu_0       0.7   0.910        2.65e- 1  8.54e-15    6.94  
26 mu_0       0.8   1.31         1.76e- 2  3.33e-25    8.98  
27 mu_0       0.9   0.702        2.44e- 7  2.72e-44   29.0   
[1] "Total run time was 379.388 seconds"
