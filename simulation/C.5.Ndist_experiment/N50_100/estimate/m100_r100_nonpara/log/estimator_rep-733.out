
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7628"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  59  60  61  62  64  65  66  67  69  70  71  73 
  1   4   4   1   3   1   3   2   2   1   1   2   2   2   2   2   1   3   1   2 
 74  75  76  77  78  79  80  81  83  85  86  88  90  91  92  93  94  95  96  97 
  4   2   1   4   1   3   2   3   2   4   3   2   2   5   2   5   2   2   1   3 
 98  99 100 
  2   2   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04034 0.35602 0.61849 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4525 3103 
[1] "treatment indicator table: "

   0    1 
2817 4811 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3810
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3818
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 406.367 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.226 0.0668
 2 mu         0.1   0.2 0.306 0.0629
 3 mu         0.1   0.3 0.293 0.0658
 4 mu         0.1   0.4 0.347 0.0723
 5 mu         0.1   0.5 0.370 0.0802
 6 mu         0.2   0.1 0.313 0.0473
 7 mu         0.2   0.2 0.417 0.0375
 8 mu         0.2   0.3 0.419 0.0367
 9 mu         0.2   0.4 0.486 0.0393
10 mu         0.2   0.5 0.515 0.0429
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.584       0.0129 0.00000000498      7.82
 2 mu         0.2      0.908       0.831  0.00407            3.23
 3 mu         0.3      0.983       0.918  0.292              2.12
 4 mu         0.4      1.08        1.03   0.454              2.06
 5 mu         0.5      1.01        0.993  0.635              1.58
 6 mu         0.6      0.984       0.974  0.696              1.35
 7 mu         0.7      0.990       0.973  0.632              1.39
 8 mu         0.8      0.988       0.963  0.541              1.54
 9 mu         0.9      0.990       0.926  0.185              2.00
10 mu_1       0.1      0.719       0.0262 0.0000000156       7.04
11 mu_1       0.2      0.909       0.816  0.00630            3.23
12 mu_1       0.3      0.993       0.944  0.306              2.02
13 mu_1       0.4      1.08        1.03   0.485              2.12
14 mu_1       0.5      1.00        0.992  0.656              1.53
15 mu_1       0.6      0.985       0.989  0.694              1.36
16 mu_1       0.7      0.989       0.966  0.611              1.39
17 mu_1       0.8      0.990       0.955  0.525              1.57
18 mu_1       0.9      0.989       0.919  0.178              2.01
19 mu_0       0.1      0.569       0.0114 0.00000000380      7.91
20 mu_0       0.2      0.908       0.800  0.00351            3.23
21 mu_0       0.3      0.979       0.912  0.263              2.17
22 mu_0       0.4      1.08        1.02   0.434              2.07
23 mu_0       0.5      1.01        0.996  0.615              1.62
24 mu_0       0.6      0.983       0.969  0.691              1.34
25 mu_0       0.7      0.993       0.979  0.681              1.38
26 mu_0       0.8      0.982       0.973  0.576              1.50
27 mu_0       0.9      1.00        0.951  0.244              1.93
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0249     3.47e-29  2.05e-82      2.29
 2 mu         0.2     1.28       4.79e-15  5.62e-55     72.0 
 3 mu         0.3     0.705      1.93e- 8  4.58e-39     20.2 
 4 mu         0.4     1.00       3.17e- 4  6.61e-28     20.3 
 5 mu         0.5     1.23       7.54e- 2  2.19e-19     13.9 
 6 mu         0.6     1.41       4.34e- 1  1.38e-12     19.3 
 7 mu         0.7     1.03       4.95e- 1  4.33e-20      6.55
 8 mu         0.8     1.12       1.72e- 2  2.25e-32     11.6 
 9 mu         0.9     1.05       2.33e- 8  1.99e-54     26.5 
10 mu_1       0.1     0.0515     2.22e-28  1.94e-81      4.64
11 mu_1       0.2     1.40       1.57e-14  2.67e-54     72.9 
12 mu_1       0.3     0.636      4.23e- 8  1.45e-38     17.1 
13 mu_1       0.4     1.05       5.02e- 4  1.57e-27     22.1 
14 mu_1       0.5     1.24       8.65e- 2  4.15e-19     14.6 
15 mu_1       0.6     1.40       3.87e- 1  2.18e-12     18.0 
16 mu_1       0.7     1.01       4.99e- 1  1.37e-20      6.93
17 mu_1       0.8     1.13       1.43e- 2  6.26e-33     12.0 
18 mu_1       0.9     1.05       1.65e- 8  4.92e-55     26.7 
19 mu_0       0.1     0.0220     1.39e-29  1.17e-83      2.03
20 mu_0       0.2     1.25       2.08e-15  3.62e-56     71.7 
21 mu_0       0.3     0.735      9.67e- 9  3.37e-40     21.5 
22 mu_0       0.4     0.970      1.93e- 4  5.68e-29     19.0 
23 mu_0       0.5     1.23       6.37e- 2  2.25e-20     15.7 
24 mu_0       0.6     1.41       4.95e- 1  1.78e-13     21.2 
25 mu_0       0.7     1.05       3.69e- 1  1.12e-19      5.84
26 mu_0       0.8     1.09       3.09e- 2  8.77e-32      9.99
27 mu_0       0.9     1.02       8.49e- 8  1.55e-53     24.0 
[1] "Total run time was 409.62 seconds"
