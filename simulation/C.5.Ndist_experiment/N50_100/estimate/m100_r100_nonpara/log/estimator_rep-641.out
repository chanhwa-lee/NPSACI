
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7514"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  59  60  61  63  64  65  66  67  70  71  72  73 
  1   1   4   3   2   3   3   2   2   3   2   1   1   4   2   1   4   2   1   2 
 74  75  76  77  78  80  81  82  83  84  85  86  87  88  89  90  92  93  95  96 
  2   2   3   3   3   3   2   1   1   4   2   3   1   3   3   2   5   1   6   2 
 97  98 100 
  2   1   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03565 0.35731 0.62625 1.00000 9.00000 
[1] "event indicator table: "

   0    1 
4460 3054 
[1] "treatment indicator table: "

   0    1 
2675 4839 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3845
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3669
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 369.068 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.317 0.0359
 2 mu         0.1   0.2 0.383 0.0485
 3 mu         0.1   0.3 0.405 0.0676
 4 mu         0.1   0.4 0.448 0.0862
 5 mu         0.1   0.5 0.453 0.118 
 6 mu         0.2   0.1 0.322 0.0238
 7 mu         0.2   0.2 0.395 0.0311
 8 mu         0.2   0.3 0.419 0.0444
 9 mu         0.2   0.4 0.487 0.0602
10 mu         0.2   0.5 0.526 0.0827
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.02         0.897  0.000442      3.60
 2 mu         0.2      1.05         0.994  0.311         2.97
 3 mu         0.3      0.976        0.947  0.477         1.61
 4 mu         0.4      0.999        0.963  0.540         2.30
 5 mu         0.5      0.986        0.982  0.565         1.68
 6 mu         0.6      0.990        0.962  0.610         1.49
 7 mu         0.7      1.03         1.02   0.532         1.59
 8 mu         0.8      1.02         1.00   0.526         1.48
 9 mu         0.9      1.00         0.971  0.404         1.57
10 mu_1       0.1      1.03         0.892  0.00107       3.23
11 mu_1       0.2      1.04         0.949  0.225         2.86
12 mu_1       0.3      0.977        0.950  0.459         1.58
13 mu_1       0.4      0.997        0.963  0.547         2.31
14 mu_1       0.5      0.986        0.982  0.564         1.67
15 mu_1       0.6      0.992        0.968  0.619         1.51
16 mu_1       0.7      1.03         1.02   0.534         1.57
17 mu_1       0.8      1.02         0.999  0.514         1.47
18 mu_1       0.9      0.998        0.965  0.393         1.57
19 mu_0       0.1      1.02         0.886  0.000373      3.65
20 mu_0       0.2      1.05         1.00   0.328         3.00
21 mu_0       0.3      0.976        0.950  0.465         1.61
22 mu_0       0.4      1.00         0.959  0.536         2.29
23 mu_0       0.5      0.986        0.982  0.565         1.69
24 mu_0       0.6      0.988        0.955  0.597         1.47
25 mu_0       0.7      1.03         1.01   0.529         1.63
26 mu_0       0.8      1.01         0.996  0.577         1.54
27 mu_0       0.9      1.02         1.03   0.427         1.61
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0390     4.62e-29  1.46e-84      3.74
 2 mu         0.2     0.548      7.55e-17  1.43e-57     21.5 
 3 mu         0.3     0.779      2.35e- 9  7.70e-42     13.3 
 4 mu         0.4     1.11       1.18e- 4  9.94e-31     15.0 
 5 mu         0.5     1.00       2.37e- 2  3.64e-22      9.31
 6 mu         0.6     1.02       6.21e- 2  3.11e-15     13.7 
 7 mu         0.7     1.13       8.27e- 2  9.75e-19     11.5 
 8 mu         0.8     1.04       2.50e- 2  9.95e-31      7.51
 9 mu         0.9     1.10       5.22e- 7  2.22e-52     11.7 
10 mu_1       0.1     0.0729     3.45e-28  1.43e-83      6.93
11 mu_1       0.2     0.610      2.39e-16  6.98e-57     24.2 
12 mu_1       0.3     0.800      5.32e- 9  2.51e-41     10.7 
13 mu_1       0.4     1.11       1.88e- 4  2.43e-30     14.3 
14 mu_1       0.5     0.991      2.14e- 2  7.12e-22      9.00
15 mu_1       0.6     1.03       6.01e- 2  5.08e-15     13.4 
16 mu_1       0.7     1.13       6.86e- 2  3.34e-19     11.5 
17 mu_1       0.8     1.03       2.86e- 2  2.99e-31      7.78
18 mu_1       0.9     1.11       3.84e- 7  5.93e-53     11.6 
19 mu_0       0.1     0.0352     1.31e-29  3.52e-86      3.39
20 mu_0       0.2     0.532      3.46e-17  3.88e-59     21.9 
21 mu_0       0.3     0.770      1.08e- 9  2.39e-43     14.4 
22 mu_0       0.4     1.10       7.17e- 5  3.60e-32     15.5 
23 mu_0       0.5     1.01       1.61e- 2  1.58e-23      9.62
24 mu_0       0.6     1.01       4.92e- 2  1.69e-16     14.2 
25 mu_0       0.7     1.13       6.85e- 2  2.47e-18     11.5 
26 mu_0       0.8     1.05       2.11e- 2  3.78e-30      7.04
27 mu_0       0.9     1.01       1.82e- 6  1.69e-51     12.6 
[1] "Total run time was 372.243 seconds"
