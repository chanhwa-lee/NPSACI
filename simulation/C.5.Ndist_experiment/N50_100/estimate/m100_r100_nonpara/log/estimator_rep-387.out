
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7608"
[1] "cluster size dist'n: "

 50  51  53  54  55  56  57  58  59  60  61  63  64  65  66  67  68  69  70  71 
  2   1   1   2   1   3   1   2   5   1   2   2   1   4   2   2   2   1   3   3 
 72  73  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 
  1   2   3   2   3   1   4   3   2   5   1   3   1   2   1   1   2   3   1   1 
 93  94  95  98  99 100 
  2   1   4   5   1   4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.02913 0.35065 0.60530 1.00000 6.00221 
[1] "event indicator table: "

   0    1 
4514 3094 
[1] "treatment indicator table: "

   0    1 
2822 4786 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3883
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 9"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3725
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 98"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 587.3 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.211 0.0789
 2 mu         0.1   0.2 0.236 0.0855
 3 mu         0.1   0.3 0.252 0.0940
 4 mu         0.1   0.4 0.297 0.0952
 5 mu         0.1   0.5 0.317 0.0880
 6 mu         0.2   0.1 0.369 0.0619
 7 mu         0.2   0.2 0.433 0.0677
 8 mu         0.2   0.3 0.474 0.0741
 9 mu         0.2   0.4 0.547 0.0761
10 mu         0.2   0.5 0.596 0.0713
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.462       0.0342 0.00000000633      7.90
 2 mu         0.2      1.02        0.792  0.00325            5.44
 3 mu         0.3      0.955       0.889  0.135              2.42
 4 mu         0.4      0.976       0.974  0.291              1.55
 5 mu         0.5      0.996       1.01   0.483              1.62
 6 mu         0.6      0.997       0.967  0.623              1.76
 7 mu         0.7      1.00        0.992  0.569              1.44
 8 mu         0.8      1.01        0.997  0.503              2.10
 9 mu         0.9      0.988       0.948  0.150              2.42
10 mu_1       0.1      0.546       0.0630 0.0000000224       6.93
11 mu_1       0.2      1.02        0.847  0.00582            5.63
12 mu_1       0.3      0.959       0.890  0.152              2.37
13 mu_1       0.4      0.977       0.985  0.295              1.53
14 mu_1       0.5      0.996       1.01   0.489              1.64
15 mu_1       0.6      0.997       0.974  0.638              1.78
16 mu_1       0.7      1.00        0.993  0.575              1.46
17 mu_1       0.8      1.01        0.999  0.513              2.14
18 mu_1       0.9      0.987       0.950  0.141              2.43
19 mu_0       0.1      0.452       0.0309 0.00000000454      8.03
20 mu_0       0.2      1.02        0.751  0.00261            5.40
21 mu_0       0.3      0.954       0.892  0.128              2.44
22 mu_0       0.4      0.975       0.976  0.288              1.57
23 mu_0       0.5      0.995       1.01   0.477              1.60
24 mu_0       0.6      0.997       0.968  0.600              1.73
25 mu_0       0.7      1.00        0.992  0.556              1.39
26 mu_0       0.8      1.01        1.01   0.466              1.95
27 mu_0       0.9      0.998       0.983  0.200              2.33
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1   0.000378     3.09e-27  9.56e-74    0.0371
 2 mu         0.2   0.127        5.35e-14  9.13e-50    8.41  
 3 mu         0.3   1.42         1.27e- 7  8.55e-36   40.6   
 4 mu         0.4   2.09         1.18e- 3  6.21e-26   43.2   
 5 mu         0.5   1.23         1.44e- 1  2.44e-18   11.7   
 6 mu         0.6   1.35         2.33e- 1  3.38e-12   30.2   
 7 mu         0.7   0.911        2.87e- 1  1.49e-13    5.47  
 8 mu         0.8   1.25         8.73e- 3  4.45e-22    9.86  
 9 mu         0.9   1.12         2.19e- 8  1.16e-38   26.5   
10 mu_1       0.1   0.000912     1.87e-26  9.33e-73    0.0889
11 mu_1       0.2   0.171        1.76e-13  4.46e-49   10.1   
12 mu_1       0.3   1.60         2.57e- 7  2.78e-35   44.0   
13 mu_1       0.4   2.03         1.91e- 3  1.52e-25   42.1   
14 mu_1       0.5   1.23         1.81e- 1  4.76e-18   12.0   
15 mu_1       0.6   1.33         2.31e- 1  5.49e-12   29.3   
16 mu_1       0.7   0.906        2.78e- 1  5.08e-14    5.37  
17 mu_1       0.8   1.27         7.46e- 3  1.33e-22   10.3   
18 mu_1       0.9   1.12         1.48e- 8  4.21e-39   28.0   
19 mu_0       0.1   0.000319     1.40e-27  2.59e-75    0.0314
20 mu_0       0.2   0.116        2.10e-14  2.78e-51    8.00  
21 mu_0       0.3   1.34         7.08e- 8  2.98e-37   39.2   
22 mu_0       0.4   2.13         6.88e- 4  2.53e-27   43.9   
23 mu_0       0.5   1.24         1.07e- 1  1.19e-19   12.1   
24 mu_0       0.6   1.38         2.44e- 1  2.06e-13   31.6   
25 mu_0       0.7   0.922        3.81e- 1  3.77e-13    5.69  
26 mu_0       0.8   1.17         1.63e- 2  1.69e-21    8.50  
27 mu_0       0.9   1.18         8.70e- 8  7.81e-38   28.4   
[1] "Total run time was 591.179 seconds"
