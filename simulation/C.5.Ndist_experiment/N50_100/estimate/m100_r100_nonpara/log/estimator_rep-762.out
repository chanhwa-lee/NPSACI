
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7430"
[1] "cluster size dist'n: "

 50  52  53  54  55  56  57  58  60  61  62  64  65  66  67  68  69  70  71  72 
  4   3   1   3   2   2   2   4   3   1   4   4   5   1   1   1   1   2   1   1 
 73  74  75  76  77  78  79  82  83  84  85  86  87  88  89  90  91  92  93  94 
  5   3   3   1   2   4   1   1   1   1   3   1   2   1   1   2   2   2   1   3 
 95  97  98  99 100 
  2   3   2   4   3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.01983 0.31428 0.59222 1.00000 6.25922 
[1] "event indicator table: "

   0    1 
4421 3009 
[1] "treatment indicator table: "

   0    1 
2821 4609 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3855
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 34"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3575
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 85"
[1] "     Cluster: 88"
[1] "     Cluster: 91"
[1] "     Cluster: 93"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 403.527 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.481 0.0817
 2 mu         0.1   0.2 0.579 0.0974
 3 mu         0.1   0.3 0.609 0.105 
 4 mu         0.1   0.4 0.681 0.120 
 5 mu         0.1   0.5 0.724 0.131 
 6 mu         0.2   0.1 0.439 0.0426
 7 mu         0.2   0.2 0.530 0.0408
 8 mu         0.2   0.3 0.557 0.0383
 9 mu         0.2   0.4 0.621 0.0556
10 mu         0.2   0.5 0.670 0.0655
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.04         0.493  6.94e-12     16.1 
 2 mu         0.2      0.995        0.925  1.51e- 4      2.64
 3 mu         0.3      1.01         0.950  7.34e- 2      2.05
 4 mu         0.4      1.04         0.993  4.04e- 1      1.71
 5 mu         0.5      1.01         1.01   5.68e- 1      1.42
 6 mu         0.6      1.01         0.994  6.08e- 1      1.48
 7 mu         0.7      0.996        0.999  6.57e- 1      1.43
 8 mu         0.8      0.969        0.989  5.21e- 1      1.42
 9 mu         0.9      1.03         1.03   2.71e- 1      1.85
10 mu_1       0.1      1.07         0.595  2.48e-11     16.0 
11 mu_1       0.2      0.989        0.893  2.71e- 4      2.41
12 mu_1       0.3      1.01         0.926  9.16e- 2      2.07
13 mu_1       0.4      1.04         0.987  4.21e- 1      1.67
14 mu_1       0.5      1.01         1.01   5.55e- 1      1.39
15 mu_1       0.6      1.01         0.998  6.20e- 1      1.48
16 mu_1       0.7      0.995        1.00   6.55e- 1      1.44
17 mu_1       0.8      0.970        0.992  5.20e- 1      1.42
18 mu_1       0.9      1.03         1.03   2.68e- 1      1.86
19 mu_0       0.1      1.04         0.484  4.96e-12     16.2 
20 mu_0       0.2      0.997        0.926  1.21e- 4      2.69
21 mu_0       0.3      1.01         0.953  6.56e- 2      2.04
22 mu_0       0.4      1.04         0.989  3.92e- 1      1.73
23 mu_0       0.5      1.02         1.01   5.81e- 1      1.44
24 mu_0       0.6      1.01         0.988  5.91e- 1      1.48
25 mu_0       0.7      0.999        0.990  6.57e- 1      1.44
26 mu_0       0.8      0.967        0.978  5.25e- 1      1.45
27 mu_0       0.9      1.02         1.02   3.00e- 1      1.76
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.955     3.47e-26  7.72e-81     76.5 
 2 mu         0.2      0.800     1.76e-14  1.68e-54     27.9 
 3 mu         0.3      0.763     5.70e- 8  3.52e-39     16.6 
 4 mu         0.4      1.05      5.37e- 4  2.19e-28     15.6 
 5 mu         0.5      1.40      9.24e- 2  4.28e-20     15.8 
 6 mu         0.6      1.44      3.64e- 1  4.60e-18      8.86
 7 mu         0.7      1.03      1.77e- 1  6.01e-27      8.65
 8 mu         0.8      0.975     4.66e- 3  7.21e-40     12.1 
 9 mu         0.9      1.47      1.23e- 8  1.74e-62     32.7 
10 mu_1       0.1      1.18      2.03e-25  7.47e-80     92.3 
11 mu_1       0.2      0.716     5.11e-14  8.12e-54     25.8 
12 mu_1       0.3      0.801     1.29e- 7  1.14e-38     17.5 
13 mu_1       0.4      1.06      6.81e- 4  5.30e-28     17.2 
14 mu_1       0.5      1.44      1.13e- 1  8.27e-20     16.5 
15 mu_1       0.6      1.42      3.68e- 1  9.59e-19      8.59
16 mu_1       0.7      1.01      1.54e- 1  1.07e-27      8.58
17 mu_1       0.8      0.980     3.71e- 3  1.13e-40     12.0 
18 mu_1       0.9      1.48      8.69e- 9  2.42e-63     33.4 
19 mu_0       0.1      0.930     1.60e-26  2.83e-82     74.7 
20 mu_0       0.2      0.821     9.25e-15  6.92e-56     28.4 
21 mu_0       0.3      0.747     2.64e- 8  1.66e-40     16.2 
22 mu_0       0.4      1.04      3.30e- 4  1.20e-29     14.6 
23 mu_0       0.5      1.37      7.89e- 2  2.82e-21     15.1 
24 mu_0       0.6      1.46      3.35e- 1  1.01e-17      9.26
25 mu_0       0.7      1.07      1.56e- 1  1.75e-26      8.82
26 mu_0       0.8      0.956     8.49e- 3  3.15e-39     12.9 
27 mu_0       0.9      1.38      4.47e- 8  1.52e-61     26.1 
[1] "Total run time was 407.291 seconds"
