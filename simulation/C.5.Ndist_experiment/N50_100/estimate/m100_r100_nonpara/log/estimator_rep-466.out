
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7536"
[1] "cluster size dist'n: "

 50  51  52  54  55  56  57  58  60  61  62  63  64  65  67  69  71  72  73  74 
  2   2   1   2   5   4   1   3   1   3   1   4   3   3   3   2   2   2   1   3 
 75  76  77  79  80  81  82  84  85  86  87  88  89  90  91  93  94  95  96  97 
  2   2   2   3   3   1   1   2   2   3   1   5   3   3   1   1   4   3   2   2 
 98  99 100 
  2   3   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0311  0.3466  0.6080  1.0000  6.0000 
[1] "event indicator table: "

   0    1 
4458 3078 
[1] "treatment indicator table: "

   0    1 
2757 4779 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3853
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 40"
[1] "     Cluster: 41"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 98"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3683
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 411.266 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.370 0.0598
 2 mu         0.1   0.2 0.484 0.0825
 3 mu         0.1   0.3 0.507 0.0696
 4 mu         0.1   0.4 0.531 0.0675
 5 mu         0.1   0.5 0.516 0.0617
 6 mu         0.2   0.1 0.410 0.0509
 7 mu         0.2   0.2 0.537 0.0725
 8 mu         0.2   0.3 0.570 0.0570
 9 mu         0.2   0.4 0.604 0.0520
10 mu         0.2   0.5 0.598 0.0428
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.865        0.640 0.0000161      3.57
 2 mu         0.2      1.06         0.995 0.115          3.77
 3 mu         0.3      1.05         1.00  0.390          2.65
 4 mu         0.4      1.01         1.01  0.457          1.76
 5 mu         0.5      0.997        0.984 0.500          1.79
 6 mu         0.6      1.02         1.01  0.586          1.68
 7 mu         0.7      1.04         1.01  0.586          1.78
 8 mu         0.8      0.963        0.950 0.468          1.46
 9 mu         0.9      0.919        0.883 0.107          2.00
10 mu_1       0.1      0.908        0.751 0.0000422      3.73
11 mu_1       0.2      1.05         0.998 0.159          3.36
12 mu_1       0.3      1.05         1.02  0.363          2.71
13 mu_1       0.4      1.01         1.01  0.447          1.65
14 mu_1       0.5      0.996        0.973 0.468          1.77
15 mu_1       0.6      1.02         1.02  0.573          1.67
16 mu_1       0.7      1.04         1.01  0.591          1.82
17 mu_1       0.8      0.961        0.949 0.450          1.47
18 mu_1       0.9      0.919        0.882 0.101          2.03
19 mu_0       0.1      0.860        0.618 0.0000132      3.67
20 mu_0       0.2      1.06         0.998 0.104          3.87
21 mu_0       0.3      1.06         1.00  0.398          2.63
22 mu_0       0.4      1.01         0.997 0.438          1.83
23 mu_0       0.5      0.999        0.986 0.521          1.81
24 mu_0       0.6      1.01         1.01  0.541          1.70
25 mu_0       0.7      1.05         1.00  0.558          1.78
26 mu_0       0.8      0.969        0.958 0.539          1.52
27 mu_0       0.9      0.916        0.909 0.156          1.78
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0699     1.35e-25  1.44e-84      6.99
 2 mu         0.2     0.122      2.51e-13  5.00e-57      9.26
 3 mu         0.3     0.482      3.33e- 7  5.32e-41     13.9 
 4 mu         0.4     1.73       3.07e- 3  1.05e-29     18.9 
 5 mu         0.5     1.64       3.56e- 1  4.98e-21     25.0 
 6 mu         0.6     1.89       3.76e- 1  3.66e-17     27.7 
 7 mu         0.7     1.27       1.05e- 1  3.21e-26     17.3 
 8 mu         0.8     0.943      2.64e- 3  1.70e-39      7.78
 9 mu         0.9     2.39       4.52e- 9  7.32e-63     38.6 
10 mu_1       0.1     0.104      7.68e-25  1.39e-83     10.4 
11 mu_1       0.2     0.110      8.40e-13  2.42e-56      6.90
12 mu_1       0.3     0.585      7.02e- 7  1.72e-40     16.1 
13 mu_1       0.4     1.79       4.62e- 3  2.53e-29     17.9 
14 mu_1       0.5     1.61       3.57e- 1  9.65e-21     23.4 
15 mu_1       0.6     1.92       3.51e- 1  9.09e-18     28.7 
16 mu_1       0.7     1.23       8.97e- 2  6.82e-27     16.4 
17 mu_1       0.8     0.953      2.33e- 3  3.17e-40      7.98
18 mu_1       0.9     2.44       3.05e- 9  1.21e-63     38.3 
19 mu_0       0.1     0.0661     6.44e-26  5.05e-86      6.61
20 mu_0       0.2     0.125      1.08e-13  1.98e-58      9.85
21 mu_0       0.3     0.438      1.74e- 7  2.40e-42     12.9 
22 mu_0       0.4     1.69       2.04e- 3  5.50e-31     19.7 
23 mu_0       0.5     1.67       2.84e- 1  3.15e-22     26.6 
24 mu_0       0.6     1.86       4.27e- 1  7.79e-17     26.1 
25 mu_0       0.7     1.38       8.92e- 2  9.10e-26     19.5 
26 mu_0       0.8     0.905      3.77e- 3  7.24e-39      8.13
27 mu_0       0.9     1.98       1.77e- 8  6.23e-62     41.0 
[1] "Total run time was 414.609 seconds"
