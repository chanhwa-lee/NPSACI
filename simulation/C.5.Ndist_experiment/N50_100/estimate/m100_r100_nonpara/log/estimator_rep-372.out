
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7585"
[1] "cluster size dist'n: "

 50  51  52  53  54  55  56  57  58  60  61  62  64  65  66  67  68  69  70  71 
  1   2   4   1   1   1   2   2   4   3   1   1   3   1   1   1   5   1   2   1 
 73  74  75  76  77  78  79  80  81  82  83  84  86  87  88  89  91  92  93  94 
  3   2   1   4   3   4   4   2   3   2   1   2   3   1   1   4   3   3   3   3 
 95  96  98  99 100 
  4   1   2   2   1 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03824 0.37098 0.62439 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
4565 3020 
[1] "treatment indicator table: "

   0    1 
2581 5004 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3858
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 53"
[1] "     Cluster: 57"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 73"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 90"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3727
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 436.635 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.256 0.103 
 2 mu         0.1   0.2 0.272 0.0954
 3 mu         0.1   0.3 0.356 0.108 
 4 mu         0.1   0.4 0.407 0.125 
 5 mu         0.1   0.5 0.407 0.125 
 6 mu         0.2   0.1 0.302 0.0854
 7 mu         0.2   0.2 0.336 0.0601
 8 mu         0.2   0.3 0.426 0.0657
 9 mu         0.2   0.4 0.466 0.0693
10 mu         0.2   0.5 0.482 0.0701
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.558     0.000419  4.13e-24     14.4 
 2 mu         0.2      0.767     0.372     2.03e-11      9.49
 3 mu         0.3      1.19      0.843     3.04e- 5     31.4 
 4 mu         0.4      0.982     0.926     3.42e- 2      2.97
 5 mu         0.5      0.996     0.981     2.94e- 1      3.01
 6 mu         0.6      1.00      0.985     6.40e- 1      1.77
 7 mu         0.7      1.00      0.990     4.67e- 1      1.68
 8 mu         0.8      0.998     0.983     4.99e- 1      1.44
 9 mu         0.9      1.04      0.990     2.35e- 3      3.69
10 mu_1       0.1      0.604     0.00111   2.16e-23     12.9 
11 mu_1       0.2      0.824     0.417     5.32e-11     12.9 
12 mu_1       0.3      1.17      0.868     5.33e- 5     28.4 
13 mu_1       0.4      0.981     0.956     4.39e- 2      2.98
14 mu_1       0.5      0.997     0.982     3.35e- 1      2.86
15 mu_1       0.6      1.00      0.985     6.27e- 1      1.74
16 mu_1       0.7      1.00      0.996     4.74e- 1      1.70
17 mu_1       0.8      0.998     0.985     4.65e- 1      1.44
18 mu_1       0.9      1.04      0.986     2.06e- 3      3.78
19 mu_0       0.1      0.553     0.000342  2.19e-24     14.6 
20 mu_0       0.2      0.752     0.351     1.20e-11      8.65
21 mu_0       0.3      1.19      0.848     2.06e- 5     32.7 
22 mu_0       0.4      0.983     0.926     2.77e- 2      2.97
23 mu_0       0.5      0.995     0.965     2.53e- 1      3.16
24 mu_0       0.6      1.00      0.986     6.53e- 1      1.81
25 mu_0       0.7      1.00      0.990     4.50e- 1      1.62
26 mu_0       0.8      0.996     0.988     6.30e- 1      1.49
27 mu_0       0.9      1.04      0.966     4.94e- 3      2.88
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1    0.00180     2.90e-31  1.93e-70     0.161
 2 mu         0.2    0.317       1.07e-17  1.29e-45    13.3  
 3 mu         0.3    1.40        7.87e-11  2.40e-31    51.6  
 4 mu         0.4    1.81        1.73e- 5  1.87e-21    70.9  
 5 mu         0.5    1.46        1.89e- 2  5.02e-14    22.0  
 6 mu         0.6    1.09        2.35e- 1  7.87e- 9     8.88 
 7 mu         0.7    1.22        3.13e- 1  5.37e-13     8.96 
 8 mu         0.8    1.58        1.38e- 1  7.08e-23    21.8  
 9 mu         0.9    1.68        6.72e- 6  4.61e-41    71.3  
10 mu_1       0.1    0.00459     1.77e-30  1.74e-69     0.402
11 mu_1       0.2    0.437       4.03e-17  5.83e-45    16.7  
12 mu_1       0.3    1.42        1.83e-10  7.23e-31    50.5  
13 mu_1       0.4    1.83        2.93e- 5  4.23e-21    70.9  
14 mu_1       0.5    1.44        1.83e- 2  9.07e-14    22.8  
15 mu_1       0.6    1.08        2.32e- 1  1.25e- 8     8.24 
16 mu_1       0.7    1.22        3.43e- 1  2.25e-13     8.59 
17 mu_1       0.8    1.61        1.25e- 1  2.60e-23    22.6  
18 mu_1       0.9    1.67        5.08e- 6  1.50e-41    71.5  
19 mu_0       0.1    0.00149     1.26e-31  2.07e-71     0.134
20 mu_0       0.2    0.287       3.35e-18  1.56e-46    12.5  
21 mu_0       0.3    1.40        3.39e-11  3.32e-32    52.1  
22 mu_0       0.4    1.79        8.84e- 6  3.02e-22    70.9  
23 mu_0       0.5    1.49        2.20e- 2  9.72e-15    21.3  
24 mu_0       0.6    1.10        2.65e- 1  8.81e-10     9.83 
25 mu_0       0.7    1.22        2.54e- 1  1.26e-12     9.82 
26 mu_0       0.8    1.48        2.40e- 1  2.50e-22    18.6  
27 mu_0       0.9    1.79        2.22e- 5  3.26e-40    69.0  
[1] "Total run time was 440.305 seconds"
