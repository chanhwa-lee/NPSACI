
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 7549"
[1] "cluster size dist'n: "

 51  52  53  54  55  56  57  58  59  61  62  63  64  65  66  67  68  69  70  71 
  2   1   2   2   1   3   1   1   4   2   1   2   1   4   4   2   1   2   2   3 
 72  73  74  75  76  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 
  3   1   4   2   3   2   3   2   2   3   3   2   4   1   1   1   4   1   2   2 
 93  94  96  97  98  99 100 
  1   1   3   2   3   1   2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0218  0.3078  0.5821  0.9790  7.0000 
[1] "event indicator table: "

   0    1 
4502 3047 
[1] "treatment indicator table: "

   0    1 
2960 4589 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3769
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 5"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 52"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 95"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 3780
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 6"
[1] "     Cluster: 10"
[1] "     Cluster: 14"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 51"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 56"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 67"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 362.804 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.811 0.228 
 2 mu         0.1   0.2 0.961 0.257 
 3 mu         0.1   0.3 1.08  0.290 
 4 mu         0.1   0.4 1.13  0.302 
 5 mu         0.1   0.5 1.17  0.308 
 6 mu         0.2   0.1 0.434 0.0808
 7 mu         0.2   0.2 0.528 0.0856
 8 mu         0.2   0.3 0.592 0.0861
 9 mu         0.2   0.4 0.627 0.0884
10 mu         0.2   0.5 0.656 0.0831
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      1.70        0.0588 0.0000000628     32.4 
 2 mu         0.2      1.00        0.910  0.00333           3.31
 3 mu         0.3      0.993       0.984  0.170             2.40
 4 mu         0.4      0.979       0.925  0.436             1.91
 5 mu         0.5      0.987       0.984  0.551             1.45
 6 mu         0.6      1.02        1.02   0.557             1.86
 7 mu         0.7      1.01        0.997  0.595             1.48
 8 mu         0.8      1.03        1.01   0.553             1.82
 9 mu         0.9      1.08        1.00   0.0850            2.79
10 mu_1       0.1      1.54        0.114  0.000000214      23.4 
11 mu_1       0.2      1.00        0.897  0.00578           3.27
12 mu_1       0.3      0.987       0.968  0.209             2.27
13 mu_1       0.4      0.981       0.919  0.464             1.86
14 mu_1       0.5      0.989       0.987  0.543             1.45
15 mu_1       0.6      1.02        1.02   0.569             1.86
16 mu_1       0.7      1.01        0.992  0.583             1.49
17 mu_1       0.8      1.03        1.02   0.557             1.84
18 mu_1       0.9      1.09        0.995  0.0781            2.82
19 mu_0       0.1      1.71        0.0531 0.0000000460     33.4 
20 mu_0       0.2      1.00        0.880  0.00272           3.46
21 mu_0       0.3      0.996       0.975  0.154             2.45
22 mu_0       0.4      0.978       0.947  0.418             1.93
23 mu_0       0.5      0.986       0.978  0.559             1.44
24 mu_0       0.6      1.02        1.02   0.538             1.86
25 mu_0       0.7      1.01        1.00   0.624             1.45
26 mu_0       0.8      1.02        0.994  0.537             1.77
27 mu_0       0.9      1.07        0.990  0.147             2.66
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      3.60      1.10e-26  8.53e-58    353.  
 2 mu         0.2      2.85      3.98e-14  1.96e-36    167.  
 3 mu         0.3      1.08      1.49e- 7  2.82e-24     25.5 
 4 mu         0.4      0.647     1.53e- 3  3.78e-16     16.1 
 5 mu         0.5      1.08      7.16e- 2  9.90e-11     29.9 
 6 mu         0.6      1.14      3.78e- 1  5.86e-16      6.27
 7 mu         0.7      1.28      3.84e- 1  8.93e-25      9.48
 8 mu         0.8      1.19      9.28e- 3  1.22e-37     11.7 
 9 mu         0.9      1.43      9.96e- 8  3.33e-60     65.7 
10 mu_1       0.1      4.90      7.30e-26  7.32e-57    476.  
11 mu_1       0.2      2.42      1.30e-13  8.42e-36    112.  
12 mu_1       0.3      0.986     3.00e- 7  8.09e-24     23.0 
13 mu_1       0.4      0.670     2.40e- 3  8.71e-16     19.0 
14 mu_1       0.5      1.09      8.50e- 2  1.83e-10     28.2 
15 mu_1       0.6      1.14      4.22e- 1  1.32e-16      6.24
16 mu_1       0.7      1.28      3.71e- 1  1.72e-25      9.80
17 mu_1       0.8      1.20      6.89e- 3  2.06e-38     12.2 
18 mu_1       0.9      1.42      6.59e- 8  4.99e-61     67.3 
19 mu_0       0.1      3.46      4.06e-27  1.34e-58    339.  
20 mu_0       0.2      2.95      1.73e-14  3.46e-37    180.  
21 mu_0       0.3      1.12      8.49e- 8  5.70e-25     26.6 
22 mu_0       0.4      0.632     9.53e- 4  4.84e-17     14.2 
23 mu_0       0.5      1.06      5.60e- 2  1.52e-11     31.6 
24 mu_0       0.6      1.14      3.82e- 1  1.27e-15      6.31
25 mu_0       0.7      1.27      3.92e- 1  2.57e-24      8.73
26 mu_0       0.8      1.16      1.88e- 2  5.29e-37      9.90
27 mu_0       0.9      1.50      3.61e- 7  2.88e-59     50.5 
[1] "Total run time was 365.714 seconds"
