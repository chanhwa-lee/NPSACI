
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 3507"
[1] "cluster size dist'n: "

20 21 22 23 24 25 26 27 28 29 30 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
 4  2  3  5  1  5  3  5  2  2  4  2  4  3  4  5  4  4  2  1  2  6  6  6  3  1 
47 48 49 50 
 3  2  2  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03484 0.36114 0.62223 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
2075 1432 
[1] "treatment indicator table: "

   0    1 
1297 2210 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1702
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 45"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 57"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 86"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1805
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 27"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 72"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 115.511 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.386 0.121 
 2 mu         0.1   0.2 0.471 0.138 
 3 mu         0.1   0.3 0.491 0.147 
 4 mu         0.1   0.4 0.508 0.155 
 5 mu         0.1   0.5 0.523 0.162 
 6 mu         0.2   0.1 0.368 0.0436
 7 mu         0.2   0.2 0.457 0.0553
 8 mu         0.2   0.3 0.492 0.0555
 9 mu         0.2   0.4 0.523 0.0591
10 mu         0.2   0.5 0.552 0.0635
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value   min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>       <dbl>     <dbl>
 1 mu         0.1      0.813       0.0751 0.000000610     15.6 
 2 mu         0.2      0.980       0.761  0.00252          9.78
 3 mu         0.3      1.06        0.958  0.0827           2.69
 4 mu         0.4      1.03        1.01   0.389            1.87
 5 mu         0.5      1.01        1.02   0.657            1.59
 6 mu         0.6      0.985       0.984  0.712            1.33
 7 mu         0.7      0.988       0.981  0.767            1.58
 8 mu         0.8      0.995       0.978  0.630            1.53
 9 mu         0.9      1.05        0.941  0.169            2.36
10 mu_1       0.1      0.653       0.156  0.00000244       9.35
11 mu_1       0.2      1.03        0.864  0.00509          7.88
12 mu_1       0.3      1.06        1.00   0.116            2.71
13 mu_1       0.4      1.03        1.02   0.341            1.76
14 mu_1       0.5      1.01        1.00   0.660            1.59
15 mu_1       0.6      0.983       0.979  0.732            1.29
16 mu_1       0.7      0.989       0.971  0.746            1.59
17 mu_1       0.8      0.996       0.976  0.625            1.55
18 mu_1       0.9      1.05        0.929  0.154            2.43
19 mu_0       0.1      0.831       0.0651 0.000000406     17.3 
20 mu_0       0.2      0.968       0.697  0.00187         10.2 
21 mu_0       0.3      1.06        0.953  0.0687           2.70
22 mu_0       0.4      1.03        0.999  0.350            1.99
23 mu_0       0.5      1.02        1.02   0.620            1.60
24 mu_0       0.6      0.988       0.988  0.681            1.40
25 mu_0       0.7      0.987       0.972  0.800            1.57
26 mu_0       0.8      0.992       0.981  0.646            1.52
27 mu_0       0.9      1.02        0.958  0.301            2.53
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.719     2.09e-13  2.32e-35     66.6 
 2 mu         0.2      1.01      6.13e- 7  2.02e-23     56.1 
 3 mu         0.3      1.06      7.25e- 4  1.71e-16     31.2 
 4 mu         0.4      1.15      5.93e- 2  1.25e-11     20.1 
 5 mu         0.5      1.39      6.22e- 1  6.52e- 8     10.1 
 6 mu         0.6      1.44      1.02e+ 0  6.13e- 5     10.4 
 7 mu         0.7      1.43      1.19e+ 0  1.89e- 7     17.8 
 8 mu         0.8      1.51      1.83e- 1  1.28e-11     13.5 
 9 mu         0.9      1.92      4.26e- 4  6.09e-19     44.2 
10 mu_1       0.1      1.03      1.32e-12  2.21e-34     91.9 
11 mu_1       0.2      0.981     1.82e- 6  9.61e-23     38.7 
12 mu_1       0.3      1.06      1.60e- 3  5.42e-16     28.9 
13 mu_1       0.4      1.18      9.17e- 2  2.97e-11     19.3 
14 mu_1       0.5      1.41      7.00e- 1  1.24e- 7      8.56
15 mu_1       0.6      1.43      1.07e+ 0  3.11e- 5      9.81
16 mu_1       0.7      1.44      1.08e+ 0  3.72e- 8     18.9 
17 mu_1       0.8      1.52      1.46e- 1  2.20e-12     14.5 
18 mu_1       0.9      1.99      3.02e- 4  9.33e-20     49.1 
19 mu_0       0.1      0.685     8.61e-14  0            63.8 
20 mu_0       0.2      1.01      2.37e- 7  0            60.5 
21 mu_0       0.3      1.05      3.40e- 4  0            32.2 
22 mu_0       0.4      1.13      3.74e- 2  0            20.6 
23 mu_0       0.5      1.38      4.91e- 1  0            12.5 
24 mu_0       0.6      1.45      1.05e+ 0  0            11.2 
25 mu_0       0.7      1.40      9.85e- 1  0            15.5 
26 mu_0       0.8      1.48      2.98e- 1  0            16.7 
27 mu_0       0.9      1.35      9.60e- 4  0            21.0 
[1] "Total run time was 117.496 seconds"
