
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 3507"
[1] "cluster size dist'n: "

20 21 22 23 24 25 26 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
 1  5  4  5  5  2  1  4  4  5  4  2  3  5  3  3  3  1  3  2  3  3  5  4  1  8 
47 48 49 50 
 2  2  4  3 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03443 0.31728 0.59605 1.00000 7.00000 
[1] "event indicator table: "

   0    1 
2069 1438 
[1] "treatment indicator table: "

   0    1 
1361 2146 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1655
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 8"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 18"
[1] "     Cluster: 19"
[1] "     Cluster: 20"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 29"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 48"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 64"
[1] "     Cluster: 75"
[1] "     Cluster: 78"
[1] "     Cluster: 79"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 88"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1852
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 17"
[1] "     Cluster: 21"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 36"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 46"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 77"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 94"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 344.868 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.352 0.115 
 2 mu         0.1   0.2 0.412 0.152 
 3 mu         0.1   0.3 0.470 0.175 
 4 mu         0.1   0.4 0.538 0.185 
 5 mu         0.1   0.5 0.551 0.206 
 6 mu         0.2   0.1 0.310 0.0426
 7 mu         0.2   0.2 0.370 0.0621
 8 mu         0.2   0.3 0.425 0.0696
 9 mu         0.2   0.4 0.486 0.0680
10 mu         0.2   0.5 0.488 0.0830
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      1.02         0.120 0.00000000645     35.4 
 2 mu         0.2      0.932        0.679 0.000160          12.1 
 3 mu         0.3      0.953        0.932 0.0190             3.39
 4 mu         0.4      0.993        0.977 0.236              2.65
 5 mu         0.5      1.01         1.00  0.570              1.41
 6 mu         0.6      0.997        0.991 0.731              1.33
 7 mu         0.7      0.995        0.994 0.723              1.36
 8 mu         0.8      1.00         0.996 0.658              1.45
 9 mu         0.9      1.03         0.960 0.282              2.44
10 mu_1       0.1      1.00         0.238 0.0000000298      30.8 
11 mu_1       0.2      0.895        0.754 0.000375           5.44
12 mu_1       0.3      0.960        0.956 0.0306             3.24
13 mu_1       0.4      0.999        0.987 0.301              2.44
14 mu_1       0.5      1.01         1.01  0.587              1.40
15 mu_1       0.6      0.996        0.989 0.733              1.34
16 mu_1       0.7      0.994        1.00  0.714              1.38
17 mu_1       0.8      1.00         0.991 0.637              1.51
18 mu_1       0.9      1.03         0.965 0.263              2.48
19 mu_0       0.1      1.03         0.107 0.00000000385     35.9 
20 mu_0       0.2      0.941        0.664 0.000106          13.8 
21 mu_0       0.3      0.950        0.919 0.0140             3.45
22 mu_0       0.4      0.989        0.964 0.193              2.79
23 mu_0       0.5      1.00         0.993 0.554              1.42
24 mu_0       0.6      0.998        0.992 0.699              1.35
25 mu_0       0.7      0.996        0.990 0.743              1.35
26 mu_0       0.8      0.998        0.996 0.622              1.51
27 mu_0       0.9      1.02         0.972 0.453              2.08
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     0.0367     5.12e-12  1.99e-31      3.10
 2 mu         0.2     1.44       1.95e- 6  5.41e-20    104.  
 3 mu         0.3     2.93       1.63e- 3  1.79e-13    125.  
 4 mu         0.4     2.10       1.06e- 1  3.99e- 9     62.1 
 5 mu         0.5     1.40       5.32e- 1  3.64e- 6     13.4 
 6 mu         0.6     1.06       8.42e- 1  7.64e- 4      4.88
 7 mu         0.7     0.863      4.55e- 1  1.82e- 6      3.56
 8 mu         0.8     1.00       5.86e- 2  2.73e-11      6.49
 9 mu         0.9     1.50       7.54e- 5  3.31e-20     21.5 
10 mu_1       0.1     0.0961     3.30e-11  1.73e-30      7.95
11 mu_1       0.2     1.95       6.20e- 6  2.34e-19    134.  
12 mu_1       0.3     2.94       3.37e- 3  5.17e-13    107.  
13 mu_1       0.4     1.94       1.65e- 1  8.92e- 9     55.4 
14 mu_1       0.5     1.35       6.05e- 1  6.78e- 6     12.9 
15 mu_1       0.6     1.03       8.22e- 1  1.06e- 3      4.95
16 mu_1       0.7     0.855      4.07e- 1  7.90e- 7      3.87
17 mu_1       0.8     1.03       4.39e- 2  1.04e-11      7.09
18 mu_1       0.9     1.50       4.70e- 5  1.12e-20     22.4 
19 mu_0       0.1     0.0301     2.02e-12  2.96e-32      2.56
20 mu_0       0.2     1.32       8.84e- 7  9.02e-21     96.9 
21 mu_0       0.3     2.93       8.53e- 4  3.41e-14    133.  
22 mu_0       0.4     2.20       6.68e- 2  4.07e-10     66.5 
23 mu_0       0.5     1.45       4.38e- 1  4.28e- 7     16.5 
24 mu_0       0.6     1.11       7.90e- 1  9.81e- 5      4.77
25 mu_0       0.7     0.880      4.45e- 1  4.21e- 6      4.14
26 mu_0       0.8     0.898      1.24e- 1  9.50e-11      5.27
27 mu_0       0.9     1.52       3.31e- 4  2.30e-19     15.6 
[1] "Total run time was 350.579 seconds"
