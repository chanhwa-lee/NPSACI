
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 3326"
[1] "cluster size dist'n: "

20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 
 6  2  4  4  6  2  5  2  3  7  3  5  2  2  5  4  2  3  3  2  4  2  2  2  4  2 
46 47 48 50 
 1  1  6  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05199 0.37840 0.62405 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
1993 1333 
[1] "treatment indicator table: "

   0    1 
1078 2248 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1691
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 12"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 24"
[1] "     Cluster: 25"
[1] "     Cluster: 26"
[1] "     Cluster: 28"
[1] "     Cluster: 32"
[1] "     Cluster: 33"
[1] "     Cluster: 34"
[1] "     Cluster: 36"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 47"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 52"
[1] "     Cluster: 56"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 93"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 100"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1635
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 10"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 16"
[1] "     Cluster: 19"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 27"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 31"
[1] "     Cluster: 35"
[1] "     Cluster: 37"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 53"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 65"
[1] "     Cluster: 69"
[1] "     Cluster: 72"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 81"
[1] "     Cluster: 82"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 98"
[1] "     Cluster: 99"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 255.071 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.329 0.132 
 2 mu         0.1   0.2 0.360 0.106 
 3 mu         0.1   0.3 0.384 0.0982
 4 mu         0.1   0.4 0.491 0.118 
 5 mu         0.1   0.5 0.539 0.142 
 6 mu         0.2   0.1 0.323 0.114 
 7 mu         0.2   0.2 0.366 0.0798
 8 mu         0.2   0.3 0.391 0.0713
 9 mu         0.2   0.4 0.487 0.0875
10 mu         0.2   0.5 0.535 0.108 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.714       0.0986 0.0000000110       5.64
 2 mu         0.2      0.775       0.598  0.000571           4.24
 3 mu         0.3      0.946       0.956  0.0468             3.75
 4 mu         0.4      0.968       0.983  0.261              2.42
 5 mu         0.5      0.974       0.978  0.493              1.59
 6 mu         0.6      0.993       1.00   0.678              1.38
 7 mu         0.7      0.999       1.01   0.721              1.32
 8 mu         0.8      0.973       0.973  0.624              1.34
 9 mu         0.9      0.984       0.977  0.477              1.57
10 mu_1       0.1      0.688       0.173  0.0000000465       6.40
11 mu_1       0.2      0.823       0.694  0.00125            4.19
12 mu_1       0.3      0.962       0.962  0.0671             3.30
13 mu_1       0.4      0.966       0.976  0.307              2.30
14 mu_1       0.5      0.977       0.976  0.535              1.58
15 mu_1       0.6      0.995       1.00   0.692              1.37
16 mu_1       0.7      0.998       0.998  0.711              1.31
17 mu_1       0.8      0.972       0.971  0.601              1.33
18 mu_1       0.9      0.985       0.977  0.480              1.61
19 mu_0       0.1      0.716       0.0874 0.00000000710      5.93
20 mu_0       0.2      0.763       0.577  0.000402           4.51
21 mu_0       0.3      0.940       0.942  0.0368             3.95
22 mu_0       0.4      0.969       0.981  0.230              2.50
23 mu_0       0.5      0.972       0.958  0.451              1.60
24 mu_0       0.6      0.989       0.991  0.656              1.39
25 mu_0       0.7      1.00        1.01   0.744              1.34
26 mu_0       0.8      0.980       0.988  0.711              1.37
27 mu_0       0.9      0.977       0.975  0.446              1.45
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      0.154     1.51e-14  8.44e-39     10.1 
 2 mu         0.2      3.07      2.97e- 8  5.87e-26    121.  
 3 mu         0.3      6.43      5.70e- 5  1.68e-18    187.  
 4 mu         0.4      3.84      8.34e- 3  2.90e-13     92.7 
 5 mu         0.5      1.79      2.10e- 1  2.96e- 9     28.7 
 6 mu         0.6      1.37      7.37e- 1  4.82e- 6     12.5 
 7 mu         0.7      1.37      9.55e- 1  2.15e- 5     10.4 
 8 mu         0.8      1.39      5.84e- 1  4.24e-10      8.61
 9 mu         0.9      1.14      1.08e- 2  9.13e-19     11.4 
10 mu_1       0.1      0.399     1.18e-13  8.07e-38     23.8 
11 mu_1       0.2      4.28      1.05e- 7  2.80e-25    143.  
12 mu_1       0.3      6.47      1.34e- 4  5.34e-18    193.  
13 mu_1       0.4      3.23      1.40e- 2  6.94e-13     73.8 
14 mu_1       0.5      1.60      3.09e- 1  5.66e- 9     18.6 
15 mu_1       0.6      1.36      7.42e- 1  7.67e- 6     11.2 
16 mu_1       0.7      1.38      9.55e- 1  7.73e- 6     10.8 
17 mu_1       0.8      1.39      5.76e- 1  1.57e-10      8.40
18 mu_1       0.9      1.12      7.86e- 3  3.00e-19     11.9 
19 mu_0       0.1      0.127     5.20e-15  4.17e-40      8.61
20 mu_0       0.2      2.76      1.09e- 8  3.26e-27    116.  
21 mu_0       0.3      6.41      1.91e- 5  1.06e-19    184.  
22 mu_0       0.4      4.25      5.01e- 3  2.15e-14    105.  
23 mu_0       0.5      1.97      1.24e- 1  2.63e-10     39.1 
24 mu_0       0.6      1.40      5.43e- 1  5.35e- 7     14.5 
25 mu_0       0.7      1.35      8.56e- 1  5.05e- 5      9.41
26 mu_0       0.8      1.40      8.07e- 1  1.49e- 9      9.48
27 mu_0       0.9      1.29      3.61e- 2  6.43e-18     11.4 
[1] "Total run time was 259.742 seconds"
