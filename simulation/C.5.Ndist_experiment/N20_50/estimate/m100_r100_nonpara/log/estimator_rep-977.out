
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 3323"
[1] "cluster size dist'n: "

20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 39 40 41 42 43 44 45 46 
 4  6  5  4  4  6  2  7  3  1  1  5  2  3  2  3  4  2  3  5  5  2  5  3  2  2 
47 48 49 50 
 3  2  2  2 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.04498 0.36107 0.61676 1.00000 5.00000 
[1] "event indicator table: "

   0    1 
2034 1289 
[1] "treatment indicator table: "

   0    1 
1099 2224 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1688
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 2"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 10"
[1] "     Cluster: 11"
[1] "     Cluster: 13"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 31"
[1] "     Cluster: 33"
[1] "     Cluster: 35"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 43"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 59"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 64"
[1] "     Cluster: 66"
[1] "     Cluster: 73"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 81"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 89"
[1] "     Cluster: 90"
[1] "     Cluster: 94"
[1] "     Cluster: 95"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1635
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 3"
[1] "     Cluster: 8"
[1] "     Cluster: 12"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 23"
[1] "     Cluster: 25"
[1] "     Cluster: 28"
[1] "     Cluster: 29"
[1] "     Cluster: 30"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 38"
[1] "     Cluster: 40"
[1] "     Cluster: 42"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 55"
[1] "     Cluster: 57"
[1] "     Cluster: 60"
[1] "     Cluster: 65"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 69"
[1] "     Cluster: 70"
[1] "     Cluster: 71"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 75"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 83"
[1] "     Cluster: 84"
[1] "     Cluster: 85"
[1] "     Cluster: 86"
[1] "     Cluster: 91"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 254.077 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.196 0.0975
 2 mu         0.1   0.2 0.353 0.102 
 3 mu         0.1   0.3 0.461 0.154 
 4 mu         0.1   0.4 0.480 0.156 
 5 mu         0.1   0.5 0.484 0.146 
 6 mu         0.2   0.1 0.209 0.0720
 7 mu         0.2   0.2 0.363 0.0736
 8 mu         0.2   0.3 0.469 0.120 
 9 mu         0.2   0.4 0.495 0.122 
10 mu         0.2   0.5 0.511 0.110 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value     min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>         <dbl>     <dbl>
 1 mu         0.1      0.661       0.0597 0.00000000171      8.60
 2 mu         0.2      0.767       0.567  0.000218           5.75
 3 mu         0.3      0.925       0.877  0.0275             2.91
 4 mu         0.4      1.01        0.975  0.300              2.56
 5 mu         0.5      1.04        1.03   0.649              1.61
 6 mu         0.6      1.03        1.03   0.743              1.28
 7 mu         0.7      0.998       0.997  0.804              1.23
 8 mu         0.8      0.979       0.965  0.790              1.29
 9 mu         0.9      0.989       0.986  0.386              1.58
10 mu_1       0.1      0.702       0.145  0.00000000771      7.14
11 mu_1       0.2      0.811       0.714  0.000492           5.46
12 mu_1       0.3      0.951       0.911  0.0425             3.04
13 mu_1       0.4      1.02        1.01   0.366              2.47
14 mu_1       0.5      1.04        1.04   0.644              1.48
15 mu_1       0.6      1.03        1.04   0.749              1.27
16 mu_1       0.7      0.995       0.994  0.802              1.21
17 mu_1       0.8      0.979       0.971  0.764              1.32
18 mu_1       0.9      0.990       0.982  0.371              1.60
19 mu_0       0.1      0.657       0.0494 0.00000000104      8.76
20 mu_0       0.2      0.756       0.548  0.000150           5.82
21 mu_0       0.3      0.913       0.879  0.0210             2.86
22 mu_0       0.4      1.01        0.960  0.256              2.63
23 mu_0       0.5      1.04        1.02   0.643              1.74
24 mu_0       0.6      1.03        1.02   0.722              1.30
25 mu_0       0.7      1.00        1.00   0.804              1.26
26 mu_0       0.8      0.981       0.973  0.821              1.21
27 mu_0       0.9      0.986       0.973  0.525              1.47
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1      1.05      1.79e-14  9.58e-40     73.7 
 2 mu         0.2      4.68      1.20e- 8  1.33e-26    252.  
 3 mu         0.3      5.24      5.47e- 5  5.71e-19    151.  
 4 mu         0.4      2.94      7.25e- 3  1.32e-13     78.1 
 5 mu         0.5      1.36      1.54e- 1  1.68e- 9     12.7 
 6 mu         0.6      1.14      8.24e- 1  3.28e- 6      4.85
 7 mu         0.7      1.24      1.14e+ 0  6.42e- 6      3.90
 8 mu         0.8      1.23      7.54e- 1  7.40e-10     10.3 
 9 mu         0.9      1.25      1.51e- 2  5.66e-17     21.6 
10 mu_1       0.1      2.29      1.30e-13  9.16e-39    154.  
11 mu_1       0.2      5.45      3.86e- 8  6.37e-26    262.  
12 mu_1       0.3      4.73      1.17e- 4  1.82e-18    140.  
13 mu_1       0.4      2.38      1.30e- 2  3.15e-13     61.3 
14 mu_1       0.5      1.24      2.05e- 1  3.21e- 9     10.5 
15 mu_1       0.6      1.15      9.63e- 1  5.23e- 6      4.19
16 mu_1       0.7      1.26      1.20e+ 0  2.22e- 6      4.21
17 mu_1       0.8      1.22      6.89e- 1  2.24e-10     10.3 
18 mu_1       0.9      1.28      1.16e- 2  1.52e-17     24.0 
19 mu_0       0.1      0.914     5.47e-15  0            64.9 
20 mu_0       0.2      4.49      5.34e- 9  0           249.  
21 mu_0       0.3      5.47      2.62e- 5  0           171.  
22 mu_0       0.4      3.32      3.59e- 3  0            89.2 
23 mu_0       0.5      1.48      9.04e- 2  0            16.0 
24 mu_0       0.6      1.14      7.07e- 1  0             5.93
25 mu_0       0.7      1.21      9.82e- 1  0             3.57
26 mu_0       0.8      1.26      1.05e+ 0  0            10.3 
27 mu_0       0.9      1.03      4.38e- 2  0             9.42
[1] "Total run time was 259.354 seconds"
