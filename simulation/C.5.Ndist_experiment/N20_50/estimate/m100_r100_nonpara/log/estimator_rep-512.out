
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: foreach
Loading required package: iterators
Loading required package: parallel

 randomForestSRC 3.2.2 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 

── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ ggplot2   3.3.6     ✔ stringr   1.5.1
✔ lubridate 1.9.3     ✔ tibble    3.2.1
✔ purrr     0.3.5     ✔ tidyr     1.2.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ tidyr::extract()    masks dbarts::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ purrr::partial()    masks randomForestSRC::partial()
✖ purrr::when()       masks foreach::when()
ℹ Use the [conflicted package](http://conflicted.r-lib.org/) to force all conflicts to become errors
[1] "[Analysis setting]"
[1] "n.cpus: 8"
[1] "method: nonpara"
[1] "taus: 0.1, 0.2, 0.3, 0.4, 0.5"
[1] "thetas: 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9"
[1] "r: 100"
[1] "m: 100"
[1] "N_total: 3511"
[1] "cluster size dist'n: "

20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 
 5  4  2  1  4  3  4  5  3  6  3  1  2  1  1  4  4  2  3  4  1  6  2  7  3  3 
47 48 49 50 
 6  2  4  4 
[1] "observed time summary: "
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.03352 0.36851 0.63743 1.00000 6.00000 
[1] "event indicator table: "

   0    1 
2125 1386 
[1] "treatment indicator table: "

   0    1 
1273 2238 
[1] ""
[1] "Estimation start"
[1] "   Split: 1"
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.T.names)` instead of `X.T.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.C.names)` instead of `X.C.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(X.A.names)` instead of `X.A.names` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1728
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 1"
[1] "     Cluster: 4"
[1] "     Cluster: 5"
[1] "     Cluster: 6"
[1] "     Cluster: 8"
[1] "     Cluster: 10"
[1] "     Cluster: 12"
[1] "     Cluster: 13"
[1] "     Cluster: 14"
[1] "     Cluster: 15"
[1] "     Cluster: 17"
[1] "     Cluster: 19"
[1] "     Cluster: 23"
[1] "     Cluster: 24"
[1] "     Cluster: 26"
[1] "     Cluster: 27"
[1] "     Cluster: 28"
[1] "     Cluster: 30"
[1] "     Cluster: 33"
[1] "     Cluster: 36"
[1] "     Cluster: 37"
[1] "     Cluster: 38"
[1] "     Cluster: 39"
[1] "     Cluster: 41"
[1] "     Cluster: 42"
[1] "     Cluster: 44"
[1] "     Cluster: 45"
[1] "     Cluster: 47"
[1] "     Cluster: 49"
[1] "     Cluster: 50"
[1] "     Cluster: 51"
[1] "     Cluster: 54"
[1] "     Cluster: 57"
[1] "     Cluster: 59"
[1] "     Cluster: 64"
[1] "     Cluster: 69"
[1] "     Cluster: 71"
[1] "     Cluster: 73"
[1] "     Cluster: 75"
[1] "     Cluster: 77"
[1] "     Cluster: 78"
[1] "     Cluster: 80"
[1] "     Cluster: 82"
[1] "     Cluster: 84"
[1] "     Cluster: 86"
[1] "     Cluster: 89"
[1] "     Cluster: 92"
[1] "     Cluster: 93"
[1] "     Cluster: 95"
[1] "     Cluster: 99"
[1] "   Split: 2"

Running BART with binary y

number of trees: 25
number of chains: 1, number of threads 1
tree thinning rate: 1
Prior:
	prior on k: chi with 1.250000 degrees of freedom and inf scale
	power and base for tree prior: 2.000000 0.950000
	use quantiles for rule cut points: false
	proposal probabilities: birth/death 0.50, swap 0.10, change 0.40; birth 0.50
data:
	number of training observations: 1783
	number of test observations: 0
	number of explanatory variables: 15

Cutoff rules c in x<=c vs x>c
Number of cutoffs: (var: number of possible c):
(1: 100) (2: 100) (3: 100) (4: 100) (5: 100) 
(6: 100) (7: 100) (8: 100) (9: 100) (10: 100) 
(11: 100) (12: 100) (13: 100) (14: 100) (15: 100) 

[1] "     Cluster: 2"
[1] "     Cluster: 3"
[1] "     Cluster: 7"
[1] "     Cluster: 9"
[1] "     Cluster: 11"
[1] "     Cluster: 16"
[1] "     Cluster: 18"
[1] "     Cluster: 20"
[1] "     Cluster: 21"
[1] "     Cluster: 22"
[1] "     Cluster: 25"
[1] "     Cluster: 29"
[1] "     Cluster: 31"
[1] "     Cluster: 32"
[1] "     Cluster: 34"
[1] "     Cluster: 35"
[1] "     Cluster: 40"
[1] "     Cluster: 43"
[1] "     Cluster: 46"
[1] "     Cluster: 48"
[1] "     Cluster: 52"
[1] "     Cluster: 53"
[1] "     Cluster: 55"
[1] "     Cluster: 56"
[1] "     Cluster: 58"
[1] "     Cluster: 60"
[1] "     Cluster: 61"
[1] "     Cluster: 62"
[1] "     Cluster: 63"
[1] "     Cluster: 65"
[1] "     Cluster: 66"
[1] "     Cluster: 67"
[1] "     Cluster: 68"
[1] "     Cluster: 70"
[1] "     Cluster: 72"
[1] "     Cluster: 74"
[1] "     Cluster: 76"
[1] "     Cluster: 79"
[1] "     Cluster: 81"
[1] "     Cluster: 83"
[1] "     Cluster: 85"
[1] "     Cluster: 87"
[1] "     Cluster: 88"
[1] "     Cluster: 90"
[1] "     Cluster: 91"
[1] "     Cluster: 94"
[1] "     Cluster: 96"
[1] "     Cluster: 97"
[1] "     Cluster: 98"
[1] "     Cluster: 100"
[1] ""
[1] "IF for proposed nonparametric estimator computed."
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta', 'tau'. You can override using the
`.groups` argument.
`summarise()` has grouped output by 'theta'. You can override using the
`.groups` argument.
[1] ""
[1] "Total run time was 255.084 seconds"
[1] "Estimation result: "
# A tibble: 360 × 5
   estimand theta   tau   est     se
   <chr>    <dbl> <dbl> <dbl>  <dbl>
 1 mu         0.1   0.1 0.399 0.0884
 2 mu         0.1   0.2 0.519 0.124 
 3 mu         0.1   0.3 0.512 0.109 
 4 mu         0.1   0.4 0.551 0.112 
 5 mu         0.1   0.5 0.590 0.126 
 6 mu         0.2   0.1 0.448 0.101 
 7 mu         0.2   0.2 0.579 0.134 
 8 mu         0.2   0.3 0.601 0.138 
 9 mu         0.2   0.4 0.654 0.149 
10 mu         0.2   0.5 0.703 0.162 
# ℹ 350 more rows
[1] ""
[1] "OR weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value    min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>        <dbl>     <dbl>
 1 mu         0.1      0.882        0.210 0.0000000191     22.9 
 2 mu         0.2      1.17         0.740 0.000878         34.2 
 3 mu         0.3      1.00         0.910 0.0735            8.17
 4 mu         0.4      0.993        0.984 0.369             1.73
 5 mu         0.5      0.982        0.988 0.607             1.30
 6 mu         0.6      0.992        0.990 0.766             1.36
 7 mu         0.7      1.01         0.973 0.840             1.37
 8 mu         0.8      1.02         1.00  0.666             1.56
 9 mu         0.9      0.999        0.969 0.292             2.27
10 mu_1       0.1      1.07         0.357 0.0000000813     36.9 
11 mu_1       0.2      1.13         0.757 0.00188          27.6 
12 mu_1       0.3      0.990        0.913 0.103             4.48
13 mu_1       0.4      0.992        1.00  0.415             1.67
14 mu_1       0.5      0.980        0.980 0.624             1.35
15 mu_1       0.6      0.993        0.995 0.778             1.33
16 mu_1       0.7      1.01         0.977 0.819             1.40
17 mu_1       0.8      1.02         1.01  0.665             1.56
18 mu_1       0.9      0.999        0.966 0.270             2.35
19 mu_0       0.1      0.862        0.194 0.0000000122     21.3 
20 mu_0       0.2      1.17         0.739 0.000627         35.9 
21 mu_0       0.3      1.01         0.911 0.0608            9.75
22 mu_0       0.4      0.993        0.991 0.339             1.79
23 mu_0       0.5      0.984        0.996 0.590             1.31
24 mu_0       0.6      0.990        0.988 0.744             1.41
25 mu_0       0.7      1.00         0.983 0.830             1.30
26 mu_0       0.8      1.01         0.987 0.655             1.57
27 mu_0       0.9      0.999        0.982 0.488             1.77
[1] ""
[1] "IPCW weights"
`summarise()` has grouped output by 'estimand'. You can override using the
`.groups` argument.
# A tibble: 27 × 6
# Groups:   estimand [3]
   estimand theta mean_value median_value min_value max_value
   <fct>    <dbl>      <dbl>        <dbl>     <dbl>     <dbl>
 1 mu         0.1     443.       2.38e-13  4.51e-37  37800.  
 2 mu         0.2     191.       3.65e- 7  4.40e-24  12745.  
 3 mu         0.3      28.1      4.12e- 4  1.26e-16   1737.  
 4 mu         0.4       3.62     2.93e- 2  1.84e-11    121.  
 5 mu         0.5       1.24     3.71e- 1  1.36e- 7     11.1 
 6 mu         0.6       1.10     8.31e- 1  2.89e- 5      4.64
 7 mu         0.7       1.21     9.14e- 1  3.09e- 9      6.63
 8 mu         0.8       1.25     4.15e- 1  4.73e-15      9.65
 9 mu         0.9       1.78     3.05e- 3  2.79e-25     53.8 
10 mu_1       0.1     422.       1.65e-12  4.05e-36  32870.  
11 mu_1       0.2     102.       1.09e- 6  1.98e-23   5541.  
12 mu_1       0.3      11.6      9.31e- 4  3.78e-16    503.  
13 mu_1       0.4       2.26     4.89e- 2  4.12e-11     49.9 
14 mu_1       0.5       1.15     4.19e- 1  2.43e- 7     10.4 
15 mu_1       0.6       1.12     7.51e- 1  7.05e- 6      4.39
16 mu_1       0.7       1.20     9.62e- 1  6.46e-10      6.55
17 mu_1       0.8       1.26     3.44e- 1  8.65e-16     11.1 
18 mu_1       0.9       1.84     2.12e- 3  4.53e-26     59.8 
19 mu_0       0.1     446.       8.66e-14  0         38348.  
20 mu_0       0.2     213.       1.57e- 7  0         14546.  
21 mu_0       0.3      35.1      1.89e- 4  0          2265.  
22 mu_0       0.4       4.52     1.63e- 2  0           185.  
23 mu_0       0.5       1.33     2.60e- 1  0            12.4 
24 mu_0       0.6       1.07     6.83e- 1  0             5.08
25 mu_0       0.7       1.23     8.17e- 1  0             6.80
26 mu_0       0.8       1.19     5.26e- 1  0             6.01
27 mu_0       0.9       1.20     5.49e- 3  0            26.8 
[1] "Total run time was 259.476 seconds"
